
GarminAutopilotREV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b144  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  0800b204  0800b204  0001b204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b350  0800b350  000201c0  2**0
                  CONTENTS
  4 .ARM          00000000  0800b350  0800b350  000201c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b350  0800b350  000201c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b350  0800b350  0001b350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b358  0800b358  0001b358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c0  20000000  0800b35c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cac  200001c0  0800b51c  000201c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e6c  0800b51c  00020e6c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019aec  00000000  00000000  0002022b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ece  00000000  00000000  00039d17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015e8  00000000  00000000  0003dbe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010f2  00000000  00000000  0003f1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017c7b  00000000  00000000  000402c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d105  00000000  00000000  00057f3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007750a  00000000  00000000  00075042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005660  00000000  00000000  000ec54c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000f1bac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001c0 	.word	0x200001c0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800b1ec 	.word	0x0800b1ec

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001c4 	.word	0x200001c4
 8000104:	0800b1ec 	.word	0x0800b1ec

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <_ZN3PinC1Ev>:
#if __cplusplus

struct Pin
{
	// Defaults to output pin
	Pin() {};
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	2201      	movs	r2, #1
 8000240:	721a      	strb	r2, [r3, #8]
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	0018      	movs	r0, r3
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}

0800024c <_ZN3PinC1EP12GPIO_TypeDeft>:
	// Defaults to output pin
	Pin(GPIO_TypeDef* port, uint16_t pin)
 800024c:	b580      	push	{r7, lr}
 800024e:	b084      	sub	sp, #16
 8000250:	af00      	add	r7, sp, #0
 8000252:	60f8      	str	r0, [r7, #12]
 8000254:	60b9      	str	r1, [r7, #8]
 8000256:	1dbb      	adds	r3, r7, #6
 8000258:	801a      	strh	r2, [r3, #0]
	{
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	2201      	movs	r2, #1
 800025e:	721a      	strb	r2, [r3, #8]
		this->port = port;
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	68ba      	ldr	r2, [r7, #8]
 8000264:	601a      	str	r2, [r3, #0]
		this->pin = pin;
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	1dba      	adds	r2, r7, #6
 800026a:	8812      	ldrh	r2, [r2, #0]
 800026c:	809a      	strh	r2, [r3, #4]
		this->defaultState = ACTIVE_HIGH;
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	2200      	movs	r2, #0
 8000272:	719a      	strb	r2, [r3, #6]
	};
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	0018      	movs	r0, r3
 8000278:	46bd      	mov	sp, r7
 800027a:	b004      	add	sp, #16
 800027c:	bd80      	pop	{r7, pc}

0800027e <_ZN3PinC1EP12GPIO_TypeDeftb>:
	Pin(GPIO_TypeDef* port, uint16_t pin, bool isOutput)
 800027e:	b580      	push	{r7, lr}
 8000280:	b084      	sub	sp, #16
 8000282:	af00      	add	r7, sp, #0
 8000284:	60f8      	str	r0, [r7, #12]
 8000286:	60b9      	str	r1, [r7, #8]
 8000288:	0019      	movs	r1, r3
 800028a:	1dbb      	adds	r3, r7, #6
 800028c:	801a      	strh	r2, [r3, #0]
 800028e:	1d7b      	adds	r3, r7, #5
 8000290:	1c0a      	adds	r2, r1, #0
 8000292:	701a      	strb	r2, [r3, #0]
	{
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	2201      	movs	r2, #1
 8000298:	721a      	strb	r2, [r3, #8]
		this->port = port;
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	68ba      	ldr	r2, [r7, #8]
 800029e:	601a      	str	r2, [r3, #0]
		this->pin = pin;
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	1dba      	adds	r2, r7, #6
 80002a4:	8812      	ldrh	r2, [r2, #0]
 80002a6:	809a      	strh	r2, [r3, #4]
		this->defaultState = ACTIVE_LOW; // I usually use an active low switch setup.
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	2201      	movs	r2, #1
 80002ac:	719a      	strb	r2, [r3, #6]
		this->isOutput = isOutput;
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	1d7a      	adds	r2, r7, #5
 80002b2:	7812      	ldrb	r2, [r2, #0]
 80002b4:	721a      	strb	r2, [r3, #8]
	};
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	0018      	movs	r0, r3
 80002ba:	46bd      	mov	sp, r7
 80002bc:	b004      	add	sp, #16
 80002be:	bd80      	pop	{r7, pc}

080002c0 <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_State>:
	Pin(GPIO_TypeDef* port, uint16_t pin, GPIO_Default_State defaultState)
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b084      	sub	sp, #16
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	60f8      	str	r0, [r7, #12]
 80002c8:	60b9      	str	r1, [r7, #8]
 80002ca:	0019      	movs	r1, r3
 80002cc:	1dbb      	adds	r3, r7, #6
 80002ce:	801a      	strh	r2, [r3, #0]
 80002d0:	1d7b      	adds	r3, r7, #5
 80002d2:	1c0a      	adds	r2, r1, #0
 80002d4:	701a      	strb	r2, [r3, #0]
	{
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	2201      	movs	r2, #1
 80002da:	721a      	strb	r2, [r3, #8]
		this->port = port;
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	68ba      	ldr	r2, [r7, #8]
 80002e0:	601a      	str	r2, [r3, #0]
		this->pin = pin;
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	1dba      	adds	r2, r7, #6
 80002e6:	8812      	ldrh	r2, [r2, #0]
 80002e8:	809a      	strh	r2, [r3, #4]
		this->defaultState = defaultState;
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	1d7a      	adds	r2, r7, #5
 80002ee:	7812      	ldrb	r2, [r2, #0]
 80002f0:	719a      	strb	r2, [r3, #6]
		this->isOutput = true;
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	2201      	movs	r2, #1
 80002f6:	721a      	strb	r2, [r3, #8]
	};
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	0018      	movs	r0, r3
 80002fc:	46bd      	mov	sp, r7
 80002fe:	b004      	add	sp, #16
 8000300:	bd80      	pop	{r7, pc}

08000302 <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_Stateb>:
	Pin(GPIO_TypeDef* port, uint16_t pin, GPIO_Default_State defaultState, bool isOutput)
 8000302:	b580      	push	{r7, lr}
 8000304:	b084      	sub	sp, #16
 8000306:	af00      	add	r7, sp, #0
 8000308:	60f8      	str	r0, [r7, #12]
 800030a:	60b9      	str	r1, [r7, #8]
 800030c:	0019      	movs	r1, r3
 800030e:	1dbb      	adds	r3, r7, #6
 8000310:	801a      	strh	r2, [r3, #0]
 8000312:	1d7b      	adds	r3, r7, #5
 8000314:	1c0a      	adds	r2, r1, #0
 8000316:	701a      	strb	r2, [r3, #0]
	{
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	2201      	movs	r2, #1
 800031c:	721a      	strb	r2, [r3, #8]
		this->port = port;
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	68ba      	ldr	r2, [r7, #8]
 8000322:	601a      	str	r2, [r3, #0]
		this->pin = pin;
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	1dba      	adds	r2, r7, #6
 8000328:	8812      	ldrh	r2, [r2, #0]
 800032a:	809a      	strh	r2, [r3, #4]
		this->defaultState = defaultState;
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	1d7a      	adds	r2, r7, #5
 8000330:	7812      	ldrb	r2, [r2, #0]
 8000332:	719a      	strb	r2, [r3, #6]
		this->isOutput = isOutput;
 8000334:	68fa      	ldr	r2, [r7, #12]
 8000336:	2318      	movs	r3, #24
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	7213      	strb	r3, [r2, #8]
	};
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	0018      	movs	r0, r3
 8000342:	46bd      	mov	sp, r7
 8000344:	b004      	add	sp, #16
 8000346:	bd80      	pop	{r7, pc}

08000348 <_ZN3Pin5WriteE13GPIO_PinState>:

	void Write(GPIO_PinState state) {
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
 8000350:	000a      	movs	r2, r1
 8000352:	1cfb      	adds	r3, r7, #3
 8000354:	701a      	strb	r2, [r3, #0]
		if (this->isOutput)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	7a1b      	ldrb	r3, [r3, #8]
 800035a:	2b00      	cmp	r3, #0
 800035c:	d010      	beq.n	8000380 <_ZN3Pin5WriteE13GPIO_PinState+0x38>
		{
			this->state = state;
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	1cfa      	adds	r2, r7, #3
 8000362:	7812      	ldrb	r2, [r2, #0]
 8000364:	71da      	strb	r2, [r3, #7]
			HAL_GPIO_WritePin(this->port, this->pin, (GPIO_PinState)(state ^ this->defaultState));
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	6818      	ldr	r0, [r3, #0]
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	8899      	ldrh	r1, [r3, #4]
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	799a      	ldrb	r2, [r3, #6]
 8000372:	1cfb      	adds	r3, r7, #3
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	4053      	eors	r3, r2
 8000378:	b2db      	uxtb	r3, r3
 800037a:	001a      	movs	r2, r3
 800037c:	f002 f831 	bl	80023e2 <HAL_GPIO_WritePin>
		}
	};
 8000380:	46c0      	nop			; (mov r8, r8)
 8000382:	46bd      	mov	sp, r7
 8000384:	b002      	add	sp, #8
 8000386:	bd80      	pop	{r7, pc}

08000388 <_ZN3Pin4ReadEv>:
	void Write(bool state) {
		this->Write((GPIO_PinState)state);
	};
	GPIO_PinState Read() {
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
		if (!this->isOutput)
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	7a1b      	ldrb	r3, [r3, #8]
 8000394:	2201      	movs	r2, #1
 8000396:	4053      	eors	r3, r2
 8000398:	b2db      	uxtb	r3, r3
 800039a:	2b00      	cmp	r3, #0
 800039c:	d00f      	beq.n	80003be <_ZN3Pin4ReadEv+0x36>
		{
			this->state = (GPIO_PinState)(HAL_GPIO_ReadPin(this->port, this->pin) ^ this->defaultState);
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	681a      	ldr	r2, [r3, #0]
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	889b      	ldrh	r3, [r3, #4]
 80003a6:	0019      	movs	r1, r3
 80003a8:	0010      	movs	r0, r2
 80003aa:	f001 fffd 	bl	80023a8 <HAL_GPIO_ReadPin>
 80003ae:	0003      	movs	r3, r0
 80003b0:	001a      	movs	r2, r3
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	799b      	ldrb	r3, [r3, #6]
 80003b6:	4053      	eors	r3, r2
 80003b8:	b2da      	uxtb	r2, r3
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	71da      	strb	r2, [r3, #7]
		}
		return this->state;
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	79db      	ldrb	r3, [r3, #7]
	};
 80003c2:	0018      	movs	r0, r3
 80003c4:	46bd      	mov	sp, r7
 80003c6:	b002      	add	sp, #8
 80003c8:	bd80      	pop	{r7, pc}
	...

080003cc <_Z12InitEncodersv>:
{

}

void InitEncoders()
{
 80003cc:	b590      	push	{r4, r7, lr}
 80003ce:	b09f      	sub	sp, #124	; 0x7c
 80003d0:	af00      	add	r7, sp, #0
	alt_a_pin = Pin(ALT_A_GPIO_Port, ALT_A_Pin, false);
 80003d2:	2380      	movs	r3, #128	; 0x80
 80003d4:	01da      	lsls	r2, r3, #7
 80003d6:	4944      	ldr	r1, [pc, #272]	; (80004e8 <_Z12InitEncodersv+0x11c>)
 80003d8:	0038      	movs	r0, r7
 80003da:	2300      	movs	r3, #0
 80003dc:	f7ff ff4f 	bl	800027e <_ZN3PinC1EP12GPIO_TypeDeftb>
 80003e0:	4b42      	ldr	r3, [pc, #264]	; (80004ec <_Z12InitEncodersv+0x120>)
 80003e2:	003a      	movs	r2, r7
 80003e4:	ca03      	ldmia	r2!, {r0, r1}
 80003e6:	c303      	stmia	r3!, {r0, r1}
 80003e8:	7812      	ldrb	r2, [r2, #0]
 80003ea:	701a      	strb	r2, [r3, #0]
	alt_b_pin = Pin(ALT_B_GPIO_Port, ALT_B_Pin, false);
 80003ec:	4940      	ldr	r1, [pc, #256]	; (80004f0 <_Z12InitEncodersv+0x124>)
 80003ee:	240c      	movs	r4, #12
 80003f0:	1938      	adds	r0, r7, r4
 80003f2:	2300      	movs	r3, #0
 80003f4:	2240      	movs	r2, #64	; 0x40
 80003f6:	f7ff ff42 	bl	800027e <_ZN3PinC1EP12GPIO_TypeDeftb>
 80003fa:	4b3e      	ldr	r3, [pc, #248]	; (80004f4 <_Z12InitEncodersv+0x128>)
 80003fc:	193a      	adds	r2, r7, r4
 80003fe:	ca03      	ldmia	r2!, {r0, r1}
 8000400:	c303      	stmia	r3!, {r0, r1}
 8000402:	7812      	ldrb	r2, [r2, #0]
 8000404:	701a      	strb	r2, [r3, #0]
	crs1_a_pin = Pin(CRS1_A_GPIO_Port, CRS1_A_Pin, false);
 8000406:	2380      	movs	r3, #128	; 0x80
 8000408:	021a      	lsls	r2, r3, #8
 800040a:	2390      	movs	r3, #144	; 0x90
 800040c:	05d9      	lsls	r1, r3, #23
 800040e:	2418      	movs	r4, #24
 8000410:	1938      	adds	r0, r7, r4
 8000412:	2300      	movs	r3, #0
 8000414:	f7ff ff33 	bl	800027e <_ZN3PinC1EP12GPIO_TypeDeftb>
 8000418:	4b37      	ldr	r3, [pc, #220]	; (80004f8 <_Z12InitEncodersv+0x12c>)
 800041a:	193a      	adds	r2, r7, r4
 800041c:	ca03      	ldmia	r2!, {r0, r1}
 800041e:	c303      	stmia	r3!, {r0, r1}
 8000420:	7812      	ldrb	r2, [r2, #0]
 8000422:	701a      	strb	r2, [r3, #0]
	crs1_b_pin = Pin(CRS1_B_GPIO_Port, CRS1_B_Pin, false);
 8000424:	2380      	movs	r3, #128	; 0x80
 8000426:	00da      	lsls	r2, r3, #3
 8000428:	4931      	ldr	r1, [pc, #196]	; (80004f0 <_Z12InitEncodersv+0x124>)
 800042a:	2424      	movs	r4, #36	; 0x24
 800042c:	1938      	adds	r0, r7, r4
 800042e:	2300      	movs	r3, #0
 8000430:	f7ff ff25 	bl	800027e <_ZN3PinC1EP12GPIO_TypeDeftb>
 8000434:	4b31      	ldr	r3, [pc, #196]	; (80004fc <_Z12InitEncodersv+0x130>)
 8000436:	193a      	adds	r2, r7, r4
 8000438:	ca03      	ldmia	r2!, {r0, r1}
 800043a:	c303      	stmia	r3!, {r0, r1}
 800043c:	7812      	ldrb	r2, [r2, #0]
 800043e:	701a      	strb	r2, [r3, #0]
	crs2_a_pin = Pin(CRS2_A_GPIO_Port, CRS2_A_Pin, false);
 8000440:	2380      	movs	r3, #128	; 0x80
 8000442:	011a      	lsls	r2, r3, #4
 8000444:	4928      	ldr	r1, [pc, #160]	; (80004e8 <_Z12InitEncodersv+0x11c>)
 8000446:	2430      	movs	r4, #48	; 0x30
 8000448:	1938      	adds	r0, r7, r4
 800044a:	2300      	movs	r3, #0
 800044c:	f7ff ff17 	bl	800027e <_ZN3PinC1EP12GPIO_TypeDeftb>
 8000450:	4b2b      	ldr	r3, [pc, #172]	; (8000500 <_Z12InitEncodersv+0x134>)
 8000452:	193a      	adds	r2, r7, r4
 8000454:	ca03      	ldmia	r2!, {r0, r1}
 8000456:	c303      	stmia	r3!, {r0, r1}
 8000458:	7812      	ldrb	r2, [r2, #0]
 800045a:	701a      	strb	r2, [r3, #0]
	crs2_b_pin = Pin(CRS2_B_GPIO_Port, CRS2_B_Pin, false);
 800045c:	2380      	movs	r3, #128	; 0x80
 800045e:	019a      	lsls	r2, r3, #6
 8000460:	4921      	ldr	r1, [pc, #132]	; (80004e8 <_Z12InitEncodersv+0x11c>)
 8000462:	243c      	movs	r4, #60	; 0x3c
 8000464:	1938      	adds	r0, r7, r4
 8000466:	2300      	movs	r3, #0
 8000468:	f7ff ff09 	bl	800027e <_ZN3PinC1EP12GPIO_TypeDeftb>
 800046c:	4b25      	ldr	r3, [pc, #148]	; (8000504 <_Z12InitEncodersv+0x138>)
 800046e:	193a      	adds	r2, r7, r4
 8000470:	ca03      	ldmia	r2!, {r0, r1}
 8000472:	c303      	stmia	r3!, {r0, r1}
 8000474:	7812      	ldrb	r2, [r2, #0]
 8000476:	701a      	strb	r2, [r3, #0]
	hdg_a_pin = Pin(HDG_A_GPIO_Port, HDG_A_Pin, false);
 8000478:	491b      	ldr	r1, [pc, #108]	; (80004e8 <_Z12InitEncodersv+0x11c>)
 800047a:	2448      	movs	r4, #72	; 0x48
 800047c:	1938      	adds	r0, r7, r4
 800047e:	2300      	movs	r3, #0
 8000480:	2240      	movs	r2, #64	; 0x40
 8000482:	f7ff fefc 	bl	800027e <_ZN3PinC1EP12GPIO_TypeDeftb>
 8000486:	4b20      	ldr	r3, [pc, #128]	; (8000508 <_Z12InitEncodersv+0x13c>)
 8000488:	193a      	adds	r2, r7, r4
 800048a:	ca03      	ldmia	r2!, {r0, r1}
 800048c:	c303      	stmia	r3!, {r0, r1}
 800048e:	7812      	ldrb	r2, [r2, #0]
 8000490:	701a      	strb	r2, [r3, #0]
	hdg_b_pin = Pin(HDG_B_GPIO_Port, HDG_B_Pin, false);
 8000492:	4915      	ldr	r1, [pc, #84]	; (80004e8 <_Z12InitEncodersv+0x11c>)
 8000494:	2454      	movs	r4, #84	; 0x54
 8000496:	1938      	adds	r0, r7, r4
 8000498:	2300      	movs	r3, #0
 800049a:	2280      	movs	r2, #128	; 0x80
 800049c:	f7ff feef 	bl	800027e <_ZN3PinC1EP12GPIO_TypeDeftb>
 80004a0:	4b1a      	ldr	r3, [pc, #104]	; (800050c <_Z12InitEncodersv+0x140>)
 80004a2:	193a      	adds	r2, r7, r4
 80004a4:	ca03      	ldmia	r2!, {r0, r1}
 80004a6:	c303      	stmia	r3!, {r0, r1}
 80004a8:	7812      	ldrb	r2, [r2, #0]
 80004aa:	701a      	strb	r2, [r3, #0]
	whl_a_pin = Pin(WHEEL_A_GPIO_Port, WHEEL_A_Pin, false);
 80004ac:	4910      	ldr	r1, [pc, #64]	; (80004f0 <_Z12InitEncodersv+0x124>)
 80004ae:	2460      	movs	r4, #96	; 0x60
 80004b0:	1938      	adds	r0, r7, r4
 80004b2:	2300      	movs	r3, #0
 80004b4:	2204      	movs	r2, #4
 80004b6:	f7ff fee2 	bl	800027e <_ZN3PinC1EP12GPIO_TypeDeftb>
 80004ba:	4b15      	ldr	r3, [pc, #84]	; (8000510 <_Z12InitEncodersv+0x144>)
 80004bc:	193a      	adds	r2, r7, r4
 80004be:	ca03      	ldmia	r2!, {r0, r1}
 80004c0:	c303      	stmia	r3!, {r0, r1}
 80004c2:	7812      	ldrb	r2, [r2, #0]
 80004c4:	701a      	strb	r2, [r3, #0]
	whl_b_pin = Pin(WHEEL_B_GPIO_Port, WHEEL_B_Pin, false);
 80004c6:	490a      	ldr	r1, [pc, #40]	; (80004f0 <_Z12InitEncodersv+0x124>)
 80004c8:	246c      	movs	r4, #108	; 0x6c
 80004ca:	1938      	adds	r0, r7, r4
 80004cc:	2300      	movs	r3, #0
 80004ce:	2208      	movs	r2, #8
 80004d0:	f7ff fed5 	bl	800027e <_ZN3PinC1EP12GPIO_TypeDeftb>
 80004d4:	4b0f      	ldr	r3, [pc, #60]	; (8000514 <_Z12InitEncodersv+0x148>)
 80004d6:	193a      	adds	r2, r7, r4
 80004d8:	ca03      	ldmia	r2!, {r0, r1}
 80004da:	c303      	stmia	r3!, {r0, r1}
 80004dc:	7812      	ldrb	r2, [r2, #0]
 80004de:	701a      	strb	r2, [r3, #0]
}
 80004e0:	46c0      	nop			; (mov r8, r8)
 80004e2:	46bd      	mov	sp, r7
 80004e4:	b01f      	add	sp, #124	; 0x7c
 80004e6:	bd90      	pop	{r4, r7, pc}
 80004e8:	48000400 	.word	0x48000400
 80004ec:	200001f4 	.word	0x200001f4
 80004f0:	48000800 	.word	0x48000800
 80004f4:	20000200 	.word	0x20000200
 80004f8:	2000020c 	.word	0x2000020c
 80004fc:	20000218 	.word	0x20000218
 8000500:	20000224 	.word	0x20000224
 8000504:	20000230 	.word	0x20000230
 8000508:	2000023c 	.word	0x2000023c
 800050c:	20000248 	.word	0x20000248
 8000510:	20000254 	.word	0x20000254
 8000514:	20000260 	.word	0x20000260

08000518 <_Z11InitButtonsv>:

void InitButtons()
{
 8000518:	b590      	push	{r4, r7, lr}
 800051a:	b0b9      	sub	sp, #228	; 0xe4
 800051c:	af02      	add	r7, sp, #8
	// Rotary Encoder Push Buttons
	alt_sw_pin = Pin(ALT_SW_GPIO_Port, ALT_SW_Pin, ACTIVE_LOW, false);
 800051e:	2380      	movs	r3, #128	; 0x80
 8000520:	005a      	lsls	r2, r3, #1
 8000522:	498e      	ldr	r1, [pc, #568]	; (800075c <_Z11InitButtonsv+0x244>)
 8000524:	0038      	movs	r0, r7
 8000526:	2300      	movs	r3, #0
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	2301      	movs	r3, #1
 800052c:	f7ff fee9 	bl	8000302 <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_Stateb>
 8000530:	4b8b      	ldr	r3, [pc, #556]	; (8000760 <_Z11InitButtonsv+0x248>)
 8000532:	003a      	movs	r2, r7
 8000534:	ca03      	ldmia	r2!, {r0, r1}
 8000536:	c303      	stmia	r3!, {r0, r1}
 8000538:	7812      	ldrb	r2, [r2, #0]
 800053a:	701a      	strb	r2, [r3, #0]
	crs1_sw_pin = Pin(CRS1_SW_GPIO_Port, CRS1_SW_Pin, ACTIVE_LOW, false);
 800053c:	2380      	movs	r3, #128	; 0x80
 800053e:	011a      	lsls	r2, r3, #4
 8000540:	4986      	ldr	r1, [pc, #536]	; (800075c <_Z11InitButtonsv+0x244>)
 8000542:	240c      	movs	r4, #12
 8000544:	1938      	adds	r0, r7, r4
 8000546:	2300      	movs	r3, #0
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	2301      	movs	r3, #1
 800054c:	f7ff fed9 	bl	8000302 <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_Stateb>
 8000550:	4b84      	ldr	r3, [pc, #528]	; (8000764 <_Z11InitButtonsv+0x24c>)
 8000552:	193a      	adds	r2, r7, r4
 8000554:	ca03      	ldmia	r2!, {r0, r1}
 8000556:	c303      	stmia	r3!, {r0, r1}
 8000558:	7812      	ldrb	r2, [r2, #0]
 800055a:	701a      	strb	r2, [r3, #0]
	crs2_sw_pin = Pin(CRS2_SW_GPIO_Port, CRS2_SW_Pin, ACTIVE_LOW, false);
 800055c:	2380      	movs	r3, #128	; 0x80
 800055e:	00da      	lsls	r2, r3, #3
 8000560:	4981      	ldr	r1, [pc, #516]	; (8000768 <_Z11InitButtonsv+0x250>)
 8000562:	2418      	movs	r4, #24
 8000564:	1938      	adds	r0, r7, r4
 8000566:	2300      	movs	r3, #0
 8000568:	9300      	str	r3, [sp, #0]
 800056a:	2301      	movs	r3, #1
 800056c:	f7ff fec9 	bl	8000302 <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_Stateb>
 8000570:	4b7e      	ldr	r3, [pc, #504]	; (800076c <_Z11InitButtonsv+0x254>)
 8000572:	193a      	adds	r2, r7, r4
 8000574:	ca03      	ldmia	r2!, {r0, r1}
 8000576:	c303      	stmia	r3!, {r0, r1}
 8000578:	7812      	ldrb	r2, [r2, #0]
 800057a:	701a      	strb	r2, [r3, #0]
	hdg_sw_pin = Pin(HDG_SW_GPIO_Port, HDG_SW_Pin, ACTIVE_LOW, false);
 800057c:	497c      	ldr	r1, [pc, #496]	; (8000770 <_Z11InitButtonsv+0x258>)
 800057e:	2424      	movs	r4, #36	; 0x24
 8000580:	1938      	adds	r0, r7, r4
 8000582:	2300      	movs	r3, #0
 8000584:	9300      	str	r3, [sp, #0]
 8000586:	2301      	movs	r3, #1
 8000588:	2204      	movs	r2, #4
 800058a:	f7ff feba 	bl	8000302 <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_Stateb>
 800058e:	4b79      	ldr	r3, [pc, #484]	; (8000774 <_Z11InitButtonsv+0x25c>)
 8000590:	193a      	adds	r2, r7, r4
 8000592:	ca03      	ldmia	r2!, {r0, r1}
 8000594:	c303      	stmia	r3!, {r0, r1}
 8000596:	7812      	ldrb	r2, [r2, #0]
 8000598:	701a      	strb	r2, [r3, #0]

	// Front Panel Input Buttons
	alt_btn_pin = Pin(ALT_BTN_GPIO_Port, ALT_BTN_Pin, ACTIVE_LOW, false);
 800059a:	2390      	movs	r3, #144	; 0x90
 800059c:	05d9      	lsls	r1, r3, #23
 800059e:	2430      	movs	r4, #48	; 0x30
 80005a0:	1938      	adds	r0, r7, r4
 80005a2:	2300      	movs	r3, #0
 80005a4:	9300      	str	r3, [sp, #0]
 80005a6:	2301      	movs	r3, #1
 80005a8:	2208      	movs	r2, #8
 80005aa:	f7ff feaa 	bl	8000302 <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_Stateb>
 80005ae:	4b72      	ldr	r3, [pc, #456]	; (8000778 <_Z11InitButtonsv+0x260>)
 80005b0:	193a      	adds	r2, r7, r4
 80005b2:	ca03      	ldmia	r2!, {r0, r1}
 80005b4:	c303      	stmia	r3!, {r0, r1}
 80005b6:	7812      	ldrb	r2, [r2, #0]
 80005b8:	701a      	strb	r2, [r3, #0]
	apr_btn_pin = Pin(APR_BTN_GPIO_Port, APR_BTN_Pin, ACTIVE_LOW, false);
 80005ba:	496b      	ldr	r1, [pc, #428]	; (8000768 <_Z11InitButtonsv+0x250>)
 80005bc:	243c      	movs	r4, #60	; 0x3c
 80005be:	1938      	adds	r0, r7, r4
 80005c0:	2300      	movs	r3, #0
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	2301      	movs	r3, #1
 80005c6:	2210      	movs	r2, #16
 80005c8:	f7ff fe9b 	bl	8000302 <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_Stateb>
 80005cc:	4b6b      	ldr	r3, [pc, #428]	; (800077c <_Z11InitButtonsv+0x264>)
 80005ce:	193a      	adds	r2, r7, r4
 80005d0:	ca03      	ldmia	r2!, {r0, r1}
 80005d2:	c303      	stmia	r3!, {r0, r1}
 80005d4:	7812      	ldrb	r2, [r2, #0]
 80005d6:	701a      	strb	r2, [r3, #0]
	bank_btn_pin = Pin(BANK_BTN_GPIO_Port, BANK_BTN_Pin, ACTIVE_LOW, false);
 80005d8:	2380      	movs	r3, #128	; 0x80
 80005da:	009a      	lsls	r2, r3, #2
 80005dc:	495f      	ldr	r1, [pc, #380]	; (800075c <_Z11InitButtonsv+0x244>)
 80005de:	2448      	movs	r4, #72	; 0x48
 80005e0:	1938      	adds	r0, r7, r4
 80005e2:	2300      	movs	r3, #0
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	2301      	movs	r3, #1
 80005e8:	f7ff fe8b 	bl	8000302 <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_Stateb>
 80005ec:	4b64      	ldr	r3, [pc, #400]	; (8000780 <_Z11InitButtonsv+0x268>)
 80005ee:	193a      	adds	r2, r7, r4
 80005f0:	ca03      	ldmia	r2!, {r0, r1}
 80005f2:	c303      	stmia	r3!, {r0, r1}
 80005f4:	7812      	ldrb	r2, [r2, #0]
 80005f6:	701a      	strb	r2, [r3, #0]
	bc_btn_pin = Pin(BC_BTN_GPIO_Port, BC_BTN_Pin, ACTIVE_LOW, false);
 80005f8:	2380      	movs	r3, #128	; 0x80
 80005fa:	015a      	lsls	r2, r3, #5
 80005fc:	4957      	ldr	r1, [pc, #348]	; (800075c <_Z11InitButtonsv+0x244>)
 80005fe:	2454      	movs	r4, #84	; 0x54
 8000600:	1938      	adds	r0, r7, r4
 8000602:	2300      	movs	r3, #0
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2301      	movs	r3, #1
 8000608:	f7ff fe7b 	bl	8000302 <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_Stateb>
 800060c:	4b5d      	ldr	r3, [pc, #372]	; (8000784 <_Z11InitButtonsv+0x26c>)
 800060e:	193a      	adds	r2, r7, r4
 8000610:	ca03      	ldmia	r2!, {r0, r1}
 8000612:	c303      	stmia	r3!, {r0, r1}
 8000614:	7812      	ldrb	r2, [r2, #0]
 8000616:	701a      	strb	r2, [r3, #0]
	fd_btn_pin = Pin(FD_BTN_GPIO_Port, FD_BTN_Pin, ACTIVE_LOW, false);
 8000618:	2380      	movs	r3, #128	; 0x80
 800061a:	005a      	lsls	r2, r3, #1
 800061c:	2390      	movs	r3, #144	; 0x90
 800061e:	05d9      	lsls	r1, r3, #23
 8000620:	2460      	movs	r4, #96	; 0x60
 8000622:	1938      	adds	r0, r7, r4
 8000624:	2300      	movs	r3, #0
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	2301      	movs	r3, #1
 800062a:	f7ff fe6a 	bl	8000302 <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_Stateb>
 800062e:	4b56      	ldr	r3, [pc, #344]	; (8000788 <_Z11InitButtonsv+0x270>)
 8000630:	193a      	adds	r2, r7, r4
 8000632:	ca03      	ldmia	r2!, {r0, r1}
 8000634:	c303      	stmia	r3!, {r0, r1}
 8000636:	7812      	ldrb	r2, [r2, #0]
 8000638:	701a      	strb	r2, [r3, #0]
	flc_btn_pin = Pin(FLC_BTN_GPIO_Port, FLC_BTN_Pin, ACTIVE_LOW, false);
 800063a:	494b      	ldr	r1, [pc, #300]	; (8000768 <_Z11InitButtonsv+0x250>)
 800063c:	246c      	movs	r4, #108	; 0x6c
 800063e:	1938      	adds	r0, r7, r4
 8000640:	2300      	movs	r3, #0
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	2301      	movs	r3, #1
 8000646:	2201      	movs	r2, #1
 8000648:	f7ff fe5b 	bl	8000302 <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_Stateb>
 800064c:	4b4f      	ldr	r3, [pc, #316]	; (800078c <_Z11InitButtonsv+0x274>)
 800064e:	193a      	adds	r2, r7, r4
 8000650:	ca03      	ldmia	r2!, {r0, r1}
 8000652:	c303      	stmia	r3!, {r0, r1}
 8000654:	7812      	ldrb	r2, [r2, #0]
 8000656:	701a      	strb	r2, [r3, #0]
	hdg_btn_pin = Pin(HDG_BTN_GPIO_Port, HDG_BTN_Pin, ACTIVE_LOW, false);
 8000658:	4943      	ldr	r1, [pc, #268]	; (8000768 <_Z11InitButtonsv+0x250>)
 800065a:	2478      	movs	r4, #120	; 0x78
 800065c:	1938      	adds	r0, r7, r4
 800065e:	2300      	movs	r3, #0
 8000660:	9300      	str	r3, [sp, #0]
 8000662:	2301      	movs	r3, #1
 8000664:	2208      	movs	r2, #8
 8000666:	f7ff fe4c 	bl	8000302 <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_Stateb>
 800066a:	4b49      	ldr	r3, [pc, #292]	; (8000790 <_Z11InitButtonsv+0x278>)
 800066c:	193a      	adds	r2, r7, r4
 800066e:	ca03      	ldmia	r2!, {r0, r1}
 8000670:	c303      	stmia	r3!, {r0, r1}
 8000672:	7812      	ldrb	r2, [r2, #0]
 8000674:	701a      	strb	r2, [r3, #0]
	nav_btn_pin = Pin(NAV_BTN_GPIO_Port, NAV_BTN_Pin, ACTIVE_LOW, false);
 8000676:	493c      	ldr	r1, [pc, #240]	; (8000768 <_Z11InitButtonsv+0x250>)
 8000678:	2484      	movs	r4, #132	; 0x84
 800067a:	1938      	adds	r0, r7, r4
 800067c:	2300      	movs	r3, #0
 800067e:	9300      	str	r3, [sp, #0]
 8000680:	2301      	movs	r3, #1
 8000682:	2220      	movs	r2, #32
 8000684:	f7ff fe3d 	bl	8000302 <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_Stateb>
 8000688:	4b42      	ldr	r3, [pc, #264]	; (8000794 <_Z11InitButtonsv+0x27c>)
 800068a:	193a      	adds	r2, r7, r4
 800068c:	ca03      	ldmia	r2!, {r0, r1}
 800068e:	c303      	stmia	r3!, {r0, r1}
 8000690:	7812      	ldrb	r2, [r2, #0]
 8000692:	701a      	strb	r2, [r3, #0]
	ap_btn_pin = Pin(AP_BTN_GPIO_Port, AP_BTN_Pin, ACTIVE_LOW, false);
 8000694:	4931      	ldr	r1, [pc, #196]	; (800075c <_Z11InitButtonsv+0x244>)
 8000696:	2490      	movs	r4, #144	; 0x90
 8000698:	1938      	adds	r0, r7, r4
 800069a:	2300      	movs	r3, #0
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	2301      	movs	r3, #1
 80006a0:	2280      	movs	r2, #128	; 0x80
 80006a2:	f7ff fe2e 	bl	8000302 <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_Stateb>
 80006a6:	4b3c      	ldr	r3, [pc, #240]	; (8000798 <_Z11InitButtonsv+0x280>)
 80006a8:	193a      	adds	r2, r7, r4
 80006aa:	ca03      	ldmia	r2!, {r0, r1}
 80006ac:	c303      	stmia	r3!, {r0, r1}
 80006ae:	7812      	ldrb	r2, [r2, #0]
 80006b0:	701a      	strb	r2, [r3, #0]
	spd_btn_pin = Pin(SPD_BTN_GPIO_Port, SPD_BTN_Pin, ACTIVE_LOW, false);
 80006b2:	492d      	ldr	r1, [pc, #180]	; (8000768 <_Z11InitButtonsv+0x250>)
 80006b4:	249c      	movs	r4, #156	; 0x9c
 80006b6:	1938      	adds	r0, r7, r4
 80006b8:	2300      	movs	r3, #0
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	2301      	movs	r3, #1
 80006be:	2202      	movs	r2, #2
 80006c0:	f7ff fe1f 	bl	8000302 <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_Stateb>
 80006c4:	4b35      	ldr	r3, [pc, #212]	; (800079c <_Z11InitButtonsv+0x284>)
 80006c6:	193a      	adds	r2, r7, r4
 80006c8:	ca03      	ldmia	r2!, {r0, r1}
 80006ca:	c303      	stmia	r3!, {r0, r1}
 80006cc:	7812      	ldrb	r2, [r2, #0]
 80006ce:	701a      	strb	r2, [r3, #0]
	vnv_btn_pin = Pin(VNV_BTN_GPIO_Port, VNV_BTN_Pin, ACTIVE_LOW, false);
 80006d0:	4925      	ldr	r1, [pc, #148]	; (8000768 <_Z11InitButtonsv+0x250>)
 80006d2:	24a8      	movs	r4, #168	; 0xa8
 80006d4:	1938      	adds	r0, r7, r4
 80006d6:	2300      	movs	r3, #0
 80006d8:	9300      	str	r3, [sp, #0]
 80006da:	2301      	movs	r3, #1
 80006dc:	2204      	movs	r2, #4
 80006de:	f7ff fe10 	bl	8000302 <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_Stateb>
 80006e2:	4b2f      	ldr	r3, [pc, #188]	; (80007a0 <_Z11InitButtonsv+0x288>)
 80006e4:	193a      	adds	r2, r7, r4
 80006e6:	ca03      	ldmia	r2!, {r0, r1}
 80006e8:	c303      	stmia	r3!, {r0, r1}
 80006ea:	7812      	ldrb	r2, [r2, #0]
 80006ec:	701a      	strb	r2, [r3, #0]
	vs_btn_pin = Pin(VS_BTN_GPIO_Port, VS_BTN_Pin, ACTIVE_LOW, false);
 80006ee:	2390      	movs	r3, #144	; 0x90
 80006f0:	05d9      	lsls	r1, r3, #23
 80006f2:	24b4      	movs	r4, #180	; 0xb4
 80006f4:	1938      	adds	r0, r7, r4
 80006f6:	2300      	movs	r3, #0
 80006f8:	9300      	str	r3, [sp, #0]
 80006fa:	2301      	movs	r3, #1
 80006fc:	2210      	movs	r2, #16
 80006fe:	f7ff fe00 	bl	8000302 <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_Stateb>
 8000702:	4b28      	ldr	r3, [pc, #160]	; (80007a4 <_Z11InitButtonsv+0x28c>)
 8000704:	193a      	adds	r2, r7, r4
 8000706:	ca03      	ldmia	r2!, {r0, r1}
 8000708:	c303      	stmia	r3!, {r0, r1}
 800070a:	7812      	ldrb	r2, [r2, #0]
 800070c:	701a      	strb	r2, [r3, #0]
	xfr_btn_pin = Pin(XFR_BTN_GPIO_Port, XFR_BTN_Pin, ACTIVE_LOW, false);
 800070e:	2380      	movs	r3, #128	; 0x80
 8000710:	00da      	lsls	r2, r3, #3
 8000712:	2390      	movs	r3, #144	; 0x90
 8000714:	05d9      	lsls	r1, r3, #23
 8000716:	24c0      	movs	r4, #192	; 0xc0
 8000718:	1938      	adds	r0, r7, r4
 800071a:	2300      	movs	r3, #0
 800071c:	9300      	str	r3, [sp, #0]
 800071e:	2301      	movs	r3, #1
 8000720:	f7ff fdef 	bl	8000302 <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_Stateb>
 8000724:	4b20      	ldr	r3, [pc, #128]	; (80007a8 <_Z11InitButtonsv+0x290>)
 8000726:	193a      	adds	r2, r7, r4
 8000728:	ca03      	ldmia	r2!, {r0, r1}
 800072a:	c303      	stmia	r3!, {r0, r1}
 800072c:	7812      	ldrb	r2, [r2, #0]
 800072e:	701a      	strb	r2, [r3, #0]
	yd_btn_pin = Pin(YD_BTN_GPIO_Port, YD_BTN_Pin, ACTIVE_LOW, false);
 8000730:	2380      	movs	r3, #128	; 0x80
 8000732:	009a      	lsls	r2, r3, #2
 8000734:	2390      	movs	r3, #144	; 0x90
 8000736:	05d9      	lsls	r1, r3, #23
 8000738:	24cc      	movs	r4, #204	; 0xcc
 800073a:	1938      	adds	r0, r7, r4
 800073c:	2300      	movs	r3, #0
 800073e:	9300      	str	r3, [sp, #0]
 8000740:	2301      	movs	r3, #1
 8000742:	f7ff fdde 	bl	8000302 <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_Stateb>
 8000746:	4b19      	ldr	r3, [pc, #100]	; (80007ac <_Z11InitButtonsv+0x294>)
 8000748:	193a      	adds	r2, r7, r4
 800074a:	ca03      	ldmia	r2!, {r0, r1}
 800074c:	c303      	stmia	r3!, {r0, r1}
 800074e:	7812      	ldrb	r2, [r2, #0]
 8000750:	701a      	strb	r2, [r3, #0]
}
 8000752:	46c0      	nop			; (mov r8, r8)
 8000754:	46bd      	mov	sp, r7
 8000756:	b037      	add	sp, #220	; 0xdc
 8000758:	bd90      	pop	{r4, r7, pc}
 800075a:	46c0      	nop			; (mov r8, r8)
 800075c:	48000800 	.word	0x48000800
 8000760:	2000026c 	.word	0x2000026c
 8000764:	20000278 	.word	0x20000278
 8000768:	48000400 	.word	0x48000400
 800076c:	20000284 	.word	0x20000284
 8000770:	48000c00 	.word	0x48000c00
 8000774:	20000290 	.word	0x20000290
 8000778:	2000029c 	.word	0x2000029c
 800077c:	200002a8 	.word	0x200002a8
 8000780:	200002b4 	.word	0x200002b4
 8000784:	200002c0 	.word	0x200002c0
 8000788:	200002cc 	.word	0x200002cc
 800078c:	200002d8 	.word	0x200002d8
 8000790:	200002e4 	.word	0x200002e4
 8000794:	200002f0 	.word	0x200002f0
 8000798:	200002fc 	.word	0x200002fc
 800079c:	20000308 	.word	0x20000308
 80007a0:	20000314 	.word	0x20000314
 80007a4:	20000320 	.word	0x20000320
 80007a8:	2000032c 	.word	0x2000032c
 80007ac:	20000338 	.word	0x20000338

080007b0 <_Z15InitControlPinsv>:

void InitControlPins()
{
 80007b0:	b590      	push	{r4, r7, lr}
 80007b2:	b095      	sub	sp, #84	; 0x54
 80007b4:	af02      	add	r7, sp, #8

	status_ind_pin = Pin(STATUS_IND_GPIO_Port, STATUS_IND_Pin);
 80007b6:	492c      	ldr	r1, [pc, #176]	; (8000868 <_Z15InitControlPinsv+0xb8>)
 80007b8:	003b      	movs	r3, r7
 80007ba:	2201      	movs	r2, #1
 80007bc:	0018      	movs	r0, r3
 80007be:	f7ff fd45 	bl	800024c <_ZN3PinC1EP12GPIO_TypeDeft>
 80007c2:	4b2a      	ldr	r3, [pc, #168]	; (800086c <_Z15InitControlPinsv+0xbc>)
 80007c4:	003a      	movs	r2, r7
 80007c6:	ca03      	ldmia	r2!, {r0, r1}
 80007c8:	c303      	stmia	r3!, {r0, r1}
 80007ca:	7812      	ldrb	r2, [r2, #0]
 80007cc:	701a      	strb	r2, [r3, #0]
	usart_inval_pin = Pin(USART_INVALID_GPIO_Port, USART_INVALID_Pin, ACTIVE_LOW, false);
 80007ce:	2380      	movs	r3, #128	; 0x80
 80007d0:	009a      	lsls	r2, r3, #2
 80007d2:	4927      	ldr	r1, [pc, #156]	; (8000870 <_Z15InitControlPinsv+0xc0>)
 80007d4:	240c      	movs	r4, #12
 80007d6:	1938      	adds	r0, r7, r4
 80007d8:	2300      	movs	r3, #0
 80007da:	9300      	str	r3, [sp, #0]
 80007dc:	2301      	movs	r3, #1
 80007de:	f7ff fd90 	bl	8000302 <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_Stateb>
 80007e2:	4b24      	ldr	r3, [pc, #144]	; (8000874 <_Z15InitControlPinsv+0xc4>)
 80007e4:	193a      	adds	r2, r7, r4
 80007e6:	ca03      	ldmia	r2!, {r0, r1}
 80007e8:	c303      	stmia	r3!, {r0, r1}
 80007ea:	7812      	ldrb	r2, [r2, #0]
 80007ec:	701a      	strb	r2, [r3, #0]
	usb_usart_sel_pin = Pin(USB_SER_SEL_GPIO_Port, USB_SER_SEL_Pin, false);
 80007ee:	2380      	movs	r3, #128	; 0x80
 80007f0:	005a      	lsls	r2, r3, #1
 80007f2:	491f      	ldr	r1, [pc, #124]	; (8000870 <_Z15InitControlPinsv+0xc0>)
 80007f4:	2418      	movs	r4, #24
 80007f6:	1938      	adds	r0, r7, r4
 80007f8:	2300      	movs	r3, #0
 80007fa:	f7ff fd40 	bl	800027e <_ZN3PinC1EP12GPIO_TypeDeftb>
 80007fe:	4b1e      	ldr	r3, [pc, #120]	; (8000878 <_Z15InitControlPinsv+0xc8>)
 8000800:	193a      	adds	r2, r7, r4
 8000802:	ca03      	ldmia	r2!, {r0, r1}
 8000804:	c303      	stmia	r3!, {r0, r1}
 8000806:	7812      	ldrb	r2, [r2, #0]
 8000808:	701a      	strb	r2, [r3, #0]

	brgt_cs_pin = Pin(BRGT_CS_GPIO_Port, BRGT_CS_Pin, ACTIVE_LOW);
 800080a:	2380      	movs	r3, #128	; 0x80
 800080c:	01da      	lsls	r2, r3, #7
 800080e:	4916      	ldr	r1, [pc, #88]	; (8000868 <_Z15InitControlPinsv+0xb8>)
 8000810:	2424      	movs	r4, #36	; 0x24
 8000812:	1938      	adds	r0, r7, r4
 8000814:	2301      	movs	r3, #1
 8000816:	f7ff fd53 	bl	80002c0 <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_State>
 800081a:	4b18      	ldr	r3, [pc, #96]	; (800087c <_Z15InitControlPinsv+0xcc>)
 800081c:	193a      	adds	r2, r7, r4
 800081e:	ca03      	ldmia	r2!, {r0, r1}
 8000820:	c303      	stmia	r3!, {r0, r1}
 8000822:	7812      	ldrb	r2, [r2, #0]
 8000824:	701a      	strb	r2, [r3, #0]
	brgt_ud_pin = Pin(BRGT_UD_GPIO_Port, BRGT_UD_Pin);
 8000826:	2380      	movs	r3, #128	; 0x80
 8000828:	021a      	lsls	r2, r3, #8
 800082a:	490f      	ldr	r1, [pc, #60]	; (8000868 <_Z15InitControlPinsv+0xb8>)
 800082c:	2430      	movs	r4, #48	; 0x30
 800082e:	193b      	adds	r3, r7, r4
 8000830:	0018      	movs	r0, r3
 8000832:	f7ff fd0b 	bl	800024c <_ZN3PinC1EP12GPIO_TypeDeft>
 8000836:	4b12      	ldr	r3, [pc, #72]	; (8000880 <_Z15InitControlPinsv+0xd0>)
 8000838:	193a      	adds	r2, r7, r4
 800083a:	ca03      	ldmia	r2!, {r0, r1}
 800083c:	c303      	stmia	r3!, {r0, r1}
 800083e:	7812      	ldrb	r2, [r2, #0]
 8000840:	701a      	strb	r2, [r3, #0]

	ind_la_pin = Pin(IND_LATCH_GPIO_Port, IND_LATCH_Pin);
 8000842:	2390      	movs	r3, #144	; 0x90
 8000844:	05d9      	lsls	r1, r3, #23
 8000846:	243c      	movs	r4, #60	; 0x3c
 8000848:	193b      	adds	r3, r7, r4
 800084a:	2240      	movs	r2, #64	; 0x40
 800084c:	0018      	movs	r0, r3
 800084e:	f7ff fcfd 	bl	800024c <_ZN3PinC1EP12GPIO_TypeDeft>
 8000852:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <_Z15InitControlPinsv+0xd4>)
 8000854:	193a      	adds	r2, r7, r4
 8000856:	ca03      	ldmia	r2!, {r0, r1}
 8000858:	c303      	stmia	r3!, {r0, r1}
 800085a:	7812      	ldrb	r2, [r2, #0]
 800085c:	701a      	strb	r2, [r3, #0]
}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	46bd      	mov	sp, r7
 8000862:	b013      	add	sp, #76	; 0x4c
 8000864:	bd90      	pop	{r4, r7, pc}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	48000800 	.word	0x48000800
 800086c:	20000344 	.word	0x20000344
 8000870:	48000400 	.word	0x48000400
 8000874:	20000350 	.word	0x20000350
 8000878:	2000035c 	.word	0x2000035c
 800087c:	20000368 	.word	0x20000368
 8000880:	20000374 	.word	0x20000374
 8000884:	20000380 	.word	0x20000380

08000888 <Init>:

HAL_StatusTypeDef Init(ADC_HandleTypeDef *hadc, SPI_HandleTypeDef *hspi1, DMA_HandleTypeDef *hdma_spi1_tx, TIM_HandleTypeDef *htim15, UART_HandleTypeDef *huart3)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	60f8      	str	r0, [r7, #12]
 8000890:	60b9      	str	r1, [r7, #8]
 8000892:	607a      	str	r2, [r7, #4]
 8000894:	603b      	str	r3, [r7, #0]
	h_adc = hadc;
 8000896:	4b15      	ldr	r3, [pc, #84]	; (80008ec <Init+0x64>)
 8000898:	68fa      	ldr	r2, [r7, #12]
 800089a:	601a      	str	r2, [r3, #0]
	h_spi = hspi1;
 800089c:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <Init+0x68>)
 800089e:	68ba      	ldr	r2, [r7, #8]
 80008a0:	601a      	str	r2, [r3, #0]
	h_dma_spi_tx = hdma_spi1_tx;
 80008a2:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <Init+0x6c>)
 80008a4:	687a      	ldr	r2, [r7, #4]
 80008a6:	601a      	str	r2, [r3, #0]
	h_brgt_tim = htim15;
 80008a8:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <Init+0x70>)
 80008aa:	683a      	ldr	r2, [r7, #0]
 80008ac:	601a      	str	r2, [r3, #0]
	h_serial = huart3;
 80008ae:	4b13      	ldr	r3, [pc, #76]	; (80008fc <Init+0x74>)
 80008b0:	69ba      	ldr	r2, [r7, #24]
 80008b2:	601a      	str	r2, [r3, #0]
	h_usb = GetUSBHandle();
 80008b4:	f009 f85e 	bl	8009974 <GetUSBHandle>
 80008b8:	0002      	movs	r2, r0
 80008ba:	4b11      	ldr	r3, [pc, #68]	; (8000900 <Init+0x78>)
 80008bc:	601a      	str	r2, [r3, #0]

	InitControlPins();
 80008be:	f7ff ff77 	bl	80007b0 <_Z15InitControlPinsv>

	InitEncoders();
 80008c2:	f7ff fd83 	bl	80003cc <_Z12InitEncodersv>

	InitButtons();
 80008c6:	f7ff fe27 	bl	8000518 <_Z11InitButtonsv>

	mouseHID.buttons = 0;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <Init+0x7c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	701a      	strb	r2, [r3, #0]
	mouseHID.x = 10;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <Init+0x7c>)
 80008d2:	220a      	movs	r2, #10
 80008d4:	705a      	strb	r2, [r3, #1]
	mouseHID.y = 0;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <Init+0x7c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	709a      	strb	r2, [r3, #2]
	mouseHID.wheel = 0;
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <Init+0x7c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	70da      	strb	r2, [r3, #3]

	return HAL_OK;
 80008e2:	2300      	movs	r3, #0
}
 80008e4:	0018      	movs	r0, r3
 80008e6:	46bd      	mov	sp, r7
 80008e8:	b004      	add	sp, #16
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	200001e0 	.word	0x200001e0
 80008f0:	200001e4 	.word	0x200001e4
 80008f4:	200001e8 	.word	0x200001e8
 80008f8:	200001ec 	.word	0x200001ec
 80008fc:	200001f0 	.word	0x200001f0
 8000900:	200001dc 	.word	0x200001dc
 8000904:	2000038c 	.word	0x2000038c

08000908 <Main>:

void Main()
{
 8000908:	b590      	push	{r4, r7, lr}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
	GPIO_PinState aprState = apr_btn_pin.Read();
 800090e:	1dfc      	adds	r4, r7, #7
 8000910:	4b11      	ldr	r3, [pc, #68]	; (8000958 <Main+0x50>)
 8000912:	0018      	movs	r0, r3
 8000914:	f7ff fd38 	bl	8000388 <_ZN3Pin4ReadEv>
 8000918:	0003      	movs	r3, r0
 800091a:	7023      	strb	r3, [r4, #0]

	status_ind_pin.Write(aprState);
 800091c:	1dfb      	adds	r3, r7, #7
 800091e:	781a      	ldrb	r2, [r3, #0]
 8000920:	4b0e      	ldr	r3, [pc, #56]	; (800095c <Main+0x54>)
 8000922:	0011      	movs	r1, r2
 8000924:	0018      	movs	r0, r3
 8000926:	f7ff fd0f 	bl	8000348 <_ZN3Pin5WriteE13GPIO_PinState>
    mouseHID.x = 10;
 800092a:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <Main+0x58>)
 800092c:	220a      	movs	r2, #10
 800092e:	705a      	strb	r2, [r3, #1]
    USBD_HID_SendReport(h_usb, (uint8_t*)&mouseHID, sizeof(struct mouseHID_t));
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <Main+0x5c>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	490a      	ldr	r1, [pc, #40]	; (8000960 <Main+0x58>)
 8000936:	2204      	movs	r2, #4
 8000938:	0018      	movs	r0, r3
 800093a:	f007 fda1 	bl	8008480 <USBD_HID_SendReport>
    HAL_Delay(1000);
 800093e:	23fa      	movs	r3, #250	; 0xfa
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	0018      	movs	r0, r3
 8000944:	f000 ff82 	bl	800184c <HAL_Delay>

	HAL_Delay(100);
 8000948:	2064      	movs	r0, #100	; 0x64
 800094a:	f000 ff7f 	bl	800184c <HAL_Delay>
}
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	46bd      	mov	sp, r7
 8000952:	b003      	add	sp, #12
 8000954:	bd90      	pop	{r4, r7, pc}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	200002a8 	.word	0x200002a8
 800095c:	20000344 	.word	0x20000344
 8000960:	2000038c 	.word	0x2000038c
 8000964:	200001dc 	.word	0x200001dc

08000968 <_Z41__static_initialization_and_destruction_0ii>:
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	6039      	str	r1, [r7, #0]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2b01      	cmp	r3, #1
 8000976:	d000      	beq.n	800097a <_Z41__static_initialization_and_destruction_0ii+0x12>
 8000978:	e08c      	b.n	8000a94 <_Z41__static_initialization_and_destruction_0ii+0x12c>
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	4a47      	ldr	r2, [pc, #284]	; (8000a9c <_Z41__static_initialization_and_destruction_0ii+0x134>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d000      	beq.n	8000984 <_Z41__static_initialization_and_destruction_0ii+0x1c>
 8000982:	e087      	b.n	8000a94 <_Z41__static_initialization_and_destruction_0ii+0x12c>
Pin alt_a_pin;
 8000984:	4b46      	ldr	r3, [pc, #280]	; (8000aa0 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 8000986:	0018      	movs	r0, r3
 8000988:	f7ff fc54 	bl	8000234 <_ZN3PinC1Ev>
Pin alt_b_pin;
 800098c:	4b45      	ldr	r3, [pc, #276]	; (8000aa4 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 800098e:	0018      	movs	r0, r3
 8000990:	f7ff fc50 	bl	8000234 <_ZN3PinC1Ev>
Pin crs1_a_pin;
 8000994:	4b44      	ldr	r3, [pc, #272]	; (8000aa8 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8000996:	0018      	movs	r0, r3
 8000998:	f7ff fc4c 	bl	8000234 <_ZN3PinC1Ev>
Pin crs1_b_pin;
 800099c:	4b43      	ldr	r3, [pc, #268]	; (8000aac <_Z41__static_initialization_and_destruction_0ii+0x144>)
 800099e:	0018      	movs	r0, r3
 80009a0:	f7ff fc48 	bl	8000234 <_ZN3PinC1Ev>
Pin crs2_a_pin;
 80009a4:	4b42      	ldr	r3, [pc, #264]	; (8000ab0 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 80009a6:	0018      	movs	r0, r3
 80009a8:	f7ff fc44 	bl	8000234 <_ZN3PinC1Ev>
Pin crs2_b_pin;
 80009ac:	4b41      	ldr	r3, [pc, #260]	; (8000ab4 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 80009ae:	0018      	movs	r0, r3
 80009b0:	f7ff fc40 	bl	8000234 <_ZN3PinC1Ev>
Pin hdg_a_pin;
 80009b4:	4b40      	ldr	r3, [pc, #256]	; (8000ab8 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 80009b6:	0018      	movs	r0, r3
 80009b8:	f7ff fc3c 	bl	8000234 <_ZN3PinC1Ev>
Pin hdg_b_pin;
 80009bc:	4b3f      	ldr	r3, [pc, #252]	; (8000abc <_Z41__static_initialization_and_destruction_0ii+0x154>)
 80009be:	0018      	movs	r0, r3
 80009c0:	f7ff fc38 	bl	8000234 <_ZN3PinC1Ev>
Pin whl_a_pin;
 80009c4:	4b3e      	ldr	r3, [pc, #248]	; (8000ac0 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 80009c6:	0018      	movs	r0, r3
 80009c8:	f7ff fc34 	bl	8000234 <_ZN3PinC1Ev>
Pin whl_b_pin;
 80009cc:	4b3d      	ldr	r3, [pc, #244]	; (8000ac4 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 80009ce:	0018      	movs	r0, r3
 80009d0:	f7ff fc30 	bl	8000234 <_ZN3PinC1Ev>
Pin alt_sw_pin;
 80009d4:	4b3c      	ldr	r3, [pc, #240]	; (8000ac8 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 80009d6:	0018      	movs	r0, r3
 80009d8:	f7ff fc2c 	bl	8000234 <_ZN3PinC1Ev>
Pin crs1_sw_pin;
 80009dc:	4b3b      	ldr	r3, [pc, #236]	; (8000acc <_Z41__static_initialization_and_destruction_0ii+0x164>)
 80009de:	0018      	movs	r0, r3
 80009e0:	f7ff fc28 	bl	8000234 <_ZN3PinC1Ev>
Pin crs2_sw_pin;
 80009e4:	4b3a      	ldr	r3, [pc, #232]	; (8000ad0 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 80009e6:	0018      	movs	r0, r3
 80009e8:	f7ff fc24 	bl	8000234 <_ZN3PinC1Ev>
Pin hdg_sw_pin;
 80009ec:	4b39      	ldr	r3, [pc, #228]	; (8000ad4 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 80009ee:	0018      	movs	r0, r3
 80009f0:	f7ff fc20 	bl	8000234 <_ZN3PinC1Ev>
Pin alt_btn_pin;
 80009f4:	4b38      	ldr	r3, [pc, #224]	; (8000ad8 <_Z41__static_initialization_and_destruction_0ii+0x170>)
 80009f6:	0018      	movs	r0, r3
 80009f8:	f7ff fc1c 	bl	8000234 <_ZN3PinC1Ev>
Pin apr_btn_pin;
 80009fc:	4b37      	ldr	r3, [pc, #220]	; (8000adc <_Z41__static_initialization_and_destruction_0ii+0x174>)
 80009fe:	0018      	movs	r0, r3
 8000a00:	f7ff fc18 	bl	8000234 <_ZN3PinC1Ev>
Pin bank_btn_pin;
 8000a04:	4b36      	ldr	r3, [pc, #216]	; (8000ae0 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8000a06:	0018      	movs	r0, r3
 8000a08:	f7ff fc14 	bl	8000234 <_ZN3PinC1Ev>
Pin bc_btn_pin;
 8000a0c:	4b35      	ldr	r3, [pc, #212]	; (8000ae4 <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f7ff fc10 	bl	8000234 <_ZN3PinC1Ev>
Pin fd_btn_pin;
 8000a14:	4b34      	ldr	r3, [pc, #208]	; (8000ae8 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8000a16:	0018      	movs	r0, r3
 8000a18:	f7ff fc0c 	bl	8000234 <_ZN3PinC1Ev>
Pin flc_btn_pin;
 8000a1c:	4b33      	ldr	r3, [pc, #204]	; (8000aec <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f7ff fc08 	bl	8000234 <_ZN3PinC1Ev>
Pin hdg_btn_pin;
 8000a24:	4b32      	ldr	r3, [pc, #200]	; (8000af0 <_Z41__static_initialization_and_destruction_0ii+0x188>)
 8000a26:	0018      	movs	r0, r3
 8000a28:	f7ff fc04 	bl	8000234 <_ZN3PinC1Ev>
Pin nav_btn_pin;
 8000a2c:	4b31      	ldr	r3, [pc, #196]	; (8000af4 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f7ff fc00 	bl	8000234 <_ZN3PinC1Ev>
Pin ap_btn_pin;
 8000a34:	4b30      	ldr	r3, [pc, #192]	; (8000af8 <_Z41__static_initialization_and_destruction_0ii+0x190>)
 8000a36:	0018      	movs	r0, r3
 8000a38:	f7ff fbfc 	bl	8000234 <_ZN3PinC1Ev>
Pin spd_btn_pin;
 8000a3c:	4b2f      	ldr	r3, [pc, #188]	; (8000afc <_Z41__static_initialization_and_destruction_0ii+0x194>)
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f7ff fbf8 	bl	8000234 <_ZN3PinC1Ev>
Pin vnv_btn_pin;
 8000a44:	4b2e      	ldr	r3, [pc, #184]	; (8000b00 <_Z41__static_initialization_and_destruction_0ii+0x198>)
 8000a46:	0018      	movs	r0, r3
 8000a48:	f7ff fbf4 	bl	8000234 <_ZN3PinC1Ev>
Pin vs_btn_pin;
 8000a4c:	4b2d      	ldr	r3, [pc, #180]	; (8000b04 <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f7ff fbf0 	bl	8000234 <_ZN3PinC1Ev>
Pin xfr_btn_pin;
 8000a54:	4b2c      	ldr	r3, [pc, #176]	; (8000b08 <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 8000a56:	0018      	movs	r0, r3
 8000a58:	f7ff fbec 	bl	8000234 <_ZN3PinC1Ev>
Pin yd_btn_pin;
 8000a5c:	4b2b      	ldr	r3, [pc, #172]	; (8000b0c <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f7ff fbe8 	bl	8000234 <_ZN3PinC1Ev>
Pin status_ind_pin;
 8000a64:	4b2a      	ldr	r3, [pc, #168]	; (8000b10 <_Z41__static_initialization_and_destruction_0ii+0x1a8>)
 8000a66:	0018      	movs	r0, r3
 8000a68:	f7ff fbe4 	bl	8000234 <_ZN3PinC1Ev>
Pin usart_inval_pin;
 8000a6c:	4b29      	ldr	r3, [pc, #164]	; (8000b14 <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f7ff fbe0 	bl	8000234 <_ZN3PinC1Ev>
Pin usb_usart_sel_pin;
 8000a74:	4b28      	ldr	r3, [pc, #160]	; (8000b18 <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 8000a76:	0018      	movs	r0, r3
 8000a78:	f7ff fbdc 	bl	8000234 <_ZN3PinC1Ev>
Pin brgt_cs_pin;
 8000a7c:	4b27      	ldr	r3, [pc, #156]	; (8000b1c <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f7ff fbd8 	bl	8000234 <_ZN3PinC1Ev>
Pin brgt_ud_pin;
 8000a84:	4b26      	ldr	r3, [pc, #152]	; (8000b20 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8000a86:	0018      	movs	r0, r3
 8000a88:	f7ff fbd4 	bl	8000234 <_ZN3PinC1Ev>
Pin ind_la_pin;
 8000a8c:	4b25      	ldr	r3, [pc, #148]	; (8000b24 <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f7ff fbd0 	bl	8000234 <_ZN3PinC1Ev>
}
 8000a94:	46c0      	nop			; (mov r8, r8)
 8000a96:	46bd      	mov	sp, r7
 8000a98:	b002      	add	sp, #8
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	0000ffff 	.word	0x0000ffff
 8000aa0:	200001f4 	.word	0x200001f4
 8000aa4:	20000200 	.word	0x20000200
 8000aa8:	2000020c 	.word	0x2000020c
 8000aac:	20000218 	.word	0x20000218
 8000ab0:	20000224 	.word	0x20000224
 8000ab4:	20000230 	.word	0x20000230
 8000ab8:	2000023c 	.word	0x2000023c
 8000abc:	20000248 	.word	0x20000248
 8000ac0:	20000254 	.word	0x20000254
 8000ac4:	20000260 	.word	0x20000260
 8000ac8:	2000026c 	.word	0x2000026c
 8000acc:	20000278 	.word	0x20000278
 8000ad0:	20000284 	.word	0x20000284
 8000ad4:	20000290 	.word	0x20000290
 8000ad8:	2000029c 	.word	0x2000029c
 8000adc:	200002a8 	.word	0x200002a8
 8000ae0:	200002b4 	.word	0x200002b4
 8000ae4:	200002c0 	.word	0x200002c0
 8000ae8:	200002cc 	.word	0x200002cc
 8000aec:	200002d8 	.word	0x200002d8
 8000af0:	200002e4 	.word	0x200002e4
 8000af4:	200002f0 	.word	0x200002f0
 8000af8:	200002fc 	.word	0x200002fc
 8000afc:	20000308 	.word	0x20000308
 8000b00:	20000314 	.word	0x20000314
 8000b04:	20000320 	.word	0x20000320
 8000b08:	2000032c 	.word	0x2000032c
 8000b0c:	20000338 	.word	0x20000338
 8000b10:	20000344 	.word	0x20000344
 8000b14:	20000350 	.word	0x20000350
 8000b18:	2000035c 	.word	0x2000035c
 8000b1c:	20000368 	.word	0x20000368
 8000b20:	20000374 	.word	0x20000374
 8000b24:	20000380 	.word	0x20000380

08000b28 <_GLOBAL__sub_I_h_usb>:
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	4b03      	ldr	r3, [pc, #12]	; (8000b3c <_GLOBAL__sub_I_h_usb+0x14>)
 8000b2e:	0019      	movs	r1, r3
 8000b30:	2001      	movs	r0, #1
 8000b32:	f7ff ff19 	bl	8000968 <_Z41__static_initialization_and_destruction_0ii>
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	0000ffff 	.word	0x0000ffff

08000b40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b40:	b590      	push	{r4, r7, lr}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b46:	f000 fe1d 	bl	8001784 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b4a:	f000 f82b 	bl	8000ba4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_Delay(1);
 8000b4e:	2001      	movs	r0, #1
 8000b50:	f000 fe7c 	bl	800184c <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b54:	f000 fa4e 	bl	8000ff4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b58:	f000 fa2e 	bl	8000fb8 <MX_DMA_Init>
  MX_SPI1_Init();
 8000b5c:	f000 f8fe 	bl	8000d5c <MX_SPI1_Init>
  MX_TIM15_Init();
 8000b60:	f000 f93a 	bl	8000dd8 <MX_TIM15_Init>
  MX_USART3_UART_Init();
 8000b64:	f000 f9f8 	bl	8000f58 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8000b68:	f008 ff0c 	bl	8009984 <MX_USB_DEVICE_Init>
  MX_ADC_Init();
 8000b6c:	f000 f880 	bl	8000c70 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  if (Init(&hadc, &hspi1, &hdma_spi1_tx, &htim15, &huart3) != HAL_OK)
 8000b70:	4c07      	ldr	r4, [pc, #28]	; (8000b90 <main+0x50>)
 8000b72:	4a08      	ldr	r2, [pc, #32]	; (8000b94 <main+0x54>)
 8000b74:	4908      	ldr	r1, [pc, #32]	; (8000b98 <main+0x58>)
 8000b76:	4809      	ldr	r0, [pc, #36]	; (8000b9c <main+0x5c>)
 8000b78:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <main+0x60>)
 8000b7a:	9300      	str	r3, [sp, #0]
 8000b7c:	0023      	movs	r3, r4
 8000b7e:	f7ff fe83 	bl	8000888 <Init>
 8000b82:	1e03      	subs	r3, r0, #0
 8000b84:	d001      	beq.n	8000b8a <main+0x4a>
  {
	  Error_Handler();
 8000b86:	f000 fb3f 	bl	8001208 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Main();
 8000b8a:	f7ff febd 	bl	8000908 <Main>
 8000b8e:	e7fc      	b.n	8000b8a <main+0x4a>
 8000b90:	20000478 	.word	0x20000478
 8000b94:	20000434 	.word	0x20000434
 8000b98:	200003d0 	.word	0x200003d0
 8000b9c:	20000390 	.word	0x20000390
 8000ba0:	200004c0 	.word	0x200004c0

08000ba4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba4:	b590      	push	{r4, r7, lr}
 8000ba6:	b097      	sub	sp, #92	; 0x5c
 8000ba8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000baa:	2428      	movs	r4, #40	; 0x28
 8000bac:	193b      	adds	r3, r7, r4
 8000bae:	0018      	movs	r0, r3
 8000bb0:	2330      	movs	r3, #48	; 0x30
 8000bb2:	001a      	movs	r2, r3
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	f009 fc99 	bl	800a4ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bba:	2318      	movs	r3, #24
 8000bbc:	18fb      	adds	r3, r7, r3
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	2310      	movs	r3, #16
 8000bc2:	001a      	movs	r2, r3
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	f009 fc91 	bl	800a4ec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	0018      	movs	r0, r3
 8000bce:	2314      	movs	r3, #20
 8000bd0:	001a      	movs	r2, r3
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	f009 fc8a 	bl	800a4ec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 8000bd8:	0021      	movs	r1, r4
 8000bda:	187b      	adds	r3, r7, r1
 8000bdc:	2211      	movs	r2, #17
 8000bde:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000be0:	187b      	adds	r3, r7, r1
 8000be2:	2201      	movs	r2, #1
 8000be4:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000be6:	187b      	adds	r3, r7, r1
 8000be8:	2201      	movs	r2, #1
 8000bea:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000bec:	187b      	adds	r3, r7, r1
 8000bee:	2210      	movs	r2, #16
 8000bf0:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf2:	187b      	adds	r3, r7, r1
 8000bf4:	2202      	movs	r2, #2
 8000bf6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bf8:	187b      	adds	r3, r7, r1
 8000bfa:	2280      	movs	r2, #128	; 0x80
 8000bfc:	0252      	lsls	r2, r2, #9
 8000bfe:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 8000c00:	187b      	adds	r3, r7, r1
 8000c02:	22d0      	movs	r2, #208	; 0xd0
 8000c04:	0392      	lsls	r2, r2, #14
 8000c06:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV5;
 8000c08:	187b      	adds	r3, r7, r1
 8000c0a:	2204      	movs	r2, #4
 8000c0c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c0e:	187b      	adds	r3, r7, r1
 8000c10:	0018      	movs	r0, r3
 8000c12:	f003 fa3b 	bl	800408c <HAL_RCC_OscConfig>
 8000c16:	1e03      	subs	r3, r0, #0
 8000c18:	d001      	beq.n	8000c1e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000c1a:	f000 faf5 	bl	8001208 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c1e:	2118      	movs	r1, #24
 8000c20:	187b      	adds	r3, r7, r1
 8000c22:	2207      	movs	r2, #7
 8000c24:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c26:	187b      	adds	r3, r7, r1
 8000c28:	2202      	movs	r2, #2
 8000c2a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000c2c:	187b      	adds	r3, r7, r1
 8000c2e:	2280      	movs	r2, #128	; 0x80
 8000c30:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c32:	187b      	adds	r3, r7, r1
 8000c34:	2200      	movs	r2, #0
 8000c36:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c38:	187b      	adds	r3, r7, r1
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f003 fd43 	bl	80046c8 <HAL_RCC_ClockConfig>
 8000c42:	1e03      	subs	r3, r0, #0
 8000c44:	d001      	beq.n	8000c4a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000c46:	f000 fadf 	bl	8001208 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	2280      	movs	r2, #128	; 0x80
 8000c4e:	0292      	lsls	r2, r2, #10
 8000c50:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	2280      	movs	r2, #128	; 0x80
 8000c56:	611a      	str	r2, [r3, #16]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f003 fe7c 	bl	8004958 <HAL_RCCEx_PeriphCLKConfig>
 8000c60:	1e03      	subs	r3, r0, #0
 8000c62:	d001      	beq.n	8000c68 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000c64:	f000 fad0 	bl	8001208 <Error_Handler>
  }
}
 8000c68:	46c0      	nop			; (mov r8, r8)
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	b017      	add	sp, #92	; 0x5c
 8000c6e:	bd90      	pop	{r4, r7, pc}

08000c70 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	0018      	movs	r0, r3
 8000c7a:	230c      	movs	r3, #12
 8000c7c:	001a      	movs	r2, r3
 8000c7e:	2100      	movs	r1, #0
 8000c80:	f009 fc34 	bl	800a4ec <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000c84:	4b33      	ldr	r3, [pc, #204]	; (8000d54 <MX_ADC_Init+0xe4>)
 8000c86:	4a34      	ldr	r2, [pc, #208]	; (8000d58 <MX_ADC_Init+0xe8>)
 8000c88:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c8a:	4b32      	ldr	r3, [pc, #200]	; (8000d54 <MX_ADC_Init+0xe4>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000c90:	4b30      	ldr	r3, [pc, #192]	; (8000d54 <MX_ADC_Init+0xe4>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c96:	4b2f      	ldr	r3, [pc, #188]	; (8000d54 <MX_ADC_Init+0xe4>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000c9c:	4b2d      	ldr	r3, [pc, #180]	; (8000d54 <MX_ADC_Init+0xe4>)
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ca2:	4b2c      	ldr	r3, [pc, #176]	; (8000d54 <MX_ADC_Init+0xe4>)
 8000ca4:	2204      	movs	r2, #4
 8000ca6:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000ca8:	4b2a      	ldr	r3, [pc, #168]	; (8000d54 <MX_ADC_Init+0xe4>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000cae:	4b29      	ldr	r3, [pc, #164]	; (8000d54 <MX_ADC_Init+0xe4>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000cb4:	4b27      	ldr	r3, [pc, #156]	; (8000d54 <MX_ADC_Init+0xe4>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000cba:	4b26      	ldr	r3, [pc, #152]	; (8000d54 <MX_ADC_Init+0xe4>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cc0:	4b24      	ldr	r3, [pc, #144]	; (8000d54 <MX_ADC_Init+0xe4>)
 8000cc2:	22c2      	movs	r2, #194	; 0xc2
 8000cc4:	32ff      	adds	r2, #255	; 0xff
 8000cc6:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cc8:	4b22      	ldr	r3, [pc, #136]	; (8000d54 <MX_ADC_Init+0xe4>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000cce:	4b21      	ldr	r3, [pc, #132]	; (8000d54 <MX_ADC_Init+0xe4>)
 8000cd0:	2224      	movs	r2, #36	; 0x24
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cd6:	4b1f      	ldr	r3, [pc, #124]	; (8000d54 <MX_ADC_Init+0xe4>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000cdc:	4b1d      	ldr	r3, [pc, #116]	; (8000d54 <MX_ADC_Init+0xe4>)
 8000cde:	0018      	movs	r0, r3
 8000ce0:	f000 fdd8 	bl	8001894 <HAL_ADC_Init>
 8000ce4:	1e03      	subs	r3, r0, #0
 8000ce6:	d001      	beq.n	8000cec <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000ce8:	f000 fa8e 	bl	8001208 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000cec:	1d3b      	adds	r3, r7, #4
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	2280      	movs	r2, #128	; 0x80
 8000cf6:	0152      	lsls	r2, r2, #5
 8000cf8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000cfa:	1d3b      	adds	r3, r7, #4
 8000cfc:	2280      	movs	r2, #128	; 0x80
 8000cfe:	0552      	lsls	r2, r2, #21
 8000d00:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000d02:	1d3a      	adds	r2, r7, #4
 8000d04:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <MX_ADC_Init+0xe4>)
 8000d06:	0011      	movs	r1, r2
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f000 ff03 	bl	8001b14 <HAL_ADC_ConfigChannel>
 8000d0e:	1e03      	subs	r3, r0, #0
 8000d10:	d001      	beq.n	8000d16 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000d12:	f000 fa79 	bl	8001208 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	2201      	movs	r2, #1
 8000d1a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000d1c:	1d3a      	adds	r2, r7, #4
 8000d1e:	4b0d      	ldr	r3, [pc, #52]	; (8000d54 <MX_ADC_Init+0xe4>)
 8000d20:	0011      	movs	r1, r2
 8000d22:	0018      	movs	r0, r3
 8000d24:	f000 fef6 	bl	8001b14 <HAL_ADC_ConfigChannel>
 8000d28:	1e03      	subs	r3, r0, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8000d2c:	f000 fa6c 	bl	8001208 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000d30:	1d3b      	adds	r3, r7, #4
 8000d32:	2210      	movs	r2, #16
 8000d34:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000d36:	1d3a      	adds	r2, r7, #4
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <MX_ADC_Init+0xe4>)
 8000d3a:	0011      	movs	r1, r2
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f000 fee9 	bl	8001b14 <HAL_ADC_ConfigChannel>
 8000d42:	1e03      	subs	r3, r0, #0
 8000d44:	d001      	beq.n	8000d4a <MX_ADC_Init+0xda>
  {
    Error_Handler();
 8000d46:	f000 fa5f 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000d4a:	46c0      	nop			; (mov r8, r8)
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	b004      	add	sp, #16
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	46c0      	nop			; (mov r8, r8)
 8000d54:	20000390 	.word	0x20000390
 8000d58:	40012400 	.word	0x40012400

08000d5c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d60:	4b1b      	ldr	r3, [pc, #108]	; (8000dd0 <MX_SPI1_Init+0x74>)
 8000d62:	4a1c      	ldr	r2, [pc, #112]	; (8000dd4 <MX_SPI1_Init+0x78>)
 8000d64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d66:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <MX_SPI1_Init+0x74>)
 8000d68:	2282      	movs	r2, #130	; 0x82
 8000d6a:	0052      	lsls	r2, r2, #1
 8000d6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d6e:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <MX_SPI1_Init+0x74>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d74:	4b16      	ldr	r3, [pc, #88]	; (8000dd0 <MX_SPI1_Init+0x74>)
 8000d76:	22c0      	movs	r2, #192	; 0xc0
 8000d78:	0092      	lsls	r2, r2, #2
 8000d7a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d7c:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <MX_SPI1_Init+0x74>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d82:	4b13      	ldr	r3, [pc, #76]	; (8000dd0 <MX_SPI1_Init+0x74>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <MX_SPI1_Init+0x74>)
 8000d8a:	2280      	movs	r2, #128	; 0x80
 8000d8c:	0092      	lsls	r2, r2, #2
 8000d8e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000d90:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <MX_SPI1_Init+0x74>)
 8000d92:	2208      	movs	r2, #8
 8000d94:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d96:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <MX_SPI1_Init+0x74>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <MX_SPI1_Init+0x74>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000da2:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <MX_SPI1_Init+0x74>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000da8:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <MX_SPI1_Init+0x74>)
 8000daa:	2207      	movs	r2, #7
 8000dac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dae:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <MX_SPI1_Init+0x74>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <MX_SPI1_Init+0x74>)
 8000db6:	2208      	movs	r2, #8
 8000db8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dba:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <MX_SPI1_Init+0x74>)
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f003 fea9 	bl	8004b14 <HAL_SPI_Init>
 8000dc2:	1e03      	subs	r3, r0, #0
 8000dc4:	d001      	beq.n	8000dca <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000dc6:	f000 fa1f 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	200003d0 	.word	0x200003d0
 8000dd4:	40013000 	.word	0x40013000

08000dd8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b096      	sub	sp, #88	; 0x58
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dde:	2348      	movs	r3, #72	; 0x48
 8000de0:	18fb      	adds	r3, r7, r3
 8000de2:	0018      	movs	r0, r3
 8000de4:	2310      	movs	r3, #16
 8000de6:	001a      	movs	r2, r3
 8000de8:	2100      	movs	r1, #0
 8000dea:	f009 fb7f 	bl	800a4ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dee:	2340      	movs	r3, #64	; 0x40
 8000df0:	18fb      	adds	r3, r7, r3
 8000df2:	0018      	movs	r0, r3
 8000df4:	2308      	movs	r3, #8
 8000df6:	001a      	movs	r2, r3
 8000df8:	2100      	movs	r1, #0
 8000dfa:	f009 fb77 	bl	800a4ec <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dfe:	2324      	movs	r3, #36	; 0x24
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	0018      	movs	r0, r3
 8000e04:	231c      	movs	r3, #28
 8000e06:	001a      	movs	r2, r3
 8000e08:	2100      	movs	r1, #0
 8000e0a:	f009 fb6f 	bl	800a4ec <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e0e:	1d3b      	adds	r3, r7, #4
 8000e10:	0018      	movs	r0, r3
 8000e12:	2320      	movs	r3, #32
 8000e14:	001a      	movs	r2, r3
 8000e16:	2100      	movs	r1, #0
 8000e18:	f009 fb68 	bl	800a4ec <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000e1c:	4b4b      	ldr	r3, [pc, #300]	; (8000f4c <MX_TIM15_Init+0x174>)
 8000e1e:	4a4c      	ldr	r2, [pc, #304]	; (8000f50 <MX_TIM15_Init+0x178>)
 8000e20:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000e22:	4b4a      	ldr	r3, [pc, #296]	; (8000f4c <MX_TIM15_Init+0x174>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e28:	4b48      	ldr	r3, [pc, #288]	; (8000f4c <MX_TIM15_Init+0x174>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000e2e:	4b47      	ldr	r3, [pc, #284]	; (8000f4c <MX_TIM15_Init+0x174>)
 8000e30:	4a48      	ldr	r2, [pc, #288]	; (8000f54 <MX_TIM15_Init+0x17c>)
 8000e32:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e34:	4b45      	ldr	r3, [pc, #276]	; (8000f4c <MX_TIM15_Init+0x174>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000e3a:	4b44      	ldr	r3, [pc, #272]	; (8000f4c <MX_TIM15_Init+0x174>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e40:	4b42      	ldr	r3, [pc, #264]	; (8000f4c <MX_TIM15_Init+0x174>)
 8000e42:	2280      	movs	r2, #128	; 0x80
 8000e44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000e46:	4b41      	ldr	r3, [pc, #260]	; (8000f4c <MX_TIM15_Init+0x174>)
 8000e48:	0018      	movs	r0, r3
 8000e4a:	f003 ff1b 	bl	8004c84 <HAL_TIM_Base_Init>
 8000e4e:	1e03      	subs	r3, r0, #0
 8000e50:	d001      	beq.n	8000e56 <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 8000e52:	f000 f9d9 	bl	8001208 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e56:	2148      	movs	r1, #72	; 0x48
 8000e58:	187b      	adds	r3, r7, r1
 8000e5a:	2280      	movs	r2, #128	; 0x80
 8000e5c:	0152      	lsls	r2, r2, #5
 8000e5e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000e60:	187a      	adds	r2, r7, r1
 8000e62:	4b3a      	ldr	r3, [pc, #232]	; (8000f4c <MX_TIM15_Init+0x174>)
 8000e64:	0011      	movs	r1, r2
 8000e66:	0018      	movs	r0, r3
 8000e68:	f004 f87a 	bl	8004f60 <HAL_TIM_ConfigClockSource>
 8000e6c:	1e03      	subs	r3, r0, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 8000e70:	f000 f9ca 	bl	8001208 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000e74:	4b35      	ldr	r3, [pc, #212]	; (8000f4c <MX_TIM15_Init+0x174>)
 8000e76:	0018      	movs	r0, r3
 8000e78:	f003 ff54 	bl	8004d24 <HAL_TIM_PWM_Init>
 8000e7c:	1e03      	subs	r3, r0, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 8000e80:	f000 f9c2 	bl	8001208 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e84:	2140      	movs	r1, #64	; 0x40
 8000e86:	187b      	adds	r3, r7, r1
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e8c:	187b      	adds	r3, r7, r1
 8000e8e:	2200      	movs	r2, #0
 8000e90:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000e92:	187a      	adds	r2, r7, r1
 8000e94:	4b2d      	ldr	r3, [pc, #180]	; (8000f4c <MX_TIM15_Init+0x174>)
 8000e96:	0011      	movs	r1, r2
 8000e98:	0018      	movs	r0, r3
 8000e9a:	f004 fc41 	bl	8005720 <HAL_TIMEx_MasterConfigSynchronization>
 8000e9e:	1e03      	subs	r3, r0, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 8000ea2:	f000 f9b1 	bl	8001208 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ea6:	2124      	movs	r1, #36	; 0x24
 8000ea8:	187b      	adds	r3, r7, r1
 8000eaa:	2260      	movs	r2, #96	; 0x60
 8000eac:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000eae:	187b      	adds	r3, r7, r1
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eb4:	187b      	adds	r3, r7, r1
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000eba:	187b      	adds	r3, r7, r1
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ec0:	187b      	adds	r3, r7, r1
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ec6:	187b      	adds	r3, r7, r1
 8000ec8:	2200      	movs	r2, #0
 8000eca:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ecc:	187b      	adds	r3, r7, r1
 8000ece:	2200      	movs	r2, #0
 8000ed0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ed2:	1879      	adds	r1, r7, r1
 8000ed4:	4b1d      	ldr	r3, [pc, #116]	; (8000f4c <MX_TIM15_Init+0x174>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f003 ff7b 	bl	8004dd4 <HAL_TIM_PWM_ConfigChannel>
 8000ede:	1e03      	subs	r3, r0, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8000ee2:	f000 f991 	bl	8001208 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ee6:	2324      	movs	r3, #36	; 0x24
 8000ee8:	18f9      	adds	r1, r7, r3
 8000eea:	4b18      	ldr	r3, [pc, #96]	; (8000f4c <MX_TIM15_Init+0x174>)
 8000eec:	2204      	movs	r2, #4
 8000eee:	0018      	movs	r0, r3
 8000ef0:	f003 ff70 	bl	8004dd4 <HAL_TIM_PWM_ConfigChannel>
 8000ef4:	1e03      	subs	r3, r0, #0
 8000ef6:	d001      	beq.n	8000efc <MX_TIM15_Init+0x124>
  {
    Error_Handler();
 8000ef8:	f000 f986 	bl	8001208 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000efc:	1d3b      	adds	r3, r7, #4
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	2200      	movs	r2, #0
 8000f06:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f08:	1d3b      	adds	r3, r7, #4
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	2200      	movs	r2, #0
 8000f12:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f14:	1d3b      	adds	r3, r7, #4
 8000f16:	2200      	movs	r2, #0
 8000f18:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	2280      	movs	r2, #128	; 0x80
 8000f1e:	0192      	lsls	r2, r2, #6
 8000f20:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	2200      	movs	r2, #0
 8000f26:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000f28:	1d3a      	adds	r2, r7, #4
 8000f2a:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <MX_TIM15_Init+0x174>)
 8000f2c:	0011      	movs	r1, r2
 8000f2e:	0018      	movs	r0, r3
 8000f30:	f004 fc4e 	bl	80057d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f34:	1e03      	subs	r3, r0, #0
 8000f36:	d001      	beq.n	8000f3c <MX_TIM15_Init+0x164>
  {
    Error_Handler();
 8000f38:	f000 f966 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000f3c:	4b03      	ldr	r3, [pc, #12]	; (8000f4c <MX_TIM15_Init+0x174>)
 8000f3e:	0018      	movs	r0, r3
 8000f40:	f000 fa72 	bl	8001428 <HAL_TIM_MspPostInit>

}
 8000f44:	46c0      	nop			; (mov r8, r8)
 8000f46:	46bd      	mov	sp, r7
 8000f48:	b016      	add	sp, #88	; 0x58
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20000478 	.word	0x20000478
 8000f50:	40014000 	.word	0x40014000
 8000f54:	0000ffff 	.word	0x0000ffff

08000f58 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f5c:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <MX_USART3_UART_Init+0x58>)
 8000f5e:	4a15      	ldr	r2, [pc, #84]	; (8000fb4 <MX_USART3_UART_Init+0x5c>)
 8000f60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000f62:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <MX_USART3_UART_Init+0x58>)
 8000f64:	2296      	movs	r2, #150	; 0x96
 8000f66:	0212      	lsls	r2, r2, #8
 8000f68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f6a:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <MX_USART3_UART_Init+0x58>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f70:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <MX_USART3_UART_Init+0x58>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <MX_USART3_UART_Init+0x58>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <MX_USART3_UART_Init+0x58>)
 8000f7e:	220c      	movs	r2, #12
 8000f80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f82:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <MX_USART3_UART_Init+0x58>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f88:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <MX_USART3_UART_Init+0x58>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <MX_USART3_UART_Init+0x58>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <MX_USART3_UART_Init+0x58>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f9a:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <MX_USART3_UART_Init+0x58>)
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	f004 fc75 	bl	800588c <HAL_UART_Init>
 8000fa2:	1e03      	subs	r3, r0, #0
 8000fa4:	d001      	beq.n	8000faa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000fa6:	f000 f92f 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000faa:	46c0      	nop			; (mov r8, r8)
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	200004c0 	.word	0x200004c0
 8000fb4:	40004800 	.word	0x40004800

08000fb8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <MX_DMA_Init+0x38>)
 8000fc0:	695a      	ldr	r2, [r3, #20]
 8000fc2:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <MX_DMA_Init+0x38>)
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	430a      	orrs	r2, r1
 8000fc8:	615a      	str	r2, [r3, #20]
 8000fca:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <MX_DMA_Init+0x38>)
 8000fcc:	695b      	ldr	r3, [r3, #20]
 8000fce:	2201      	movs	r2, #1
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2100      	movs	r1, #0
 8000fda:	200a      	movs	r0, #10
 8000fdc:	f000 ff3c 	bl	8001e58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000fe0:	200a      	movs	r0, #10
 8000fe2:	f000 ff4e 	bl	8001e82 <HAL_NVIC_EnableIRQ>

}
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	b002      	add	sp, #8
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	46c0      	nop			; (mov r8, r8)
 8000ff0:	40021000 	.word	0x40021000

08000ff4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ff4:	b590      	push	{r4, r7, lr}
 8000ff6:	b08b      	sub	sp, #44	; 0x2c
 8000ff8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffa:	2414      	movs	r4, #20
 8000ffc:	193b      	adds	r3, r7, r4
 8000ffe:	0018      	movs	r0, r3
 8001000:	2314      	movs	r3, #20
 8001002:	001a      	movs	r2, r3
 8001004:	2100      	movs	r1, #0
 8001006:	f009 fa71 	bl	800a4ec <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800100a:	4b77      	ldr	r3, [pc, #476]	; (80011e8 <MX_GPIO_Init+0x1f4>)
 800100c:	695a      	ldr	r2, [r3, #20]
 800100e:	4b76      	ldr	r3, [pc, #472]	; (80011e8 <MX_GPIO_Init+0x1f4>)
 8001010:	2180      	movs	r1, #128	; 0x80
 8001012:	0309      	lsls	r1, r1, #12
 8001014:	430a      	orrs	r2, r1
 8001016:	615a      	str	r2, [r3, #20]
 8001018:	4b73      	ldr	r3, [pc, #460]	; (80011e8 <MX_GPIO_Init+0x1f4>)
 800101a:	695a      	ldr	r2, [r3, #20]
 800101c:	2380      	movs	r3, #128	; 0x80
 800101e:	031b      	lsls	r3, r3, #12
 8001020:	4013      	ands	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001026:	4b70      	ldr	r3, [pc, #448]	; (80011e8 <MX_GPIO_Init+0x1f4>)
 8001028:	695a      	ldr	r2, [r3, #20]
 800102a:	4b6f      	ldr	r3, [pc, #444]	; (80011e8 <MX_GPIO_Init+0x1f4>)
 800102c:	2180      	movs	r1, #128	; 0x80
 800102e:	03c9      	lsls	r1, r1, #15
 8001030:	430a      	orrs	r2, r1
 8001032:	615a      	str	r2, [r3, #20]
 8001034:	4b6c      	ldr	r3, [pc, #432]	; (80011e8 <MX_GPIO_Init+0x1f4>)
 8001036:	695a      	ldr	r2, [r3, #20]
 8001038:	2380      	movs	r3, #128	; 0x80
 800103a:	03db      	lsls	r3, r3, #15
 800103c:	4013      	ands	r3, r2
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001042:	4b69      	ldr	r3, [pc, #420]	; (80011e8 <MX_GPIO_Init+0x1f4>)
 8001044:	695a      	ldr	r2, [r3, #20]
 8001046:	4b68      	ldr	r3, [pc, #416]	; (80011e8 <MX_GPIO_Init+0x1f4>)
 8001048:	2180      	movs	r1, #128	; 0x80
 800104a:	0289      	lsls	r1, r1, #10
 800104c:	430a      	orrs	r2, r1
 800104e:	615a      	str	r2, [r3, #20]
 8001050:	4b65      	ldr	r3, [pc, #404]	; (80011e8 <MX_GPIO_Init+0x1f4>)
 8001052:	695a      	ldr	r2, [r3, #20]
 8001054:	2380      	movs	r3, #128	; 0x80
 8001056:	029b      	lsls	r3, r3, #10
 8001058:	4013      	ands	r3, r2
 800105a:	60bb      	str	r3, [r7, #8]
 800105c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800105e:	4b62      	ldr	r3, [pc, #392]	; (80011e8 <MX_GPIO_Init+0x1f4>)
 8001060:	695a      	ldr	r2, [r3, #20]
 8001062:	4b61      	ldr	r3, [pc, #388]	; (80011e8 <MX_GPIO_Init+0x1f4>)
 8001064:	2180      	movs	r1, #128	; 0x80
 8001066:	02c9      	lsls	r1, r1, #11
 8001068:	430a      	orrs	r2, r1
 800106a:	615a      	str	r2, [r3, #20]
 800106c:	4b5e      	ldr	r3, [pc, #376]	; (80011e8 <MX_GPIO_Init+0x1f4>)
 800106e:	695a      	ldr	r2, [r3, #20]
 8001070:	2380      	movs	r3, #128	; 0x80
 8001072:	02db      	lsls	r3, r3, #11
 8001074:	4013      	ands	r3, r2
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800107a:	4b5b      	ldr	r3, [pc, #364]	; (80011e8 <MX_GPIO_Init+0x1f4>)
 800107c:	695a      	ldr	r2, [r3, #20]
 800107e:	4b5a      	ldr	r3, [pc, #360]	; (80011e8 <MX_GPIO_Init+0x1f4>)
 8001080:	2180      	movs	r1, #128	; 0x80
 8001082:	0349      	lsls	r1, r1, #13
 8001084:	430a      	orrs	r2, r1
 8001086:	615a      	str	r2, [r3, #20]
 8001088:	4b57      	ldr	r3, [pc, #348]	; (80011e8 <MX_GPIO_Init+0x1f4>)
 800108a:	695a      	ldr	r2, [r3, #20]
 800108c:	2380      	movs	r3, #128	; 0x80
 800108e:	035b      	lsls	r3, r3, #13
 8001090:	4013      	ands	r3, r2
 8001092:	603b      	str	r3, [r7, #0]
 8001094:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_OUT_Pin|BRGT_CS_Pin|BRGT_UD_Pin|STATUS_IND_Pin, GPIO_PIN_RESET);
 8001096:	4955      	ldr	r1, [pc, #340]	; (80011ec <MX_GPIO_Init+0x1f8>)
 8001098:	4b55      	ldr	r3, [pc, #340]	; (80011f0 <MX_GPIO_Init+0x1fc>)
 800109a:	2200      	movs	r2, #0
 800109c:	0018      	movs	r0, r3
 800109e:	f001 f9a0 	bl	80023e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IND_LATCH_GPIO_Port, IND_LATCH_Pin, GPIO_PIN_RESET);
 80010a2:	2390      	movs	r3, #144	; 0x90
 80010a4:	05db      	lsls	r3, r3, #23
 80010a6:	2200      	movs	r2, #0
 80010a8:	2140      	movs	r1, #64	; 0x40
 80010aa:	0018      	movs	r0, r3
 80010ac:	f001 f999 	bl	80023e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_OUT_Pin BRGT_CS_Pin BRGT_UD_Pin STATUS_IND_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT_Pin|BRGT_CS_Pin|BRGT_UD_Pin|STATUS_IND_Pin;
 80010b0:	193b      	adds	r3, r7, r4
 80010b2:	4a4e      	ldr	r2, [pc, #312]	; (80011ec <MX_GPIO_Init+0x1f8>)
 80010b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b6:	193b      	adds	r3, r7, r4
 80010b8:	2201      	movs	r2, #1
 80010ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	193b      	adds	r3, r7, r4
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c2:	193b      	adds	r3, r7, r4
 80010c4:	2200      	movs	r2, #0
 80010c6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010c8:	193b      	adds	r3, r7, r4
 80010ca:	4a49      	ldr	r2, [pc, #292]	; (80011f0 <MX_GPIO_Init+0x1fc>)
 80010cc:	0019      	movs	r1, r3
 80010ce:	0010      	movs	r0, r2
 80010d0:	f000 fffa 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : WHEEL_A_Pin */
  GPIO_InitStruct.Pin = WHEEL_A_Pin;
 80010d4:	0021      	movs	r1, r4
 80010d6:	187b      	adds	r3, r7, r1
 80010d8:	2204      	movs	r2, #4
 80010da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010dc:	187b      	adds	r3, r7, r1
 80010de:	2288      	movs	r2, #136	; 0x88
 80010e0:	0352      	lsls	r2, r2, #13
 80010e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	000c      	movs	r4, r1
 80010e6:	193b      	adds	r3, r7, r4
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(WHEEL_A_GPIO_Port, &GPIO_InitStruct);
 80010ec:	193b      	adds	r3, r7, r4
 80010ee:	4a40      	ldr	r2, [pc, #256]	; (80011f0 <MX_GPIO_Init+0x1fc>)
 80010f0:	0019      	movs	r1, r3
 80010f2:	0010      	movs	r0, r2
 80010f4:	f000 ffe8 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : WHEEL_B_Pin ALT_B_Pin AP_BTN_Pin ALT_SW_Pin
                           BANK_BTN_Pin CRS1_B_Pin CRS1_SW_Pin BC_BTN_Pin */
  GPIO_InitStruct.Pin = WHEEL_B_Pin|ALT_B_Pin|AP_BTN_Pin|ALT_SW_Pin
 80010f8:	193b      	adds	r3, r7, r4
 80010fa:	4a3e      	ldr	r2, [pc, #248]	; (80011f4 <MX_GPIO_Init+0x200>)
 80010fc:	601a      	str	r2, [r3, #0]
                          |BANK_BTN_Pin|CRS1_B_Pin|CRS1_SW_Pin|BC_BTN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010fe:	193b      	adds	r3, r7, r4
 8001100:	2200      	movs	r2, #0
 8001102:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	193b      	adds	r3, r7, r4
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800110a:	193b      	adds	r3, r7, r4
 800110c:	4a38      	ldr	r2, [pc, #224]	; (80011f0 <MX_GPIO_Init+0x1fc>)
 800110e:	0019      	movs	r1, r3
 8001110:	0010      	movs	r0, r2
 8001112:	f000 ffd9 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ALT_BTN_Pin VS_BTN_Pin FD_BTN_Pin YD_BTN_Pin
                           XFR_BTN_Pin */
  GPIO_InitStruct.Pin = ALT_BTN_Pin|VS_BTN_Pin|FD_BTN_Pin|YD_BTN_Pin
 8001116:	193b      	adds	r3, r7, r4
 8001118:	22e3      	movs	r2, #227	; 0xe3
 800111a:	00d2      	lsls	r2, r2, #3
 800111c:	601a      	str	r2, [r3, #0]
                          |XFR_BTN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800111e:	193b      	adds	r3, r7, r4
 8001120:	2200      	movs	r2, #0
 8001122:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	193b      	adds	r3, r7, r4
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112a:	193a      	adds	r2, r7, r4
 800112c:	2390      	movs	r3, #144	; 0x90
 800112e:	05db      	lsls	r3, r3, #23
 8001130:	0011      	movs	r1, r2
 8001132:	0018      	movs	r0, r3
 8001134:	f000 ffc8 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IND_LATCH_Pin */
  GPIO_InitStruct.Pin = IND_LATCH_Pin;
 8001138:	193b      	adds	r3, r7, r4
 800113a:	2240      	movs	r2, #64	; 0x40
 800113c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113e:	193b      	adds	r3, r7, r4
 8001140:	2201      	movs	r2, #1
 8001142:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	193b      	adds	r3, r7, r4
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114a:	193b      	adds	r3, r7, r4
 800114c:	2200      	movs	r2, #0
 800114e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(IND_LATCH_GPIO_Port, &GPIO_InitStruct);
 8001150:	193a      	adds	r2, r7, r4
 8001152:	2390      	movs	r3, #144	; 0x90
 8001154:	05db      	lsls	r3, r3, #23
 8001156:	0011      	movs	r1, r2
 8001158:	0018      	movs	r0, r3
 800115a:	f000 ffb5 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FLC_BTN_Pin SPD_BTN_Pin VNV_BTN_Pin CRS2_SW_Pin
                           CRS2_A_Pin GPIO_IN_Pin CRS2_B_Pin HDG_BTN_Pin
                           APR_BTN_Pin NAV_BTN_Pin HDG_B_Pin USB_SER_SEL_Pin
                           USART_INVALID_Pin */
  GPIO_InitStruct.Pin = FLC_BTN_Pin|SPD_BTN_Pin|VNV_BTN_Pin|CRS2_SW_Pin
 800115e:	193b      	adds	r3, r7, r4
 8001160:	4a25      	ldr	r2, [pc, #148]	; (80011f8 <MX_GPIO_Init+0x204>)
 8001162:	601a      	str	r2, [r3, #0]
                          |CRS2_A_Pin|GPIO_IN_Pin|CRS2_B_Pin|HDG_BTN_Pin
                          |APR_BTN_Pin|NAV_BTN_Pin|HDG_B_Pin|USB_SER_SEL_Pin
                          |USART_INVALID_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001164:	193b      	adds	r3, r7, r4
 8001166:	2200      	movs	r2, #0
 8001168:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	193b      	adds	r3, r7, r4
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001170:	193b      	adds	r3, r7, r4
 8001172:	4a22      	ldr	r2, [pc, #136]	; (80011fc <MX_GPIO_Init+0x208>)
 8001174:	0019      	movs	r1, r3
 8001176:	0010      	movs	r0, r2
 8001178:	f000 ffa6 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ALT_A_Pin HDG_A_Pin */
  GPIO_InitStruct.Pin = ALT_A_Pin|HDG_A_Pin;
 800117c:	193b      	adds	r3, r7, r4
 800117e:	4a20      	ldr	r2, [pc, #128]	; (8001200 <MX_GPIO_Init+0x20c>)
 8001180:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001182:	193b      	adds	r3, r7, r4
 8001184:	2288      	movs	r2, #136	; 0x88
 8001186:	0352      	lsls	r2, r2, #13
 8001188:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	193b      	adds	r3, r7, r4
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001190:	193b      	adds	r3, r7, r4
 8001192:	4a1a      	ldr	r2, [pc, #104]	; (80011fc <MX_GPIO_Init+0x208>)
 8001194:	0019      	movs	r1, r3
 8001196:	0010      	movs	r0, r2
 8001198:	f000 ff96 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CRS1_A_Pin */
  GPIO_InitStruct.Pin = CRS1_A_Pin;
 800119c:	193b      	adds	r3, r7, r4
 800119e:	2280      	movs	r2, #128	; 0x80
 80011a0:	0212      	lsls	r2, r2, #8
 80011a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011a4:	193b      	adds	r3, r7, r4
 80011a6:	2288      	movs	r2, #136	; 0x88
 80011a8:	0352      	lsls	r2, r2, #13
 80011aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	193b      	adds	r3, r7, r4
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CRS1_A_GPIO_Port, &GPIO_InitStruct);
 80011b2:	193a      	adds	r2, r7, r4
 80011b4:	2390      	movs	r3, #144	; 0x90
 80011b6:	05db      	lsls	r3, r3, #23
 80011b8:	0011      	movs	r1, r2
 80011ba:	0018      	movs	r0, r3
 80011bc:	f000 ff84 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : HDG_SW_Pin */
  GPIO_InitStruct.Pin = HDG_SW_Pin;
 80011c0:	193b      	adds	r3, r7, r4
 80011c2:	2204      	movs	r2, #4
 80011c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c6:	193b      	adds	r3, r7, r4
 80011c8:	2200      	movs	r2, #0
 80011ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	193b      	adds	r3, r7, r4
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(HDG_SW_GPIO_Port, &GPIO_InitStruct);
 80011d2:	193b      	adds	r3, r7, r4
 80011d4:	4a0b      	ldr	r2, [pc, #44]	; (8001204 <MX_GPIO_Init+0x210>)
 80011d6:	0019      	movs	r1, r3
 80011d8:	0010      	movs	r0, r2
 80011da:	f000 ff75 	bl	80020c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011de:	46c0      	nop			; (mov r8, r8)
 80011e0:	46bd      	mov	sp, r7
 80011e2:	b00b      	add	sp, #44	; 0x2c
 80011e4:	bd90      	pop	{r4, r7, pc}
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	40021000 	.word	0x40021000
 80011ec:	0000e001 	.word	0x0000e001
 80011f0:	48000800 	.word	0x48000800
 80011f4:	00001fc8 	.word	0x00001fc8
 80011f8:	00003fbf 	.word	0x00003fbf
 80011fc:	48000400 	.word	0x48000400
 8001200:	00004040 	.word	0x00004040
 8001204:	48000c00 	.word	0x48000c00

08001208 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	HAL_GPIO_WritePin(STATUS_IND_GPIO_Port, STATUS_IND_Pin, GPIO_PIN_SET);
 800120c:	4b04      	ldr	r3, [pc, #16]	; (8001220 <Error_Handler+0x18>)
 800120e:	2201      	movs	r2, #1
 8001210:	2101      	movs	r1, #1
 8001212:	0018      	movs	r0, r3
 8001214:	f001 f8e5 	bl	80023e2 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001218:	b672      	cpsid	i
}
 800121a:	46c0      	nop			; (mov r8, r8)

  __disable_irq();
  while (1)
 800121c:	e7fe      	b.n	800121c <Error_Handler+0x14>
 800121e:	46c0      	nop			; (mov r8, r8)
 8001220:	48000800 	.word	0x48000800

08001224 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122a:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <HAL_MspInit+0x44>)
 800122c:	699a      	ldr	r2, [r3, #24]
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <HAL_MspInit+0x44>)
 8001230:	2101      	movs	r1, #1
 8001232:	430a      	orrs	r2, r1
 8001234:	619a      	str	r2, [r3, #24]
 8001236:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <HAL_MspInit+0x44>)
 8001238:	699b      	ldr	r3, [r3, #24]
 800123a:	2201      	movs	r2, #1
 800123c:	4013      	ands	r3, r2
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001242:	4b09      	ldr	r3, [pc, #36]	; (8001268 <HAL_MspInit+0x44>)
 8001244:	69da      	ldr	r2, [r3, #28]
 8001246:	4b08      	ldr	r3, [pc, #32]	; (8001268 <HAL_MspInit+0x44>)
 8001248:	2180      	movs	r1, #128	; 0x80
 800124a:	0549      	lsls	r1, r1, #21
 800124c:	430a      	orrs	r2, r1
 800124e:	61da      	str	r2, [r3, #28]
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <HAL_MspInit+0x44>)
 8001252:	69da      	ldr	r2, [r3, #28]
 8001254:	2380      	movs	r3, #128	; 0x80
 8001256:	055b      	lsls	r3, r3, #21
 8001258:	4013      	ands	r3, r2
 800125a:	603b      	str	r3, [r7, #0]
 800125c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800125e:	46c0      	nop			; (mov r8, r8)
 8001260:	46bd      	mov	sp, r7
 8001262:	b002      	add	sp, #8
 8001264:	bd80      	pop	{r7, pc}
 8001266:	46c0      	nop			; (mov r8, r8)
 8001268:	40021000 	.word	0x40021000

0800126c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800126c:	b590      	push	{r4, r7, lr}
 800126e:	b08b      	sub	sp, #44	; 0x2c
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	2414      	movs	r4, #20
 8001276:	193b      	adds	r3, r7, r4
 8001278:	0018      	movs	r0, r3
 800127a:	2314      	movs	r3, #20
 800127c:	001a      	movs	r2, r3
 800127e:	2100      	movs	r1, #0
 8001280:	f009 f934 	bl	800a4ec <memset>
  if(hadc->Instance==ADC1)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a19      	ldr	r2, [pc, #100]	; (80012f0 <HAL_ADC_MspInit+0x84>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d12b      	bne.n	80012e6 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800128e:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <HAL_ADC_MspInit+0x88>)
 8001290:	699a      	ldr	r2, [r3, #24]
 8001292:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <HAL_ADC_MspInit+0x88>)
 8001294:	2180      	movs	r1, #128	; 0x80
 8001296:	0089      	lsls	r1, r1, #2
 8001298:	430a      	orrs	r2, r1
 800129a:	619a      	str	r2, [r3, #24]
 800129c:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <HAL_ADC_MspInit+0x88>)
 800129e:	699a      	ldr	r2, [r3, #24]
 80012a0:	2380      	movs	r3, #128	; 0x80
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	4013      	ands	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012aa:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <HAL_ADC_MspInit+0x88>)
 80012ac:	695a      	ldr	r2, [r3, #20]
 80012ae:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <HAL_ADC_MspInit+0x88>)
 80012b0:	2180      	movs	r1, #128	; 0x80
 80012b2:	0289      	lsls	r1, r1, #10
 80012b4:	430a      	orrs	r2, r1
 80012b6:	615a      	str	r2, [r3, #20]
 80012b8:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <HAL_ADC_MspInit+0x88>)
 80012ba:	695a      	ldr	r2, [r3, #20]
 80012bc:	2380      	movs	r3, #128	; 0x80
 80012be:	029b      	lsls	r3, r3, #10
 80012c0:	4013      	ands	r3, r2
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = VBUS_Pin|BACKLIGHT_IN_Pin;
 80012c6:	193b      	adds	r3, r7, r4
 80012c8:	2203      	movs	r2, #3
 80012ca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012cc:	193b      	adds	r3, r7, r4
 80012ce:	2203      	movs	r2, #3
 80012d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	193b      	adds	r3, r7, r4
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d8:	193a      	adds	r2, r7, r4
 80012da:	2390      	movs	r3, #144	; 0x90
 80012dc:	05db      	lsls	r3, r3, #23
 80012de:	0011      	movs	r1, r2
 80012e0:	0018      	movs	r0, r3
 80012e2:	f000 fef1 	bl	80020c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012e6:	46c0      	nop			; (mov r8, r8)
 80012e8:	46bd      	mov	sp, r7
 80012ea:	b00b      	add	sp, #44	; 0x2c
 80012ec:	bd90      	pop	{r4, r7, pc}
 80012ee:	46c0      	nop			; (mov r8, r8)
 80012f0:	40012400 	.word	0x40012400
 80012f4:	40021000 	.word	0x40021000

080012f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012f8:	b590      	push	{r4, r7, lr}
 80012fa:	b08b      	sub	sp, #44	; 0x2c
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001300:	2414      	movs	r4, #20
 8001302:	193b      	adds	r3, r7, r4
 8001304:	0018      	movs	r0, r3
 8001306:	2314      	movs	r3, #20
 8001308:	001a      	movs	r2, r3
 800130a:	2100      	movs	r1, #0
 800130c:	f009 f8ee 	bl	800a4ec <memset>
  if(hspi->Instance==SPI1)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a30      	ldr	r2, [pc, #192]	; (80013d8 <HAL_SPI_MspInit+0xe0>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d159      	bne.n	80013ce <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800131a:	4b30      	ldr	r3, [pc, #192]	; (80013dc <HAL_SPI_MspInit+0xe4>)
 800131c:	699a      	ldr	r2, [r3, #24]
 800131e:	4b2f      	ldr	r3, [pc, #188]	; (80013dc <HAL_SPI_MspInit+0xe4>)
 8001320:	2180      	movs	r1, #128	; 0x80
 8001322:	0149      	lsls	r1, r1, #5
 8001324:	430a      	orrs	r2, r1
 8001326:	619a      	str	r2, [r3, #24]
 8001328:	4b2c      	ldr	r3, [pc, #176]	; (80013dc <HAL_SPI_MspInit+0xe4>)
 800132a:	699a      	ldr	r2, [r3, #24]
 800132c:	2380      	movs	r3, #128	; 0x80
 800132e:	015b      	lsls	r3, r3, #5
 8001330:	4013      	ands	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001336:	4b29      	ldr	r3, [pc, #164]	; (80013dc <HAL_SPI_MspInit+0xe4>)
 8001338:	695a      	ldr	r2, [r3, #20]
 800133a:	4b28      	ldr	r3, [pc, #160]	; (80013dc <HAL_SPI_MspInit+0xe4>)
 800133c:	2180      	movs	r1, #128	; 0x80
 800133e:	0289      	lsls	r1, r1, #10
 8001340:	430a      	orrs	r2, r1
 8001342:	615a      	str	r2, [r3, #20]
 8001344:	4b25      	ldr	r3, [pc, #148]	; (80013dc <HAL_SPI_MspInit+0xe4>)
 8001346:	695a      	ldr	r2, [r3, #20]
 8001348:	2380      	movs	r3, #128	; 0x80
 800134a:	029b      	lsls	r3, r3, #10
 800134c:	4013      	ands	r3, r2
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = IND_SCLK_Pin|IND_SD_Pin;
 8001352:	0021      	movs	r1, r4
 8001354:	187b      	adds	r3, r7, r1
 8001356:	22a0      	movs	r2, #160	; 0xa0
 8001358:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135a:	187b      	adds	r3, r7, r1
 800135c:	2202      	movs	r2, #2
 800135e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	187b      	adds	r3, r7, r1
 8001362:	2200      	movs	r2, #0
 8001364:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001366:	187b      	adds	r3, r7, r1
 8001368:	2203      	movs	r2, #3
 800136a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800136c:	187b      	adds	r3, r7, r1
 800136e:	2200      	movs	r2, #0
 8001370:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001372:	187a      	adds	r2, r7, r1
 8001374:	2390      	movs	r3, #144	; 0x90
 8001376:	05db      	lsls	r3, r3, #23
 8001378:	0011      	movs	r1, r2
 800137a:	0018      	movs	r0, r3
 800137c:	f000 fea4 	bl	80020c8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001380:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <HAL_SPI_MspInit+0xe8>)
 8001382:	4a18      	ldr	r2, [pc, #96]	; (80013e4 <HAL_SPI_MspInit+0xec>)
 8001384:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001386:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <HAL_SPI_MspInit+0xe8>)
 8001388:	2210      	movs	r2, #16
 800138a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800138c:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <HAL_SPI_MspInit+0xe8>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001392:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <HAL_SPI_MspInit+0xe8>)
 8001394:	2280      	movs	r2, #128	; 0x80
 8001396:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001398:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <HAL_SPI_MspInit+0xe8>)
 800139a:	2200      	movs	r2, #0
 800139c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800139e:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <HAL_SPI_MspInit+0xe8>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80013a4:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <HAL_SPI_MspInit+0xe8>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80013aa:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <HAL_SPI_MspInit+0xe8>)
 80013ac:	2280      	movs	r2, #128	; 0x80
 80013ae:	0192      	lsls	r2, r2, #6
 80013b0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80013b2:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <HAL_SPI_MspInit+0xe8>)
 80013b4:	0018      	movs	r0, r3
 80013b6:	f000 fd81 	bl	8001ebc <HAL_DMA_Init>
 80013ba:	1e03      	subs	r3, r0, #0
 80013bc:	d001      	beq.n	80013c2 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 80013be:	f7ff ff23 	bl	8001208 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a06      	ldr	r2, [pc, #24]	; (80013e0 <HAL_SPI_MspInit+0xe8>)
 80013c6:	655a      	str	r2, [r3, #84]	; 0x54
 80013c8:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <HAL_SPI_MspInit+0xe8>)
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80013ce:	46c0      	nop			; (mov r8, r8)
 80013d0:	46bd      	mov	sp, r7
 80013d2:	b00b      	add	sp, #44	; 0x2c
 80013d4:	bd90      	pop	{r4, r7, pc}
 80013d6:	46c0      	nop			; (mov r8, r8)
 80013d8:	40013000 	.word	0x40013000
 80013dc:	40021000 	.word	0x40021000
 80013e0:	20000434 	.word	0x20000434
 80013e4:	40020030 	.word	0x40020030

080013e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a0a      	ldr	r2, [pc, #40]	; (8001420 <HAL_TIM_Base_MspInit+0x38>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d10d      	bne.n	8001416 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80013fa:	4b0a      	ldr	r3, [pc, #40]	; (8001424 <HAL_TIM_Base_MspInit+0x3c>)
 80013fc:	699a      	ldr	r2, [r3, #24]
 80013fe:	4b09      	ldr	r3, [pc, #36]	; (8001424 <HAL_TIM_Base_MspInit+0x3c>)
 8001400:	2180      	movs	r1, #128	; 0x80
 8001402:	0249      	lsls	r1, r1, #9
 8001404:	430a      	orrs	r2, r1
 8001406:	619a      	str	r2, [r3, #24]
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <HAL_TIM_Base_MspInit+0x3c>)
 800140a:	699a      	ldr	r2, [r3, #24]
 800140c:	2380      	movs	r3, #128	; 0x80
 800140e:	025b      	lsls	r3, r3, #9
 8001410:	4013      	ands	r3, r2
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001416:	46c0      	nop			; (mov r8, r8)
 8001418:	46bd      	mov	sp, r7
 800141a:	b004      	add	sp, #16
 800141c:	bd80      	pop	{r7, pc}
 800141e:	46c0      	nop			; (mov r8, r8)
 8001420:	40014000 	.word	0x40014000
 8001424:	40021000 	.word	0x40021000

08001428 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001428:	b590      	push	{r4, r7, lr}
 800142a:	b08b      	sub	sp, #44	; 0x2c
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001430:	2414      	movs	r4, #20
 8001432:	193b      	adds	r3, r7, r4
 8001434:	0018      	movs	r0, r3
 8001436:	2314      	movs	r3, #20
 8001438:	001a      	movs	r2, r3
 800143a:	2100      	movs	r1, #0
 800143c:	f009 f856 	bl	800a4ec <memset>
  if(htim->Instance==TIM15)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a27      	ldr	r2, [pc, #156]	; (80014e4 <HAL_TIM_MspPostInit+0xbc>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d148      	bne.n	80014dc <HAL_TIM_MspPostInit+0xb4>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144a:	4b27      	ldr	r3, [pc, #156]	; (80014e8 <HAL_TIM_MspPostInit+0xc0>)
 800144c:	695a      	ldr	r2, [r3, #20]
 800144e:	4b26      	ldr	r3, [pc, #152]	; (80014e8 <HAL_TIM_MspPostInit+0xc0>)
 8001450:	2180      	movs	r1, #128	; 0x80
 8001452:	0289      	lsls	r1, r1, #10
 8001454:	430a      	orrs	r2, r1
 8001456:	615a      	str	r2, [r3, #20]
 8001458:	4b23      	ldr	r3, [pc, #140]	; (80014e8 <HAL_TIM_MspPostInit+0xc0>)
 800145a:	695a      	ldr	r2, [r3, #20]
 800145c:	2380      	movs	r3, #128	; 0x80
 800145e:	029b      	lsls	r3, r3, #10
 8001460:	4013      	ands	r3, r2
 8001462:	613b      	str	r3, [r7, #16]
 8001464:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001466:	4b20      	ldr	r3, [pc, #128]	; (80014e8 <HAL_TIM_MspPostInit+0xc0>)
 8001468:	695a      	ldr	r2, [r3, #20]
 800146a:	4b1f      	ldr	r3, [pc, #124]	; (80014e8 <HAL_TIM_MspPostInit+0xc0>)
 800146c:	2180      	movs	r1, #128	; 0x80
 800146e:	02c9      	lsls	r1, r1, #11
 8001470:	430a      	orrs	r2, r1
 8001472:	615a      	str	r2, [r3, #20]
 8001474:	4b1c      	ldr	r3, [pc, #112]	; (80014e8 <HAL_TIM_MspPostInit+0xc0>)
 8001476:	695a      	ldr	r2, [r3, #20]
 8001478:	2380      	movs	r3, #128	; 0x80
 800147a:	02db      	lsls	r3, r3, #11
 800147c:	4013      	ands	r3, r2
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
    /**TIM15 GPIO Configuration
    PA2     ------> TIM15_CH1
    PB15     ------> TIM15_CH2
    */
    GPIO_InitStruct.Pin = BRIGHT_Pin;
 8001482:	193b      	adds	r3, r7, r4
 8001484:	2204      	movs	r2, #4
 8001486:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001488:	193b      	adds	r3, r7, r4
 800148a:	2202      	movs	r2, #2
 800148c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	193b      	adds	r3, r7, r4
 8001490:	2200      	movs	r2, #0
 8001492:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001494:	193b      	adds	r3, r7, r4
 8001496:	2200      	movs	r2, #0
 8001498:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM15;
 800149a:	193b      	adds	r3, r7, r4
 800149c:	2200      	movs	r2, #0
 800149e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BRIGHT_GPIO_Port, &GPIO_InitStruct);
 80014a0:	193a      	adds	r2, r7, r4
 80014a2:	2390      	movs	r3, #144	; 0x90
 80014a4:	05db      	lsls	r3, r3, #23
 80014a6:	0011      	movs	r1, r2
 80014a8:	0018      	movs	r0, r3
 80014aa:	f000 fe0d 	bl	80020c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BACKLIGHT_Pin;
 80014ae:	0021      	movs	r1, r4
 80014b0:	187b      	adds	r3, r7, r1
 80014b2:	2280      	movs	r2, #128	; 0x80
 80014b4:	0212      	lsls	r2, r2, #8
 80014b6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b8:	187b      	adds	r3, r7, r1
 80014ba:	2202      	movs	r2, #2
 80014bc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	187b      	adds	r3, r7, r1
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c4:	187b      	adds	r3, r7, r1
 80014c6:	2200      	movs	r2, #0
 80014c8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 80014ca:	187b      	adds	r3, r7, r1
 80014cc:	2201      	movs	r2, #1
 80014ce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BACKLIGHT_GPIO_Port, &GPIO_InitStruct);
 80014d0:	187b      	adds	r3, r7, r1
 80014d2:	4a06      	ldr	r2, [pc, #24]	; (80014ec <HAL_TIM_MspPostInit+0xc4>)
 80014d4:	0019      	movs	r1, r3
 80014d6:	0010      	movs	r0, r2
 80014d8:	f000 fdf6 	bl	80020c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80014dc:	46c0      	nop			; (mov r8, r8)
 80014de:	46bd      	mov	sp, r7
 80014e0:	b00b      	add	sp, #44	; 0x2c
 80014e2:	bd90      	pop	{r4, r7, pc}
 80014e4:	40014000 	.word	0x40014000
 80014e8:	40021000 	.word	0x40021000
 80014ec:	48000400 	.word	0x48000400

080014f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014f0:	b590      	push	{r4, r7, lr}
 80014f2:	b08b      	sub	sp, #44	; 0x2c
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	2414      	movs	r4, #20
 80014fa:	193b      	adds	r3, r7, r4
 80014fc:	0018      	movs	r0, r3
 80014fe:	2314      	movs	r3, #20
 8001500:	001a      	movs	r2, r3
 8001502:	2100      	movs	r1, #0
 8001504:	f008 fff2 	bl	800a4ec <memset>
  if(huart->Instance==USART3)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a1c      	ldr	r2, [pc, #112]	; (8001580 <HAL_UART_MspInit+0x90>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d131      	bne.n	8001576 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001512:	4b1c      	ldr	r3, [pc, #112]	; (8001584 <HAL_UART_MspInit+0x94>)
 8001514:	69da      	ldr	r2, [r3, #28]
 8001516:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <HAL_UART_MspInit+0x94>)
 8001518:	2180      	movs	r1, #128	; 0x80
 800151a:	02c9      	lsls	r1, r1, #11
 800151c:	430a      	orrs	r2, r1
 800151e:	61da      	str	r2, [r3, #28]
 8001520:	4b18      	ldr	r3, [pc, #96]	; (8001584 <HAL_UART_MspInit+0x94>)
 8001522:	69da      	ldr	r2, [r3, #28]
 8001524:	2380      	movs	r3, #128	; 0x80
 8001526:	02db      	lsls	r3, r3, #11
 8001528:	4013      	ands	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
 800152c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800152e:	4b15      	ldr	r3, [pc, #84]	; (8001584 <HAL_UART_MspInit+0x94>)
 8001530:	695a      	ldr	r2, [r3, #20]
 8001532:	4b14      	ldr	r3, [pc, #80]	; (8001584 <HAL_UART_MspInit+0x94>)
 8001534:	2180      	movs	r1, #128	; 0x80
 8001536:	0309      	lsls	r1, r1, #12
 8001538:	430a      	orrs	r2, r1
 800153a:	615a      	str	r2, [r3, #20]
 800153c:	4b11      	ldr	r3, [pc, #68]	; (8001584 <HAL_UART_MspInit+0x94>)
 800153e:	695a      	ldr	r2, [r3, #20]
 8001540:	2380      	movs	r3, #128	; 0x80
 8001542:	031b      	lsls	r3, r3, #12
 8001544:	4013      	ands	r3, r2
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC4     ------> USART3_TX
    PC5     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800154a:	0021      	movs	r1, r4
 800154c:	187b      	adds	r3, r7, r1
 800154e:	2230      	movs	r2, #48	; 0x30
 8001550:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001552:	187b      	adds	r3, r7, r1
 8001554:	2202      	movs	r2, #2
 8001556:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	187b      	adds	r3, r7, r1
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800155e:	187b      	adds	r3, r7, r1
 8001560:	2203      	movs	r2, #3
 8001562:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 8001564:	187b      	adds	r3, r7, r1
 8001566:	2201      	movs	r2, #1
 8001568:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800156a:	187b      	adds	r3, r7, r1
 800156c:	4a06      	ldr	r2, [pc, #24]	; (8001588 <HAL_UART_MspInit+0x98>)
 800156e:	0019      	movs	r1, r3
 8001570:	0010      	movs	r0, r2
 8001572:	f000 fda9 	bl	80020c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001576:	46c0      	nop			; (mov r8, r8)
 8001578:	46bd      	mov	sp, r7
 800157a:	b00b      	add	sp, #44	; 0x2c
 800157c:	bd90      	pop	{r4, r7, pc}
 800157e:	46c0      	nop			; (mov r8, r8)
 8001580:	40004800 	.word	0x40004800
 8001584:	40021000 	.word	0x40021000
 8001588:	48000800 	.word	0x48000800

0800158c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001590:	e7fe      	b.n	8001590 <NMI_Handler+0x4>

08001592 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001596:	e7fe      	b.n	8001596 <HardFault_Handler+0x4>

08001598 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800159c:	46c0      	nop			; (mov r8, r8)
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015a6:	46c0      	nop			; (mov r8, r8)
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015b0:	f000 f930 	bl	8001814 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015b4:	46c0      	nop			; (mov r8, r8)
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
	...

080015bc <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80015c0:	4b03      	ldr	r3, [pc, #12]	; (80015d0 <DMA1_Channel2_3_IRQHandler+0x14>)
 80015c2:	0018      	movs	r0, r3
 80015c4:	f000 fcc2 	bl	8001f4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80015c8:	46c0      	nop			; (mov r8, r8)
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	46c0      	nop			; (mov r8, r8)
 80015d0:	20000434 	.word	0x20000434

080015d4 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80015d8:	4b03      	ldr	r3, [pc, #12]	; (80015e8 <USB_IRQHandler+0x14>)
 80015da:	0018      	movs	r0, r3
 80015dc:	f001 f844 	bl	8002668 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80015e0:	46c0      	nop			; (mov r8, r8)
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	46c0      	nop			; (mov r8, r8)
 80015e8:	20000a18 	.word	0x20000a18

080015ec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]
 80015fc:	e00a      	b.n	8001614 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015fe:	e000      	b.n	8001602 <_read+0x16>
 8001600:	bf00      	nop
 8001602:	0001      	movs	r1, r0
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	1c5a      	adds	r2, r3, #1
 8001608:	60ba      	str	r2, [r7, #8]
 800160a:	b2ca      	uxtb	r2, r1
 800160c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	3301      	adds	r3, #1
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	697a      	ldr	r2, [r7, #20]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	429a      	cmp	r2, r3
 800161a:	dbf0      	blt.n	80015fe <_read+0x12>
  }

  return len;
 800161c:	687b      	ldr	r3, [r7, #4]
}
 800161e:	0018      	movs	r0, r3
 8001620:	46bd      	mov	sp, r7
 8001622:	b006      	add	sp, #24
 8001624:	bd80      	pop	{r7, pc}

08001626 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b086      	sub	sp, #24
 800162a:	af00      	add	r7, sp, #0
 800162c:	60f8      	str	r0, [r7, #12]
 800162e:	60b9      	str	r1, [r7, #8]
 8001630:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
 8001636:	e009      	b.n	800164c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	1c5a      	adds	r2, r3, #1
 800163c:	60ba      	str	r2, [r7, #8]
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	0018      	movs	r0, r3
 8001642:	e000      	b.n	8001646 <_write+0x20>
 8001644:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	3301      	adds	r3, #1
 800164a:	617b      	str	r3, [r7, #20]
 800164c:	697a      	ldr	r2, [r7, #20]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	429a      	cmp	r2, r3
 8001652:	dbf1      	blt.n	8001638 <_write+0x12>
  }
  return len;
 8001654:	687b      	ldr	r3, [r7, #4]
}
 8001656:	0018      	movs	r0, r3
 8001658:	46bd      	mov	sp, r7
 800165a:	b006      	add	sp, #24
 800165c:	bd80      	pop	{r7, pc}

0800165e <_close>:

int _close(int file)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b082      	sub	sp, #8
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001666:	2301      	movs	r3, #1
 8001668:	425b      	negs	r3, r3
}
 800166a:	0018      	movs	r0, r3
 800166c:	46bd      	mov	sp, r7
 800166e:	b002      	add	sp, #8
 8001670:	bd80      	pop	{r7, pc}

08001672 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b082      	sub	sp, #8
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
 800167a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	2280      	movs	r2, #128	; 0x80
 8001680:	0192      	lsls	r2, r2, #6
 8001682:	605a      	str	r2, [r3, #4]
  return 0;
 8001684:	2300      	movs	r3, #0
}
 8001686:	0018      	movs	r0, r3
 8001688:	46bd      	mov	sp, r7
 800168a:	b002      	add	sp, #8
 800168c:	bd80      	pop	{r7, pc}

0800168e <_isatty>:

int _isatty(int file)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b082      	sub	sp, #8
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001696:	2301      	movs	r3, #1
}
 8001698:	0018      	movs	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	b002      	add	sp, #8
 800169e:	bd80      	pop	{r7, pc}

080016a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	0018      	movs	r0, r3
 80016b0:	46bd      	mov	sp, r7
 80016b2:	b004      	add	sp, #16
 80016b4:	bd80      	pop	{r7, pc}
	...

080016b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016c0:	4a14      	ldr	r2, [pc, #80]	; (8001714 <_sbrk+0x5c>)
 80016c2:	4b15      	ldr	r3, [pc, #84]	; (8001718 <_sbrk+0x60>)
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016cc:	4b13      	ldr	r3, [pc, #76]	; (800171c <_sbrk+0x64>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d102      	bne.n	80016da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016d4:	4b11      	ldr	r3, [pc, #68]	; (800171c <_sbrk+0x64>)
 80016d6:	4a12      	ldr	r2, [pc, #72]	; (8001720 <_sbrk+0x68>)
 80016d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016da:	4b10      	ldr	r3, [pc, #64]	; (800171c <_sbrk+0x64>)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	18d3      	adds	r3, r2, r3
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d207      	bcs.n	80016f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016e8:	f008 ff56 	bl	800a598 <__errno>
 80016ec:	0003      	movs	r3, r0
 80016ee:	220c      	movs	r2, #12
 80016f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016f2:	2301      	movs	r3, #1
 80016f4:	425b      	negs	r3, r3
 80016f6:	e009      	b.n	800170c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016f8:	4b08      	ldr	r3, [pc, #32]	; (800171c <_sbrk+0x64>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016fe:	4b07      	ldr	r3, [pc, #28]	; (800171c <_sbrk+0x64>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	18d2      	adds	r2, r2, r3
 8001706:	4b05      	ldr	r3, [pc, #20]	; (800171c <_sbrk+0x64>)
 8001708:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800170a:	68fb      	ldr	r3, [r7, #12]
}
 800170c:	0018      	movs	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	b006      	add	sp, #24
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20004000 	.word	0x20004000
 8001718:	00000400 	.word	0x00000400
 800171c:	20000548 	.word	0x20000548
 8001720:	20000e70 	.word	0x20000e70

08001724 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001728:	46c0      	nop			; (mov r8, r8)
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
	...

08001730 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001730:	480d      	ldr	r0, [pc, #52]	; (8001768 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001732:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001734:	f7ff fff6 	bl	8001724 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001738:	480c      	ldr	r0, [pc, #48]	; (800176c <LoopForever+0x6>)
  ldr r1, =_edata
 800173a:	490d      	ldr	r1, [pc, #52]	; (8001770 <LoopForever+0xa>)
  ldr r2, =_sidata
 800173c:	4a0d      	ldr	r2, [pc, #52]	; (8001774 <LoopForever+0xe>)
  movs r3, #0
 800173e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001740:	e002      	b.n	8001748 <LoopCopyDataInit>

08001742 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001742:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001744:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001746:	3304      	adds	r3, #4

08001748 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001748:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800174a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800174c:	d3f9      	bcc.n	8001742 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800174e:	4a0a      	ldr	r2, [pc, #40]	; (8001778 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001750:	4c0a      	ldr	r4, [pc, #40]	; (800177c <LoopForever+0x16>)
  movs r3, #0
 8001752:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001754:	e001      	b.n	800175a <LoopFillZerobss>

08001756 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001756:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001758:	3204      	adds	r2, #4

0800175a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800175a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800175c:	d3fb      	bcc.n	8001756 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800175e:	f008 ff21 	bl	800a5a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001762:	f7ff f9ed 	bl	8000b40 <main>

08001766 <LoopForever>:

LoopForever:
    b LoopForever
 8001766:	e7fe      	b.n	8001766 <LoopForever>
  ldr   r0, =_estack
 8001768:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800176c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001770:	200001c0 	.word	0x200001c0
  ldr r2, =_sidata
 8001774:	0800b35c 	.word	0x0800b35c
  ldr r2, =_sbss
 8001778:	200001c0 	.word	0x200001c0
  ldr r4, =_ebss
 800177c:	20000e6c 	.word	0x20000e6c

08001780 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001780:	e7fe      	b.n	8001780 <ADC1_IRQHandler>
	...

08001784 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001788:	4b07      	ldr	r3, [pc, #28]	; (80017a8 <HAL_Init+0x24>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <HAL_Init+0x24>)
 800178e:	2110      	movs	r1, #16
 8001790:	430a      	orrs	r2, r1
 8001792:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001794:	2003      	movs	r0, #3
 8001796:	f000 f809 	bl	80017ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800179a:	f7ff fd43 	bl	8001224 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800179e:	2300      	movs	r3, #0
}
 80017a0:	0018      	movs	r0, r3
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	46c0      	nop			; (mov r8, r8)
 80017a8:	40022000 	.word	0x40022000

080017ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017ac:	b590      	push	{r4, r7, lr}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017b4:	4b14      	ldr	r3, [pc, #80]	; (8001808 <HAL_InitTick+0x5c>)
 80017b6:	681c      	ldr	r4, [r3, #0]
 80017b8:	4b14      	ldr	r3, [pc, #80]	; (800180c <HAL_InitTick+0x60>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	0019      	movs	r1, r3
 80017be:	23fa      	movs	r3, #250	; 0xfa
 80017c0:	0098      	lsls	r0, r3, #2
 80017c2:	f7fe fcab 	bl	800011c <__udivsi3>
 80017c6:	0003      	movs	r3, r0
 80017c8:	0019      	movs	r1, r3
 80017ca:	0020      	movs	r0, r4
 80017cc:	f7fe fca6 	bl	800011c <__udivsi3>
 80017d0:	0003      	movs	r3, r0
 80017d2:	0018      	movs	r0, r3
 80017d4:	f000 fb65 	bl	8001ea2 <HAL_SYSTICK_Config>
 80017d8:	1e03      	subs	r3, r0, #0
 80017da:	d001      	beq.n	80017e0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e00f      	b.n	8001800 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2b03      	cmp	r3, #3
 80017e4:	d80b      	bhi.n	80017fe <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017e6:	6879      	ldr	r1, [r7, #4]
 80017e8:	2301      	movs	r3, #1
 80017ea:	425b      	negs	r3, r3
 80017ec:	2200      	movs	r2, #0
 80017ee:	0018      	movs	r0, r3
 80017f0:	f000 fb32 	bl	8001e58 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HAL_InitTick+0x64>)
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80017fa:	2300      	movs	r3, #0
 80017fc:	e000      	b.n	8001800 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
}
 8001800:	0018      	movs	r0, r3
 8001802:	46bd      	mov	sp, r7
 8001804:	b003      	add	sp, #12
 8001806:	bd90      	pop	{r4, r7, pc}
 8001808:	20000000 	.word	0x20000000
 800180c:	20000008 	.word	0x20000008
 8001810:	20000004 	.word	0x20000004

08001814 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001818:	4b05      	ldr	r3, [pc, #20]	; (8001830 <HAL_IncTick+0x1c>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	001a      	movs	r2, r3
 800181e:	4b05      	ldr	r3, [pc, #20]	; (8001834 <HAL_IncTick+0x20>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	18d2      	adds	r2, r2, r3
 8001824:	4b03      	ldr	r3, [pc, #12]	; (8001834 <HAL_IncTick+0x20>)
 8001826:	601a      	str	r2, [r3, #0]
}
 8001828:	46c0      	nop			; (mov r8, r8)
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	46c0      	nop			; (mov r8, r8)
 8001830:	20000008 	.word	0x20000008
 8001834:	2000054c 	.word	0x2000054c

08001838 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  return uwTick;
 800183c:	4b02      	ldr	r3, [pc, #8]	; (8001848 <HAL_GetTick+0x10>)
 800183e:	681b      	ldr	r3, [r3, #0]
}
 8001840:	0018      	movs	r0, r3
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	46c0      	nop			; (mov r8, r8)
 8001848:	2000054c 	.word	0x2000054c

0800184c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001854:	f7ff fff0 	bl	8001838 <HAL_GetTick>
 8001858:	0003      	movs	r3, r0
 800185a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	3301      	adds	r3, #1
 8001864:	d005      	beq.n	8001872 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001866:	4b0a      	ldr	r3, [pc, #40]	; (8001890 <HAL_Delay+0x44>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	001a      	movs	r2, r3
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	189b      	adds	r3, r3, r2
 8001870:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001872:	46c0      	nop			; (mov r8, r8)
 8001874:	f7ff ffe0 	bl	8001838 <HAL_GetTick>
 8001878:	0002      	movs	r2, r0
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	429a      	cmp	r2, r3
 8001882:	d8f7      	bhi.n	8001874 <HAL_Delay+0x28>
  {
  }
}
 8001884:	46c0      	nop			; (mov r8, r8)
 8001886:	46c0      	nop			; (mov r8, r8)
 8001888:	46bd      	mov	sp, r7
 800188a:	b004      	add	sp, #16
 800188c:	bd80      	pop	{r7, pc}
 800188e:	46c0      	nop			; (mov r8, r8)
 8001890:	20000008 	.word	0x20000008

08001894 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800189c:	230f      	movs	r3, #15
 800189e:	18fb      	adds	r3, r7, r3
 80018a0:	2200      	movs	r2, #0
 80018a2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80018a4:	2300      	movs	r3, #0
 80018a6:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e125      	b.n	8001afe <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d10a      	bne.n	80018d0 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2234      	movs	r2, #52	; 0x34
 80018c4:	2100      	movs	r1, #0
 80018c6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	0018      	movs	r0, r3
 80018cc:	f7ff fcce 	bl	800126c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018d4:	2210      	movs	r2, #16
 80018d6:	4013      	ands	r3, r2
 80018d8:	d000      	beq.n	80018dc <HAL_ADC_Init+0x48>
 80018da:	e103      	b.n	8001ae4 <HAL_ADC_Init+0x250>
 80018dc:	230f      	movs	r3, #15
 80018de:	18fb      	adds	r3, r7, r3
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d000      	beq.n	80018e8 <HAL_ADC_Init+0x54>
 80018e6:	e0fd      	b.n	8001ae4 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	2204      	movs	r2, #4
 80018f0:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80018f2:	d000      	beq.n	80018f6 <HAL_ADC_Init+0x62>
 80018f4:	e0f6      	b.n	8001ae4 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018fa:	4a83      	ldr	r2, [pc, #524]	; (8001b08 <HAL_ADC_Init+0x274>)
 80018fc:	4013      	ands	r3, r2
 80018fe:	2202      	movs	r2, #2
 8001900:	431a      	orrs	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	2203      	movs	r2, #3
 800190e:	4013      	ands	r3, r2
 8001910:	2b01      	cmp	r3, #1
 8001912:	d112      	bne.n	800193a <HAL_ADC_Init+0xa6>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2201      	movs	r2, #1
 800191c:	4013      	ands	r3, r2
 800191e:	2b01      	cmp	r3, #1
 8001920:	d009      	beq.n	8001936 <HAL_ADC_Init+0xa2>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	68da      	ldr	r2, [r3, #12]
 8001928:	2380      	movs	r3, #128	; 0x80
 800192a:	021b      	lsls	r3, r3, #8
 800192c:	401a      	ands	r2, r3
 800192e:	2380      	movs	r3, #128	; 0x80
 8001930:	021b      	lsls	r3, r3, #8
 8001932:	429a      	cmp	r2, r3
 8001934:	d101      	bne.n	800193a <HAL_ADC_Init+0xa6>
 8001936:	2301      	movs	r3, #1
 8001938:	e000      	b.n	800193c <HAL_ADC_Init+0xa8>
 800193a:	2300      	movs	r3, #0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d116      	bne.n	800196e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	2218      	movs	r2, #24
 8001948:	4393      	bics	r3, r2
 800194a:	0019      	movs	r1, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	430a      	orrs	r2, r1
 8001956:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	691b      	ldr	r3, [r3, #16]
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	0899      	lsrs	r1, r3, #2
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685a      	ldr	r2, [r3, #4]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	430a      	orrs	r2, r1
 800196c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	68da      	ldr	r2, [r3, #12]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4964      	ldr	r1, [pc, #400]	; (8001b0c <HAL_ADC_Init+0x278>)
 800197a:	400a      	ands	r2, r1
 800197c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	7e1b      	ldrb	r3, [r3, #24]
 8001982:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	7e5b      	ldrb	r3, [r3, #25]
 8001988:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800198a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	7e9b      	ldrb	r3, [r3, #26]
 8001990:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001992:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001998:	2b01      	cmp	r3, #1
 800199a:	d002      	beq.n	80019a2 <HAL_ADC_Init+0x10e>
 800199c:	2380      	movs	r3, #128	; 0x80
 800199e:	015b      	lsls	r3, r3, #5
 80019a0:	e000      	b.n	80019a4 <HAL_ADC_Init+0x110>
 80019a2:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80019a4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80019aa:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d101      	bne.n	80019b8 <HAL_ADC_Init+0x124>
 80019b4:	2304      	movs	r3, #4
 80019b6:	e000      	b.n	80019ba <HAL_ADC_Init+0x126>
 80019b8:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80019ba:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2124      	movs	r1, #36	; 0x24
 80019c0:	5c5b      	ldrb	r3, [r3, r1]
 80019c2:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80019c4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80019c6:	68ba      	ldr	r2, [r7, #8]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	7edb      	ldrb	r3, [r3, #27]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d115      	bne.n	8001a00 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	7e9b      	ldrb	r3, [r3, #26]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d105      	bne.n	80019e8 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	2280      	movs	r2, #128	; 0x80
 80019e0:	0252      	lsls	r2, r2, #9
 80019e2:	4313      	orrs	r3, r2
 80019e4:	60bb      	str	r3, [r7, #8]
 80019e6:	e00b      	b.n	8001a00 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ec:	2220      	movs	r2, #32
 80019ee:	431a      	orrs	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019f8:	2201      	movs	r2, #1
 80019fa:	431a      	orrs	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	69da      	ldr	r2, [r3, #28]
 8001a04:	23c2      	movs	r3, #194	; 0xc2
 8001a06:	33ff      	adds	r3, #255	; 0xff
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d007      	beq.n	8001a1c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001a14:	4313      	orrs	r3, r2
 8001a16:	68ba      	ldr	r2, [r7, #8]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	68d9      	ldr	r1, [r3, #12]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68ba      	ldr	r2, [r7, #8]
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a30:	2380      	movs	r3, #128	; 0x80
 8001a32:	055b      	lsls	r3, r3, #21
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d01b      	beq.n	8001a70 <HAL_ADC_Init+0x1dc>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d017      	beq.n	8001a70 <HAL_ADC_Init+0x1dc>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d013      	beq.n	8001a70 <HAL_ADC_Init+0x1dc>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4c:	2b03      	cmp	r3, #3
 8001a4e:	d00f      	beq.n	8001a70 <HAL_ADC_Init+0x1dc>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a54:	2b04      	cmp	r3, #4
 8001a56:	d00b      	beq.n	8001a70 <HAL_ADC_Init+0x1dc>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5c:	2b05      	cmp	r3, #5
 8001a5e:	d007      	beq.n	8001a70 <HAL_ADC_Init+0x1dc>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a64:	2b06      	cmp	r3, #6
 8001a66:	d003      	beq.n	8001a70 <HAL_ADC_Init+0x1dc>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6c:	2b07      	cmp	r3, #7
 8001a6e:	d112      	bne.n	8001a96 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	695a      	ldr	r2, [r3, #20]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2107      	movs	r1, #7
 8001a7c:	438a      	bics	r2, r1
 8001a7e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6959      	ldr	r1, [r3, #20]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8a:	2207      	movs	r2, #7
 8001a8c:	401a      	ands	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	430a      	orrs	r2, r1
 8001a94:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	4a1c      	ldr	r2, [pc, #112]	; (8001b10 <HAL_ADC_Init+0x27c>)
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	68ba      	ldr	r2, [r7, #8]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d10b      	bne.n	8001abe <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ab0:	2203      	movs	r2, #3
 8001ab2:	4393      	bics	r3, r2
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	431a      	orrs	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001abc:	e01c      	b.n	8001af8 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ac2:	2212      	movs	r2, #18
 8001ac4:	4393      	bics	r3, r2
 8001ac6:	2210      	movs	r2, #16
 8001ac8:	431a      	orrs	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	431a      	orrs	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001ada:	230f      	movs	r3, #15
 8001adc:	18fb      	adds	r3, r7, r3
 8001ade:	2201      	movs	r2, #1
 8001ae0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001ae2:	e009      	b.n	8001af8 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ae8:	2210      	movs	r2, #16
 8001aea:	431a      	orrs	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001af0:	230f      	movs	r3, #15
 8001af2:	18fb      	adds	r3, r7, r3
 8001af4:	2201      	movs	r2, #1
 8001af6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001af8:	230f      	movs	r3, #15
 8001afa:	18fb      	adds	r3, r7, r3
 8001afc:	781b      	ldrb	r3, [r3, #0]
}
 8001afe:	0018      	movs	r0, r3
 8001b00:	46bd      	mov	sp, r7
 8001b02:	b004      	add	sp, #16
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	46c0      	nop			; (mov r8, r8)
 8001b08:	fffffefd 	.word	0xfffffefd
 8001b0c:	fffe0219 	.word	0xfffe0219
 8001b10:	833fffe7 	.word	0x833fffe7

08001b14 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b1e:	230f      	movs	r3, #15
 8001b20:	18fb      	adds	r3, r7, r3
 8001b22:	2200      	movs	r2, #0
 8001b24:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001b26:	2300      	movs	r3, #0
 8001b28:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b2e:	2380      	movs	r3, #128	; 0x80
 8001b30:	055b      	lsls	r3, r3, #21
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d011      	beq.n	8001b5a <HAL_ADC_ConfigChannel+0x46>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d00d      	beq.n	8001b5a <HAL_ADC_ConfigChannel+0x46>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d009      	beq.n	8001b5a <HAL_ADC_ConfigChannel+0x46>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4a:	2b03      	cmp	r3, #3
 8001b4c:	d005      	beq.n	8001b5a <HAL_ADC_ConfigChannel+0x46>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	d001      	beq.n	8001b5a <HAL_ADC_ConfigChannel+0x46>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2234      	movs	r2, #52	; 0x34
 8001b5e:	5c9b      	ldrb	r3, [r3, r2]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d101      	bne.n	8001b68 <HAL_ADC_ConfigChannel+0x54>
 8001b64:	2302      	movs	r3, #2
 8001b66:	e0bb      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0x1cc>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2234      	movs	r2, #52	; 0x34
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	2204      	movs	r2, #4
 8001b78:	4013      	ands	r3, r2
 8001b7a:	d000      	beq.n	8001b7e <HAL_ADC_ConfigChannel+0x6a>
 8001b7c:	e09f      	b.n	8001cbe <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	4a59      	ldr	r2, [pc, #356]	; (8001ce8 <HAL_ADC_ConfigChannel+0x1d4>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d100      	bne.n	8001b8a <HAL_ADC_ConfigChannel+0x76>
 8001b88:	e077      	b.n	8001c7a <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2201      	movs	r2, #1
 8001b96:	409a      	lsls	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ba4:	2380      	movs	r3, #128	; 0x80
 8001ba6:	055b      	lsls	r3, r3, #21
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d037      	beq.n	8001c1c <HAL_ADC_ConfigChannel+0x108>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d033      	beq.n	8001c1c <HAL_ADC_ConfigChannel+0x108>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d02f      	beq.n	8001c1c <HAL_ADC_ConfigChannel+0x108>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc0:	2b03      	cmp	r3, #3
 8001bc2:	d02b      	beq.n	8001c1c <HAL_ADC_ConfigChannel+0x108>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc8:	2b04      	cmp	r3, #4
 8001bca:	d027      	beq.n	8001c1c <HAL_ADC_ConfigChannel+0x108>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd0:	2b05      	cmp	r3, #5
 8001bd2:	d023      	beq.n	8001c1c <HAL_ADC_ConfigChannel+0x108>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd8:	2b06      	cmp	r3, #6
 8001bda:	d01f      	beq.n	8001c1c <HAL_ADC_ConfigChannel+0x108>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be0:	2b07      	cmp	r3, #7
 8001be2:	d01b      	beq.n	8001c1c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	689a      	ldr	r2, [r3, #8]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	2107      	movs	r1, #7
 8001bf0:	400b      	ands	r3, r1
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d012      	beq.n	8001c1c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	695a      	ldr	r2, [r3, #20]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2107      	movs	r1, #7
 8001c02:	438a      	bics	r2, r1
 8001c04:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	6959      	ldr	r1, [r3, #20]
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	2207      	movs	r2, #7
 8001c12:	401a      	ands	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2b10      	cmp	r3, #16
 8001c22:	d003      	beq.n	8001c2c <HAL_ADC_ConfigChannel+0x118>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2b11      	cmp	r3, #17
 8001c2a:	d152      	bne.n	8001cd2 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001c2c:	4b2f      	ldr	r3, [pc, #188]	; (8001cec <HAL_ADC_ConfigChannel+0x1d8>)
 8001c2e:	6819      	ldr	r1, [r3, #0]
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2b10      	cmp	r3, #16
 8001c36:	d102      	bne.n	8001c3e <HAL_ADC_ConfigChannel+0x12a>
 8001c38:	2380      	movs	r3, #128	; 0x80
 8001c3a:	041b      	lsls	r3, r3, #16
 8001c3c:	e001      	b.n	8001c42 <HAL_ADC_ConfigChannel+0x12e>
 8001c3e:	2380      	movs	r3, #128	; 0x80
 8001c40:	03db      	lsls	r3, r3, #15
 8001c42:	4a2a      	ldr	r2, [pc, #168]	; (8001cec <HAL_ADC_ConfigChannel+0x1d8>)
 8001c44:	430b      	orrs	r3, r1
 8001c46:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2b10      	cmp	r3, #16
 8001c4e:	d140      	bne.n	8001cd2 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c50:	4b27      	ldr	r3, [pc, #156]	; (8001cf0 <HAL_ADC_ConfigChannel+0x1dc>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4927      	ldr	r1, [pc, #156]	; (8001cf4 <HAL_ADC_ConfigChannel+0x1e0>)
 8001c56:	0018      	movs	r0, r3
 8001c58:	f7fe fa60 	bl	800011c <__udivsi3>
 8001c5c:	0003      	movs	r3, r0
 8001c5e:	001a      	movs	r2, r3
 8001c60:	0013      	movs	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	189b      	adds	r3, r3, r2
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c6a:	e002      	b.n	8001c72 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1f9      	bne.n	8001c6c <HAL_ADC_ConfigChannel+0x158>
 8001c78:	e02b      	b.n	8001cd2 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2101      	movs	r1, #1
 8001c86:	4099      	lsls	r1, r3
 8001c88:	000b      	movs	r3, r1
 8001c8a:	43d9      	mvns	r1, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	400a      	ands	r2, r1
 8001c92:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2b10      	cmp	r3, #16
 8001c9a:	d003      	beq.n	8001ca4 <HAL_ADC_ConfigChannel+0x190>
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2b11      	cmp	r3, #17
 8001ca2:	d116      	bne.n	8001cd2 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001ca4:	4b11      	ldr	r3, [pc, #68]	; (8001cec <HAL_ADC_ConfigChannel+0x1d8>)
 8001ca6:	6819      	ldr	r1, [r3, #0]
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2b10      	cmp	r3, #16
 8001cae:	d101      	bne.n	8001cb4 <HAL_ADC_ConfigChannel+0x1a0>
 8001cb0:	4a11      	ldr	r2, [pc, #68]	; (8001cf8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001cb2:	e000      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x1a2>
 8001cb4:	4a11      	ldr	r2, [pc, #68]	; (8001cfc <HAL_ADC_ConfigChannel+0x1e8>)
 8001cb6:	4b0d      	ldr	r3, [pc, #52]	; (8001cec <HAL_ADC_ConfigChannel+0x1d8>)
 8001cb8:	400a      	ands	r2, r1
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	e009      	b.n	8001cd2 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cc2:	2220      	movs	r2, #32
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001cca:	230f      	movs	r3, #15
 8001ccc:	18fb      	adds	r3, r7, r3
 8001cce:	2201      	movs	r2, #1
 8001cd0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2234      	movs	r2, #52	; 0x34
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001cda:	230f      	movs	r3, #15
 8001cdc:	18fb      	adds	r3, r7, r3
 8001cde:	781b      	ldrb	r3, [r3, #0]
}
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	b004      	add	sp, #16
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	00001001 	.word	0x00001001
 8001cec:	40012708 	.word	0x40012708
 8001cf0:	20000000 	.word	0x20000000
 8001cf4:	000f4240 	.word	0x000f4240
 8001cf8:	ff7fffff 	.word	0xff7fffff
 8001cfc:	ffbfffff 	.word	0xffbfffff

08001d00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	0002      	movs	r2, r0
 8001d08:	1dfb      	adds	r3, r7, #7
 8001d0a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d0c:	1dfb      	adds	r3, r7, #7
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b7f      	cmp	r3, #127	; 0x7f
 8001d12:	d809      	bhi.n	8001d28 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d14:	1dfb      	adds	r3, r7, #7
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	001a      	movs	r2, r3
 8001d1a:	231f      	movs	r3, #31
 8001d1c:	401a      	ands	r2, r3
 8001d1e:	4b04      	ldr	r3, [pc, #16]	; (8001d30 <__NVIC_EnableIRQ+0x30>)
 8001d20:	2101      	movs	r1, #1
 8001d22:	4091      	lsls	r1, r2
 8001d24:	000a      	movs	r2, r1
 8001d26:	601a      	str	r2, [r3, #0]
  }
}
 8001d28:	46c0      	nop			; (mov r8, r8)
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	b002      	add	sp, #8
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	e000e100 	.word	0xe000e100

08001d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d34:	b590      	push	{r4, r7, lr}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	0002      	movs	r2, r0
 8001d3c:	6039      	str	r1, [r7, #0]
 8001d3e:	1dfb      	adds	r3, r7, #7
 8001d40:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d42:	1dfb      	adds	r3, r7, #7
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	2b7f      	cmp	r3, #127	; 0x7f
 8001d48:	d828      	bhi.n	8001d9c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d4a:	4a2f      	ldr	r2, [pc, #188]	; (8001e08 <__NVIC_SetPriority+0xd4>)
 8001d4c:	1dfb      	adds	r3, r7, #7
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	b25b      	sxtb	r3, r3
 8001d52:	089b      	lsrs	r3, r3, #2
 8001d54:	33c0      	adds	r3, #192	; 0xc0
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	589b      	ldr	r3, [r3, r2]
 8001d5a:	1dfa      	adds	r2, r7, #7
 8001d5c:	7812      	ldrb	r2, [r2, #0]
 8001d5e:	0011      	movs	r1, r2
 8001d60:	2203      	movs	r2, #3
 8001d62:	400a      	ands	r2, r1
 8001d64:	00d2      	lsls	r2, r2, #3
 8001d66:	21ff      	movs	r1, #255	; 0xff
 8001d68:	4091      	lsls	r1, r2
 8001d6a:	000a      	movs	r2, r1
 8001d6c:	43d2      	mvns	r2, r2
 8001d6e:	401a      	ands	r2, r3
 8001d70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	019b      	lsls	r3, r3, #6
 8001d76:	22ff      	movs	r2, #255	; 0xff
 8001d78:	401a      	ands	r2, r3
 8001d7a:	1dfb      	adds	r3, r7, #7
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	0018      	movs	r0, r3
 8001d80:	2303      	movs	r3, #3
 8001d82:	4003      	ands	r3, r0
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d88:	481f      	ldr	r0, [pc, #124]	; (8001e08 <__NVIC_SetPriority+0xd4>)
 8001d8a:	1dfb      	adds	r3, r7, #7
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	b25b      	sxtb	r3, r3
 8001d90:	089b      	lsrs	r3, r3, #2
 8001d92:	430a      	orrs	r2, r1
 8001d94:	33c0      	adds	r3, #192	; 0xc0
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001d9a:	e031      	b.n	8001e00 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d9c:	4a1b      	ldr	r2, [pc, #108]	; (8001e0c <__NVIC_SetPriority+0xd8>)
 8001d9e:	1dfb      	adds	r3, r7, #7
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	0019      	movs	r1, r3
 8001da4:	230f      	movs	r3, #15
 8001da6:	400b      	ands	r3, r1
 8001da8:	3b08      	subs	r3, #8
 8001daa:	089b      	lsrs	r3, r3, #2
 8001dac:	3306      	adds	r3, #6
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	18d3      	adds	r3, r2, r3
 8001db2:	3304      	adds	r3, #4
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	1dfa      	adds	r2, r7, #7
 8001db8:	7812      	ldrb	r2, [r2, #0]
 8001dba:	0011      	movs	r1, r2
 8001dbc:	2203      	movs	r2, #3
 8001dbe:	400a      	ands	r2, r1
 8001dc0:	00d2      	lsls	r2, r2, #3
 8001dc2:	21ff      	movs	r1, #255	; 0xff
 8001dc4:	4091      	lsls	r1, r2
 8001dc6:	000a      	movs	r2, r1
 8001dc8:	43d2      	mvns	r2, r2
 8001dca:	401a      	ands	r2, r3
 8001dcc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	019b      	lsls	r3, r3, #6
 8001dd2:	22ff      	movs	r2, #255	; 0xff
 8001dd4:	401a      	ands	r2, r3
 8001dd6:	1dfb      	adds	r3, r7, #7
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	0018      	movs	r0, r3
 8001ddc:	2303      	movs	r3, #3
 8001dde:	4003      	ands	r3, r0
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001de4:	4809      	ldr	r0, [pc, #36]	; (8001e0c <__NVIC_SetPriority+0xd8>)
 8001de6:	1dfb      	adds	r3, r7, #7
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	001c      	movs	r4, r3
 8001dec:	230f      	movs	r3, #15
 8001dee:	4023      	ands	r3, r4
 8001df0:	3b08      	subs	r3, #8
 8001df2:	089b      	lsrs	r3, r3, #2
 8001df4:	430a      	orrs	r2, r1
 8001df6:	3306      	adds	r3, #6
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	18c3      	adds	r3, r0, r3
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	601a      	str	r2, [r3, #0]
}
 8001e00:	46c0      	nop			; (mov r8, r8)
 8001e02:	46bd      	mov	sp, r7
 8001e04:	b003      	add	sp, #12
 8001e06:	bd90      	pop	{r4, r7, pc}
 8001e08:	e000e100 	.word	0xe000e100
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	1e5a      	subs	r2, r3, #1
 8001e1c:	2380      	movs	r3, #128	; 0x80
 8001e1e:	045b      	lsls	r3, r3, #17
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d301      	bcc.n	8001e28 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e24:	2301      	movs	r3, #1
 8001e26:	e010      	b.n	8001e4a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e28:	4b0a      	ldr	r3, [pc, #40]	; (8001e54 <SysTick_Config+0x44>)
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	3a01      	subs	r2, #1
 8001e2e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e30:	2301      	movs	r3, #1
 8001e32:	425b      	negs	r3, r3
 8001e34:	2103      	movs	r1, #3
 8001e36:	0018      	movs	r0, r3
 8001e38:	f7ff ff7c 	bl	8001d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e3c:	4b05      	ldr	r3, [pc, #20]	; (8001e54 <SysTick_Config+0x44>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e42:	4b04      	ldr	r3, [pc, #16]	; (8001e54 <SysTick_Config+0x44>)
 8001e44:	2207      	movs	r2, #7
 8001e46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	0018      	movs	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	b002      	add	sp, #8
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	46c0      	nop			; (mov r8, r8)
 8001e54:	e000e010 	.word	0xe000e010

08001e58 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60b9      	str	r1, [r7, #8]
 8001e60:	607a      	str	r2, [r7, #4]
 8001e62:	210f      	movs	r1, #15
 8001e64:	187b      	adds	r3, r7, r1
 8001e66:	1c02      	adds	r2, r0, #0
 8001e68:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001e6a:	68ba      	ldr	r2, [r7, #8]
 8001e6c:	187b      	adds	r3, r7, r1
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	b25b      	sxtb	r3, r3
 8001e72:	0011      	movs	r1, r2
 8001e74:	0018      	movs	r0, r3
 8001e76:	f7ff ff5d 	bl	8001d34 <__NVIC_SetPriority>
}
 8001e7a:	46c0      	nop			; (mov r8, r8)
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	b004      	add	sp, #16
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	0002      	movs	r2, r0
 8001e8a:	1dfb      	adds	r3, r7, #7
 8001e8c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e8e:	1dfb      	adds	r3, r7, #7
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	b25b      	sxtb	r3, r3
 8001e94:	0018      	movs	r0, r3
 8001e96:	f7ff ff33 	bl	8001d00 <__NVIC_EnableIRQ>
}
 8001e9a:	46c0      	nop			; (mov r8, r8)
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	b002      	add	sp, #8
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	0018      	movs	r0, r3
 8001eae:	f7ff ffaf 	bl	8001e10 <SysTick_Config>
 8001eb2:	0003      	movs	r3, r0
}
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	b002      	add	sp, #8
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e036      	b.n	8001f40 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2221      	movs	r2, #33	; 0x21
 8001ed6:	2102      	movs	r1, #2
 8001ed8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	4a18      	ldr	r2, [pc, #96]	; (8001f48 <HAL_DMA_Init+0x8c>)
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001ef2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001efe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	695b      	ldr	r3, [r3, #20]
 8001f04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	69db      	ldr	r3, [r3, #28]
 8001f10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	0018      	movs	r0, r3
 8001f24:	f000 f8b4 	bl	8002090 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2221      	movs	r2, #33	; 0x21
 8001f32:	2101      	movs	r1, #1
 8001f34:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2220      	movs	r2, #32
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	0018      	movs	r0, r3
 8001f42:	46bd      	mov	sp, r7
 8001f44:	b004      	add	sp, #16
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	ffffc00f 	.word	0xffffc00f

08001f4c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f68:	2204      	movs	r2, #4
 8001f6a:	409a      	lsls	r2, r3
 8001f6c:	0013      	movs	r3, r2
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	4013      	ands	r3, r2
 8001f72:	d024      	beq.n	8001fbe <HAL_DMA_IRQHandler+0x72>
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	2204      	movs	r2, #4
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d020      	beq.n	8001fbe <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2220      	movs	r2, #32
 8001f84:	4013      	ands	r3, r2
 8001f86:	d107      	bne.n	8001f98 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2104      	movs	r1, #4
 8001f94:	438a      	bics	r2, r1
 8001f96:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fa0:	2104      	movs	r1, #4
 8001fa2:	4091      	lsls	r1, r2
 8001fa4:	000a      	movs	r2, r1
 8001fa6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d100      	bne.n	8001fb2 <HAL_DMA_IRQHandler+0x66>
 8001fb0:	e06a      	b.n	8002088 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	0010      	movs	r0, r2
 8001fba:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001fbc:	e064      	b.n	8002088 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	409a      	lsls	r2, r3
 8001fc6:	0013      	movs	r3, r2
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	d02b      	beq.n	8002026 <HAL_DMA_IRQHandler+0xda>
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	2202      	movs	r2, #2
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d027      	beq.n	8002026 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2220      	movs	r2, #32
 8001fde:	4013      	ands	r3, r2
 8001fe0:	d10b      	bne.n	8001ffa <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	210a      	movs	r1, #10
 8001fee:	438a      	bics	r2, r1
 8001ff0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2221      	movs	r2, #33	; 0x21
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002002:	2102      	movs	r1, #2
 8002004:	4091      	lsls	r1, r2
 8002006:	000a      	movs	r2, r1
 8002008:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2220      	movs	r2, #32
 800200e:	2100      	movs	r1, #0
 8002010:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002016:	2b00      	cmp	r3, #0
 8002018:	d036      	beq.n	8002088 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	0010      	movs	r0, r2
 8002022:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002024:	e030      	b.n	8002088 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	2208      	movs	r2, #8
 800202c:	409a      	lsls	r2, r3
 800202e:	0013      	movs	r3, r2
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	4013      	ands	r3, r2
 8002034:	d028      	beq.n	8002088 <HAL_DMA_IRQHandler+0x13c>
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	2208      	movs	r2, #8
 800203a:	4013      	ands	r3, r2
 800203c:	d024      	beq.n	8002088 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	210e      	movs	r1, #14
 800204a:	438a      	bics	r2, r1
 800204c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002056:	2101      	movs	r1, #1
 8002058:	4091      	lsls	r1, r2
 800205a:	000a      	movs	r2, r1
 800205c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2201      	movs	r2, #1
 8002062:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2221      	movs	r2, #33	; 0x21
 8002068:	2101      	movs	r1, #1
 800206a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2220      	movs	r2, #32
 8002070:	2100      	movs	r1, #0
 8002072:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002078:	2b00      	cmp	r3, #0
 800207a:	d005      	beq.n	8002088 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	0010      	movs	r0, r2
 8002084:	4798      	blx	r3
    }
  }
}
 8002086:	e7ff      	b.n	8002088 <HAL_DMA_IRQHandler+0x13c>
 8002088:	46c0      	nop			; (mov r8, r8)
 800208a:	46bd      	mov	sp, r7
 800208c:	b004      	add	sp, #16
 800208e:	bd80      	pop	{r7, pc}

08002090 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a08      	ldr	r2, [pc, #32]	; (80020c0 <DMA_CalcBaseAndBitshift+0x30>)
 800209e:	4694      	mov	ip, r2
 80020a0:	4463      	add	r3, ip
 80020a2:	2114      	movs	r1, #20
 80020a4:	0018      	movs	r0, r3
 80020a6:	f7fe f839 	bl	800011c <__udivsi3>
 80020aa:	0003      	movs	r3, r0
 80020ac:	009a      	lsls	r2, r3, #2
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a03      	ldr	r2, [pc, #12]	; (80020c4 <DMA_CalcBaseAndBitshift+0x34>)
 80020b6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80020b8:	46c0      	nop			; (mov r8, r8)
 80020ba:	46bd      	mov	sp, r7
 80020bc:	b002      	add	sp, #8
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	bffdfff8 	.word	0xbffdfff8
 80020c4:	40020000 	.word	0x40020000

080020c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020d2:	2300      	movs	r3, #0
 80020d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020d6:	e14f      	b.n	8002378 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2101      	movs	r1, #1
 80020de:	697a      	ldr	r2, [r7, #20]
 80020e0:	4091      	lsls	r1, r2
 80020e2:	000a      	movs	r2, r1
 80020e4:	4013      	ands	r3, r2
 80020e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d100      	bne.n	80020f0 <HAL_GPIO_Init+0x28>
 80020ee:	e140      	b.n	8002372 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	2203      	movs	r2, #3
 80020f6:	4013      	ands	r3, r2
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d005      	beq.n	8002108 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	2203      	movs	r2, #3
 8002102:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002104:	2b02      	cmp	r3, #2
 8002106:	d130      	bne.n	800216a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	2203      	movs	r2, #3
 8002114:	409a      	lsls	r2, r3
 8002116:	0013      	movs	r3, r2
 8002118:	43da      	mvns	r2, r3
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	4013      	ands	r3, r2
 800211e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	68da      	ldr	r2, [r3, #12]
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	409a      	lsls	r2, r3
 800212a:	0013      	movs	r3, r2
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	4313      	orrs	r3, r2
 8002130:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800213e:	2201      	movs	r2, #1
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	409a      	lsls	r2, r3
 8002144:	0013      	movs	r3, r2
 8002146:	43da      	mvns	r2, r3
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	4013      	ands	r3, r2
 800214c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	091b      	lsrs	r3, r3, #4
 8002154:	2201      	movs	r2, #1
 8002156:	401a      	ands	r2, r3
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	409a      	lsls	r2, r3
 800215c:	0013      	movs	r3, r2
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	4313      	orrs	r3, r2
 8002162:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2203      	movs	r2, #3
 8002170:	4013      	ands	r3, r2
 8002172:	2b03      	cmp	r3, #3
 8002174:	d017      	beq.n	80021a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	2203      	movs	r2, #3
 8002182:	409a      	lsls	r2, r3
 8002184:	0013      	movs	r3, r2
 8002186:	43da      	mvns	r2, r3
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	4013      	ands	r3, r2
 800218c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	689a      	ldr	r2, [r3, #8]
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	409a      	lsls	r2, r3
 8002198:	0013      	movs	r3, r2
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	4313      	orrs	r3, r2
 800219e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2203      	movs	r2, #3
 80021ac:	4013      	ands	r3, r2
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d123      	bne.n	80021fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	08da      	lsrs	r2, r3, #3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	3208      	adds	r2, #8
 80021ba:	0092      	lsls	r2, r2, #2
 80021bc:	58d3      	ldr	r3, [r2, r3]
 80021be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	2207      	movs	r2, #7
 80021c4:	4013      	ands	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	220f      	movs	r2, #15
 80021ca:	409a      	lsls	r2, r3
 80021cc:	0013      	movs	r3, r2
 80021ce:	43da      	mvns	r2, r3
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	4013      	ands	r3, r2
 80021d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	691a      	ldr	r2, [r3, #16]
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	2107      	movs	r1, #7
 80021de:	400b      	ands	r3, r1
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	409a      	lsls	r2, r3
 80021e4:	0013      	movs	r3, r2
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	08da      	lsrs	r2, r3, #3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3208      	adds	r2, #8
 80021f4:	0092      	lsls	r2, r2, #2
 80021f6:	6939      	ldr	r1, [r7, #16]
 80021f8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	2203      	movs	r2, #3
 8002206:	409a      	lsls	r2, r3
 8002208:	0013      	movs	r3, r2
 800220a:	43da      	mvns	r2, r3
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	4013      	ands	r3, r2
 8002210:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	2203      	movs	r2, #3
 8002218:	401a      	ands	r2, r3
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	409a      	lsls	r2, r3
 8002220:	0013      	movs	r3, r2
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	4313      	orrs	r3, r2
 8002226:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	23c0      	movs	r3, #192	; 0xc0
 8002234:	029b      	lsls	r3, r3, #10
 8002236:	4013      	ands	r3, r2
 8002238:	d100      	bne.n	800223c <HAL_GPIO_Init+0x174>
 800223a:	e09a      	b.n	8002372 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800223c:	4b54      	ldr	r3, [pc, #336]	; (8002390 <HAL_GPIO_Init+0x2c8>)
 800223e:	699a      	ldr	r2, [r3, #24]
 8002240:	4b53      	ldr	r3, [pc, #332]	; (8002390 <HAL_GPIO_Init+0x2c8>)
 8002242:	2101      	movs	r1, #1
 8002244:	430a      	orrs	r2, r1
 8002246:	619a      	str	r2, [r3, #24]
 8002248:	4b51      	ldr	r3, [pc, #324]	; (8002390 <HAL_GPIO_Init+0x2c8>)
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	2201      	movs	r2, #1
 800224e:	4013      	ands	r3, r2
 8002250:	60bb      	str	r3, [r7, #8]
 8002252:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002254:	4a4f      	ldr	r2, [pc, #316]	; (8002394 <HAL_GPIO_Init+0x2cc>)
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	089b      	lsrs	r3, r3, #2
 800225a:	3302      	adds	r3, #2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	589b      	ldr	r3, [r3, r2]
 8002260:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	2203      	movs	r2, #3
 8002266:	4013      	ands	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	220f      	movs	r2, #15
 800226c:	409a      	lsls	r2, r3
 800226e:	0013      	movs	r3, r2
 8002270:	43da      	mvns	r2, r3
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	4013      	ands	r3, r2
 8002276:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	2390      	movs	r3, #144	; 0x90
 800227c:	05db      	lsls	r3, r3, #23
 800227e:	429a      	cmp	r2, r3
 8002280:	d013      	beq.n	80022aa <HAL_GPIO_Init+0x1e2>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a44      	ldr	r2, [pc, #272]	; (8002398 <HAL_GPIO_Init+0x2d0>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d00d      	beq.n	80022a6 <HAL_GPIO_Init+0x1de>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a43      	ldr	r2, [pc, #268]	; (800239c <HAL_GPIO_Init+0x2d4>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d007      	beq.n	80022a2 <HAL_GPIO_Init+0x1da>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a42      	ldr	r2, [pc, #264]	; (80023a0 <HAL_GPIO_Init+0x2d8>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d101      	bne.n	800229e <HAL_GPIO_Init+0x1d6>
 800229a:	2303      	movs	r3, #3
 800229c:	e006      	b.n	80022ac <HAL_GPIO_Init+0x1e4>
 800229e:	2305      	movs	r3, #5
 80022a0:	e004      	b.n	80022ac <HAL_GPIO_Init+0x1e4>
 80022a2:	2302      	movs	r3, #2
 80022a4:	e002      	b.n	80022ac <HAL_GPIO_Init+0x1e4>
 80022a6:	2301      	movs	r3, #1
 80022a8:	e000      	b.n	80022ac <HAL_GPIO_Init+0x1e4>
 80022aa:	2300      	movs	r3, #0
 80022ac:	697a      	ldr	r2, [r7, #20]
 80022ae:	2103      	movs	r1, #3
 80022b0:	400a      	ands	r2, r1
 80022b2:	0092      	lsls	r2, r2, #2
 80022b4:	4093      	lsls	r3, r2
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022bc:	4935      	ldr	r1, [pc, #212]	; (8002394 <HAL_GPIO_Init+0x2cc>)
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	089b      	lsrs	r3, r3, #2
 80022c2:	3302      	adds	r3, #2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022ca:	4b36      	ldr	r3, [pc, #216]	; (80023a4 <HAL_GPIO_Init+0x2dc>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	43da      	mvns	r2, r3
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	4013      	ands	r3, r2
 80022d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685a      	ldr	r2, [r3, #4]
 80022de:	2380      	movs	r3, #128	; 0x80
 80022e0:	035b      	lsls	r3, r3, #13
 80022e2:	4013      	ands	r3, r2
 80022e4:	d003      	beq.n	80022ee <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80022ee:	4b2d      	ldr	r3, [pc, #180]	; (80023a4 <HAL_GPIO_Init+0x2dc>)
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80022f4:	4b2b      	ldr	r3, [pc, #172]	; (80023a4 <HAL_GPIO_Init+0x2dc>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	43da      	mvns	r2, r3
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	4013      	ands	r3, r2
 8002302:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685a      	ldr	r2, [r3, #4]
 8002308:	2380      	movs	r3, #128	; 0x80
 800230a:	039b      	lsls	r3, r3, #14
 800230c:	4013      	ands	r3, r2
 800230e:	d003      	beq.n	8002318 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	4313      	orrs	r3, r2
 8002316:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002318:	4b22      	ldr	r3, [pc, #136]	; (80023a4 <HAL_GPIO_Init+0x2dc>)
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800231e:	4b21      	ldr	r3, [pc, #132]	; (80023a4 <HAL_GPIO_Init+0x2dc>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	43da      	mvns	r2, r3
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	4013      	ands	r3, r2
 800232c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685a      	ldr	r2, [r3, #4]
 8002332:	2380      	movs	r3, #128	; 0x80
 8002334:	029b      	lsls	r3, r3, #10
 8002336:	4013      	ands	r3, r2
 8002338:	d003      	beq.n	8002342 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	4313      	orrs	r3, r2
 8002340:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002342:	4b18      	ldr	r3, [pc, #96]	; (80023a4 <HAL_GPIO_Init+0x2dc>)
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002348:	4b16      	ldr	r3, [pc, #88]	; (80023a4 <HAL_GPIO_Init+0x2dc>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	43da      	mvns	r2, r3
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	4013      	ands	r3, r2
 8002356:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	2380      	movs	r3, #128	; 0x80
 800235e:	025b      	lsls	r3, r3, #9
 8002360:	4013      	ands	r3, r2
 8002362:	d003      	beq.n	800236c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	4313      	orrs	r3, r2
 800236a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800236c:	4b0d      	ldr	r3, [pc, #52]	; (80023a4 <HAL_GPIO_Init+0x2dc>)
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	3301      	adds	r3, #1
 8002376:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	40da      	lsrs	r2, r3
 8002380:	1e13      	subs	r3, r2, #0
 8002382:	d000      	beq.n	8002386 <HAL_GPIO_Init+0x2be>
 8002384:	e6a8      	b.n	80020d8 <HAL_GPIO_Init+0x10>
  } 
}
 8002386:	46c0      	nop			; (mov r8, r8)
 8002388:	46c0      	nop			; (mov r8, r8)
 800238a:	46bd      	mov	sp, r7
 800238c:	b006      	add	sp, #24
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40021000 	.word	0x40021000
 8002394:	40010000 	.word	0x40010000
 8002398:	48000400 	.word	0x48000400
 800239c:	48000800 	.word	0x48000800
 80023a0:	48000c00 	.word	0x48000c00
 80023a4:	40010400 	.word	0x40010400

080023a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	000a      	movs	r2, r1
 80023b2:	1cbb      	adds	r3, r7, #2
 80023b4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	1cba      	adds	r2, r7, #2
 80023bc:	8812      	ldrh	r2, [r2, #0]
 80023be:	4013      	ands	r3, r2
 80023c0:	d004      	beq.n	80023cc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80023c2:	230f      	movs	r3, #15
 80023c4:	18fb      	adds	r3, r7, r3
 80023c6:	2201      	movs	r2, #1
 80023c8:	701a      	strb	r2, [r3, #0]
 80023ca:	e003      	b.n	80023d4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023cc:	230f      	movs	r3, #15
 80023ce:	18fb      	adds	r3, r7, r3
 80023d0:	2200      	movs	r2, #0
 80023d2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80023d4:	230f      	movs	r3, #15
 80023d6:	18fb      	adds	r3, r7, r3
 80023d8:	781b      	ldrb	r3, [r3, #0]
  }
 80023da:	0018      	movs	r0, r3
 80023dc:	46bd      	mov	sp, r7
 80023de:	b004      	add	sp, #16
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b082      	sub	sp, #8
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
 80023ea:	0008      	movs	r0, r1
 80023ec:	0011      	movs	r1, r2
 80023ee:	1cbb      	adds	r3, r7, #2
 80023f0:	1c02      	adds	r2, r0, #0
 80023f2:	801a      	strh	r2, [r3, #0]
 80023f4:	1c7b      	adds	r3, r7, #1
 80023f6:	1c0a      	adds	r2, r1, #0
 80023f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023fa:	1c7b      	adds	r3, r7, #1
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d004      	beq.n	800240c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002402:	1cbb      	adds	r3, r7, #2
 8002404:	881a      	ldrh	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800240a:	e003      	b.n	8002414 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800240c:	1cbb      	adds	r3, r7, #2
 800240e:	881a      	ldrh	r2, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002414:	46c0      	nop			; (mov r8, r8)
 8002416:	46bd      	mov	sp, r7
 8002418:	b002      	add	sp, #8
 800241a:	bd80      	pop	{r7, pc}

0800241c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800241c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800241e:	b08b      	sub	sp, #44	; 0x2c
 8002420:	af06      	add	r7, sp, #24
 8002422:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e0f0      	b.n	8002610 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a79      	ldr	r2, [pc, #484]	; (8002618 <HAL_PCD_Init+0x1fc>)
 8002432:	5c9b      	ldrb	r3, [r3, r2]
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d108      	bne.n	800244c <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	23aa      	movs	r3, #170	; 0xaa
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	2100      	movs	r1, #0
 8002442:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	0018      	movs	r0, r3
 8002448:	f007 fbf2 	bl	8009c30 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a72      	ldr	r2, [pc, #456]	; (8002618 <HAL_PCD_Init+0x1fc>)
 8002450:	2103      	movs	r1, #3
 8002452:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	0018      	movs	r0, r3
 800245a:	f003 fe03 	bl	8006064 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800245e:	230f      	movs	r3, #15
 8002460:	18fb      	adds	r3, r7, r3
 8002462:	2200      	movs	r2, #0
 8002464:	701a      	strb	r2, [r3, #0]
 8002466:	e049      	b.n	80024fc <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002468:	200f      	movs	r0, #15
 800246a:	183b      	adds	r3, r7, r0
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	1c5a      	adds	r2, r3, #1
 8002472:	0013      	movs	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	189b      	adds	r3, r3, r2
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	18cb      	adds	r3, r1, r3
 800247c:	3301      	adds	r3, #1
 800247e:	2201      	movs	r2, #1
 8002480:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002482:	183b      	adds	r3, r7, r0
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	1c5a      	adds	r2, r3, #1
 800248a:	0013      	movs	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	189b      	adds	r3, r3, r2
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	183a      	adds	r2, r7, r0
 8002494:	7812      	ldrb	r2, [r2, #0]
 8002496:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002498:	183b      	adds	r3, r7, r0
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	6879      	ldr	r1, [r7, #4]
 800249e:	1c5a      	adds	r2, r3, #1
 80024a0:	0013      	movs	r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	189b      	adds	r3, r3, r2
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	18cb      	adds	r3, r1, r3
 80024aa:	3303      	adds	r3, #3
 80024ac:	2200      	movs	r2, #0
 80024ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024b0:	183b      	adds	r3, r7, r0
 80024b2:	781a      	ldrb	r2, [r3, #0]
 80024b4:	6879      	ldr	r1, [r7, #4]
 80024b6:	0013      	movs	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	189b      	adds	r3, r3, r2
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	18cb      	adds	r3, r1, r3
 80024c0:	3338      	adds	r3, #56	; 0x38
 80024c2:	2200      	movs	r2, #0
 80024c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024c6:	183b      	adds	r3, r7, r0
 80024c8:	781a      	ldrb	r2, [r3, #0]
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	0013      	movs	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	189b      	adds	r3, r3, r2
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	18cb      	adds	r3, r1, r3
 80024d6:	333c      	adds	r3, #60	; 0x3c
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80024dc:	183b      	adds	r3, r7, r0
 80024de:	781a      	ldrb	r2, [r3, #0]
 80024e0:	6879      	ldr	r1, [r7, #4]
 80024e2:	0013      	movs	r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	189b      	adds	r3, r3, r2
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	18cb      	adds	r3, r1, r3
 80024ec:	3340      	adds	r3, #64	; 0x40
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024f2:	183b      	adds	r3, r7, r0
 80024f4:	781a      	ldrb	r2, [r3, #0]
 80024f6:	183b      	adds	r3, r7, r0
 80024f8:	3201      	adds	r2, #1
 80024fa:	701a      	strb	r2, [r3, #0]
 80024fc:	210f      	movs	r1, #15
 80024fe:	187b      	adds	r3, r7, r1
 8002500:	781a      	ldrb	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	429a      	cmp	r2, r3
 8002508:	d3ae      	bcc.n	8002468 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800250a:	187b      	adds	r3, r7, r1
 800250c:	2200      	movs	r2, #0
 800250e:	701a      	strb	r2, [r3, #0]
 8002510:	e056      	b.n	80025c0 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002512:	240f      	movs	r4, #15
 8002514:	193b      	adds	r3, r7, r4
 8002516:	781a      	ldrb	r2, [r3, #0]
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	236a      	movs	r3, #106	; 0x6a
 800251c:	33ff      	adds	r3, #255	; 0xff
 800251e:	0019      	movs	r1, r3
 8002520:	0013      	movs	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	189b      	adds	r3, r3, r2
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	18c3      	adds	r3, r0, r3
 800252a:	185b      	adds	r3, r3, r1
 800252c:	2200      	movs	r2, #0
 800252e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002530:	193b      	adds	r3, r7, r4
 8002532:	781a      	ldrb	r2, [r3, #0]
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	23b4      	movs	r3, #180	; 0xb4
 8002538:	0059      	lsls	r1, r3, #1
 800253a:	0013      	movs	r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	189b      	adds	r3, r3, r2
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	18c3      	adds	r3, r0, r3
 8002544:	185b      	adds	r3, r3, r1
 8002546:	193a      	adds	r2, r7, r4
 8002548:	7812      	ldrb	r2, [r2, #0]
 800254a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800254c:	193b      	adds	r3, r7, r4
 800254e:	781a      	ldrb	r2, [r3, #0]
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	236c      	movs	r3, #108	; 0x6c
 8002554:	33ff      	adds	r3, #255	; 0xff
 8002556:	0019      	movs	r1, r3
 8002558:	0013      	movs	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	189b      	adds	r3, r3, r2
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	18c3      	adds	r3, r0, r3
 8002562:	185b      	adds	r3, r3, r1
 8002564:	2200      	movs	r2, #0
 8002566:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002568:	193b      	adds	r3, r7, r4
 800256a:	781a      	ldrb	r2, [r3, #0]
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	23bc      	movs	r3, #188	; 0xbc
 8002570:	0059      	lsls	r1, r3, #1
 8002572:	0013      	movs	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	189b      	adds	r3, r3, r2
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	18c3      	adds	r3, r0, r3
 800257c:	185b      	adds	r3, r3, r1
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002582:	193b      	adds	r3, r7, r4
 8002584:	781a      	ldrb	r2, [r3, #0]
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	23be      	movs	r3, #190	; 0xbe
 800258a:	0059      	lsls	r1, r3, #1
 800258c:	0013      	movs	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	189b      	adds	r3, r3, r2
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	18c3      	adds	r3, r0, r3
 8002596:	185b      	adds	r3, r3, r1
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800259c:	193b      	adds	r3, r7, r4
 800259e:	781a      	ldrb	r2, [r3, #0]
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	23c0      	movs	r3, #192	; 0xc0
 80025a4:	0059      	lsls	r1, r3, #1
 80025a6:	0013      	movs	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	189b      	adds	r3, r3, r2
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	18c3      	adds	r3, r0, r3
 80025b0:	185b      	adds	r3, r3, r1
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025b6:	193b      	adds	r3, r7, r4
 80025b8:	781a      	ldrb	r2, [r3, #0]
 80025ba:	193b      	adds	r3, r7, r4
 80025bc:	3201      	adds	r2, #1
 80025be:	701a      	strb	r2, [r3, #0]
 80025c0:	230f      	movs	r3, #15
 80025c2:	18fb      	adds	r3, r7, r3
 80025c4:	781a      	ldrb	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d3a1      	bcc.n	8002512 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6818      	ldr	r0, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	466a      	mov	r2, sp
 80025d6:	0011      	movs	r1, r2
 80025d8:	001a      	movs	r2, r3
 80025da:	3210      	adds	r2, #16
 80025dc:	ca70      	ldmia	r2!, {r4, r5, r6}
 80025de:	c170      	stmia	r1!, {r4, r5, r6}
 80025e0:	ca30      	ldmia	r2!, {r4, r5}
 80025e2:	c130      	stmia	r1!, {r4, r5}
 80025e4:	6859      	ldr	r1, [r3, #4]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	f003 fd55 	bl	8006098 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2224      	movs	r2, #36	; 0x24
 80025f2:	2100      	movs	r1, #0
 80025f4:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a07      	ldr	r2, [pc, #28]	; (8002618 <HAL_PCD_Init+0x1fc>)
 80025fa:	2101      	movs	r1, #1
 80025fc:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d103      	bne.n	800260e <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	0018      	movs	r0, r3
 800260a:	f001 fd09 	bl	8004020 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800260e:	2300      	movs	r3, #0
}
 8002610:	0018      	movs	r0, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	b005      	add	sp, #20
 8002616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002618:	000002a9 	.word	0x000002a9

0800261c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	23aa      	movs	r3, #170	; 0xaa
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	5cd3      	ldrb	r3, [r2, r3]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d101      	bne.n	8002634 <HAL_PCD_Start+0x18>
 8002630:	2302      	movs	r3, #2
 8002632:	e014      	b.n	800265e <HAL_PCD_Start+0x42>
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	23aa      	movs	r3, #170	; 0xaa
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	2101      	movs	r1, #1
 800263c:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	0018      	movs	r0, r3
 8002644:	f003 fcf8 	bl	8006038 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	0018      	movs	r0, r3
 800264e:	f005 fcfb 	bl	8008048 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	23aa      	movs	r3, #170	; 0xaa
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	2100      	movs	r1, #0
 800265a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	0018      	movs	r0, r3
 8002660:	46bd      	mov	sp, r7
 8002662:	b002      	add	sp, #8
 8002664:	bd80      	pop	{r7, pc}
	...

08002668 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	0018      	movs	r0, r3
 8002676:	f005 fcfd 	bl	8008074 <USB_ReadInterrupts>
 800267a:	0003      	movs	r3, r0
 800267c:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	2380      	movs	r3, #128	; 0x80
 8002682:	021b      	lsls	r3, r3, #8
 8002684:	4013      	ands	r3, r2
 8002686:	d004      	beq.n	8002692 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	0018      	movs	r0, r3
 800268c:	f000 fb48 	bl	8002d20 <PCD_EP_ISR_Handler>

    return;
 8002690:	e11d      	b.n	80028ce <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	2380      	movs	r3, #128	; 0x80
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	4013      	ands	r3, r2
 800269a:	d015      	beq.n	80026c8 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2244      	movs	r2, #68	; 0x44
 80026a2:	5a9b      	ldrh	r3, [r3, r2]
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	498a      	ldr	r1, [pc, #552]	; (80028d4 <HAL_PCD_IRQHandler+0x26c>)
 80026ac:	400a      	ands	r2, r1
 80026ae:	b291      	uxth	r1, r2
 80026b0:	2244      	movs	r2, #68	; 0x44
 80026b2:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	0018      	movs	r0, r3
 80026b8:	f007 fb45 	bl	8009d46 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2100      	movs	r1, #0
 80026c0:	0018      	movs	r0, r3
 80026c2:	f000 f915 	bl	80028f0 <HAL_PCD_SetAddress>

    return;
 80026c6:	e102      	b.n	80028ce <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	2380      	movs	r3, #128	; 0x80
 80026cc:	01db      	lsls	r3, r3, #7
 80026ce:	4013      	ands	r3, r2
 80026d0:	d00c      	beq.n	80026ec <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2244      	movs	r2, #68	; 0x44
 80026d8:	5a9b      	ldrh	r3, [r3, r2]
 80026da:	b29a      	uxth	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	497d      	ldr	r1, [pc, #500]	; (80028d8 <HAL_PCD_IRQHandler+0x270>)
 80026e2:	400a      	ands	r2, r1
 80026e4:	b291      	uxth	r1, r2
 80026e6:	2244      	movs	r2, #68	; 0x44
 80026e8:	5299      	strh	r1, [r3, r2]

    return;
 80026ea:	e0f0      	b.n	80028ce <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	2380      	movs	r3, #128	; 0x80
 80026f0:	019b      	lsls	r3, r3, #6
 80026f2:	4013      	ands	r3, r2
 80026f4:	d00c      	beq.n	8002710 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2244      	movs	r2, #68	; 0x44
 80026fc:	5a9b      	ldrh	r3, [r3, r2]
 80026fe:	b29a      	uxth	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4975      	ldr	r1, [pc, #468]	; (80028dc <HAL_PCD_IRQHandler+0x274>)
 8002706:	400a      	ands	r2, r1
 8002708:	b291      	uxth	r1, r2
 800270a:	2244      	movs	r2, #68	; 0x44
 800270c:	5299      	strh	r1, [r3, r2]

    return;
 800270e:	e0de      	b.n	80028ce <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	2380      	movs	r3, #128	; 0x80
 8002714:	015b      	lsls	r3, r3, #5
 8002716:	4013      	ands	r3, r2
 8002718:	d038      	beq.n	800278c <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2240      	movs	r2, #64	; 0x40
 8002720:	5a9b      	ldrh	r3, [r3, r2]
 8002722:	b29a      	uxth	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2104      	movs	r1, #4
 800272a:	438a      	bics	r2, r1
 800272c:	b291      	uxth	r1, r2
 800272e:	2240      	movs	r2, #64	; 0x40
 8002730:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2240      	movs	r2, #64	; 0x40
 8002738:	5a9b      	ldrh	r3, [r3, r2]
 800273a:	b29a      	uxth	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2108      	movs	r1, #8
 8002742:	438a      	bics	r2, r1
 8002744:	b291      	uxth	r1, r2
 8002746:	2240      	movs	r2, #64	; 0x40
 8002748:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	23b8      	movs	r3, #184	; 0xb8
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	5cd3      	ldrb	r3, [r2, r3]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d109      	bne.n	800276a <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	23b8      	movs	r3, #184	; 0xb8
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	2100      	movs	r1, #0
 800275e:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2100      	movs	r1, #0
 8002764:	0018      	movs	r0, r3
 8002766:	f001 fc85 	bl	8004074 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	0018      	movs	r0, r3
 800276e:	f007 fb2b 	bl	8009dc8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2244      	movs	r2, #68	; 0x44
 8002778:	5a9b      	ldrh	r3, [r3, r2]
 800277a:	b29a      	uxth	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4957      	ldr	r1, [pc, #348]	; (80028e0 <HAL_PCD_IRQHandler+0x278>)
 8002782:	400a      	ands	r2, r1
 8002784:	b291      	uxth	r1, r2
 8002786:	2244      	movs	r2, #68	; 0x44
 8002788:	5299      	strh	r1, [r3, r2]

    return;
 800278a:	e0a0      	b.n	80028ce <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	2380      	movs	r3, #128	; 0x80
 8002790:	011b      	lsls	r3, r3, #4
 8002792:	4013      	ands	r3, r2
 8002794:	d028      	beq.n	80027e8 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2240      	movs	r2, #64	; 0x40
 800279c:	5a9b      	ldrh	r3, [r3, r2]
 800279e:	b29a      	uxth	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2108      	movs	r1, #8
 80027a6:	430a      	orrs	r2, r1
 80027a8:	b291      	uxth	r1, r2
 80027aa:	2240      	movs	r2, #64	; 0x40
 80027ac:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2244      	movs	r2, #68	; 0x44
 80027b4:	5a9b      	ldrh	r3, [r3, r2]
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4949      	ldr	r1, [pc, #292]	; (80028e4 <HAL_PCD_IRQHandler+0x27c>)
 80027be:	400a      	ands	r2, r1
 80027c0:	b291      	uxth	r1, r2
 80027c2:	2244      	movs	r2, #68	; 0x44
 80027c4:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2240      	movs	r2, #64	; 0x40
 80027cc:	5a9b      	ldrh	r3, [r3, r2]
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2104      	movs	r1, #4
 80027d6:	430a      	orrs	r2, r1
 80027d8:	b291      	uxth	r1, r2
 80027da:	2240      	movs	r2, #64	; 0x40
 80027dc:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	0018      	movs	r0, r3
 80027e2:	f007 fad5 	bl	8009d90 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80027e6:	e072      	b.n	80028ce <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2280      	movs	r2, #128	; 0x80
 80027ec:	4013      	ands	r3, r2
 80027ee:	d046      	beq.n	800287e <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2244      	movs	r2, #68	; 0x44
 80027f6:	5a9b      	ldrh	r3, [r3, r2]
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2180      	movs	r1, #128	; 0x80
 8002800:	438a      	bics	r2, r1
 8002802:	b291      	uxth	r1, r2
 8002804:	2244      	movs	r2, #68	; 0x44
 8002806:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	23b8      	movs	r3, #184	; 0xb8
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	5cd3      	ldrb	r3, [r2, r3]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d12f      	bne.n	8002874 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2240      	movs	r2, #64	; 0x40
 800281a:	5a9b      	ldrh	r3, [r3, r2]
 800281c:	b29a      	uxth	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2104      	movs	r1, #4
 8002824:	430a      	orrs	r2, r1
 8002826:	b291      	uxth	r1, r2
 8002828:	2240      	movs	r2, #64	; 0x40
 800282a:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2240      	movs	r2, #64	; 0x40
 8002832:	5a9b      	ldrh	r3, [r3, r2]
 8002834:	b29a      	uxth	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2108      	movs	r1, #8
 800283c:	430a      	orrs	r2, r1
 800283e:	b291      	uxth	r1, r2
 8002840:	2240      	movs	r2, #64	; 0x40
 8002842:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	23b8      	movs	r3, #184	; 0xb8
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	2101      	movs	r1, #1
 800284c:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2254      	movs	r2, #84	; 0x54
 8002854:	5a9b      	ldrh	r3, [r3, r2]
 8002856:	b29b      	uxth	r3, r3
 8002858:	089b      	lsrs	r3, r3, #2
 800285a:	223c      	movs	r2, #60	; 0x3c
 800285c:	4013      	ands	r3, r2
 800285e:	0019      	movs	r1, r3
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	23b9      	movs	r3, #185	; 0xb9
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2101      	movs	r1, #1
 800286c:	0018      	movs	r0, r3
 800286e:	f001 fc01 	bl	8004074 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002872:	e02c      	b.n	80028ce <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	0018      	movs	r0, r3
 8002878:	f007 fa8a 	bl	8009d90 <HAL_PCD_SuspendCallback>
    return;
 800287c:	e027      	b.n	80028ce <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	2380      	movs	r3, #128	; 0x80
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4013      	ands	r3, r2
 8002886:	d010      	beq.n	80028aa <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2244      	movs	r2, #68	; 0x44
 800288e:	5a9b      	ldrh	r3, [r3, r2]
 8002890:	b29a      	uxth	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4914      	ldr	r1, [pc, #80]	; (80028e8 <HAL_PCD_IRQHandler+0x280>)
 8002898:	400a      	ands	r2, r1
 800289a:	b291      	uxth	r1, r2
 800289c:	2244      	movs	r2, #68	; 0x44
 800289e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	0018      	movs	r0, r3
 80028a4:	f007 fa40 	bl	8009d28 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80028a8:	e011      	b.n	80028ce <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	2380      	movs	r3, #128	; 0x80
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	4013      	ands	r3, r2
 80028b2:	d00c      	beq.n	80028ce <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2244      	movs	r2, #68	; 0x44
 80028ba:	5a9b      	ldrh	r3, [r3, r2]
 80028bc:	b29a      	uxth	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	490a      	ldr	r1, [pc, #40]	; (80028ec <HAL_PCD_IRQHandler+0x284>)
 80028c4:	400a      	ands	r2, r1
 80028c6:	b291      	uxth	r1, r2
 80028c8:	2244      	movs	r2, #68	; 0x44
 80028ca:	5299      	strh	r1, [r3, r2]

    return;
 80028cc:	46c0      	nop			; (mov r8, r8)
  }
}
 80028ce:	46bd      	mov	sp, r7
 80028d0:	b004      	add	sp, #16
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	fffffbff 	.word	0xfffffbff
 80028d8:	ffffbfff 	.word	0xffffbfff
 80028dc:	ffffdfff 	.word	0xffffdfff
 80028e0:	ffffefff 	.word	0xffffefff
 80028e4:	fffff7ff 	.word	0xfffff7ff
 80028e8:	fffffdff 	.word	0xfffffdff
 80028ec:	fffffeff 	.word	0xfffffeff

080028f0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	000a      	movs	r2, r1
 80028fa:	1cfb      	adds	r3, r7, #3
 80028fc:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	23aa      	movs	r3, #170	; 0xaa
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	5cd3      	ldrb	r3, [r2, r3]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d101      	bne.n	800290e <HAL_PCD_SetAddress+0x1e>
 800290a:	2302      	movs	r3, #2
 800290c:	e017      	b.n	800293e <HAL_PCD_SetAddress+0x4e>
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	23aa      	movs	r3, #170	; 0xaa
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	2101      	movs	r1, #1
 8002916:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	1cfa      	adds	r2, r7, #3
 800291c:	2124      	movs	r1, #36	; 0x24
 800291e:	7812      	ldrb	r2, [r2, #0]
 8002920:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	1cfb      	adds	r3, r7, #3
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	0019      	movs	r1, r3
 800292c:	0010      	movs	r0, r2
 800292e:	f005 fb77 	bl	8008020 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	23aa      	movs	r3, #170	; 0xaa
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	2100      	movs	r1, #0
 800293a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	0018      	movs	r0, r3
 8002940:	46bd      	mov	sp, r7
 8002942:	b002      	add	sp, #8
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002946:	b590      	push	{r4, r7, lr}
 8002948:	b085      	sub	sp, #20
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
 800294e:	000c      	movs	r4, r1
 8002950:	0010      	movs	r0, r2
 8002952:	0019      	movs	r1, r3
 8002954:	1cfb      	adds	r3, r7, #3
 8002956:	1c22      	adds	r2, r4, #0
 8002958:	701a      	strb	r2, [r3, #0]
 800295a:	003b      	movs	r3, r7
 800295c:	1c02      	adds	r2, r0, #0
 800295e:	801a      	strh	r2, [r3, #0]
 8002960:	1cbb      	adds	r3, r7, #2
 8002962:	1c0a      	adds	r2, r1, #0
 8002964:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002966:	230b      	movs	r3, #11
 8002968:	18fb      	adds	r3, r7, r3
 800296a:	2200      	movs	r2, #0
 800296c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800296e:	1cfb      	adds	r3, r7, #3
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	b25b      	sxtb	r3, r3
 8002974:	2b00      	cmp	r3, #0
 8002976:	da0f      	bge.n	8002998 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002978:	1cfb      	adds	r3, r7, #3
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	2207      	movs	r2, #7
 800297e:	4013      	ands	r3, r2
 8002980:	1c5a      	adds	r2, r3, #1
 8002982:	0013      	movs	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	189b      	adds	r3, r3, r2
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	18d3      	adds	r3, r2, r3
 800298e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2201      	movs	r2, #1
 8002994:	705a      	strb	r2, [r3, #1]
 8002996:	e00f      	b.n	80029b8 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002998:	1cfb      	adds	r3, r7, #3
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2207      	movs	r2, #7
 800299e:	401a      	ands	r2, r3
 80029a0:	0013      	movs	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	189b      	adds	r3, r3, r2
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	3369      	adds	r3, #105	; 0x69
 80029aa:	33ff      	adds	r3, #255	; 0xff
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	18d3      	adds	r3, r2, r3
 80029b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80029b8:	1cfb      	adds	r3, r7, #3
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2207      	movs	r2, #7
 80029be:	4013      	ands	r3, r2
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80029c6:	003b      	movs	r3, r7
 80029c8:	881a      	ldrh	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	1cba      	adds	r2, r7, #2
 80029d2:	7812      	ldrb	r2, [r2, #0]
 80029d4:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80029d6:	1cbb      	adds	r3, r7, #2
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d102      	bne.n	80029e4 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	23aa      	movs	r3, #170	; 0xaa
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	5cd3      	ldrb	r3, [r2, r3]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d101      	bne.n	80029f4 <HAL_PCD_EP_Open+0xae>
 80029f0:	2302      	movs	r3, #2
 80029f2:	e013      	b.n	8002a1c <HAL_PCD_EP_Open+0xd6>
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	23aa      	movs	r3, #170	; 0xaa
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	2101      	movs	r1, #1
 80029fc:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	0011      	movs	r1, r2
 8002a06:	0018      	movs	r0, r3
 8002a08:	f003 fb6e 	bl	80060e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	23aa      	movs	r3, #170	; 0xaa
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	2100      	movs	r1, #0
 8002a14:	54d1      	strb	r1, [r2, r3]

  return ret;
 8002a16:	230b      	movs	r3, #11
 8002a18:	18fb      	adds	r3, r7, r3
 8002a1a:	781b      	ldrb	r3, [r3, #0]
}
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	b005      	add	sp, #20
 8002a22:	bd90      	pop	{r4, r7, pc}

08002a24 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	000a      	movs	r2, r1
 8002a2e:	1cfb      	adds	r3, r7, #3
 8002a30:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a32:	1cfb      	adds	r3, r7, #3
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	b25b      	sxtb	r3, r3
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	da0f      	bge.n	8002a5c <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a3c:	1cfb      	adds	r3, r7, #3
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	2207      	movs	r2, #7
 8002a42:	4013      	ands	r3, r2
 8002a44:	1c5a      	adds	r2, r3, #1
 8002a46:	0013      	movs	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	189b      	adds	r3, r3, r2
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	18d3      	adds	r3, r2, r3
 8002a52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2201      	movs	r2, #1
 8002a58:	705a      	strb	r2, [r3, #1]
 8002a5a:	e00f      	b.n	8002a7c <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a5c:	1cfb      	adds	r3, r7, #3
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	2207      	movs	r2, #7
 8002a62:	401a      	ands	r2, r3
 8002a64:	0013      	movs	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	189b      	adds	r3, r3, r2
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	3369      	adds	r3, #105	; 0x69
 8002a6e:	33ff      	adds	r3, #255	; 0xff
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	18d3      	adds	r3, r2, r3
 8002a74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a7c:	1cfb      	adds	r3, r7, #3
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	2207      	movs	r2, #7
 8002a82:	4013      	ands	r3, r2
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	23aa      	movs	r3, #170	; 0xaa
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	5cd3      	ldrb	r3, [r2, r3]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d101      	bne.n	8002a9a <HAL_PCD_EP_Close+0x76>
 8002a96:	2302      	movs	r3, #2
 8002a98:	e011      	b.n	8002abe <HAL_PCD_EP_Close+0x9a>
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	23aa      	movs	r3, #170	; 0xaa
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	0011      	movs	r1, r2
 8002aac:	0018      	movs	r0, r3
 8002aae:	f003 febd 	bl	800682c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	23aa      	movs	r3, #170	; 0xaa
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	2100      	movs	r1, #0
 8002aba:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	0018      	movs	r0, r3
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	b004      	add	sp, #16
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b086      	sub	sp, #24
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	60f8      	str	r0, [r7, #12]
 8002ace:	607a      	str	r2, [r7, #4]
 8002ad0:	603b      	str	r3, [r7, #0]
 8002ad2:	200b      	movs	r0, #11
 8002ad4:	183b      	adds	r3, r7, r0
 8002ad6:	1c0a      	adds	r2, r1, #0
 8002ad8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ada:	0001      	movs	r1, r0
 8002adc:	187b      	adds	r3, r7, r1
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2207      	movs	r2, #7
 8002ae2:	401a      	ands	r2, r3
 8002ae4:	0013      	movs	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	189b      	adds	r3, r3, r2
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	3369      	adds	r3, #105	; 0x69
 8002aee:	33ff      	adds	r3, #255	; 0xff
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	18d3      	adds	r3, r2, r3
 8002af4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	2200      	movs	r2, #0
 8002b06:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b0e:	187b      	adds	r3, r7, r1
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	2207      	movs	r2, #7
 8002b14:	4013      	ands	r3, r2
 8002b16:	b2da      	uxtb	r2, r3
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	0011      	movs	r1, r2
 8002b24:	0018      	movs	r0, r3
 8002b26:	f004 f841 	bl	8006bac <USB_EPStartXfer>

  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	b006      	add	sp, #24
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	607a      	str	r2, [r7, #4]
 8002b3e:	603b      	str	r3, [r7, #0]
 8002b40:	200b      	movs	r0, #11
 8002b42:	183b      	adds	r3, r7, r0
 8002b44:	1c0a      	adds	r2, r1, #0
 8002b46:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b48:	183b      	adds	r3, r7, r0
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	2207      	movs	r2, #7
 8002b4e:	4013      	ands	r3, r2
 8002b50:	1c5a      	adds	r2, r3, #1
 8002b52:	0013      	movs	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	189b      	adds	r3, r3, r2
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	18d3      	adds	r3, r2, r3
 8002b5e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	2224      	movs	r2, #36	; 0x24
 8002b70:	2101      	movs	r1, #1
 8002b72:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	683a      	ldr	r2, [r7, #0]
 8002b78:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	2201      	movs	r2, #1
 8002b84:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b86:	183b      	adds	r3, r7, r0
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2207      	movs	r2, #7
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	b2da      	uxtb	r2, r3
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	0011      	movs	r1, r2
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	f004 f805 	bl	8006bac <USB_EPStartXfer>

  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	b006      	add	sp, #24
 8002baa:	bd80      	pop	{r7, pc}

08002bac <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	000a      	movs	r2, r1
 8002bb6:	1cfb      	adds	r3, r7, #3
 8002bb8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002bba:	1cfb      	adds	r3, r7, #3
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	2207      	movs	r2, #7
 8002bc0:	401a      	ands	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d901      	bls.n	8002bce <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e046      	b.n	8002c5c <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002bce:	1cfb      	adds	r3, r7, #3
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	b25b      	sxtb	r3, r3
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	da0f      	bge.n	8002bf8 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bd8:	1cfb      	adds	r3, r7, #3
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2207      	movs	r2, #7
 8002bde:	4013      	ands	r3, r2
 8002be0:	1c5a      	adds	r2, r3, #1
 8002be2:	0013      	movs	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	189b      	adds	r3, r3, r2
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	18d3      	adds	r3, r2, r3
 8002bee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	705a      	strb	r2, [r3, #1]
 8002bf6:	e00d      	b.n	8002c14 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002bf8:	1cfb      	adds	r3, r7, #3
 8002bfa:	781a      	ldrb	r2, [r3, #0]
 8002bfc:	0013      	movs	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	189b      	adds	r3, r3, r2
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	3369      	adds	r3, #105	; 0x69
 8002c06:	33ff      	adds	r3, #255	; 0xff
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	18d3      	adds	r3, r2, r3
 8002c0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2201      	movs	r2, #1
 8002c18:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c1a:	1cfb      	adds	r3, r7, #3
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	2207      	movs	r2, #7
 8002c20:	4013      	ands	r3, r2
 8002c22:	b2da      	uxtb	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	23aa      	movs	r3, #170	; 0xaa
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	5cd3      	ldrb	r3, [r2, r3]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d101      	bne.n	8002c38 <HAL_PCD_EP_SetStall+0x8c>
 8002c34:	2302      	movs	r3, #2
 8002c36:	e011      	b.n	8002c5c <HAL_PCD_EP_SetStall+0xb0>
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	23aa      	movs	r3, #170	; 0xaa
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	2101      	movs	r1, #1
 8002c40:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	0011      	movs	r1, r2
 8002c4a:	0018      	movs	r0, r3
 8002c4c:	f005 f8e6 	bl	8007e1c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	23aa      	movs	r3, #170	; 0xaa
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	2100      	movs	r1, #0
 8002c58:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	b004      	add	sp, #16
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	000a      	movs	r2, r1
 8002c6e:	1cfb      	adds	r3, r7, #3
 8002c70:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c72:	1cfb      	adds	r3, r7, #3
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	220f      	movs	r2, #15
 8002c78:	401a      	ands	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d901      	bls.n	8002c86 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e048      	b.n	8002d18 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c86:	1cfb      	adds	r3, r7, #3
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	b25b      	sxtb	r3, r3
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	da0f      	bge.n	8002cb0 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c90:	1cfb      	adds	r3, r7, #3
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	2207      	movs	r2, #7
 8002c96:	4013      	ands	r3, r2
 8002c98:	1c5a      	adds	r2, r3, #1
 8002c9a:	0013      	movs	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	189b      	adds	r3, r3, r2
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	18d3      	adds	r3, r2, r3
 8002ca6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2201      	movs	r2, #1
 8002cac:	705a      	strb	r2, [r3, #1]
 8002cae:	e00f      	b.n	8002cd0 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cb0:	1cfb      	adds	r3, r7, #3
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	2207      	movs	r2, #7
 8002cb6:	401a      	ands	r2, r3
 8002cb8:	0013      	movs	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	189b      	adds	r3, r3, r2
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	3369      	adds	r3, #105	; 0x69
 8002cc2:	33ff      	adds	r3, #255	; 0xff
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	18d3      	adds	r3, r2, r3
 8002cc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cd6:	1cfb      	adds	r3, r7, #3
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	2207      	movs	r2, #7
 8002cdc:	4013      	ands	r3, r2
 8002cde:	b2da      	uxtb	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	23aa      	movs	r3, #170	; 0xaa
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	5cd3      	ldrb	r3, [r2, r3]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d101      	bne.n	8002cf4 <HAL_PCD_EP_ClrStall+0x90>
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	e011      	b.n	8002d18 <HAL_PCD_EP_ClrStall+0xb4>
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	23aa      	movs	r3, #170	; 0xaa
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	0011      	movs	r1, r2
 8002d06:	0018      	movs	r0, r3
 8002d08:	f005 f8d8 	bl	8007ebc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	23aa      	movs	r3, #170	; 0xaa
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	2100      	movs	r1, #0
 8002d14:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	0018      	movs	r0, r3
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	b004      	add	sp, #16
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002d20:	b5b0      	push	{r4, r5, r7, lr}
 8002d22:	b096      	sub	sp, #88	; 0x58
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002d28:	f000 fbec 	bl	8003504 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	204e      	movs	r0, #78	; 0x4e
 8002d32:	183b      	adds	r3, r7, r0
 8002d34:	2144      	movs	r1, #68	; 0x44
 8002d36:	5a52      	ldrh	r2, [r2, r1]
 8002d38:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002d3a:	183b      	adds	r3, r7, r0
 8002d3c:	881b      	ldrh	r3, [r3, #0]
 8002d3e:	b2da      	uxtb	r2, r3
 8002d40:	244d      	movs	r4, #77	; 0x4d
 8002d42:	193b      	adds	r3, r7, r4
 8002d44:	210f      	movs	r1, #15
 8002d46:	400a      	ands	r2, r1
 8002d48:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8002d4a:	193b      	adds	r3, r7, r4
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d000      	beq.n	8002d54 <PCD_EP_ISR_Handler+0x34>
 8002d52:	e18f      	b.n	8003074 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002d54:	183b      	adds	r3, r7, r0
 8002d56:	881b      	ldrh	r3, [r3, #0]
 8002d58:	2210      	movs	r2, #16
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	d155      	bne.n	8002e0a <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	881b      	ldrh	r3, [r3, #0]
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	200e      	movs	r0, #14
 8002d68:	183b      	adds	r3, r7, r0
 8002d6a:	49bb      	ldr	r1, [pc, #748]	; (8003058 <PCD_EP_ISR_Handler+0x338>)
 8002d6c:	400a      	ands	r2, r1
 8002d6e:	801a      	strh	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	183a      	adds	r2, r7, r0
 8002d76:	8812      	ldrh	r2, [r2, #0]
 8002d78:	49b8      	ldr	r1, [pc, #736]	; (800305c <PCD_EP_ISR_Handler+0x33c>)
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	b292      	uxth	r2, r2
 8002d7e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	3328      	adds	r3, #40	; 0x28
 8002d84:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2250      	movs	r2, #80	; 0x50
 8002d8c:	5a9b      	ldrh	r3, [r3, r2]
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	001a      	movs	r2, r3
 8002d92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	18d2      	adds	r2, r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	18d3      	adds	r3, r2, r3
 8002da0:	4aaf      	ldr	r2, [pc, #700]	; (8003060 <PCD_EP_ISR_Handler+0x340>)
 8002da2:	4694      	mov	ip, r2
 8002da4:	4463      	add	r3, ip
 8002da6:	881b      	ldrh	r3, [r3, #0]
 8002da8:	059b      	lsls	r3, r3, #22
 8002daa:	0d9a      	lsrs	r2, r3, #22
 8002dac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dae:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002db0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002db2:	695a      	ldr	r2, [r3, #20]
 8002db4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002db6:	69db      	ldr	r3, [r3, #28]
 8002db8:	18d2      	adds	r2, r2, r3
 8002dba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dbc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	f006 ff92 	bl	8009cec <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2224      	movs	r2, #36	; 0x24
 8002dcc:	5c9b      	ldrb	r3, [r3, r2]
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <PCD_EP_ISR_Handler+0xb8>
 8002dd4:	f000 fb96 	bl	8003504 <PCD_EP_ISR_Handler+0x7e4>
 8002dd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <PCD_EP_ISR_Handler+0xc4>
 8002de0:	f000 fb90 	bl	8003504 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2224      	movs	r2, #36	; 0x24
 8002de8:	5c9b      	ldrb	r3, [r3, r2]
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2280      	movs	r2, #128	; 0x80
 8002dee:	4252      	negs	r2, r2
 8002df0:	4313      	orrs	r3, r2
 8002df2:	b2da      	uxtb	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	b291      	uxth	r1, r2
 8002dfa:	224c      	movs	r2, #76	; 0x4c
 8002dfc:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2224      	movs	r2, #36	; 0x24
 8002e02:	2100      	movs	r1, #0
 8002e04:	5499      	strb	r1, [r3, r2]
 8002e06:	f000 fb7d 	bl	8003504 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	3369      	adds	r3, #105	; 0x69
 8002e0e:	33ff      	adds	r3, #255	; 0xff
 8002e10:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	214a      	movs	r1, #74	; 0x4a
 8002e18:	187b      	adds	r3, r7, r1
 8002e1a:	8812      	ldrh	r2, [r2, #0]
 8002e1c:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002e1e:	187b      	adds	r3, r7, r1
 8002e20:	881a      	ldrh	r2, [r3, #0]
 8002e22:	2380      	movs	r3, #128	; 0x80
 8002e24:	011b      	lsls	r3, r3, #4
 8002e26:	4013      	ands	r3, r2
 8002e28:	d037      	beq.n	8002e9a <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2250      	movs	r2, #80	; 0x50
 8002e30:	5a9b      	ldrh	r3, [r3, r2]
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	001a      	movs	r2, r3
 8002e36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	18d2      	adds	r2, r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	18d3      	adds	r3, r2, r3
 8002e44:	4a87      	ldr	r2, [pc, #540]	; (8003064 <PCD_EP_ISR_Handler+0x344>)
 8002e46:	4694      	mov	ip, r2
 8002e48:	4463      	add	r3, ip
 8002e4a:	881b      	ldrh	r3, [r3, #0]
 8002e4c:	059b      	lsls	r3, r3, #22
 8002e4e:	0d9a      	lsrs	r2, r3, #22
 8002e50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e52:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6818      	ldr	r0, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	22ac      	movs	r2, #172	; 0xac
 8002e5c:	0092      	lsls	r2, r2, #2
 8002e5e:	1899      	adds	r1, r3, r2
 8002e60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e62:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002e64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e66:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	f005 f95a 	bl	8008122 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	881b      	ldrh	r3, [r3, #0]
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	2010      	movs	r0, #16
 8002e78:	183b      	adds	r3, r7, r0
 8002e7a:	497b      	ldr	r1, [pc, #492]	; (8003068 <PCD_EP_ISR_Handler+0x348>)
 8002e7c:	400a      	ands	r2, r1
 8002e7e:	801a      	strh	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	183a      	adds	r2, r7, r0
 8002e86:	8812      	ldrh	r2, [r2, #0]
 8002e88:	2180      	movs	r1, #128	; 0x80
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	b292      	uxth	r2, r2
 8002e8e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	0018      	movs	r0, r3
 8002e94:	f006 fef4 	bl	8009c80 <HAL_PCD_SetupStageCallback>
 8002e98:	e334      	b.n	8003504 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002e9a:	234a      	movs	r3, #74	; 0x4a
 8002e9c:	18fb      	adds	r3, r7, r3
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	5e9b      	ldrsh	r3, [r3, r2]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	db00      	blt.n	8002ea8 <PCD_EP_ISR_Handler+0x188>
 8002ea6:	e32d      	b.n	8003504 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	881b      	ldrh	r3, [r3, #0]
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	201e      	movs	r0, #30
 8002eb2:	183b      	adds	r3, r7, r0
 8002eb4:	496c      	ldr	r1, [pc, #432]	; (8003068 <PCD_EP_ISR_Handler+0x348>)
 8002eb6:	400a      	ands	r2, r1
 8002eb8:	801a      	strh	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	183a      	adds	r2, r7, r0
 8002ec0:	8812      	ldrh	r2, [r2, #0]
 8002ec2:	2180      	movs	r1, #128	; 0x80
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	b292      	uxth	r2, r2
 8002ec8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2250      	movs	r2, #80	; 0x50
 8002ed0:	5a9b      	ldrh	r3, [r3, r2]
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	001a      	movs	r2, r3
 8002ed6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	18d2      	adds	r2, r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	18d3      	adds	r3, r2, r3
 8002ee4:	4a5f      	ldr	r2, [pc, #380]	; (8003064 <PCD_EP_ISR_Handler+0x344>)
 8002ee6:	4694      	mov	ip, r2
 8002ee8:	4463      	add	r3, ip
 8002eea:	881b      	ldrh	r3, [r3, #0]
 8002eec:	059b      	lsls	r3, r3, #22
 8002eee:	0d9a      	lsrs	r2, r3, #22
 8002ef0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ef2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002ef4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ef6:	69db      	ldr	r3, [r3, #28]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d01a      	beq.n	8002f32 <PCD_EP_ISR_Handler+0x212>
 8002efc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002efe:	695b      	ldr	r3, [r3, #20]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d016      	beq.n	8002f32 <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6818      	ldr	r0, [r3, #0]
 8002f08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f0a:	6959      	ldr	r1, [r3, #20]
 8002f0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f0e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002f10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f12:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	f005 f904 	bl	8008122 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002f1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f1c:	695a      	ldr	r2, [r3, #20]
 8002f1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	18d2      	adds	r2, r2, r3
 8002f24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f26:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	f006 febc 	bl	8009caa <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	214a      	movs	r1, #74	; 0x4a
 8002f38:	187b      	adds	r3, r7, r1
 8002f3a:	8812      	ldrh	r2, [r2, #0]
 8002f3c:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002f3e:	187b      	adds	r3, r7, r1
 8002f40:	881a      	ldrh	r2, [r3, #0]
 8002f42:	2380      	movs	r3, #128	; 0x80
 8002f44:	011b      	lsls	r3, r3, #4
 8002f46:	4013      	ands	r3, r2
 8002f48:	d000      	beq.n	8002f4c <PCD_EP_ISR_Handler+0x22c>
 8002f4a:	e2db      	b.n	8003504 <PCD_EP_ISR_Handler+0x7e4>
 8002f4c:	187b      	adds	r3, r7, r1
 8002f4e:	881a      	ldrh	r2, [r3, #0]
 8002f50:	23c0      	movs	r3, #192	; 0xc0
 8002f52:	019b      	lsls	r3, r3, #6
 8002f54:	401a      	ands	r2, r3
 8002f56:	23c0      	movs	r3, #192	; 0xc0
 8002f58:	019b      	lsls	r3, r3, #6
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d100      	bne.n	8002f60 <PCD_EP_ISR_Handler+0x240>
 8002f5e:	e2d1      	b.n	8003504 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	61bb      	str	r3, [r7, #24]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2250      	movs	r2, #80	; 0x50
 8002f6c:	5a9b      	ldrh	r3, [r3, r2]
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	001a      	movs	r2, r3
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	189b      	adds	r3, r3, r2
 8002f76:	61bb      	str	r3, [r7, #24]
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	4a3a      	ldr	r2, [pc, #232]	; (8003064 <PCD_EP_ISR_Handler+0x344>)
 8002f7c:	4694      	mov	ip, r2
 8002f7e:	4463      	add	r3, ip
 8002f80:	617b      	str	r3, [r7, #20]
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	881b      	ldrh	r3, [r3, #0]
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	059b      	lsls	r3, r3, #22
 8002f8a:	0d9b      	lsrs	r3, r3, #22
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	801a      	strh	r2, [r3, #0]
 8002f92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	2b3e      	cmp	r3, #62	; 0x3e
 8002f98:	d91a      	bls.n	8002fd0 <PCD_EP_ISR_Handler+0x2b0>
 8002f9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	095b      	lsrs	r3, r3, #5
 8002fa0:	647b      	str	r3, [r7, #68]	; 0x44
 8002fa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	221f      	movs	r2, #31
 8002fa8:	4013      	ands	r3, r2
 8002faa:	d102      	bne.n	8002fb2 <PCD_EP_ISR_Handler+0x292>
 8002fac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	647b      	str	r3, [r7, #68]	; 0x44
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	881b      	ldrh	r3, [r3, #0]
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	029b      	lsls	r3, r3, #10
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	4a25      	ldr	r2, [pc, #148]	; (800305c <PCD_EP_ISR_Handler+0x33c>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	801a      	strh	r2, [r3, #0]
 8002fce:	e023      	b.n	8003018 <PCD_EP_ISR_Handler+0x2f8>
 8002fd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d108      	bne.n	8002fea <PCD_EP_ISR_Handler+0x2ca>
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	881b      	ldrh	r3, [r3, #0]
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	4a1f      	ldr	r2, [pc, #124]	; (800305c <PCD_EP_ISR_Handler+0x33c>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	801a      	strh	r2, [r3, #0]
 8002fe8:	e016      	b.n	8003018 <PCD_EP_ISR_Handler+0x2f8>
 8002fea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	085b      	lsrs	r3, r3, #1
 8002ff0:	647b      	str	r3, [r7, #68]	; 0x44
 8002ff2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	d002      	beq.n	8003002 <PCD_EP_ISR_Handler+0x2e2>
 8002ffc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ffe:	3301      	adds	r3, #1
 8003000:	647b      	str	r3, [r7, #68]	; 0x44
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	881b      	ldrh	r3, [r3, #0]
 8003006:	b29a      	uxth	r2, r3
 8003008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800300a:	b29b      	uxth	r3, r3
 800300c:	029b      	lsls	r3, r3, #10
 800300e:	b29b      	uxth	r3, r3
 8003010:	4313      	orrs	r3, r2
 8003012:	b29a      	uxth	r2, r3
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	881b      	ldrh	r3, [r3, #0]
 800301e:	b29a      	uxth	r2, r3
 8003020:	2012      	movs	r0, #18
 8003022:	183b      	adds	r3, r7, r0
 8003024:	4911      	ldr	r1, [pc, #68]	; (800306c <PCD_EP_ISR_Handler+0x34c>)
 8003026:	400a      	ands	r2, r1
 8003028:	801a      	strh	r2, [r3, #0]
 800302a:	183b      	adds	r3, r7, r0
 800302c:	183a      	adds	r2, r7, r0
 800302e:	8812      	ldrh	r2, [r2, #0]
 8003030:	2180      	movs	r1, #128	; 0x80
 8003032:	0149      	lsls	r1, r1, #5
 8003034:	404a      	eors	r2, r1
 8003036:	801a      	strh	r2, [r3, #0]
 8003038:	183b      	adds	r3, r7, r0
 800303a:	183a      	adds	r2, r7, r0
 800303c:	8812      	ldrh	r2, [r2, #0]
 800303e:	2180      	movs	r1, #128	; 0x80
 8003040:	0189      	lsls	r1, r1, #6
 8003042:	404a      	eors	r2, r1
 8003044:	801a      	strh	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	183a      	adds	r2, r7, r0
 800304c:	8812      	ldrh	r2, [r2, #0]
 800304e:	4908      	ldr	r1, [pc, #32]	; (8003070 <PCD_EP_ISR_Handler+0x350>)
 8003050:	430a      	orrs	r2, r1
 8003052:	b292      	uxth	r2, r2
 8003054:	801a      	strh	r2, [r3, #0]
 8003056:	e255      	b.n	8003504 <PCD_EP_ISR_Handler+0x7e4>
 8003058:	ffff8f0f 	.word	0xffff8f0f
 800305c:	ffff8000 	.word	0xffff8000
 8003060:	00000402 	.word	0x00000402
 8003064:	00000406 	.word	0x00000406
 8003068:	00000f8f 	.word	0x00000f8f
 800306c:	ffffbf8f 	.word	0xffffbf8f
 8003070:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	001a      	movs	r2, r3
 800307a:	204d      	movs	r0, #77	; 0x4d
 800307c:	183b      	adds	r3, r7, r0
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	18d2      	adds	r2, r2, r3
 8003084:	214a      	movs	r1, #74	; 0x4a
 8003086:	187b      	adds	r3, r7, r1
 8003088:	8812      	ldrh	r2, [r2, #0]
 800308a:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800308c:	187b      	adds	r3, r7, r1
 800308e:	2200      	movs	r2, #0
 8003090:	5e9b      	ldrsh	r3, [r3, r2]
 8003092:	2b00      	cmp	r3, #0
 8003094:	db00      	blt.n	8003098 <PCD_EP_ISR_Handler+0x378>
 8003096:	e0fa      	b.n	800328e <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	001a      	movs	r2, r3
 800309e:	183b      	adds	r3, r7, r0
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	18d3      	adds	r3, r2, r3
 80030a6:	881b      	ldrh	r3, [r3, #0]
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	2448      	movs	r4, #72	; 0x48
 80030ac:	193b      	adds	r3, r7, r4
 80030ae:	49d1      	ldr	r1, [pc, #836]	; (80033f4 <PCD_EP_ISR_Handler+0x6d4>)
 80030b0:	400a      	ands	r2, r1
 80030b2:	801a      	strh	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	001a      	movs	r2, r3
 80030ba:	183b      	adds	r3, r7, r0
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	18d3      	adds	r3, r2, r3
 80030c2:	193a      	adds	r2, r7, r4
 80030c4:	8812      	ldrh	r2, [r2, #0]
 80030c6:	2180      	movs	r1, #128	; 0x80
 80030c8:	430a      	orrs	r2, r1
 80030ca:	b292      	uxth	r2, r2
 80030cc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80030ce:	183b      	adds	r3, r7, r0
 80030d0:	781a      	ldrb	r2, [r3, #0]
 80030d2:	0013      	movs	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	189b      	adds	r3, r3, r2
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	3369      	adds	r3, #105	; 0x69
 80030dc:	33ff      	adds	r3, #255	; 0xff
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	18d3      	adds	r3, r2, r3
 80030e2:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80030e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030e6:	7b1b      	ldrb	r3, [r3, #12]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d125      	bne.n	8003138 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2250      	movs	r2, #80	; 0x50
 80030f2:	5a9b      	ldrh	r3, [r3, r2]
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	001a      	movs	r2, r3
 80030f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	18d2      	adds	r2, r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	18d3      	adds	r3, r2, r3
 8003106:	4abc      	ldr	r2, [pc, #752]	; (80033f8 <PCD_EP_ISR_Handler+0x6d8>)
 8003108:	4694      	mov	ip, r2
 800310a:	4463      	add	r3, ip
 800310c:	881a      	ldrh	r2, [r3, #0]
 800310e:	2450      	movs	r4, #80	; 0x50
 8003110:	193b      	adds	r3, r7, r4
 8003112:	0592      	lsls	r2, r2, #22
 8003114:	0d92      	lsrs	r2, r2, #22
 8003116:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8003118:	193b      	adds	r3, r7, r4
 800311a:	881b      	ldrh	r3, [r3, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d100      	bne.n	8003122 <PCD_EP_ISR_Handler+0x402>
 8003120:	e08d      	b.n	800323e <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6818      	ldr	r0, [r3, #0]
 8003126:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003128:	6959      	ldr	r1, [r3, #20]
 800312a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800312c:	88da      	ldrh	r2, [r3, #6]
 800312e:	193b      	adds	r3, r7, r4
 8003130:	881b      	ldrh	r3, [r3, #0]
 8003132:	f004 fff6 	bl	8008122 <USB_ReadPMA>
 8003136:	e082      	b.n	800323e <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003138:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800313a:	78db      	ldrb	r3, [r3, #3]
 800313c:	2b02      	cmp	r3, #2
 800313e:	d10c      	bne.n	800315a <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003140:	2350      	movs	r3, #80	; 0x50
 8003142:	18fc      	adds	r4, r7, r3
 8003144:	234a      	movs	r3, #74	; 0x4a
 8003146:	18fb      	adds	r3, r7, r3
 8003148:	881a      	ldrh	r2, [r3, #0]
 800314a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	0018      	movs	r0, r3
 8003150:	f000 f9ec 	bl	800352c <HAL_PCD_EP_DB_Receive>
 8003154:	0003      	movs	r3, r0
 8003156:	8023      	strh	r3, [r4, #0]
 8003158:	e071      	b.n	800323e <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	001a      	movs	r2, r3
 8003160:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	18d3      	adds	r3, r2, r3
 8003168:	881b      	ldrh	r3, [r3, #0]
 800316a:	b29a      	uxth	r2, r3
 800316c:	2052      	movs	r0, #82	; 0x52
 800316e:	183b      	adds	r3, r7, r0
 8003170:	49a2      	ldr	r1, [pc, #648]	; (80033fc <PCD_EP_ISR_Handler+0x6dc>)
 8003172:	400a      	ands	r2, r1
 8003174:	801a      	strh	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	001a      	movs	r2, r3
 800317c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	18d3      	adds	r3, r2, r3
 8003184:	183a      	adds	r2, r7, r0
 8003186:	8812      	ldrh	r2, [r2, #0]
 8003188:	499d      	ldr	r1, [pc, #628]	; (8003400 <PCD_EP_ISR_Handler+0x6e0>)
 800318a:	430a      	orrs	r2, r1
 800318c:	b292      	uxth	r2, r2
 800318e:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	001a      	movs	r2, r3
 8003196:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	18d3      	adds	r3, r2, r3
 800319e:	881b      	ldrh	r3, [r3, #0]
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	001a      	movs	r2, r3
 80031a4:	2380      	movs	r3, #128	; 0x80
 80031a6:	01db      	lsls	r3, r3, #7
 80031a8:	4013      	ands	r3, r2
 80031aa:	d024      	beq.n	80031f6 <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2250      	movs	r2, #80	; 0x50
 80031b2:	5a9b      	ldrh	r3, [r3, r2]
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	001a      	movs	r2, r3
 80031b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	18d2      	adds	r2, r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	18d3      	adds	r3, r2, r3
 80031c6:	4a8f      	ldr	r2, [pc, #572]	; (8003404 <PCD_EP_ISR_Handler+0x6e4>)
 80031c8:	4694      	mov	ip, r2
 80031ca:	4463      	add	r3, ip
 80031cc:	881a      	ldrh	r2, [r3, #0]
 80031ce:	2450      	movs	r4, #80	; 0x50
 80031d0:	193b      	adds	r3, r7, r4
 80031d2:	0592      	lsls	r2, r2, #22
 80031d4:	0d92      	lsrs	r2, r2, #22
 80031d6:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80031d8:	193b      	adds	r3, r7, r4
 80031da:	881b      	ldrh	r3, [r3, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d02e      	beq.n	800323e <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6818      	ldr	r0, [r3, #0]
 80031e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031e6:	6959      	ldr	r1, [r3, #20]
 80031e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031ea:	891a      	ldrh	r2, [r3, #8]
 80031ec:	193b      	adds	r3, r7, r4
 80031ee:	881b      	ldrh	r3, [r3, #0]
 80031f0:	f004 ff97 	bl	8008122 <USB_ReadPMA>
 80031f4:	e023      	b.n	800323e <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2250      	movs	r2, #80	; 0x50
 80031fc:	5a9b      	ldrh	r3, [r3, r2]
 80031fe:	b29b      	uxth	r3, r3
 8003200:	001a      	movs	r2, r3
 8003202:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	18d2      	adds	r2, r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	18d3      	adds	r3, r2, r3
 8003210:	4a79      	ldr	r2, [pc, #484]	; (80033f8 <PCD_EP_ISR_Handler+0x6d8>)
 8003212:	4694      	mov	ip, r2
 8003214:	4463      	add	r3, ip
 8003216:	881a      	ldrh	r2, [r3, #0]
 8003218:	2450      	movs	r4, #80	; 0x50
 800321a:	193b      	adds	r3, r7, r4
 800321c:	0592      	lsls	r2, r2, #22
 800321e:	0d92      	lsrs	r2, r2, #22
 8003220:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8003222:	193b      	adds	r3, r7, r4
 8003224:	881b      	ldrh	r3, [r3, #0]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d009      	beq.n	800323e <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6818      	ldr	r0, [r3, #0]
 800322e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003230:	6959      	ldr	r1, [r3, #20]
 8003232:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003234:	895a      	ldrh	r2, [r3, #10]
 8003236:	193b      	adds	r3, r7, r4
 8003238:	881b      	ldrh	r3, [r3, #0]
 800323a:	f004 ff72 	bl	8008122 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800323e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003240:	69da      	ldr	r2, [r3, #28]
 8003242:	2150      	movs	r1, #80	; 0x50
 8003244:	187b      	adds	r3, r7, r1
 8003246:	881b      	ldrh	r3, [r3, #0]
 8003248:	18d2      	adds	r2, r2, r3
 800324a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800324c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800324e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003250:	695a      	ldr	r2, [r3, #20]
 8003252:	187b      	adds	r3, r7, r1
 8003254:	881b      	ldrh	r3, [r3, #0]
 8003256:	18d2      	adds	r2, r2, r3
 8003258:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800325a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800325c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d005      	beq.n	8003270 <PCD_EP_ISR_Handler+0x550>
 8003264:	187b      	adds	r3, r7, r1
 8003266:	881a      	ldrh	r2, [r3, #0]
 8003268:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	429a      	cmp	r2, r3
 800326e:	d207      	bcs.n	8003280 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003270:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003272:	781a      	ldrb	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	0011      	movs	r1, r2
 8003278:	0018      	movs	r0, r3
 800327a:	f006 fd16 	bl	8009caa <HAL_PCD_DataOutStageCallback>
 800327e:	e006      	b.n	800328e <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003286:	0011      	movs	r1, r2
 8003288:	0018      	movs	r0, r3
 800328a:	f003 fc8f 	bl	8006bac <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800328e:	244a      	movs	r4, #74	; 0x4a
 8003290:	193b      	adds	r3, r7, r4
 8003292:	881b      	ldrh	r3, [r3, #0]
 8003294:	2280      	movs	r2, #128	; 0x80
 8003296:	4013      	ands	r3, r2
 8003298:	d100      	bne.n	800329c <PCD_EP_ISR_Handler+0x57c>
 800329a:	e133      	b.n	8003504 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800329c:	204d      	movs	r0, #77	; 0x4d
 800329e:	183b      	adds	r3, r7, r0
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	1c5a      	adds	r2, r3, #1
 80032a4:	0013      	movs	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	189b      	adds	r3, r3, r2
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	18d3      	adds	r3, r2, r3
 80032b0:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	001a      	movs	r2, r3
 80032b8:	183b      	adds	r3, r7, r0
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	18d3      	adds	r3, r2, r3
 80032c0:	881b      	ldrh	r3, [r3, #0]
 80032c2:	b29a      	uxth	r2, r3
 80032c4:	2542      	movs	r5, #66	; 0x42
 80032c6:	197b      	adds	r3, r7, r5
 80032c8:	494f      	ldr	r1, [pc, #316]	; (8003408 <PCD_EP_ISR_Handler+0x6e8>)
 80032ca:	400a      	ands	r2, r1
 80032cc:	801a      	strh	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	001a      	movs	r2, r3
 80032d4:	183b      	adds	r3, r7, r0
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	18d3      	adds	r3, r2, r3
 80032dc:	197a      	adds	r2, r7, r5
 80032de:	8812      	ldrh	r2, [r2, #0]
 80032e0:	494a      	ldr	r1, [pc, #296]	; (800340c <PCD_EP_ISR_Handler+0x6ec>)
 80032e2:	430a      	orrs	r2, r1
 80032e4:	b292      	uxth	r2, r2
 80032e6:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 80032e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032ea:	78db      	ldrb	r3, [r3, #3]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d000      	beq.n	80032f2 <PCD_EP_ISR_Handler+0x5d2>
 80032f0:	e0af      	b.n	8003452 <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 80032f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032f4:	2200      	movs	r2, #0
 80032f6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80032f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032fa:	7b1b      	ldrb	r3, [r3, #12]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d100      	bne.n	8003302 <PCD_EP_ISR_Handler+0x5e2>
 8003300:	e09f      	b.n	8003442 <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003302:	193b      	adds	r3, r7, r4
 8003304:	881b      	ldrh	r3, [r3, #0]
 8003306:	2240      	movs	r2, #64	; 0x40
 8003308:	4013      	ands	r3, r2
 800330a:	d046      	beq.n	800339a <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800330c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800330e:	785b      	ldrb	r3, [r3, #1]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d125      	bne.n	8003360 <PCD_EP_ISR_Handler+0x640>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	627b      	str	r3, [r7, #36]	; 0x24
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2250      	movs	r2, #80	; 0x50
 8003320:	5a9b      	ldrh	r3, [r3, r2]
 8003322:	b29b      	uxth	r3, r3
 8003324:	001a      	movs	r2, r3
 8003326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003328:	189b      	adds	r3, r3, r2
 800332a:	627b      	str	r3, [r7, #36]	; 0x24
 800332c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	00da      	lsls	r2, r3, #3
 8003332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003334:	18d3      	adds	r3, r2, r3
 8003336:	4a33      	ldr	r2, [pc, #204]	; (8003404 <PCD_EP_ISR_Handler+0x6e4>)
 8003338:	4694      	mov	ip, r2
 800333a:	4463      	add	r3, ip
 800333c:	623b      	str	r3, [r7, #32]
 800333e:	6a3b      	ldr	r3, [r7, #32]
 8003340:	881b      	ldrh	r3, [r3, #0]
 8003342:	b29b      	uxth	r3, r3
 8003344:	059b      	lsls	r3, r3, #22
 8003346:	0d9b      	lsrs	r3, r3, #22
 8003348:	b29a      	uxth	r2, r3
 800334a:	6a3b      	ldr	r3, [r7, #32]
 800334c:	801a      	strh	r2, [r3, #0]
 800334e:	6a3b      	ldr	r3, [r7, #32]
 8003350:	881b      	ldrh	r3, [r3, #0]
 8003352:	b29b      	uxth	r3, r3
 8003354:	4a2d      	ldr	r2, [pc, #180]	; (800340c <PCD_EP_ISR_Handler+0x6ec>)
 8003356:	4313      	orrs	r3, r2
 8003358:	b29a      	uxth	r2, r3
 800335a:	6a3b      	ldr	r3, [r7, #32]
 800335c:	801a      	strh	r2, [r3, #0]
 800335e:	e070      	b.n	8003442 <PCD_EP_ISR_Handler+0x722>
 8003360:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003362:	785b      	ldrb	r3, [r3, #1]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d16c      	bne.n	8003442 <PCD_EP_ISR_Handler+0x722>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2250      	movs	r2, #80	; 0x50
 8003374:	5a9b      	ldrh	r3, [r3, r2]
 8003376:	b29b      	uxth	r3, r3
 8003378:	001a      	movs	r2, r3
 800337a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800337c:	189b      	adds	r3, r3, r2
 800337e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003380:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	00da      	lsls	r2, r3, #3
 8003386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003388:	18d3      	adds	r3, r2, r3
 800338a:	4a1e      	ldr	r2, [pc, #120]	; (8003404 <PCD_EP_ISR_Handler+0x6e4>)
 800338c:	4694      	mov	ip, r2
 800338e:	4463      	add	r3, ip
 8003390:	62bb      	str	r3, [r7, #40]	; 0x28
 8003392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003394:	2200      	movs	r2, #0
 8003396:	801a      	strh	r2, [r3, #0]
 8003398:	e053      	b.n	8003442 <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033a2:	785b      	ldrb	r3, [r3, #1]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d133      	bne.n	8003410 <PCD_EP_ISR_Handler+0x6f0>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	637b      	str	r3, [r7, #52]	; 0x34
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2250      	movs	r2, #80	; 0x50
 80033b4:	5a9b      	ldrh	r3, [r3, r2]
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	001a      	movs	r2, r3
 80033ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033bc:	189b      	adds	r3, r3, r2
 80033be:	637b      	str	r3, [r7, #52]	; 0x34
 80033c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	00da      	lsls	r2, r3, #3
 80033c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033c8:	18d3      	adds	r3, r2, r3
 80033ca:	4a0b      	ldr	r2, [pc, #44]	; (80033f8 <PCD_EP_ISR_Handler+0x6d8>)
 80033cc:	4694      	mov	ip, r2
 80033ce:	4463      	add	r3, ip
 80033d0:	633b      	str	r3, [r7, #48]	; 0x30
 80033d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d4:	881b      	ldrh	r3, [r3, #0]
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	059b      	lsls	r3, r3, #22
 80033da:	0d9b      	lsrs	r3, r3, #22
 80033dc:	b29a      	uxth	r2, r3
 80033de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e0:	801a      	strh	r2, [r3, #0]
 80033e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e4:	881b      	ldrh	r3, [r3, #0]
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	4a08      	ldr	r2, [pc, #32]	; (800340c <PCD_EP_ISR_Handler+0x6ec>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f0:	801a      	strh	r2, [r3, #0]
 80033f2:	e026      	b.n	8003442 <PCD_EP_ISR_Handler+0x722>
 80033f4:	00000f8f 	.word	0x00000f8f
 80033f8:	00000406 	.word	0x00000406
 80033fc:	ffff8f8f 	.word	0xffff8f8f
 8003400:	ffff80c0 	.word	0xffff80c0
 8003404:	00000402 	.word	0x00000402
 8003408:	ffff8f0f 	.word	0xffff8f0f
 800340c:	ffff8000 	.word	0xffff8000
 8003410:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003412:	785b      	ldrb	r3, [r3, #1]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d114      	bne.n	8003442 <PCD_EP_ISR_Handler+0x722>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2250      	movs	r2, #80	; 0x50
 800341e:	5a9b      	ldrh	r3, [r3, r2]
 8003420:	b29b      	uxth	r3, r3
 8003422:	001a      	movs	r2, r3
 8003424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003426:	189b      	adds	r3, r3, r2
 8003428:	63fb      	str	r3, [r7, #60]	; 0x3c
 800342a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	00da      	lsls	r2, r3, #3
 8003430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003432:	18d3      	adds	r3, r2, r3
 8003434:	4a3b      	ldr	r2, [pc, #236]	; (8003524 <PCD_EP_ISR_Handler+0x804>)
 8003436:	4694      	mov	ip, r2
 8003438:	4463      	add	r3, ip
 800343a:	63bb      	str	r3, [r7, #56]	; 0x38
 800343c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800343e:	2200      	movs	r2, #0
 8003440:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003442:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003444:	781a      	ldrb	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	0011      	movs	r1, r2
 800344a:	0018      	movs	r0, r3
 800344c:	f006 fc4e 	bl	8009cec <HAL_PCD_DataInStageCallback>
 8003450:	e058      	b.n	8003504 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003452:	234a      	movs	r3, #74	; 0x4a
 8003454:	18fb      	adds	r3, r7, r3
 8003456:	881a      	ldrh	r2, [r3, #0]
 8003458:	2380      	movs	r3, #128	; 0x80
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	4013      	ands	r3, r2
 800345e:	d149      	bne.n	80034f4 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2250      	movs	r2, #80	; 0x50
 8003466:	5a9b      	ldrh	r3, [r3, r2]
 8003468:	b29b      	uxth	r3, r3
 800346a:	001a      	movs	r2, r3
 800346c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	00db      	lsls	r3, r3, #3
 8003472:	18d2      	adds	r2, r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	18d3      	adds	r3, r2, r3
 800347a:	4a2b      	ldr	r2, [pc, #172]	; (8003528 <PCD_EP_ISR_Handler+0x808>)
 800347c:	4694      	mov	ip, r2
 800347e:	4463      	add	r3, ip
 8003480:	881a      	ldrh	r2, [r3, #0]
 8003482:	2140      	movs	r1, #64	; 0x40
 8003484:	187b      	adds	r3, r7, r1
 8003486:	0592      	lsls	r2, r2, #22
 8003488:	0d92      	lsrs	r2, r2, #22
 800348a:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 800348c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800348e:	699a      	ldr	r2, [r3, #24]
 8003490:	187b      	adds	r3, r7, r1
 8003492:	881b      	ldrh	r3, [r3, #0]
 8003494:	429a      	cmp	r2, r3
 8003496:	d907      	bls.n	80034a8 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 8003498:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800349a:	699a      	ldr	r2, [r3, #24]
 800349c:	187b      	adds	r3, r7, r1
 800349e:	881b      	ldrh	r3, [r3, #0]
 80034a0:	1ad2      	subs	r2, r2, r3
 80034a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034a4:	619a      	str	r2, [r3, #24]
 80034a6:	e002      	b.n	80034ae <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 80034a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034aa:	2200      	movs	r2, #0
 80034ac:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80034ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d107      	bne.n	80034c6 <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80034b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034b8:	781a      	ldrb	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	0011      	movs	r1, r2
 80034be:	0018      	movs	r0, r3
 80034c0:	f006 fc14 	bl	8009cec <HAL_PCD_DataInStageCallback>
 80034c4:	e01e      	b.n	8003504 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80034c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034c8:	695a      	ldr	r2, [r3, #20]
 80034ca:	2140      	movs	r1, #64	; 0x40
 80034cc:	187b      	adds	r3, r7, r1
 80034ce:	881b      	ldrh	r3, [r3, #0]
 80034d0:	18d2      	adds	r2, r2, r3
 80034d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034d4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80034d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034d8:	69da      	ldr	r2, [r3, #28]
 80034da:	187b      	adds	r3, r7, r1
 80034dc:	881b      	ldrh	r3, [r3, #0]
 80034de:	18d2      	adds	r2, r2, r3
 80034e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034e2:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80034ea:	0011      	movs	r1, r2
 80034ec:	0018      	movs	r0, r3
 80034ee:	f003 fb5d 	bl	8006bac <USB_EPStartXfer>
 80034f2:	e007      	b.n	8003504 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80034f4:	234a      	movs	r3, #74	; 0x4a
 80034f6:	18fb      	adds	r3, r7, r3
 80034f8:	881a      	ldrh	r2, [r3, #0]
 80034fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	0018      	movs	r0, r3
 8003500:	f000 f930 	bl	8003764 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2244      	movs	r2, #68	; 0x44
 800350a:	5a9b      	ldrh	r3, [r3, r2]
 800350c:	b29b      	uxth	r3, r3
 800350e:	b21b      	sxth	r3, r3
 8003510:	2b00      	cmp	r3, #0
 8003512:	da01      	bge.n	8003518 <PCD_EP_ISR_Handler+0x7f8>
 8003514:	f7ff fc0a 	bl	8002d2c <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	0018      	movs	r0, r3
 800351c:	46bd      	mov	sp, r7
 800351e:	b016      	add	sp, #88	; 0x58
 8003520:	bdb0      	pop	{r4, r5, r7, pc}
 8003522:	46c0      	nop			; (mov r8, r8)
 8003524:	00000406 	.word	0x00000406
 8003528:	00000402 	.word	0x00000402

0800352c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800352c:	b590      	push	{r4, r7, lr}
 800352e:	b089      	sub	sp, #36	; 0x24
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	1dbb      	adds	r3, r7, #6
 8003538:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800353a:	1dbb      	adds	r3, r7, #6
 800353c:	881a      	ldrh	r2, [r3, #0]
 800353e:	2380      	movs	r3, #128	; 0x80
 8003540:	01db      	lsls	r3, r3, #7
 8003542:	4013      	ands	r3, r2
 8003544:	d100      	bne.n	8003548 <HAL_PCD_EP_DB_Receive+0x1c>
 8003546:	e07d      	b.n	8003644 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2250      	movs	r2, #80	; 0x50
 800354e:	5a9b      	ldrh	r3, [r3, r2]
 8003550:	b29b      	uxth	r3, r3
 8003552:	001a      	movs	r2, r3
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	00db      	lsls	r3, r3, #3
 800355a:	18d2      	adds	r2, r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	18d3      	adds	r3, r2, r3
 8003562:	4a7a      	ldr	r2, [pc, #488]	; (800374c <HAL_PCD_EP_DB_Receive+0x220>)
 8003564:	4694      	mov	ip, r2
 8003566:	4463      	add	r3, ip
 8003568:	881a      	ldrh	r2, [r3, #0]
 800356a:	211a      	movs	r1, #26
 800356c:	187b      	adds	r3, r7, r1
 800356e:	0592      	lsls	r2, r2, #22
 8003570:	0d92      	lsrs	r2, r2, #22
 8003572:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	699a      	ldr	r2, [r3, #24]
 8003578:	187b      	adds	r3, r7, r1
 800357a:	881b      	ldrh	r3, [r3, #0]
 800357c:	429a      	cmp	r2, r3
 800357e:	d307      	bcc.n	8003590 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	699a      	ldr	r2, [r3, #24]
 8003584:	187b      	adds	r3, r7, r1
 8003586:	881b      	ldrh	r3, [r3, #0]
 8003588:	1ad2      	subs	r2, r2, r3
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	619a      	str	r2, [r3, #24]
 800358e:	e002      	b.n	8003596 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	2200      	movs	r2, #0
 8003594:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d121      	bne.n	80035e2 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	001a      	movs	r2, r3
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	18d3      	adds	r3, r2, r3
 80035ac:	881b      	ldrh	r3, [r3, #0]
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	2018      	movs	r0, #24
 80035b2:	183b      	adds	r3, r7, r0
 80035b4:	4966      	ldr	r1, [pc, #408]	; (8003750 <HAL_PCD_EP_DB_Receive+0x224>)
 80035b6:	400a      	ands	r2, r1
 80035b8:	801a      	strh	r2, [r3, #0]
 80035ba:	183b      	adds	r3, r7, r0
 80035bc:	183a      	adds	r2, r7, r0
 80035be:	8812      	ldrh	r2, [r2, #0]
 80035c0:	2180      	movs	r1, #128	; 0x80
 80035c2:	0189      	lsls	r1, r1, #6
 80035c4:	404a      	eors	r2, r1
 80035c6:	801a      	strh	r2, [r3, #0]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	001a      	movs	r2, r3
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	18d3      	adds	r3, r2, r3
 80035d6:	183a      	adds	r2, r7, r0
 80035d8:	8812      	ldrh	r2, [r2, #0]
 80035da:	495e      	ldr	r1, [pc, #376]	; (8003754 <HAL_PCD_EP_DB_Receive+0x228>)
 80035dc:	430a      	orrs	r2, r1
 80035de:	b292      	uxth	r2, r2
 80035e0:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80035e2:	1dbb      	adds	r3, r7, #6
 80035e4:	881b      	ldrh	r3, [r3, #0]
 80035e6:	2240      	movs	r2, #64	; 0x40
 80035e8:	4013      	ands	r3, r2
 80035ea:	d01a      	beq.n	8003622 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	001a      	movs	r2, r3
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	18d3      	adds	r3, r2, r3
 80035fa:	881b      	ldrh	r3, [r3, #0]
 80035fc:	b29a      	uxth	r2, r3
 80035fe:	2016      	movs	r0, #22
 8003600:	183b      	adds	r3, r7, r0
 8003602:	4955      	ldr	r1, [pc, #340]	; (8003758 <HAL_PCD_EP_DB_Receive+0x22c>)
 8003604:	400a      	ands	r2, r1
 8003606:	801a      	strh	r2, [r3, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	001a      	movs	r2, r3
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	18d3      	adds	r3, r2, r3
 8003616:	183a      	adds	r2, r7, r0
 8003618:	8812      	ldrh	r2, [r2, #0]
 800361a:	4950      	ldr	r1, [pc, #320]	; (800375c <HAL_PCD_EP_DB_Receive+0x230>)
 800361c:	430a      	orrs	r2, r1
 800361e:	b292      	uxth	r2, r2
 8003620:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8003622:	241a      	movs	r4, #26
 8003624:	193b      	adds	r3, r7, r4
 8003626:	881b      	ldrh	r3, [r3, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d100      	bne.n	800362e <HAL_PCD_EP_DB_Receive+0x102>
 800362c:	e086      	b.n	800373c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6818      	ldr	r0, [r3, #0]
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	6959      	ldr	r1, [r3, #20]
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	891a      	ldrh	r2, [r3, #8]
 800363a:	193b      	adds	r3, r7, r4
 800363c:	881b      	ldrh	r3, [r3, #0]
 800363e:	f004 fd70 	bl	8008122 <USB_ReadPMA>
 8003642:	e07b      	b.n	800373c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2250      	movs	r2, #80	; 0x50
 800364a:	5a9b      	ldrh	r3, [r3, r2]
 800364c:	b29b      	uxth	r3, r3
 800364e:	001a      	movs	r2, r3
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	00db      	lsls	r3, r3, #3
 8003656:	18d2      	adds	r2, r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	18d3      	adds	r3, r2, r3
 800365e:	4a40      	ldr	r2, [pc, #256]	; (8003760 <HAL_PCD_EP_DB_Receive+0x234>)
 8003660:	4694      	mov	ip, r2
 8003662:	4463      	add	r3, ip
 8003664:	881a      	ldrh	r2, [r3, #0]
 8003666:	211a      	movs	r1, #26
 8003668:	187b      	adds	r3, r7, r1
 800366a:	0592      	lsls	r2, r2, #22
 800366c:	0d92      	lsrs	r2, r2, #22
 800366e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	699a      	ldr	r2, [r3, #24]
 8003674:	187b      	adds	r3, r7, r1
 8003676:	881b      	ldrh	r3, [r3, #0]
 8003678:	429a      	cmp	r2, r3
 800367a:	d307      	bcc.n	800368c <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	699a      	ldr	r2, [r3, #24]
 8003680:	187b      	adds	r3, r7, r1
 8003682:	881b      	ldrh	r3, [r3, #0]
 8003684:	1ad2      	subs	r2, r2, r3
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	619a      	str	r2, [r3, #24]
 800368a:	e002      	b.n	8003692 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	2200      	movs	r2, #0
 8003690:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d121      	bne.n	80036de <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	001a      	movs	r2, r3
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	18d3      	adds	r3, r2, r3
 80036a8:	881b      	ldrh	r3, [r3, #0]
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	201e      	movs	r0, #30
 80036ae:	183b      	adds	r3, r7, r0
 80036b0:	4927      	ldr	r1, [pc, #156]	; (8003750 <HAL_PCD_EP_DB_Receive+0x224>)
 80036b2:	400a      	ands	r2, r1
 80036b4:	801a      	strh	r2, [r3, #0]
 80036b6:	183b      	adds	r3, r7, r0
 80036b8:	183a      	adds	r2, r7, r0
 80036ba:	8812      	ldrh	r2, [r2, #0]
 80036bc:	2180      	movs	r1, #128	; 0x80
 80036be:	0189      	lsls	r1, r1, #6
 80036c0:	404a      	eors	r2, r1
 80036c2:	801a      	strh	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	001a      	movs	r2, r3
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	18d3      	adds	r3, r2, r3
 80036d2:	183a      	adds	r2, r7, r0
 80036d4:	8812      	ldrh	r2, [r2, #0]
 80036d6:	491f      	ldr	r1, [pc, #124]	; (8003754 <HAL_PCD_EP_DB_Receive+0x228>)
 80036d8:	430a      	orrs	r2, r1
 80036da:	b292      	uxth	r2, r2
 80036dc:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80036de:	1dbb      	adds	r3, r7, #6
 80036e0:	881b      	ldrh	r3, [r3, #0]
 80036e2:	2240      	movs	r2, #64	; 0x40
 80036e4:	4013      	ands	r3, r2
 80036e6:	d11a      	bne.n	800371e <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	001a      	movs	r2, r3
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	18d3      	adds	r3, r2, r3
 80036f6:	881b      	ldrh	r3, [r3, #0]
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	201c      	movs	r0, #28
 80036fc:	183b      	adds	r3, r7, r0
 80036fe:	4916      	ldr	r1, [pc, #88]	; (8003758 <HAL_PCD_EP_DB_Receive+0x22c>)
 8003700:	400a      	ands	r2, r1
 8003702:	801a      	strh	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	001a      	movs	r2, r3
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	18d3      	adds	r3, r2, r3
 8003712:	183a      	adds	r2, r7, r0
 8003714:	8812      	ldrh	r2, [r2, #0]
 8003716:	4911      	ldr	r1, [pc, #68]	; (800375c <HAL_PCD_EP_DB_Receive+0x230>)
 8003718:	430a      	orrs	r2, r1
 800371a:	b292      	uxth	r2, r2
 800371c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800371e:	241a      	movs	r4, #26
 8003720:	193b      	adds	r3, r7, r4
 8003722:	881b      	ldrh	r3, [r3, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d009      	beq.n	800373c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6818      	ldr	r0, [r3, #0]
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	6959      	ldr	r1, [r3, #20]
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	895a      	ldrh	r2, [r3, #10]
 8003734:	193b      	adds	r3, r7, r4
 8003736:	881b      	ldrh	r3, [r3, #0]
 8003738:	f004 fcf3 	bl	8008122 <USB_ReadPMA>
    }
  }

  return count;
 800373c:	231a      	movs	r3, #26
 800373e:	18fb      	adds	r3, r7, r3
 8003740:	881b      	ldrh	r3, [r3, #0]
}
 8003742:	0018      	movs	r0, r3
 8003744:	46bd      	mov	sp, r7
 8003746:	b009      	add	sp, #36	; 0x24
 8003748:	bd90      	pop	{r4, r7, pc}
 800374a:	46c0      	nop			; (mov r8, r8)
 800374c:	00000402 	.word	0x00000402
 8003750:	ffffbf8f 	.word	0xffffbf8f
 8003754:	ffff8080 	.word	0xffff8080
 8003758:	ffff8f8f 	.word	0xffff8f8f
 800375c:	ffff80c0 	.word	0xffff80c0
 8003760:	00000406 	.word	0x00000406

08003764 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b0a4      	sub	sp, #144	; 0x90
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	1dbb      	adds	r3, r7, #6
 8003770:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003772:	1dbb      	adds	r3, r7, #6
 8003774:	881b      	ldrh	r3, [r3, #0]
 8003776:	2240      	movs	r2, #64	; 0x40
 8003778:	4013      	ands	r3, r2
 800377a:	d100      	bne.n	800377e <HAL_PCD_EP_DB_Transmit+0x1a>
 800377c:	e1e4      	b.n	8003b48 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2250      	movs	r2, #80	; 0x50
 8003784:	5a9b      	ldrh	r3, [r3, r2]
 8003786:	b29b      	uxth	r3, r3
 8003788:	001a      	movs	r2, r3
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	18d2      	adds	r2, r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	18d3      	adds	r3, r2, r3
 8003798:	4ad0      	ldr	r2, [pc, #832]	; (8003adc <HAL_PCD_EP_DB_Transmit+0x378>)
 800379a:	4694      	mov	ip, r2
 800379c:	4463      	add	r3, ip
 800379e:	881a      	ldrh	r2, [r3, #0]
 80037a0:	2186      	movs	r1, #134	; 0x86
 80037a2:	187b      	adds	r3, r7, r1
 80037a4:	0592      	lsls	r2, r2, #22
 80037a6:	0d92      	lsrs	r2, r2, #22
 80037a8:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	699a      	ldr	r2, [r3, #24]
 80037ae:	187b      	adds	r3, r7, r1
 80037b0:	881b      	ldrh	r3, [r3, #0]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d907      	bls.n	80037c6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	699a      	ldr	r2, [r3, #24]
 80037ba:	187b      	adds	r3, r7, r1
 80037bc:	881b      	ldrh	r3, [r3, #0]
 80037be:	1ad2      	subs	r2, r2, r3
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	619a      	str	r2, [r3, #24]
 80037c4:	e002      	b.n	80037cc <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	2200      	movs	r2, #0
 80037ca:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d000      	beq.n	80037d6 <HAL_PCD_EP_DB_Transmit+0x72>
 80037d4:	e0b5      	b.n	8003942 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	785b      	ldrb	r3, [r3, #1]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d125      	bne.n	800382a <HAL_PCD_EP_DB_Transmit+0xc6>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2250      	movs	r2, #80	; 0x50
 80037ea:	5a9b      	ldrh	r3, [r3, r2]
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	001a      	movs	r2, r3
 80037f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f2:	189b      	adds	r3, r3, r2
 80037f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	00da      	lsls	r2, r3, #3
 80037fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037fe:	18d3      	adds	r3, r2, r3
 8003800:	4ab6      	ldr	r2, [pc, #728]	; (8003adc <HAL_PCD_EP_DB_Transmit+0x378>)
 8003802:	4694      	mov	ip, r2
 8003804:	4463      	add	r3, ip
 8003806:	62bb      	str	r3, [r7, #40]	; 0x28
 8003808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380a:	881b      	ldrh	r3, [r3, #0]
 800380c:	b29b      	uxth	r3, r3
 800380e:	059b      	lsls	r3, r3, #22
 8003810:	0d9b      	lsrs	r3, r3, #22
 8003812:	b29a      	uxth	r2, r3
 8003814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003816:	801a      	strh	r2, [r3, #0]
 8003818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800381a:	881b      	ldrh	r3, [r3, #0]
 800381c:	b29b      	uxth	r3, r3
 800381e:	4ab0      	ldr	r2, [pc, #704]	; (8003ae0 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8003820:	4313      	orrs	r3, r2
 8003822:	b29a      	uxth	r2, r3
 8003824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003826:	801a      	strh	r2, [r3, #0]
 8003828:	e01b      	b.n	8003862 <HAL_PCD_EP_DB_Transmit+0xfe>
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	785b      	ldrb	r3, [r3, #1]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d117      	bne.n	8003862 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	637b      	str	r3, [r7, #52]	; 0x34
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2250      	movs	r2, #80	; 0x50
 800383e:	5a9b      	ldrh	r3, [r3, r2]
 8003840:	b29b      	uxth	r3, r3
 8003842:	001a      	movs	r2, r3
 8003844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003846:	189b      	adds	r3, r3, r2
 8003848:	637b      	str	r3, [r7, #52]	; 0x34
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	00da      	lsls	r2, r3, #3
 8003850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003852:	18d3      	adds	r3, r2, r3
 8003854:	4aa1      	ldr	r2, [pc, #644]	; (8003adc <HAL_PCD_EP_DB_Transmit+0x378>)
 8003856:	4694      	mov	ip, r2
 8003858:	4463      	add	r3, ip
 800385a:	633b      	str	r3, [r7, #48]	; 0x30
 800385c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385e:	2200      	movs	r2, #0
 8003860:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	627b      	str	r3, [r7, #36]	; 0x24
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	785b      	ldrb	r3, [r3, #1]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d125      	bne.n	80038bc <HAL_PCD_EP_DB_Transmit+0x158>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	61fb      	str	r3, [r7, #28]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2250      	movs	r2, #80	; 0x50
 800387c:	5a9b      	ldrh	r3, [r3, r2]
 800387e:	b29b      	uxth	r3, r3
 8003880:	001a      	movs	r2, r3
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	189b      	adds	r3, r3, r2
 8003886:	61fb      	str	r3, [r7, #28]
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	00da      	lsls	r2, r3, #3
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	18d3      	adds	r3, r2, r3
 8003892:	4a94      	ldr	r2, [pc, #592]	; (8003ae4 <HAL_PCD_EP_DB_Transmit+0x380>)
 8003894:	4694      	mov	ip, r2
 8003896:	4463      	add	r3, ip
 8003898:	61bb      	str	r3, [r7, #24]
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	881b      	ldrh	r3, [r3, #0]
 800389e:	b29b      	uxth	r3, r3
 80038a0:	059b      	lsls	r3, r3, #22
 80038a2:	0d9b      	lsrs	r3, r3, #22
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	801a      	strh	r2, [r3, #0]
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	881b      	ldrh	r3, [r3, #0]
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	4a8b      	ldr	r2, [pc, #556]	; (8003ae0 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	b29a      	uxth	r2, r3
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	801a      	strh	r2, [r3, #0]
 80038ba:	e018      	b.n	80038ee <HAL_PCD_EP_DB_Transmit+0x18a>
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	785b      	ldrb	r3, [r3, #1]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d114      	bne.n	80038ee <HAL_PCD_EP_DB_Transmit+0x18a>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2250      	movs	r2, #80	; 0x50
 80038ca:	5a9b      	ldrh	r3, [r3, r2]
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	001a      	movs	r2, r3
 80038d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d2:	189b      	adds	r3, r3, r2
 80038d4:	627b      	str	r3, [r7, #36]	; 0x24
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	00da      	lsls	r2, r3, #3
 80038dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038de:	18d3      	adds	r3, r2, r3
 80038e0:	4a80      	ldr	r2, [pc, #512]	; (8003ae4 <HAL_PCD_EP_DB_Transmit+0x380>)
 80038e2:	4694      	mov	ip, r2
 80038e4:	4463      	add	r3, ip
 80038e6:	623b      	str	r3, [r7, #32]
 80038e8:	6a3b      	ldr	r3, [r7, #32]
 80038ea:	2200      	movs	r2, #0
 80038ec:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	781a      	ldrb	r2, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	0011      	movs	r1, r2
 80038f6:	0018      	movs	r0, r3
 80038f8:	f006 f9f8 	bl	8009cec <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80038fc:	1dbb      	adds	r3, r7, #6
 80038fe:	881a      	ldrh	r2, [r3, #0]
 8003900:	2380      	movs	r3, #128	; 0x80
 8003902:	01db      	lsls	r3, r3, #7
 8003904:	4013      	ands	r3, r2
 8003906:	d100      	bne.n	800390a <HAL_PCD_EP_DB_Transmit+0x1a6>
 8003908:	e309      	b.n	8003f1e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	001a      	movs	r2, r3
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	18d3      	adds	r3, r2, r3
 8003918:	881b      	ldrh	r3, [r3, #0]
 800391a:	b29a      	uxth	r2, r3
 800391c:	2016      	movs	r0, #22
 800391e:	183b      	adds	r3, r7, r0
 8003920:	4971      	ldr	r1, [pc, #452]	; (8003ae8 <HAL_PCD_EP_DB_Transmit+0x384>)
 8003922:	400a      	ands	r2, r1
 8003924:	801a      	strh	r2, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	001a      	movs	r2, r3
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	18d3      	adds	r3, r2, r3
 8003934:	183a      	adds	r2, r7, r0
 8003936:	8812      	ldrh	r2, [r2, #0]
 8003938:	496c      	ldr	r1, [pc, #432]	; (8003aec <HAL_PCD_EP_DB_Transmit+0x388>)
 800393a:	430a      	orrs	r2, r1
 800393c:	b292      	uxth	r2, r2
 800393e:	801a      	strh	r2, [r3, #0]
 8003940:	e2ed      	b.n	8003f1e <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003942:	1dbb      	adds	r3, r7, #6
 8003944:	881a      	ldrh	r2, [r3, #0]
 8003946:	2380      	movs	r3, #128	; 0x80
 8003948:	01db      	lsls	r3, r3, #7
 800394a:	4013      	ands	r3, r2
 800394c:	d01a      	beq.n	8003984 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	001a      	movs	r2, r3
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	18d3      	adds	r3, r2, r3
 800395c:	881b      	ldrh	r3, [r3, #0]
 800395e:	b29a      	uxth	r2, r3
 8003960:	208a      	movs	r0, #138	; 0x8a
 8003962:	183b      	adds	r3, r7, r0
 8003964:	4960      	ldr	r1, [pc, #384]	; (8003ae8 <HAL_PCD_EP_DB_Transmit+0x384>)
 8003966:	400a      	ands	r2, r1
 8003968:	801a      	strh	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	001a      	movs	r2, r3
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	18d3      	adds	r3, r2, r3
 8003978:	183a      	adds	r2, r7, r0
 800397a:	8812      	ldrh	r2, [r2, #0]
 800397c:	495b      	ldr	r1, [pc, #364]	; (8003aec <HAL_PCD_EP_DB_Transmit+0x388>)
 800397e:	430a      	orrs	r2, r1
 8003980:	b292      	uxth	r2, r2
 8003982:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	2224      	movs	r2, #36	; 0x24
 8003988:	5c9b      	ldrb	r3, [r3, r2]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d000      	beq.n	8003990 <HAL_PCD_EP_DB_Transmit+0x22c>
 800398e:	e2c6      	b.n	8003f1e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	695a      	ldr	r2, [r3, #20]
 8003994:	2186      	movs	r1, #134	; 0x86
 8003996:	187b      	adds	r3, r7, r1
 8003998:	881b      	ldrh	r3, [r3, #0]
 800399a:	18d2      	adds	r2, r2, r3
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	69da      	ldr	r2, [r3, #28]
 80039a4:	187b      	adds	r3, r7, r1
 80039a6:	881b      	ldrh	r3, [r3, #0]
 80039a8:	18d2      	adds	r2, r2, r3
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	6a1a      	ldr	r2, [r3, #32]
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d30c      	bcc.n	80039d4 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	218c      	movs	r1, #140	; 0x8c
 80039c0:	187a      	adds	r2, r7, r1
 80039c2:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	6a1a      	ldr	r2, [r3, #32]
 80039c8:	187b      	adds	r3, r7, r1
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	1ad2      	subs	r2, r2, r3
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	621a      	str	r2, [r3, #32]
 80039d2:	e01a      	b.n	8003a0a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	6a1b      	ldr	r3, [r3, #32]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d10a      	bne.n	80039f2 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80039dc:	2386      	movs	r3, #134	; 0x86
 80039de:	18fb      	adds	r3, r7, r3
 80039e0:	881b      	ldrh	r3, [r3, #0]
 80039e2:	228c      	movs	r2, #140	; 0x8c
 80039e4:	18ba      	adds	r2, r7, r2
 80039e6:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	2224      	movs	r2, #36	; 0x24
 80039ec:	2100      	movs	r1, #0
 80039ee:	5499      	strb	r1, [r3, r2]
 80039f0:	e00b      	b.n	8003a0a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	2224      	movs	r2, #36	; 0x24
 80039f6:	2100      	movs	r1, #0
 80039f8:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	228c      	movs	r2, #140	; 0x8c
 8003a00:	18ba      	adds	r2, r7, r2
 8003a02:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	2200      	movs	r2, #0
 8003a08:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	785b      	ldrb	r3, [r3, #1]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d000      	beq.n	8003a14 <HAL_PCD_EP_DB_Transmit+0x2b0>
 8003a12:	e06d      	b.n	8003af0 <HAL_PCD_EP_DB_Transmit+0x38c>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2250      	movs	r2, #80	; 0x50
 8003a20:	5a9b      	ldrh	r3, [r3, r2]
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	001a      	movs	r2, r3
 8003a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a28:	189b      	adds	r3, r3, r2
 8003a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	00da      	lsls	r2, r3, #3
 8003a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a34:	18d3      	adds	r3, r2, r3
 8003a36:	4a29      	ldr	r2, [pc, #164]	; (8003adc <HAL_PCD_EP_DB_Transmit+0x378>)
 8003a38:	4694      	mov	ip, r2
 8003a3a:	4463      	add	r3, ip
 8003a3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a40:	881b      	ldrh	r3, [r3, #0]
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	059b      	lsls	r3, r3, #22
 8003a46:	0d9b      	lsrs	r3, r3, #22
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a4c:	801a      	strh	r2, [r3, #0]
 8003a4e:	228c      	movs	r2, #140	; 0x8c
 8003a50:	18bb      	adds	r3, r7, r2
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2b3e      	cmp	r3, #62	; 0x3e
 8003a56:	d91a      	bls.n	8003a8e <HAL_PCD_EP_DB_Transmit+0x32a>
 8003a58:	18bb      	adds	r3, r7, r2
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	095b      	lsrs	r3, r3, #5
 8003a5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a60:	18bb      	adds	r3, r7, r2
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	221f      	movs	r2, #31
 8003a66:	4013      	ands	r3, r2
 8003a68:	d102      	bne.n	8003a70 <HAL_PCD_EP_DB_Transmit+0x30c>
 8003a6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a72:	881b      	ldrh	r3, [r3, #0]
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	029b      	lsls	r3, r3, #10
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	4a17      	ldr	r2, [pc, #92]	; (8003ae0 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a8a:	801a      	strh	r2, [r3, #0]
 8003a8c:	e04f      	b.n	8003b2e <HAL_PCD_EP_DB_Transmit+0x3ca>
 8003a8e:	238c      	movs	r3, #140	; 0x8c
 8003a90:	18fb      	adds	r3, r7, r3
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d108      	bne.n	8003aaa <HAL_PCD_EP_DB_Transmit+0x346>
 8003a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a9a:	881b      	ldrh	r3, [r3, #0]
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	4a10      	ldr	r2, [pc, #64]	; (8003ae0 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa6:	801a      	strh	r2, [r3, #0]
 8003aa8:	e041      	b.n	8003b2e <HAL_PCD_EP_DB_Transmit+0x3ca>
 8003aaa:	228c      	movs	r2, #140	; 0x8c
 8003aac:	18bb      	adds	r3, r7, r2
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	085b      	lsrs	r3, r3, #1
 8003ab2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ab4:	18bb      	adds	r3, r7, r2
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	4013      	ands	r3, r2
 8003abc:	d002      	beq.n	8003ac4 <HAL_PCD_EP_DB_Transmit+0x360>
 8003abe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac6:	881b      	ldrh	r3, [r3, #0]
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	029b      	lsls	r3, r3, #10
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad8:	801a      	strh	r2, [r3, #0]
 8003ada:	e028      	b.n	8003b2e <HAL_PCD_EP_DB_Transmit+0x3ca>
 8003adc:	00000402 	.word	0x00000402
 8003ae0:	ffff8000 	.word	0xffff8000
 8003ae4:	00000406 	.word	0x00000406
 8003ae8:	ffff8f8f 	.word	0xffff8f8f
 8003aec:	ffffc080 	.word	0xffffc080
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	785b      	ldrb	r3, [r3, #1]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d11a      	bne.n	8003b2e <HAL_PCD_EP_DB_Transmit+0x3ca>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	647b      	str	r3, [r7, #68]	; 0x44
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2250      	movs	r2, #80	; 0x50
 8003b04:	5a9b      	ldrh	r3, [r3, r2]
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	001a      	movs	r2, r3
 8003b0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b0c:	189b      	adds	r3, r3, r2
 8003b0e:	647b      	str	r3, [r7, #68]	; 0x44
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	00da      	lsls	r2, r3, #3
 8003b16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b18:	18d3      	adds	r3, r2, r3
 8003b1a:	4adb      	ldr	r2, [pc, #876]	; (8003e88 <HAL_PCD_EP_DB_Transmit+0x724>)
 8003b1c:	4694      	mov	ip, r2
 8003b1e:	4463      	add	r3, ip
 8003b20:	643b      	str	r3, [r7, #64]	; 0x40
 8003b22:	238c      	movs	r3, #140	; 0x8c
 8003b24:	18fb      	adds	r3, r7, r3
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b2c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6818      	ldr	r0, [r3, #0]
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	6959      	ldr	r1, [r3, #20]
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	891a      	ldrh	r2, [r3, #8]
 8003b3a:	238c      	movs	r3, #140	; 0x8c
 8003b3c:	18fb      	adds	r3, r7, r3
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	f004 faa5 	bl	8008090 <USB_WritePMA>
 8003b46:	e1ea      	b.n	8003f1e <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2250      	movs	r2, #80	; 0x50
 8003b4e:	5a9b      	ldrh	r3, [r3, r2]
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	001a      	movs	r2, r3
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	00db      	lsls	r3, r3, #3
 8003b5a:	18d2      	adds	r2, r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	18d3      	adds	r3, r2, r3
 8003b62:	4aca      	ldr	r2, [pc, #808]	; (8003e8c <HAL_PCD_EP_DB_Transmit+0x728>)
 8003b64:	4694      	mov	ip, r2
 8003b66:	4463      	add	r3, ip
 8003b68:	881a      	ldrh	r2, [r3, #0]
 8003b6a:	2186      	movs	r1, #134	; 0x86
 8003b6c:	187b      	adds	r3, r7, r1
 8003b6e:	0592      	lsls	r2, r2, #22
 8003b70:	0d92      	lsrs	r2, r2, #22
 8003b72:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	699a      	ldr	r2, [r3, #24]
 8003b78:	187b      	adds	r3, r7, r1
 8003b7a:	881b      	ldrh	r3, [r3, #0]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d307      	bcc.n	8003b90 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	699a      	ldr	r2, [r3, #24]
 8003b84:	187b      	adds	r3, r7, r1
 8003b86:	881b      	ldrh	r3, [r3, #0]
 8003b88:	1ad2      	subs	r2, r2, r3
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	619a      	str	r2, [r3, #24]
 8003b8e:	e002      	b.n	8003b96 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	2200      	movs	r2, #0
 8003b94:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d000      	beq.n	8003ba0 <HAL_PCD_EP_DB_Transmit+0x43c>
 8003b9e:	e0bb      	b.n	8003d18 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	785b      	ldrb	r3, [r3, #1]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d125      	bne.n	8003bf4 <HAL_PCD_EP_DB_Transmit+0x490>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2250      	movs	r2, #80	; 0x50
 8003bb4:	5a9b      	ldrh	r3, [r3, r2]
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	001a      	movs	r2, r3
 8003bba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003bbc:	189b      	adds	r3, r3, r2
 8003bbe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	00da      	lsls	r2, r3, #3
 8003bc6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003bc8:	18d3      	adds	r3, r2, r3
 8003bca:	4aaf      	ldr	r2, [pc, #700]	; (8003e88 <HAL_PCD_EP_DB_Transmit+0x724>)
 8003bcc:	4694      	mov	ip, r2
 8003bce:	4463      	add	r3, ip
 8003bd0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003bd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bd4:	881b      	ldrh	r3, [r3, #0]
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	059b      	lsls	r3, r3, #22
 8003bda:	0d9b      	lsrs	r3, r3, #22
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003be0:	801a      	strh	r2, [r3, #0]
 8003be2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003be4:	881b      	ldrh	r3, [r3, #0]
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	4aa9      	ldr	r2, [pc, #676]	; (8003e90 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bf0:	801a      	strh	r2, [r3, #0]
 8003bf2:	e01b      	b.n	8003c2c <HAL_PCD_EP_DB_Transmit+0x4c8>
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	785b      	ldrb	r3, [r3, #1]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d117      	bne.n	8003c2c <HAL_PCD_EP_DB_Transmit+0x4c8>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	667b      	str	r3, [r7, #100]	; 0x64
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2250      	movs	r2, #80	; 0x50
 8003c08:	5a9b      	ldrh	r3, [r3, r2]
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	001a      	movs	r2, r3
 8003c0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c10:	189b      	adds	r3, r3, r2
 8003c12:	667b      	str	r3, [r7, #100]	; 0x64
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	00da      	lsls	r2, r3, #3
 8003c1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c1c:	18d3      	adds	r3, r2, r3
 8003c1e:	4a9a      	ldr	r2, [pc, #616]	; (8003e88 <HAL_PCD_EP_DB_Transmit+0x724>)
 8003c20:	4694      	mov	ip, r2
 8003c22:	4463      	add	r3, ip
 8003c24:	663b      	str	r3, [r7, #96]	; 0x60
 8003c26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c28:	2200      	movs	r2, #0
 8003c2a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	677b      	str	r3, [r7, #116]	; 0x74
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	785b      	ldrb	r3, [r3, #1]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d12b      	bne.n	8003c92 <HAL_PCD_EP_DB_Transmit+0x52e>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2250      	movs	r2, #80	; 0x50
 8003c46:	5a9b      	ldrh	r3, [r3, r2]
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	001a      	movs	r2, r3
 8003c4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c4e:	189b      	adds	r3, r3, r2
 8003c50:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	00da      	lsls	r2, r3, #3
 8003c58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c5a:	18d3      	adds	r3, r2, r3
 8003c5c:	4a8b      	ldr	r2, [pc, #556]	; (8003e8c <HAL_PCD_EP_DB_Transmit+0x728>)
 8003c5e:	4694      	mov	ip, r2
 8003c60:	4463      	add	r3, ip
 8003c62:	2180      	movs	r1, #128	; 0x80
 8003c64:	187a      	adds	r2, r7, r1
 8003c66:	6013      	str	r3, [r2, #0]
 8003c68:	187b      	adds	r3, r7, r1
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	881b      	ldrh	r3, [r3, #0]
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	059b      	lsls	r3, r3, #22
 8003c72:	0d9b      	lsrs	r3, r3, #22
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	187b      	adds	r3, r7, r1
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	801a      	strh	r2, [r3, #0]
 8003c7c:	187b      	adds	r3, r7, r1
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	881b      	ldrh	r3, [r3, #0]
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	4a82      	ldr	r2, [pc, #520]	; (8003e90 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	187b      	adds	r3, r7, r1
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	801a      	strh	r2, [r3, #0]
 8003c90:	e018      	b.n	8003cc4 <HAL_PCD_EP_DB_Transmit+0x560>
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	785b      	ldrb	r3, [r3, #1]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d114      	bne.n	8003cc4 <HAL_PCD_EP_DB_Transmit+0x560>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2250      	movs	r2, #80	; 0x50
 8003ca0:	5a9b      	ldrh	r3, [r3, r2]
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	001a      	movs	r2, r3
 8003ca6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ca8:	189b      	adds	r3, r3, r2
 8003caa:	677b      	str	r3, [r7, #116]	; 0x74
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	00da      	lsls	r2, r3, #3
 8003cb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cb4:	18d3      	adds	r3, r2, r3
 8003cb6:	4a75      	ldr	r2, [pc, #468]	; (8003e8c <HAL_PCD_EP_DB_Transmit+0x728>)
 8003cb8:	4694      	mov	ip, r2
 8003cba:	4463      	add	r3, ip
 8003cbc:	673b      	str	r3, [r7, #112]	; 0x70
 8003cbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	781a      	ldrb	r2, [r3, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	0011      	movs	r1, r2
 8003ccc:	0018      	movs	r0, r3
 8003cce:	f006 f80d 	bl	8009cec <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003cd2:	1dbb      	adds	r3, r7, #6
 8003cd4:	881a      	ldrh	r2, [r3, #0]
 8003cd6:	2380      	movs	r3, #128	; 0x80
 8003cd8:	01db      	lsls	r3, r3, #7
 8003cda:	4013      	ands	r3, r2
 8003cdc:	d000      	beq.n	8003ce0 <HAL_PCD_EP_DB_Transmit+0x57c>
 8003cde:	e11e      	b.n	8003f1e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	001a      	movs	r2, r3
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	18d3      	adds	r3, r2, r3
 8003cee:	881b      	ldrh	r3, [r3, #0]
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	2088      	movs	r0, #136	; 0x88
 8003cf4:	183b      	adds	r3, r7, r0
 8003cf6:	4967      	ldr	r1, [pc, #412]	; (8003e94 <HAL_PCD_EP_DB_Transmit+0x730>)
 8003cf8:	400a      	ands	r2, r1
 8003cfa:	801a      	strh	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	001a      	movs	r2, r3
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	18d3      	adds	r3, r2, r3
 8003d0a:	183a      	adds	r2, r7, r0
 8003d0c:	8812      	ldrh	r2, [r2, #0]
 8003d0e:	4962      	ldr	r1, [pc, #392]	; (8003e98 <HAL_PCD_EP_DB_Transmit+0x734>)
 8003d10:	430a      	orrs	r2, r1
 8003d12:	b292      	uxth	r2, r2
 8003d14:	801a      	strh	r2, [r3, #0]
 8003d16:	e102      	b.n	8003f1e <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003d18:	1dbb      	adds	r3, r7, #6
 8003d1a:	881a      	ldrh	r2, [r3, #0]
 8003d1c:	2380      	movs	r3, #128	; 0x80
 8003d1e:	01db      	lsls	r3, r3, #7
 8003d20:	4013      	ands	r3, r2
 8003d22:	d11a      	bne.n	8003d5a <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	001a      	movs	r2, r3
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	18d3      	adds	r3, r2, r3
 8003d32:	881b      	ldrh	r3, [r3, #0]
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	204e      	movs	r0, #78	; 0x4e
 8003d38:	183b      	adds	r3, r7, r0
 8003d3a:	4956      	ldr	r1, [pc, #344]	; (8003e94 <HAL_PCD_EP_DB_Transmit+0x730>)
 8003d3c:	400a      	ands	r2, r1
 8003d3e:	801a      	strh	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	001a      	movs	r2, r3
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	18d3      	adds	r3, r2, r3
 8003d4e:	183a      	adds	r2, r7, r0
 8003d50:	8812      	ldrh	r2, [r2, #0]
 8003d52:	4951      	ldr	r1, [pc, #324]	; (8003e98 <HAL_PCD_EP_DB_Transmit+0x734>)
 8003d54:	430a      	orrs	r2, r1
 8003d56:	b292      	uxth	r2, r2
 8003d58:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	2224      	movs	r2, #36	; 0x24
 8003d5e:	5c9b      	ldrb	r3, [r3, r2]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d000      	beq.n	8003d66 <HAL_PCD_EP_DB_Transmit+0x602>
 8003d64:	e0db      	b.n	8003f1e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	695a      	ldr	r2, [r3, #20]
 8003d6a:	2186      	movs	r1, #134	; 0x86
 8003d6c:	187b      	adds	r3, r7, r1
 8003d6e:	881b      	ldrh	r3, [r3, #0]
 8003d70:	18d2      	adds	r2, r2, r3
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	69da      	ldr	r2, [r3, #28]
 8003d7a:	187b      	adds	r3, r7, r1
 8003d7c:	881b      	ldrh	r3, [r3, #0]
 8003d7e:	18d2      	adds	r2, r2, r3
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	6a1a      	ldr	r2, [r3, #32]
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d30c      	bcc.n	8003daa <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	218c      	movs	r1, #140	; 0x8c
 8003d96:	187a      	adds	r2, r7, r1
 8003d98:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	6a1a      	ldr	r2, [r3, #32]
 8003d9e:	187b      	adds	r3, r7, r1
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	1ad2      	subs	r2, r2, r3
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	621a      	str	r2, [r3, #32]
 8003da8:	e01a      	b.n	8003de0 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10a      	bne.n	8003dc8 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8003db2:	2386      	movs	r3, #134	; 0x86
 8003db4:	18fb      	adds	r3, r7, r3
 8003db6:	881b      	ldrh	r3, [r3, #0]
 8003db8:	228c      	movs	r2, #140	; 0x8c
 8003dba:	18ba      	adds	r2, r7, r2
 8003dbc:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	2224      	movs	r2, #36	; 0x24
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	5499      	strb	r1, [r3, r2]
 8003dc6:	e00b      	b.n	8003de0 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	228c      	movs	r2, #140	; 0x8c
 8003dce:	18ba      	adds	r2, r7, r2
 8003dd0:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	2224      	movs	r2, #36	; 0x24
 8003ddc:	2100      	movs	r1, #0
 8003dde:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	657b      	str	r3, [r7, #84]	; 0x54
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	785b      	ldrb	r3, [r3, #1]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d000      	beq.n	8003df0 <HAL_PCD_EP_DB_Transmit+0x68c>
 8003dee:	e06e      	b.n	8003ece <HAL_PCD_EP_DB_Transmit+0x76a>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2250      	movs	r2, #80	; 0x50
 8003dfc:	5a9b      	ldrh	r3, [r3, r2]
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	001a      	movs	r2, r3
 8003e02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e04:	189b      	adds	r3, r3, r2
 8003e06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	00da      	lsls	r2, r3, #3
 8003e0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e10:	18d3      	adds	r3, r2, r3
 8003e12:	4a1e      	ldr	r2, [pc, #120]	; (8003e8c <HAL_PCD_EP_DB_Transmit+0x728>)
 8003e14:	4694      	mov	ip, r2
 8003e16:	4463      	add	r3, ip
 8003e18:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e1c:	881b      	ldrh	r3, [r3, #0]
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	059b      	lsls	r3, r3, #22
 8003e22:	0d9b      	lsrs	r3, r3, #22
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e28:	801a      	strh	r2, [r3, #0]
 8003e2a:	228c      	movs	r2, #140	; 0x8c
 8003e2c:	18bb      	adds	r3, r7, r2
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2b3e      	cmp	r3, #62	; 0x3e
 8003e32:	d91a      	bls.n	8003e6a <HAL_PCD_EP_DB_Transmit+0x706>
 8003e34:	18bb      	adds	r3, r7, r2
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	095b      	lsrs	r3, r3, #5
 8003e3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e3c:	18bb      	adds	r3, r7, r2
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	221f      	movs	r2, #31
 8003e42:	4013      	ands	r3, r2
 8003e44:	d102      	bne.n	8003e4c <HAL_PCD_EP_DB_Transmit+0x6e8>
 8003e46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e4e:	881b      	ldrh	r3, [r3, #0]
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	029b      	lsls	r3, r3, #10
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	4a0c      	ldr	r2, [pc, #48]	; (8003e90 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e66:	801a      	strh	r2, [r3, #0]
 8003e68:	e04d      	b.n	8003f06 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8003e6a:	238c      	movs	r3, #140	; 0x8c
 8003e6c:	18fb      	adds	r3, r7, r3
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d113      	bne.n	8003e9c <HAL_PCD_EP_DB_Transmit+0x738>
 8003e74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e76:	881b      	ldrh	r3, [r3, #0]
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	4a05      	ldr	r2, [pc, #20]	; (8003e90 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e82:	801a      	strh	r2, [r3, #0]
 8003e84:	e03f      	b.n	8003f06 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	00000402 	.word	0x00000402
 8003e8c:	00000406 	.word	0x00000406
 8003e90:	ffff8000 	.word	0xffff8000
 8003e94:	ffff8f8f 	.word	0xffff8f8f
 8003e98:	ffffc080 	.word	0xffffc080
 8003e9c:	228c      	movs	r2, #140	; 0x8c
 8003e9e:	18bb      	adds	r3, r7, r2
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	085b      	lsrs	r3, r3, #1
 8003ea4:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ea6:	18bb      	adds	r3, r7, r2
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	4013      	ands	r3, r2
 8003eae:	d002      	beq.n	8003eb6 <HAL_PCD_EP_DB_Transmit+0x752>
 8003eb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	66bb      	str	r3, [r7, #104]	; 0x68
 8003eb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003eb8:	881b      	ldrh	r3, [r3, #0]
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	029b      	lsls	r3, r3, #10
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003eca:	801a      	strh	r2, [r3, #0]
 8003ecc:	e01b      	b.n	8003f06 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	785b      	ldrb	r3, [r3, #1]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d117      	bne.n	8003f06 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2250      	movs	r2, #80	; 0x50
 8003edc:	5a9b      	ldrh	r3, [r3, r2]
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	001a      	movs	r2, r3
 8003ee2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ee4:	189b      	adds	r3, r3, r2
 8003ee6:	657b      	str	r3, [r7, #84]	; 0x54
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	00da      	lsls	r2, r3, #3
 8003eee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ef0:	18d3      	adds	r3, r2, r3
 8003ef2:	4a21      	ldr	r2, [pc, #132]	; (8003f78 <HAL_PCD_EP_DB_Transmit+0x814>)
 8003ef4:	4694      	mov	ip, r2
 8003ef6:	4463      	add	r3, ip
 8003ef8:	653b      	str	r3, [r7, #80]	; 0x50
 8003efa:	238c      	movs	r3, #140	; 0x8c
 8003efc:	18fb      	adds	r3, r7, r3
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f04:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6818      	ldr	r0, [r3, #0]
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	6959      	ldr	r1, [r3, #20]
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	895a      	ldrh	r2, [r3, #10]
 8003f12:	238c      	movs	r3, #140	; 0x8c
 8003f14:	18fb      	adds	r3, r7, r3
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	f004 f8b9 	bl	8008090 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	001a      	movs	r2, r3
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	18d3      	adds	r3, r2, r3
 8003f2c:	881b      	ldrh	r3, [r3, #0]
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	2014      	movs	r0, #20
 8003f32:	183b      	adds	r3, r7, r0
 8003f34:	4911      	ldr	r1, [pc, #68]	; (8003f7c <HAL_PCD_EP_DB_Transmit+0x818>)
 8003f36:	400a      	ands	r2, r1
 8003f38:	801a      	strh	r2, [r3, #0]
 8003f3a:	183b      	adds	r3, r7, r0
 8003f3c:	183a      	adds	r2, r7, r0
 8003f3e:	8812      	ldrh	r2, [r2, #0]
 8003f40:	2110      	movs	r1, #16
 8003f42:	404a      	eors	r2, r1
 8003f44:	801a      	strh	r2, [r3, #0]
 8003f46:	183b      	adds	r3, r7, r0
 8003f48:	183a      	adds	r2, r7, r0
 8003f4a:	8812      	ldrh	r2, [r2, #0]
 8003f4c:	2120      	movs	r1, #32
 8003f4e:	404a      	eors	r2, r1
 8003f50:	801a      	strh	r2, [r3, #0]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	001a      	movs	r2, r3
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	18d3      	adds	r3, r2, r3
 8003f60:	183a      	adds	r2, r7, r0
 8003f62:	8812      	ldrh	r2, [r2, #0]
 8003f64:	4906      	ldr	r1, [pc, #24]	; (8003f80 <HAL_PCD_EP_DB_Transmit+0x81c>)
 8003f66:	430a      	orrs	r2, r1
 8003f68:	b292      	uxth	r2, r2
 8003f6a:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	0018      	movs	r0, r3
 8003f70:	46bd      	mov	sp, r7
 8003f72:	b024      	add	sp, #144	; 0x90
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	46c0      	nop			; (mov r8, r8)
 8003f78:	00000406 	.word	0x00000406
 8003f7c:	ffff8fbf 	.word	0xffff8fbf
 8003f80:	ffff8080 	.word	0xffff8080

08003f84 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003f84:	b590      	push	{r4, r7, lr}
 8003f86:	b087      	sub	sp, #28
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	0008      	movs	r0, r1
 8003f8e:	0011      	movs	r1, r2
 8003f90:	607b      	str	r3, [r7, #4]
 8003f92:	240a      	movs	r4, #10
 8003f94:	193b      	adds	r3, r7, r4
 8003f96:	1c02      	adds	r2, r0, #0
 8003f98:	801a      	strh	r2, [r3, #0]
 8003f9a:	2308      	movs	r3, #8
 8003f9c:	18fb      	adds	r3, r7, r3
 8003f9e:	1c0a      	adds	r2, r1, #0
 8003fa0:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003fa2:	0021      	movs	r1, r4
 8003fa4:	187b      	adds	r3, r7, r1
 8003fa6:	881b      	ldrh	r3, [r3, #0]
 8003fa8:	2280      	movs	r2, #128	; 0x80
 8003faa:	4013      	ands	r3, r2
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00c      	beq.n	8003fcc <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fb2:	187b      	adds	r3, r7, r1
 8003fb4:	881b      	ldrh	r3, [r3, #0]
 8003fb6:	2207      	movs	r2, #7
 8003fb8:	4013      	ands	r3, r2
 8003fba:	1c5a      	adds	r2, r3, #1
 8003fbc:	0013      	movs	r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	189b      	adds	r3, r3, r2
 8003fc2:	00db      	lsls	r3, r3, #3
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	18d3      	adds	r3, r2, r3
 8003fc8:	617b      	str	r3, [r7, #20]
 8003fca:	e00b      	b.n	8003fe4 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003fcc:	230a      	movs	r3, #10
 8003fce:	18fb      	adds	r3, r7, r3
 8003fd0:	881a      	ldrh	r2, [r3, #0]
 8003fd2:	0013      	movs	r3, r2
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	189b      	adds	r3, r3, r2
 8003fd8:	00db      	lsls	r3, r3, #3
 8003fda:	3369      	adds	r3, #105	; 0x69
 8003fdc:	33ff      	adds	r3, #255	; 0xff
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	18d3      	adds	r3, r2, r3
 8003fe2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003fe4:	2308      	movs	r3, #8
 8003fe6:	18fb      	adds	r3, r7, r3
 8003fe8:	881b      	ldrh	r3, [r3, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d107      	bne.n	8003ffe <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	80da      	strh	r2, [r3, #6]
 8003ffc:	e00b      	b.n	8004016 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	2201      	movs	r2, #1
 8004002:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	b29a      	uxth	r2, r3
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	0c1b      	lsrs	r3, r3, #16
 8004010:	b29a      	uxth	r2, r3
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	0018      	movs	r0, r3
 800401a:	46bd      	mov	sp, r7
 800401c:	b007      	add	sp, #28
 800401e:	bd90      	pop	{r4, r7, pc}

08004020 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	23ba      	movs	r3, #186	; 0xba
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	2101      	movs	r1, #1
 8004036:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	23b8      	movs	r3, #184	; 0xb8
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	2100      	movs	r1, #0
 8004040:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2254      	movs	r2, #84	; 0x54
 8004046:	5a9b      	ldrh	r3, [r3, r2]
 8004048:	b29b      	uxth	r3, r3
 800404a:	2201      	movs	r2, #1
 800404c:	4313      	orrs	r3, r2
 800404e:	b299      	uxth	r1, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2254      	movs	r2, #84	; 0x54
 8004054:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2254      	movs	r2, #84	; 0x54
 800405a:	5a9b      	ldrh	r3, [r3, r2]
 800405c:	b29b      	uxth	r3, r3
 800405e:	2202      	movs	r2, #2
 8004060:	4313      	orrs	r3, r2
 8004062:	b299      	uxth	r1, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2254      	movs	r2, #84	; 0x54
 8004068:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	0018      	movs	r0, r3
 800406e:	46bd      	mov	sp, r7
 8004070:	b004      	add	sp, #16
 8004072:	bd80      	pop	{r7, pc}

08004074 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	000a      	movs	r2, r1
 800407e:	1cfb      	adds	r3, r7, #3
 8004080:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004082:	46c0      	nop			; (mov r8, r8)
 8004084:	46bd      	mov	sp, r7
 8004086:	b002      	add	sp, #8
 8004088:	bd80      	pop	{r7, pc}
	...

0800408c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b088      	sub	sp, #32
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d101      	bne.n	800409e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e305      	b.n	80046aa <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2201      	movs	r2, #1
 80040a4:	4013      	ands	r3, r2
 80040a6:	d100      	bne.n	80040aa <HAL_RCC_OscConfig+0x1e>
 80040a8:	e08d      	b.n	80041c6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80040aa:	4bc5      	ldr	r3, [pc, #788]	; (80043c0 <HAL_RCC_OscConfig+0x334>)
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	220c      	movs	r2, #12
 80040b0:	4013      	ands	r3, r2
 80040b2:	2b04      	cmp	r3, #4
 80040b4:	d00e      	beq.n	80040d4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80040b6:	4bc2      	ldr	r3, [pc, #776]	; (80043c0 <HAL_RCC_OscConfig+0x334>)
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	220c      	movs	r2, #12
 80040bc:	4013      	ands	r3, r2
 80040be:	2b08      	cmp	r3, #8
 80040c0:	d116      	bne.n	80040f0 <HAL_RCC_OscConfig+0x64>
 80040c2:	4bbf      	ldr	r3, [pc, #764]	; (80043c0 <HAL_RCC_OscConfig+0x334>)
 80040c4:	685a      	ldr	r2, [r3, #4]
 80040c6:	23c0      	movs	r3, #192	; 0xc0
 80040c8:	025b      	lsls	r3, r3, #9
 80040ca:	401a      	ands	r2, r3
 80040cc:	2380      	movs	r3, #128	; 0x80
 80040ce:	025b      	lsls	r3, r3, #9
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d10d      	bne.n	80040f0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040d4:	4bba      	ldr	r3, [pc, #744]	; (80043c0 <HAL_RCC_OscConfig+0x334>)
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	2380      	movs	r3, #128	; 0x80
 80040da:	029b      	lsls	r3, r3, #10
 80040dc:	4013      	ands	r3, r2
 80040de:	d100      	bne.n	80040e2 <HAL_RCC_OscConfig+0x56>
 80040e0:	e070      	b.n	80041c4 <HAL_RCC_OscConfig+0x138>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d000      	beq.n	80040ec <HAL_RCC_OscConfig+0x60>
 80040ea:	e06b      	b.n	80041c4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e2dc      	b.n	80046aa <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d107      	bne.n	8004108 <HAL_RCC_OscConfig+0x7c>
 80040f8:	4bb1      	ldr	r3, [pc, #708]	; (80043c0 <HAL_RCC_OscConfig+0x334>)
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	4bb0      	ldr	r3, [pc, #704]	; (80043c0 <HAL_RCC_OscConfig+0x334>)
 80040fe:	2180      	movs	r1, #128	; 0x80
 8004100:	0249      	lsls	r1, r1, #9
 8004102:	430a      	orrs	r2, r1
 8004104:	601a      	str	r2, [r3, #0]
 8004106:	e02f      	b.n	8004168 <HAL_RCC_OscConfig+0xdc>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d10c      	bne.n	800412a <HAL_RCC_OscConfig+0x9e>
 8004110:	4bab      	ldr	r3, [pc, #684]	; (80043c0 <HAL_RCC_OscConfig+0x334>)
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	4baa      	ldr	r3, [pc, #680]	; (80043c0 <HAL_RCC_OscConfig+0x334>)
 8004116:	49ab      	ldr	r1, [pc, #684]	; (80043c4 <HAL_RCC_OscConfig+0x338>)
 8004118:	400a      	ands	r2, r1
 800411a:	601a      	str	r2, [r3, #0]
 800411c:	4ba8      	ldr	r3, [pc, #672]	; (80043c0 <HAL_RCC_OscConfig+0x334>)
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	4ba7      	ldr	r3, [pc, #668]	; (80043c0 <HAL_RCC_OscConfig+0x334>)
 8004122:	49a9      	ldr	r1, [pc, #676]	; (80043c8 <HAL_RCC_OscConfig+0x33c>)
 8004124:	400a      	ands	r2, r1
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	e01e      	b.n	8004168 <HAL_RCC_OscConfig+0xdc>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	2b05      	cmp	r3, #5
 8004130:	d10e      	bne.n	8004150 <HAL_RCC_OscConfig+0xc4>
 8004132:	4ba3      	ldr	r3, [pc, #652]	; (80043c0 <HAL_RCC_OscConfig+0x334>)
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	4ba2      	ldr	r3, [pc, #648]	; (80043c0 <HAL_RCC_OscConfig+0x334>)
 8004138:	2180      	movs	r1, #128	; 0x80
 800413a:	02c9      	lsls	r1, r1, #11
 800413c:	430a      	orrs	r2, r1
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	4b9f      	ldr	r3, [pc, #636]	; (80043c0 <HAL_RCC_OscConfig+0x334>)
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	4b9e      	ldr	r3, [pc, #632]	; (80043c0 <HAL_RCC_OscConfig+0x334>)
 8004146:	2180      	movs	r1, #128	; 0x80
 8004148:	0249      	lsls	r1, r1, #9
 800414a:	430a      	orrs	r2, r1
 800414c:	601a      	str	r2, [r3, #0]
 800414e:	e00b      	b.n	8004168 <HAL_RCC_OscConfig+0xdc>
 8004150:	4b9b      	ldr	r3, [pc, #620]	; (80043c0 <HAL_RCC_OscConfig+0x334>)
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	4b9a      	ldr	r3, [pc, #616]	; (80043c0 <HAL_RCC_OscConfig+0x334>)
 8004156:	499b      	ldr	r1, [pc, #620]	; (80043c4 <HAL_RCC_OscConfig+0x338>)
 8004158:	400a      	ands	r2, r1
 800415a:	601a      	str	r2, [r3, #0]
 800415c:	4b98      	ldr	r3, [pc, #608]	; (80043c0 <HAL_RCC_OscConfig+0x334>)
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	4b97      	ldr	r3, [pc, #604]	; (80043c0 <HAL_RCC_OscConfig+0x334>)
 8004162:	4999      	ldr	r1, [pc, #612]	; (80043c8 <HAL_RCC_OscConfig+0x33c>)
 8004164:	400a      	ands	r2, r1
 8004166:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d014      	beq.n	800419a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004170:	f7fd fb62 	bl	8001838 <HAL_GetTick>
 8004174:	0003      	movs	r3, r0
 8004176:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004178:	e008      	b.n	800418c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800417a:	f7fd fb5d 	bl	8001838 <HAL_GetTick>
 800417e:	0002      	movs	r2, r0
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b64      	cmp	r3, #100	; 0x64
 8004186:	d901      	bls.n	800418c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e28e      	b.n	80046aa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800418c:	4b8c      	ldr	r3, [pc, #560]	; (80043c0 <HAL_RCC_OscConfig+0x334>)
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	2380      	movs	r3, #128	; 0x80
 8004192:	029b      	lsls	r3, r3, #10
 8004194:	4013      	ands	r3, r2
 8004196:	d0f0      	beq.n	800417a <HAL_RCC_OscConfig+0xee>
 8004198:	e015      	b.n	80041c6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800419a:	f7fd fb4d 	bl	8001838 <HAL_GetTick>
 800419e:	0003      	movs	r3, r0
 80041a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041a2:	e008      	b.n	80041b6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041a4:	f7fd fb48 	bl	8001838 <HAL_GetTick>
 80041a8:	0002      	movs	r2, r0
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b64      	cmp	r3, #100	; 0x64
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e279      	b.n	80046aa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041b6:	4b82      	ldr	r3, [pc, #520]	; (80043c0 <HAL_RCC_OscConfig+0x334>)
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	2380      	movs	r3, #128	; 0x80
 80041bc:	029b      	lsls	r3, r3, #10
 80041be:	4013      	ands	r3, r2
 80041c0:	d1f0      	bne.n	80041a4 <HAL_RCC_OscConfig+0x118>
 80041c2:	e000      	b.n	80041c6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041c4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2202      	movs	r2, #2
 80041cc:	4013      	ands	r3, r2
 80041ce:	d100      	bne.n	80041d2 <HAL_RCC_OscConfig+0x146>
 80041d0:	e06c      	b.n	80042ac <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80041d2:	4b7b      	ldr	r3, [pc, #492]	; (80043c0 <HAL_RCC_OscConfig+0x334>)
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	220c      	movs	r2, #12
 80041d8:	4013      	ands	r3, r2
 80041da:	d00e      	beq.n	80041fa <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80041dc:	4b78      	ldr	r3, [pc, #480]	; (80043c0 <HAL_RCC_OscConfig+0x334>)
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	220c      	movs	r2, #12
 80041e2:	4013      	ands	r3, r2
 80041e4:	2b08      	cmp	r3, #8
 80041e6:	d11f      	bne.n	8004228 <HAL_RCC_OscConfig+0x19c>
 80041e8:	4b75      	ldr	r3, [pc, #468]	; (80043c0 <HAL_RCC_OscConfig+0x334>)
 80041ea:	685a      	ldr	r2, [r3, #4]
 80041ec:	23c0      	movs	r3, #192	; 0xc0
 80041ee:	025b      	lsls	r3, r3, #9
 80041f0:	401a      	ands	r2, r3
 80041f2:	2380      	movs	r3, #128	; 0x80
 80041f4:	021b      	lsls	r3, r3, #8
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d116      	bne.n	8004228 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041fa:	4b71      	ldr	r3, [pc, #452]	; (80043c0 <HAL_RCC_OscConfig+0x334>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2202      	movs	r2, #2
 8004200:	4013      	ands	r3, r2
 8004202:	d005      	beq.n	8004210 <HAL_RCC_OscConfig+0x184>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d001      	beq.n	8004210 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e24c      	b.n	80046aa <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004210:	4b6b      	ldr	r3, [pc, #428]	; (80043c0 <HAL_RCC_OscConfig+0x334>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	22f8      	movs	r2, #248	; 0xf8
 8004216:	4393      	bics	r3, r2
 8004218:	0019      	movs	r1, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	00da      	lsls	r2, r3, #3
 8004220:	4b67      	ldr	r3, [pc, #412]	; (80043c0 <HAL_RCC_OscConfig+0x334>)
 8004222:	430a      	orrs	r2, r1
 8004224:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004226:	e041      	b.n	80042ac <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d024      	beq.n	800427a <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004230:	4b63      	ldr	r3, [pc, #396]	; (80043c0 <HAL_RCC_OscConfig+0x334>)
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	4b62      	ldr	r3, [pc, #392]	; (80043c0 <HAL_RCC_OscConfig+0x334>)
 8004236:	2101      	movs	r1, #1
 8004238:	430a      	orrs	r2, r1
 800423a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800423c:	f7fd fafc 	bl	8001838 <HAL_GetTick>
 8004240:	0003      	movs	r3, r0
 8004242:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004244:	e008      	b.n	8004258 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004246:	f7fd faf7 	bl	8001838 <HAL_GetTick>
 800424a:	0002      	movs	r2, r0
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	2b02      	cmp	r3, #2
 8004252:	d901      	bls.n	8004258 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e228      	b.n	80046aa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004258:	4b59      	ldr	r3, [pc, #356]	; (80043c0 <HAL_RCC_OscConfig+0x334>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2202      	movs	r2, #2
 800425e:	4013      	ands	r3, r2
 8004260:	d0f1      	beq.n	8004246 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004262:	4b57      	ldr	r3, [pc, #348]	; (80043c0 <HAL_RCC_OscConfig+0x334>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	22f8      	movs	r2, #248	; 0xf8
 8004268:	4393      	bics	r3, r2
 800426a:	0019      	movs	r1, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	00da      	lsls	r2, r3, #3
 8004272:	4b53      	ldr	r3, [pc, #332]	; (80043c0 <HAL_RCC_OscConfig+0x334>)
 8004274:	430a      	orrs	r2, r1
 8004276:	601a      	str	r2, [r3, #0]
 8004278:	e018      	b.n	80042ac <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800427a:	4b51      	ldr	r3, [pc, #324]	; (80043c0 <HAL_RCC_OscConfig+0x334>)
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	4b50      	ldr	r3, [pc, #320]	; (80043c0 <HAL_RCC_OscConfig+0x334>)
 8004280:	2101      	movs	r1, #1
 8004282:	438a      	bics	r2, r1
 8004284:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004286:	f7fd fad7 	bl	8001838 <HAL_GetTick>
 800428a:	0003      	movs	r3, r0
 800428c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800428e:	e008      	b.n	80042a2 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004290:	f7fd fad2 	bl	8001838 <HAL_GetTick>
 8004294:	0002      	movs	r2, r0
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b02      	cmp	r3, #2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e203      	b.n	80046aa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042a2:	4b47      	ldr	r3, [pc, #284]	; (80043c0 <HAL_RCC_OscConfig+0x334>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2202      	movs	r2, #2
 80042a8:	4013      	ands	r3, r2
 80042aa:	d1f1      	bne.n	8004290 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2208      	movs	r2, #8
 80042b2:	4013      	ands	r3, r2
 80042b4:	d036      	beq.n	8004324 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	69db      	ldr	r3, [r3, #28]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d019      	beq.n	80042f2 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042be:	4b40      	ldr	r3, [pc, #256]	; (80043c0 <HAL_RCC_OscConfig+0x334>)
 80042c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042c2:	4b3f      	ldr	r3, [pc, #252]	; (80043c0 <HAL_RCC_OscConfig+0x334>)
 80042c4:	2101      	movs	r1, #1
 80042c6:	430a      	orrs	r2, r1
 80042c8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042ca:	f7fd fab5 	bl	8001838 <HAL_GetTick>
 80042ce:	0003      	movs	r3, r0
 80042d0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042d2:	e008      	b.n	80042e6 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042d4:	f7fd fab0 	bl	8001838 <HAL_GetTick>
 80042d8:	0002      	movs	r2, r0
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e1e1      	b.n	80046aa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042e6:	4b36      	ldr	r3, [pc, #216]	; (80043c0 <HAL_RCC_OscConfig+0x334>)
 80042e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ea:	2202      	movs	r2, #2
 80042ec:	4013      	ands	r3, r2
 80042ee:	d0f1      	beq.n	80042d4 <HAL_RCC_OscConfig+0x248>
 80042f0:	e018      	b.n	8004324 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042f2:	4b33      	ldr	r3, [pc, #204]	; (80043c0 <HAL_RCC_OscConfig+0x334>)
 80042f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042f6:	4b32      	ldr	r3, [pc, #200]	; (80043c0 <HAL_RCC_OscConfig+0x334>)
 80042f8:	2101      	movs	r1, #1
 80042fa:	438a      	bics	r2, r1
 80042fc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042fe:	f7fd fa9b 	bl	8001838 <HAL_GetTick>
 8004302:	0003      	movs	r3, r0
 8004304:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004306:	e008      	b.n	800431a <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004308:	f7fd fa96 	bl	8001838 <HAL_GetTick>
 800430c:	0002      	movs	r2, r0
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b02      	cmp	r3, #2
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e1c7      	b.n	80046aa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800431a:	4b29      	ldr	r3, [pc, #164]	; (80043c0 <HAL_RCC_OscConfig+0x334>)
 800431c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431e:	2202      	movs	r2, #2
 8004320:	4013      	ands	r3, r2
 8004322:	d1f1      	bne.n	8004308 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2204      	movs	r2, #4
 800432a:	4013      	ands	r3, r2
 800432c:	d100      	bne.n	8004330 <HAL_RCC_OscConfig+0x2a4>
 800432e:	e0b5      	b.n	800449c <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004330:	201f      	movs	r0, #31
 8004332:	183b      	adds	r3, r7, r0
 8004334:	2200      	movs	r2, #0
 8004336:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004338:	4b21      	ldr	r3, [pc, #132]	; (80043c0 <HAL_RCC_OscConfig+0x334>)
 800433a:	69da      	ldr	r2, [r3, #28]
 800433c:	2380      	movs	r3, #128	; 0x80
 800433e:	055b      	lsls	r3, r3, #21
 8004340:	4013      	ands	r3, r2
 8004342:	d110      	bne.n	8004366 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004344:	4b1e      	ldr	r3, [pc, #120]	; (80043c0 <HAL_RCC_OscConfig+0x334>)
 8004346:	69da      	ldr	r2, [r3, #28]
 8004348:	4b1d      	ldr	r3, [pc, #116]	; (80043c0 <HAL_RCC_OscConfig+0x334>)
 800434a:	2180      	movs	r1, #128	; 0x80
 800434c:	0549      	lsls	r1, r1, #21
 800434e:	430a      	orrs	r2, r1
 8004350:	61da      	str	r2, [r3, #28]
 8004352:	4b1b      	ldr	r3, [pc, #108]	; (80043c0 <HAL_RCC_OscConfig+0x334>)
 8004354:	69da      	ldr	r2, [r3, #28]
 8004356:	2380      	movs	r3, #128	; 0x80
 8004358:	055b      	lsls	r3, r3, #21
 800435a:	4013      	ands	r3, r2
 800435c:	60fb      	str	r3, [r7, #12]
 800435e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004360:	183b      	adds	r3, r7, r0
 8004362:	2201      	movs	r2, #1
 8004364:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004366:	4b19      	ldr	r3, [pc, #100]	; (80043cc <HAL_RCC_OscConfig+0x340>)
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	2380      	movs	r3, #128	; 0x80
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	4013      	ands	r3, r2
 8004370:	d11a      	bne.n	80043a8 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004372:	4b16      	ldr	r3, [pc, #88]	; (80043cc <HAL_RCC_OscConfig+0x340>)
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	4b15      	ldr	r3, [pc, #84]	; (80043cc <HAL_RCC_OscConfig+0x340>)
 8004378:	2180      	movs	r1, #128	; 0x80
 800437a:	0049      	lsls	r1, r1, #1
 800437c:	430a      	orrs	r2, r1
 800437e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004380:	f7fd fa5a 	bl	8001838 <HAL_GetTick>
 8004384:	0003      	movs	r3, r0
 8004386:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004388:	e008      	b.n	800439c <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800438a:	f7fd fa55 	bl	8001838 <HAL_GetTick>
 800438e:	0002      	movs	r2, r0
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	2b64      	cmp	r3, #100	; 0x64
 8004396:	d901      	bls.n	800439c <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e186      	b.n	80046aa <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800439c:	4b0b      	ldr	r3, [pc, #44]	; (80043cc <HAL_RCC_OscConfig+0x340>)
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	2380      	movs	r3, #128	; 0x80
 80043a2:	005b      	lsls	r3, r3, #1
 80043a4:	4013      	ands	r3, r2
 80043a6:	d0f0      	beq.n	800438a <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d10f      	bne.n	80043d0 <HAL_RCC_OscConfig+0x344>
 80043b0:	4b03      	ldr	r3, [pc, #12]	; (80043c0 <HAL_RCC_OscConfig+0x334>)
 80043b2:	6a1a      	ldr	r2, [r3, #32]
 80043b4:	4b02      	ldr	r3, [pc, #8]	; (80043c0 <HAL_RCC_OscConfig+0x334>)
 80043b6:	2101      	movs	r1, #1
 80043b8:	430a      	orrs	r2, r1
 80043ba:	621a      	str	r2, [r3, #32]
 80043bc:	e036      	b.n	800442c <HAL_RCC_OscConfig+0x3a0>
 80043be:	46c0      	nop			; (mov r8, r8)
 80043c0:	40021000 	.word	0x40021000
 80043c4:	fffeffff 	.word	0xfffeffff
 80043c8:	fffbffff 	.word	0xfffbffff
 80043cc:	40007000 	.word	0x40007000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d10c      	bne.n	80043f2 <HAL_RCC_OscConfig+0x366>
 80043d8:	4bb6      	ldr	r3, [pc, #728]	; (80046b4 <HAL_RCC_OscConfig+0x628>)
 80043da:	6a1a      	ldr	r2, [r3, #32]
 80043dc:	4bb5      	ldr	r3, [pc, #724]	; (80046b4 <HAL_RCC_OscConfig+0x628>)
 80043de:	2101      	movs	r1, #1
 80043e0:	438a      	bics	r2, r1
 80043e2:	621a      	str	r2, [r3, #32]
 80043e4:	4bb3      	ldr	r3, [pc, #716]	; (80046b4 <HAL_RCC_OscConfig+0x628>)
 80043e6:	6a1a      	ldr	r2, [r3, #32]
 80043e8:	4bb2      	ldr	r3, [pc, #712]	; (80046b4 <HAL_RCC_OscConfig+0x628>)
 80043ea:	2104      	movs	r1, #4
 80043ec:	438a      	bics	r2, r1
 80043ee:	621a      	str	r2, [r3, #32]
 80043f0:	e01c      	b.n	800442c <HAL_RCC_OscConfig+0x3a0>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	2b05      	cmp	r3, #5
 80043f8:	d10c      	bne.n	8004414 <HAL_RCC_OscConfig+0x388>
 80043fa:	4bae      	ldr	r3, [pc, #696]	; (80046b4 <HAL_RCC_OscConfig+0x628>)
 80043fc:	6a1a      	ldr	r2, [r3, #32]
 80043fe:	4bad      	ldr	r3, [pc, #692]	; (80046b4 <HAL_RCC_OscConfig+0x628>)
 8004400:	2104      	movs	r1, #4
 8004402:	430a      	orrs	r2, r1
 8004404:	621a      	str	r2, [r3, #32]
 8004406:	4bab      	ldr	r3, [pc, #684]	; (80046b4 <HAL_RCC_OscConfig+0x628>)
 8004408:	6a1a      	ldr	r2, [r3, #32]
 800440a:	4baa      	ldr	r3, [pc, #680]	; (80046b4 <HAL_RCC_OscConfig+0x628>)
 800440c:	2101      	movs	r1, #1
 800440e:	430a      	orrs	r2, r1
 8004410:	621a      	str	r2, [r3, #32]
 8004412:	e00b      	b.n	800442c <HAL_RCC_OscConfig+0x3a0>
 8004414:	4ba7      	ldr	r3, [pc, #668]	; (80046b4 <HAL_RCC_OscConfig+0x628>)
 8004416:	6a1a      	ldr	r2, [r3, #32]
 8004418:	4ba6      	ldr	r3, [pc, #664]	; (80046b4 <HAL_RCC_OscConfig+0x628>)
 800441a:	2101      	movs	r1, #1
 800441c:	438a      	bics	r2, r1
 800441e:	621a      	str	r2, [r3, #32]
 8004420:	4ba4      	ldr	r3, [pc, #656]	; (80046b4 <HAL_RCC_OscConfig+0x628>)
 8004422:	6a1a      	ldr	r2, [r3, #32]
 8004424:	4ba3      	ldr	r3, [pc, #652]	; (80046b4 <HAL_RCC_OscConfig+0x628>)
 8004426:	2104      	movs	r1, #4
 8004428:	438a      	bics	r2, r1
 800442a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d014      	beq.n	800445e <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004434:	f7fd fa00 	bl	8001838 <HAL_GetTick>
 8004438:	0003      	movs	r3, r0
 800443a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800443c:	e009      	b.n	8004452 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800443e:	f7fd f9fb 	bl	8001838 <HAL_GetTick>
 8004442:	0002      	movs	r2, r0
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	4a9b      	ldr	r2, [pc, #620]	; (80046b8 <HAL_RCC_OscConfig+0x62c>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e12b      	b.n	80046aa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004452:	4b98      	ldr	r3, [pc, #608]	; (80046b4 <HAL_RCC_OscConfig+0x628>)
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	2202      	movs	r2, #2
 8004458:	4013      	ands	r3, r2
 800445a:	d0f0      	beq.n	800443e <HAL_RCC_OscConfig+0x3b2>
 800445c:	e013      	b.n	8004486 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800445e:	f7fd f9eb 	bl	8001838 <HAL_GetTick>
 8004462:	0003      	movs	r3, r0
 8004464:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004466:	e009      	b.n	800447c <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004468:	f7fd f9e6 	bl	8001838 <HAL_GetTick>
 800446c:	0002      	movs	r2, r0
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	4a91      	ldr	r2, [pc, #580]	; (80046b8 <HAL_RCC_OscConfig+0x62c>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d901      	bls.n	800447c <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e116      	b.n	80046aa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800447c:	4b8d      	ldr	r3, [pc, #564]	; (80046b4 <HAL_RCC_OscConfig+0x628>)
 800447e:	6a1b      	ldr	r3, [r3, #32]
 8004480:	2202      	movs	r2, #2
 8004482:	4013      	ands	r3, r2
 8004484:	d1f0      	bne.n	8004468 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004486:	231f      	movs	r3, #31
 8004488:	18fb      	adds	r3, r7, r3
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	2b01      	cmp	r3, #1
 800448e:	d105      	bne.n	800449c <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004490:	4b88      	ldr	r3, [pc, #544]	; (80046b4 <HAL_RCC_OscConfig+0x628>)
 8004492:	69da      	ldr	r2, [r3, #28]
 8004494:	4b87      	ldr	r3, [pc, #540]	; (80046b4 <HAL_RCC_OscConfig+0x628>)
 8004496:	4989      	ldr	r1, [pc, #548]	; (80046bc <HAL_RCC_OscConfig+0x630>)
 8004498:	400a      	ands	r2, r1
 800449a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2210      	movs	r2, #16
 80044a2:	4013      	ands	r3, r2
 80044a4:	d063      	beq.n	800456e <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d12a      	bne.n	8004504 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80044ae:	4b81      	ldr	r3, [pc, #516]	; (80046b4 <HAL_RCC_OscConfig+0x628>)
 80044b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044b2:	4b80      	ldr	r3, [pc, #512]	; (80046b4 <HAL_RCC_OscConfig+0x628>)
 80044b4:	2104      	movs	r1, #4
 80044b6:	430a      	orrs	r2, r1
 80044b8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80044ba:	4b7e      	ldr	r3, [pc, #504]	; (80046b4 <HAL_RCC_OscConfig+0x628>)
 80044bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044be:	4b7d      	ldr	r3, [pc, #500]	; (80046b4 <HAL_RCC_OscConfig+0x628>)
 80044c0:	2101      	movs	r1, #1
 80044c2:	430a      	orrs	r2, r1
 80044c4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044c6:	f7fd f9b7 	bl	8001838 <HAL_GetTick>
 80044ca:	0003      	movs	r3, r0
 80044cc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80044ce:	e008      	b.n	80044e2 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80044d0:	f7fd f9b2 	bl	8001838 <HAL_GetTick>
 80044d4:	0002      	movs	r2, r0
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e0e3      	b.n	80046aa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80044e2:	4b74      	ldr	r3, [pc, #464]	; (80046b4 <HAL_RCC_OscConfig+0x628>)
 80044e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044e6:	2202      	movs	r2, #2
 80044e8:	4013      	ands	r3, r2
 80044ea:	d0f1      	beq.n	80044d0 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80044ec:	4b71      	ldr	r3, [pc, #452]	; (80046b4 <HAL_RCC_OscConfig+0x628>)
 80044ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f0:	22f8      	movs	r2, #248	; 0xf8
 80044f2:	4393      	bics	r3, r2
 80044f4:	0019      	movs	r1, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	00da      	lsls	r2, r3, #3
 80044fc:	4b6d      	ldr	r3, [pc, #436]	; (80046b4 <HAL_RCC_OscConfig+0x628>)
 80044fe:	430a      	orrs	r2, r1
 8004500:	635a      	str	r2, [r3, #52]	; 0x34
 8004502:	e034      	b.n	800456e <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	3305      	adds	r3, #5
 800450a:	d111      	bne.n	8004530 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800450c:	4b69      	ldr	r3, [pc, #420]	; (80046b4 <HAL_RCC_OscConfig+0x628>)
 800450e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004510:	4b68      	ldr	r3, [pc, #416]	; (80046b4 <HAL_RCC_OscConfig+0x628>)
 8004512:	2104      	movs	r1, #4
 8004514:	438a      	bics	r2, r1
 8004516:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004518:	4b66      	ldr	r3, [pc, #408]	; (80046b4 <HAL_RCC_OscConfig+0x628>)
 800451a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800451c:	22f8      	movs	r2, #248	; 0xf8
 800451e:	4393      	bics	r3, r2
 8004520:	0019      	movs	r1, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	00da      	lsls	r2, r3, #3
 8004528:	4b62      	ldr	r3, [pc, #392]	; (80046b4 <HAL_RCC_OscConfig+0x628>)
 800452a:	430a      	orrs	r2, r1
 800452c:	635a      	str	r2, [r3, #52]	; 0x34
 800452e:	e01e      	b.n	800456e <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004530:	4b60      	ldr	r3, [pc, #384]	; (80046b4 <HAL_RCC_OscConfig+0x628>)
 8004532:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004534:	4b5f      	ldr	r3, [pc, #380]	; (80046b4 <HAL_RCC_OscConfig+0x628>)
 8004536:	2104      	movs	r1, #4
 8004538:	430a      	orrs	r2, r1
 800453a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800453c:	4b5d      	ldr	r3, [pc, #372]	; (80046b4 <HAL_RCC_OscConfig+0x628>)
 800453e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004540:	4b5c      	ldr	r3, [pc, #368]	; (80046b4 <HAL_RCC_OscConfig+0x628>)
 8004542:	2101      	movs	r1, #1
 8004544:	438a      	bics	r2, r1
 8004546:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004548:	f7fd f976 	bl	8001838 <HAL_GetTick>
 800454c:	0003      	movs	r3, r0
 800454e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004550:	e008      	b.n	8004564 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004552:	f7fd f971 	bl	8001838 <HAL_GetTick>
 8004556:	0002      	movs	r2, r0
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	2b02      	cmp	r3, #2
 800455e:	d901      	bls.n	8004564 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e0a2      	b.n	80046aa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004564:	4b53      	ldr	r3, [pc, #332]	; (80046b4 <HAL_RCC_OscConfig+0x628>)
 8004566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004568:	2202      	movs	r2, #2
 800456a:	4013      	ands	r3, r2
 800456c:	d1f1      	bne.n	8004552 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d100      	bne.n	8004578 <HAL_RCC_OscConfig+0x4ec>
 8004576:	e097      	b.n	80046a8 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004578:	4b4e      	ldr	r3, [pc, #312]	; (80046b4 <HAL_RCC_OscConfig+0x628>)
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	220c      	movs	r2, #12
 800457e:	4013      	ands	r3, r2
 8004580:	2b08      	cmp	r3, #8
 8004582:	d100      	bne.n	8004586 <HAL_RCC_OscConfig+0x4fa>
 8004584:	e06b      	b.n	800465e <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	2b02      	cmp	r3, #2
 800458c:	d14c      	bne.n	8004628 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800458e:	4b49      	ldr	r3, [pc, #292]	; (80046b4 <HAL_RCC_OscConfig+0x628>)
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	4b48      	ldr	r3, [pc, #288]	; (80046b4 <HAL_RCC_OscConfig+0x628>)
 8004594:	494a      	ldr	r1, [pc, #296]	; (80046c0 <HAL_RCC_OscConfig+0x634>)
 8004596:	400a      	ands	r2, r1
 8004598:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800459a:	f7fd f94d 	bl	8001838 <HAL_GetTick>
 800459e:	0003      	movs	r3, r0
 80045a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045a2:	e008      	b.n	80045b6 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045a4:	f7fd f948 	bl	8001838 <HAL_GetTick>
 80045a8:	0002      	movs	r2, r0
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e079      	b.n	80046aa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045b6:	4b3f      	ldr	r3, [pc, #252]	; (80046b4 <HAL_RCC_OscConfig+0x628>)
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	2380      	movs	r3, #128	; 0x80
 80045bc:	049b      	lsls	r3, r3, #18
 80045be:	4013      	ands	r3, r2
 80045c0:	d1f0      	bne.n	80045a4 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045c2:	4b3c      	ldr	r3, [pc, #240]	; (80046b4 <HAL_RCC_OscConfig+0x628>)
 80045c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c6:	220f      	movs	r2, #15
 80045c8:	4393      	bics	r3, r2
 80045ca:	0019      	movs	r1, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d0:	4b38      	ldr	r3, [pc, #224]	; (80046b4 <HAL_RCC_OscConfig+0x628>)
 80045d2:	430a      	orrs	r2, r1
 80045d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80045d6:	4b37      	ldr	r3, [pc, #220]	; (80046b4 <HAL_RCC_OscConfig+0x628>)
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	4a3a      	ldr	r2, [pc, #232]	; (80046c4 <HAL_RCC_OscConfig+0x638>)
 80045dc:	4013      	ands	r3, r2
 80045de:	0019      	movs	r1, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e8:	431a      	orrs	r2, r3
 80045ea:	4b32      	ldr	r3, [pc, #200]	; (80046b4 <HAL_RCC_OscConfig+0x628>)
 80045ec:	430a      	orrs	r2, r1
 80045ee:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045f0:	4b30      	ldr	r3, [pc, #192]	; (80046b4 <HAL_RCC_OscConfig+0x628>)
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	4b2f      	ldr	r3, [pc, #188]	; (80046b4 <HAL_RCC_OscConfig+0x628>)
 80045f6:	2180      	movs	r1, #128	; 0x80
 80045f8:	0449      	lsls	r1, r1, #17
 80045fa:	430a      	orrs	r2, r1
 80045fc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045fe:	f7fd f91b 	bl	8001838 <HAL_GetTick>
 8004602:	0003      	movs	r3, r0
 8004604:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004606:	e008      	b.n	800461a <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004608:	f7fd f916 	bl	8001838 <HAL_GetTick>
 800460c:	0002      	movs	r2, r0
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b02      	cmp	r3, #2
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e047      	b.n	80046aa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800461a:	4b26      	ldr	r3, [pc, #152]	; (80046b4 <HAL_RCC_OscConfig+0x628>)
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	2380      	movs	r3, #128	; 0x80
 8004620:	049b      	lsls	r3, r3, #18
 8004622:	4013      	ands	r3, r2
 8004624:	d0f0      	beq.n	8004608 <HAL_RCC_OscConfig+0x57c>
 8004626:	e03f      	b.n	80046a8 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004628:	4b22      	ldr	r3, [pc, #136]	; (80046b4 <HAL_RCC_OscConfig+0x628>)
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	4b21      	ldr	r3, [pc, #132]	; (80046b4 <HAL_RCC_OscConfig+0x628>)
 800462e:	4924      	ldr	r1, [pc, #144]	; (80046c0 <HAL_RCC_OscConfig+0x634>)
 8004630:	400a      	ands	r2, r1
 8004632:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004634:	f7fd f900 	bl	8001838 <HAL_GetTick>
 8004638:	0003      	movs	r3, r0
 800463a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800463c:	e008      	b.n	8004650 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800463e:	f7fd f8fb 	bl	8001838 <HAL_GetTick>
 8004642:	0002      	movs	r2, r0
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	2b02      	cmp	r3, #2
 800464a:	d901      	bls.n	8004650 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e02c      	b.n	80046aa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004650:	4b18      	ldr	r3, [pc, #96]	; (80046b4 <HAL_RCC_OscConfig+0x628>)
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	2380      	movs	r3, #128	; 0x80
 8004656:	049b      	lsls	r3, r3, #18
 8004658:	4013      	ands	r3, r2
 800465a:	d1f0      	bne.n	800463e <HAL_RCC_OscConfig+0x5b2>
 800465c:	e024      	b.n	80046a8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d101      	bne.n	800466a <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e01f      	b.n	80046aa <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800466a:	4b12      	ldr	r3, [pc, #72]	; (80046b4 <HAL_RCC_OscConfig+0x628>)
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004670:	4b10      	ldr	r3, [pc, #64]	; (80046b4 <HAL_RCC_OscConfig+0x628>)
 8004672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004674:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004676:	697a      	ldr	r2, [r7, #20]
 8004678:	23c0      	movs	r3, #192	; 0xc0
 800467a:	025b      	lsls	r3, r3, #9
 800467c:	401a      	ands	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004682:	429a      	cmp	r2, r3
 8004684:	d10e      	bne.n	80046a4 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	220f      	movs	r2, #15
 800468a:	401a      	ands	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004690:	429a      	cmp	r2, r3
 8004692:	d107      	bne.n	80046a4 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	23f0      	movs	r3, #240	; 0xf0
 8004698:	039b      	lsls	r3, r3, #14
 800469a:	401a      	ands	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d001      	beq.n	80046a8 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e000      	b.n	80046aa <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	0018      	movs	r0, r3
 80046ac:	46bd      	mov	sp, r7
 80046ae:	b008      	add	sp, #32
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	46c0      	nop			; (mov r8, r8)
 80046b4:	40021000 	.word	0x40021000
 80046b8:	00001388 	.word	0x00001388
 80046bc:	efffffff 	.word	0xefffffff
 80046c0:	feffffff 	.word	0xfeffffff
 80046c4:	ffc27fff 	.word	0xffc27fff

080046c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d101      	bne.n	80046dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e0b3      	b.n	8004844 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046dc:	4b5b      	ldr	r3, [pc, #364]	; (800484c <HAL_RCC_ClockConfig+0x184>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2201      	movs	r2, #1
 80046e2:	4013      	ands	r3, r2
 80046e4:	683a      	ldr	r2, [r7, #0]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d911      	bls.n	800470e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ea:	4b58      	ldr	r3, [pc, #352]	; (800484c <HAL_RCC_ClockConfig+0x184>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2201      	movs	r2, #1
 80046f0:	4393      	bics	r3, r2
 80046f2:	0019      	movs	r1, r3
 80046f4:	4b55      	ldr	r3, [pc, #340]	; (800484c <HAL_RCC_ClockConfig+0x184>)
 80046f6:	683a      	ldr	r2, [r7, #0]
 80046f8:	430a      	orrs	r2, r1
 80046fa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046fc:	4b53      	ldr	r3, [pc, #332]	; (800484c <HAL_RCC_ClockConfig+0x184>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2201      	movs	r2, #1
 8004702:	4013      	ands	r3, r2
 8004704:	683a      	ldr	r2, [r7, #0]
 8004706:	429a      	cmp	r2, r3
 8004708:	d001      	beq.n	800470e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e09a      	b.n	8004844 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2202      	movs	r2, #2
 8004714:	4013      	ands	r3, r2
 8004716:	d015      	beq.n	8004744 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2204      	movs	r2, #4
 800471e:	4013      	ands	r3, r2
 8004720:	d006      	beq.n	8004730 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004722:	4b4b      	ldr	r3, [pc, #300]	; (8004850 <HAL_RCC_ClockConfig+0x188>)
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	4b4a      	ldr	r3, [pc, #296]	; (8004850 <HAL_RCC_ClockConfig+0x188>)
 8004728:	21e0      	movs	r1, #224	; 0xe0
 800472a:	00c9      	lsls	r1, r1, #3
 800472c:	430a      	orrs	r2, r1
 800472e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004730:	4b47      	ldr	r3, [pc, #284]	; (8004850 <HAL_RCC_ClockConfig+0x188>)
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	22f0      	movs	r2, #240	; 0xf0
 8004736:	4393      	bics	r3, r2
 8004738:	0019      	movs	r1, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	689a      	ldr	r2, [r3, #8]
 800473e:	4b44      	ldr	r3, [pc, #272]	; (8004850 <HAL_RCC_ClockConfig+0x188>)
 8004740:	430a      	orrs	r2, r1
 8004742:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2201      	movs	r2, #1
 800474a:	4013      	ands	r3, r2
 800474c:	d040      	beq.n	80047d0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d107      	bne.n	8004766 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004756:	4b3e      	ldr	r3, [pc, #248]	; (8004850 <HAL_RCC_ClockConfig+0x188>)
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	2380      	movs	r3, #128	; 0x80
 800475c:	029b      	lsls	r3, r3, #10
 800475e:	4013      	ands	r3, r2
 8004760:	d114      	bne.n	800478c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e06e      	b.n	8004844 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	2b02      	cmp	r3, #2
 800476c:	d107      	bne.n	800477e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800476e:	4b38      	ldr	r3, [pc, #224]	; (8004850 <HAL_RCC_ClockConfig+0x188>)
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	2380      	movs	r3, #128	; 0x80
 8004774:	049b      	lsls	r3, r3, #18
 8004776:	4013      	ands	r3, r2
 8004778:	d108      	bne.n	800478c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e062      	b.n	8004844 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800477e:	4b34      	ldr	r3, [pc, #208]	; (8004850 <HAL_RCC_ClockConfig+0x188>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2202      	movs	r2, #2
 8004784:	4013      	ands	r3, r2
 8004786:	d101      	bne.n	800478c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e05b      	b.n	8004844 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800478c:	4b30      	ldr	r3, [pc, #192]	; (8004850 <HAL_RCC_ClockConfig+0x188>)
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	2203      	movs	r2, #3
 8004792:	4393      	bics	r3, r2
 8004794:	0019      	movs	r1, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685a      	ldr	r2, [r3, #4]
 800479a:	4b2d      	ldr	r3, [pc, #180]	; (8004850 <HAL_RCC_ClockConfig+0x188>)
 800479c:	430a      	orrs	r2, r1
 800479e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047a0:	f7fd f84a 	bl	8001838 <HAL_GetTick>
 80047a4:	0003      	movs	r3, r0
 80047a6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047a8:	e009      	b.n	80047be <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047aa:	f7fd f845 	bl	8001838 <HAL_GetTick>
 80047ae:	0002      	movs	r2, r0
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	4a27      	ldr	r2, [pc, #156]	; (8004854 <HAL_RCC_ClockConfig+0x18c>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e042      	b.n	8004844 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047be:	4b24      	ldr	r3, [pc, #144]	; (8004850 <HAL_RCC_ClockConfig+0x188>)
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	220c      	movs	r2, #12
 80047c4:	401a      	ands	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d1ec      	bne.n	80047aa <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047d0:	4b1e      	ldr	r3, [pc, #120]	; (800484c <HAL_RCC_ClockConfig+0x184>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2201      	movs	r2, #1
 80047d6:	4013      	ands	r3, r2
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d211      	bcs.n	8004802 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047de:	4b1b      	ldr	r3, [pc, #108]	; (800484c <HAL_RCC_ClockConfig+0x184>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2201      	movs	r2, #1
 80047e4:	4393      	bics	r3, r2
 80047e6:	0019      	movs	r1, r3
 80047e8:	4b18      	ldr	r3, [pc, #96]	; (800484c <HAL_RCC_ClockConfig+0x184>)
 80047ea:	683a      	ldr	r2, [r7, #0]
 80047ec:	430a      	orrs	r2, r1
 80047ee:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047f0:	4b16      	ldr	r3, [pc, #88]	; (800484c <HAL_RCC_ClockConfig+0x184>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2201      	movs	r2, #1
 80047f6:	4013      	ands	r3, r2
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d001      	beq.n	8004802 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e020      	b.n	8004844 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2204      	movs	r2, #4
 8004808:	4013      	ands	r3, r2
 800480a:	d009      	beq.n	8004820 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800480c:	4b10      	ldr	r3, [pc, #64]	; (8004850 <HAL_RCC_ClockConfig+0x188>)
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	4a11      	ldr	r2, [pc, #68]	; (8004858 <HAL_RCC_ClockConfig+0x190>)
 8004812:	4013      	ands	r3, r2
 8004814:	0019      	movs	r1, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68da      	ldr	r2, [r3, #12]
 800481a:	4b0d      	ldr	r3, [pc, #52]	; (8004850 <HAL_RCC_ClockConfig+0x188>)
 800481c:	430a      	orrs	r2, r1
 800481e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004820:	f000 f820 	bl	8004864 <HAL_RCC_GetSysClockFreq>
 8004824:	0001      	movs	r1, r0
 8004826:	4b0a      	ldr	r3, [pc, #40]	; (8004850 <HAL_RCC_ClockConfig+0x188>)
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	091b      	lsrs	r3, r3, #4
 800482c:	220f      	movs	r2, #15
 800482e:	4013      	ands	r3, r2
 8004830:	4a0a      	ldr	r2, [pc, #40]	; (800485c <HAL_RCC_ClockConfig+0x194>)
 8004832:	5cd3      	ldrb	r3, [r2, r3]
 8004834:	000a      	movs	r2, r1
 8004836:	40da      	lsrs	r2, r3
 8004838:	4b09      	ldr	r3, [pc, #36]	; (8004860 <HAL_RCC_ClockConfig+0x198>)
 800483a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800483c:	2003      	movs	r0, #3
 800483e:	f7fc ffb5 	bl	80017ac <HAL_InitTick>
  
  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	0018      	movs	r0, r3
 8004846:	46bd      	mov	sp, r7
 8004848:	b004      	add	sp, #16
 800484a:	bd80      	pop	{r7, pc}
 800484c:	40022000 	.word	0x40022000
 8004850:	40021000 	.word	0x40021000
 8004854:	00001388 	.word	0x00001388
 8004858:	fffff8ff 	.word	0xfffff8ff
 800485c:	0800b284 	.word	0x0800b284
 8004860:	20000000 	.word	0x20000000

08004864 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800486a:	2300      	movs	r3, #0
 800486c:	60fb      	str	r3, [r7, #12]
 800486e:	2300      	movs	r3, #0
 8004870:	60bb      	str	r3, [r7, #8]
 8004872:	2300      	movs	r3, #0
 8004874:	617b      	str	r3, [r7, #20]
 8004876:	2300      	movs	r3, #0
 8004878:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800487a:	2300      	movs	r3, #0
 800487c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800487e:	4b21      	ldr	r3, [pc, #132]	; (8004904 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	220c      	movs	r2, #12
 8004888:	4013      	ands	r3, r2
 800488a:	2b04      	cmp	r3, #4
 800488c:	d002      	beq.n	8004894 <HAL_RCC_GetSysClockFreq+0x30>
 800488e:	2b08      	cmp	r3, #8
 8004890:	d003      	beq.n	800489a <HAL_RCC_GetSysClockFreq+0x36>
 8004892:	e02e      	b.n	80048f2 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004894:	4b1c      	ldr	r3, [pc, #112]	; (8004908 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004896:	613b      	str	r3, [r7, #16]
      break;
 8004898:	e02e      	b.n	80048f8 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	0c9b      	lsrs	r3, r3, #18
 800489e:	220f      	movs	r2, #15
 80048a0:	4013      	ands	r3, r2
 80048a2:	4a1a      	ldr	r2, [pc, #104]	; (800490c <HAL_RCC_GetSysClockFreq+0xa8>)
 80048a4:	5cd3      	ldrb	r3, [r2, r3]
 80048a6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80048a8:	4b16      	ldr	r3, [pc, #88]	; (8004904 <HAL_RCC_GetSysClockFreq+0xa0>)
 80048aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ac:	220f      	movs	r2, #15
 80048ae:	4013      	ands	r3, r2
 80048b0:	4a17      	ldr	r2, [pc, #92]	; (8004910 <HAL_RCC_GetSysClockFreq+0xac>)
 80048b2:	5cd3      	ldrb	r3, [r2, r3]
 80048b4:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	23c0      	movs	r3, #192	; 0xc0
 80048ba:	025b      	lsls	r3, r3, #9
 80048bc:	401a      	ands	r2, r3
 80048be:	2380      	movs	r3, #128	; 0x80
 80048c0:	025b      	lsls	r3, r3, #9
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d109      	bne.n	80048da <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80048c6:	68b9      	ldr	r1, [r7, #8]
 80048c8:	480f      	ldr	r0, [pc, #60]	; (8004908 <HAL_RCC_GetSysClockFreq+0xa4>)
 80048ca:	f7fb fc27 	bl	800011c <__udivsi3>
 80048ce:	0003      	movs	r3, r0
 80048d0:	001a      	movs	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4353      	muls	r3, r2
 80048d6:	617b      	str	r3, [r7, #20]
 80048d8:	e008      	b.n	80048ec <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80048da:	68b9      	ldr	r1, [r7, #8]
 80048dc:	480d      	ldr	r0, [pc, #52]	; (8004914 <HAL_RCC_GetSysClockFreq+0xb0>)
 80048de:	f7fb fc1d 	bl	800011c <__udivsi3>
 80048e2:	0003      	movs	r3, r0
 80048e4:	001a      	movs	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4353      	muls	r3, r2
 80048ea:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	613b      	str	r3, [r7, #16]
      break;
 80048f0:	e002      	b.n	80048f8 <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80048f2:	4b08      	ldr	r3, [pc, #32]	; (8004914 <HAL_RCC_GetSysClockFreq+0xb0>)
 80048f4:	613b      	str	r3, [r7, #16]
      break;
 80048f6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80048f8:	693b      	ldr	r3, [r7, #16]
}
 80048fa:	0018      	movs	r0, r3
 80048fc:	46bd      	mov	sp, r7
 80048fe:	b006      	add	sp, #24
 8004900:	bd80      	pop	{r7, pc}
 8004902:	46c0      	nop			; (mov r8, r8)
 8004904:	40021000 	.word	0x40021000
 8004908:	00f42400 	.word	0x00f42400
 800490c:	0800b29c 	.word	0x0800b29c
 8004910:	0800b2ac 	.word	0x0800b2ac
 8004914:	007a1200 	.word	0x007a1200

08004918 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800491c:	4b02      	ldr	r3, [pc, #8]	; (8004928 <HAL_RCC_GetHCLKFreq+0x10>)
 800491e:	681b      	ldr	r3, [r3, #0]
}
 8004920:	0018      	movs	r0, r3
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	46c0      	nop			; (mov r8, r8)
 8004928:	20000000 	.word	0x20000000

0800492c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004930:	f7ff fff2 	bl	8004918 <HAL_RCC_GetHCLKFreq>
 8004934:	0001      	movs	r1, r0
 8004936:	4b06      	ldr	r3, [pc, #24]	; (8004950 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	0a1b      	lsrs	r3, r3, #8
 800493c:	2207      	movs	r2, #7
 800493e:	4013      	ands	r3, r2
 8004940:	4a04      	ldr	r2, [pc, #16]	; (8004954 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004942:	5cd3      	ldrb	r3, [r2, r3]
 8004944:	40d9      	lsrs	r1, r3
 8004946:	000b      	movs	r3, r1
}    
 8004948:	0018      	movs	r0, r3
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	46c0      	nop			; (mov r8, r8)
 8004950:	40021000 	.word	0x40021000
 8004954:	0800b294 	.word	0x0800b294

08004958 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004960:	2300      	movs	r3, #0
 8004962:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004964:	2300      	movs	r3, #0
 8004966:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	2380      	movs	r3, #128	; 0x80
 800496e:	025b      	lsls	r3, r3, #9
 8004970:	4013      	ands	r3, r2
 8004972:	d100      	bne.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004974:	e08e      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004976:	2017      	movs	r0, #23
 8004978:	183b      	adds	r3, r7, r0
 800497a:	2200      	movs	r2, #0
 800497c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800497e:	4b5f      	ldr	r3, [pc, #380]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004980:	69da      	ldr	r2, [r3, #28]
 8004982:	2380      	movs	r3, #128	; 0x80
 8004984:	055b      	lsls	r3, r3, #21
 8004986:	4013      	ands	r3, r2
 8004988:	d110      	bne.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800498a:	4b5c      	ldr	r3, [pc, #368]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800498c:	69da      	ldr	r2, [r3, #28]
 800498e:	4b5b      	ldr	r3, [pc, #364]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004990:	2180      	movs	r1, #128	; 0x80
 8004992:	0549      	lsls	r1, r1, #21
 8004994:	430a      	orrs	r2, r1
 8004996:	61da      	str	r2, [r3, #28]
 8004998:	4b58      	ldr	r3, [pc, #352]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800499a:	69da      	ldr	r2, [r3, #28]
 800499c:	2380      	movs	r3, #128	; 0x80
 800499e:	055b      	lsls	r3, r3, #21
 80049a0:	4013      	ands	r3, r2
 80049a2:	60bb      	str	r3, [r7, #8]
 80049a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049a6:	183b      	adds	r3, r7, r0
 80049a8:	2201      	movs	r2, #1
 80049aa:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ac:	4b54      	ldr	r3, [pc, #336]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	2380      	movs	r3, #128	; 0x80
 80049b2:	005b      	lsls	r3, r3, #1
 80049b4:	4013      	ands	r3, r2
 80049b6:	d11a      	bne.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049b8:	4b51      	ldr	r3, [pc, #324]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	4b50      	ldr	r3, [pc, #320]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80049be:	2180      	movs	r1, #128	; 0x80
 80049c0:	0049      	lsls	r1, r1, #1
 80049c2:	430a      	orrs	r2, r1
 80049c4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049c6:	f7fc ff37 	bl	8001838 <HAL_GetTick>
 80049ca:	0003      	movs	r3, r0
 80049cc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ce:	e008      	b.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049d0:	f7fc ff32 	bl	8001838 <HAL_GetTick>
 80049d4:	0002      	movs	r2, r0
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b64      	cmp	r3, #100	; 0x64
 80049dc:	d901      	bls.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e087      	b.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049e2:	4b47      	ldr	r3, [pc, #284]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	2380      	movs	r3, #128	; 0x80
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	4013      	ands	r3, r2
 80049ec:	d0f0      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80049ee:	4b43      	ldr	r3, [pc, #268]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80049f0:	6a1a      	ldr	r2, [r3, #32]
 80049f2:	23c0      	movs	r3, #192	; 0xc0
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	4013      	ands	r3, r2
 80049f8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d034      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	685a      	ldr	r2, [r3, #4]
 8004a04:	23c0      	movs	r3, #192	; 0xc0
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	4013      	ands	r3, r2
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d02c      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a10:	4b3a      	ldr	r3, [pc, #232]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004a12:	6a1b      	ldr	r3, [r3, #32]
 8004a14:	4a3b      	ldr	r2, [pc, #236]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a16:	4013      	ands	r3, r2
 8004a18:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a1a:	4b38      	ldr	r3, [pc, #224]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004a1c:	6a1a      	ldr	r2, [r3, #32]
 8004a1e:	4b37      	ldr	r3, [pc, #220]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004a20:	2180      	movs	r1, #128	; 0x80
 8004a22:	0249      	lsls	r1, r1, #9
 8004a24:	430a      	orrs	r2, r1
 8004a26:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a28:	4b34      	ldr	r3, [pc, #208]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004a2a:	6a1a      	ldr	r2, [r3, #32]
 8004a2c:	4b33      	ldr	r3, [pc, #204]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004a2e:	4936      	ldr	r1, [pc, #216]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004a30:	400a      	ands	r2, r1
 8004a32:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004a34:	4b31      	ldr	r3, [pc, #196]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	4013      	ands	r3, r2
 8004a40:	d013      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a42:	f7fc fef9 	bl	8001838 <HAL_GetTick>
 8004a46:	0003      	movs	r3, r0
 8004a48:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a4a:	e009      	b.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a4c:	f7fc fef4 	bl	8001838 <HAL_GetTick>
 8004a50:	0002      	movs	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	4a2d      	ldr	r2, [pc, #180]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d901      	bls.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e048      	b.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a60:	4b26      	ldr	r3, [pc, #152]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004a62:	6a1b      	ldr	r3, [r3, #32]
 8004a64:	2202      	movs	r2, #2
 8004a66:	4013      	ands	r3, r2
 8004a68:	d0f0      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a6a:	4b24      	ldr	r3, [pc, #144]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	4a25      	ldr	r2, [pc, #148]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a70:	4013      	ands	r3, r2
 8004a72:	0019      	movs	r1, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685a      	ldr	r2, [r3, #4]
 8004a78:	4b20      	ldr	r3, [pc, #128]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004a7e:	2317      	movs	r3, #23
 8004a80:	18fb      	adds	r3, r7, r3
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d105      	bne.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a88:	4b1c      	ldr	r3, [pc, #112]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004a8a:	69da      	ldr	r2, [r3, #28]
 8004a8c:	4b1b      	ldr	r3, [pc, #108]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004a8e:	4920      	ldr	r1, [pc, #128]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a90:	400a      	ands	r2, r1
 8004a92:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	d009      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a9e:	4b17      	ldr	r3, [pc, #92]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa2:	2203      	movs	r2, #3
 8004aa4:	4393      	bics	r3, r2
 8004aa6:	0019      	movs	r1, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689a      	ldr	r2, [r3, #8]
 8004aac:	4b13      	ldr	r3, [pc, #76]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	4013      	ands	r3, r2
 8004aba:	d009      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004abc:	4b0f      	ldr	r3, [pc, #60]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac0:	2210      	movs	r2, #16
 8004ac2:	4393      	bics	r3, r2
 8004ac4:	0019      	movs	r1, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	68da      	ldr	r2, [r3, #12]
 8004aca:	4b0c      	ldr	r3, [pc, #48]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004acc:	430a      	orrs	r2, r1
 8004ace:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	2380      	movs	r3, #128	; 0x80
 8004ad6:	029b      	lsls	r3, r3, #10
 8004ad8:	4013      	ands	r3, r2
 8004ada:	d009      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004adc:	4b07      	ldr	r3, [pc, #28]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae0:	2280      	movs	r2, #128	; 0x80
 8004ae2:	4393      	bics	r3, r2
 8004ae4:	0019      	movs	r1, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	691a      	ldr	r2, [r3, #16]
 8004aea:	4b04      	ldr	r3, [pc, #16]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004aec:	430a      	orrs	r2, r1
 8004aee:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	0018      	movs	r0, r3
 8004af4:	46bd      	mov	sp, r7
 8004af6:	b006      	add	sp, #24
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	46c0      	nop			; (mov r8, r8)
 8004afc:	40021000 	.word	0x40021000
 8004b00:	40007000 	.word	0x40007000
 8004b04:	fffffcff 	.word	0xfffffcff
 8004b08:	fffeffff 	.word	0xfffeffff
 8004b0c:	00001388 	.word	0x00001388
 8004b10:	efffffff 	.word	0xefffffff

08004b14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d101      	bne.n	8004b26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e0a8      	b.n	8004c78 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d109      	bne.n	8004b42 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	2382      	movs	r3, #130	; 0x82
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d009      	beq.n	8004b4e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	61da      	str	r2, [r3, #28]
 8004b40:	e005      	b.n	8004b4e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	225d      	movs	r2, #93	; 0x5d
 8004b58:	5c9b      	ldrb	r3, [r3, r2]
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d107      	bne.n	8004b70 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	225c      	movs	r2, #92	; 0x5c
 8004b64:	2100      	movs	r1, #0
 8004b66:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	0018      	movs	r0, r3
 8004b6c:	f7fc fbc4 	bl	80012f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	225d      	movs	r2, #93	; 0x5d
 8004b74:	2102      	movs	r1, #2
 8004b76:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2140      	movs	r1, #64	; 0x40
 8004b84:	438a      	bics	r2, r1
 8004b86:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	68da      	ldr	r2, [r3, #12]
 8004b8c:	23e0      	movs	r3, #224	; 0xe0
 8004b8e:	00db      	lsls	r3, r3, #3
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d902      	bls.n	8004b9a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004b94:	2300      	movs	r3, #0
 8004b96:	60fb      	str	r3, [r7, #12]
 8004b98:	e002      	b.n	8004ba0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004b9a:	2380      	movs	r3, #128	; 0x80
 8004b9c:	015b      	lsls	r3, r3, #5
 8004b9e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	68da      	ldr	r2, [r3, #12]
 8004ba4:	23f0      	movs	r3, #240	; 0xf0
 8004ba6:	011b      	lsls	r3, r3, #4
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d008      	beq.n	8004bbe <HAL_SPI_Init+0xaa>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	68da      	ldr	r2, [r3, #12]
 8004bb0:	23e0      	movs	r3, #224	; 0xe0
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d002      	beq.n	8004bbe <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685a      	ldr	r2, [r3, #4]
 8004bc2:	2382      	movs	r3, #130	; 0x82
 8004bc4:	005b      	lsls	r3, r3, #1
 8004bc6:	401a      	ands	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6899      	ldr	r1, [r3, #8]
 8004bcc:	2384      	movs	r3, #132	; 0x84
 8004bce:	021b      	lsls	r3, r3, #8
 8004bd0:	400b      	ands	r3, r1
 8004bd2:	431a      	orrs	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	2102      	movs	r1, #2
 8004bda:	400b      	ands	r3, r1
 8004bdc:	431a      	orrs	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	2101      	movs	r1, #1
 8004be4:	400b      	ands	r3, r1
 8004be6:	431a      	orrs	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6999      	ldr	r1, [r3, #24]
 8004bec:	2380      	movs	r3, #128	; 0x80
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	400b      	ands	r3, r1
 8004bf2:	431a      	orrs	r2, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	69db      	ldr	r3, [r3, #28]
 8004bf8:	2138      	movs	r1, #56	; 0x38
 8004bfa:	400b      	ands	r3, r1
 8004bfc:	431a      	orrs	r2, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a1b      	ldr	r3, [r3, #32]
 8004c02:	2180      	movs	r1, #128	; 0x80
 8004c04:	400b      	ands	r3, r1
 8004c06:	431a      	orrs	r2, r3
 8004c08:	0011      	movs	r1, r2
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c0e:	2380      	movs	r3, #128	; 0x80
 8004c10:	019b      	lsls	r3, r3, #6
 8004c12:	401a      	ands	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	699b      	ldr	r3, [r3, #24]
 8004c20:	0c1b      	lsrs	r3, r3, #16
 8004c22:	2204      	movs	r2, #4
 8004c24:	401a      	ands	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2a:	2110      	movs	r1, #16
 8004c2c:	400b      	ands	r3, r1
 8004c2e:	431a      	orrs	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c34:	2108      	movs	r1, #8
 8004c36:	400b      	ands	r3, r1
 8004c38:	431a      	orrs	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	68d9      	ldr	r1, [r3, #12]
 8004c3e:	23f0      	movs	r3, #240	; 0xf0
 8004c40:	011b      	lsls	r3, r3, #4
 8004c42:	400b      	ands	r3, r1
 8004c44:	431a      	orrs	r2, r3
 8004c46:	0011      	movs	r1, r2
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	2380      	movs	r3, #128	; 0x80
 8004c4c:	015b      	lsls	r3, r3, #5
 8004c4e:	401a      	ands	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	430a      	orrs	r2, r1
 8004c56:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	69da      	ldr	r2, [r3, #28]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4907      	ldr	r1, [pc, #28]	; (8004c80 <HAL_SPI_Init+0x16c>)
 8004c64:	400a      	ands	r2, r1
 8004c66:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	225d      	movs	r2, #93	; 0x5d
 8004c72:	2101      	movs	r1, #1
 8004c74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	0018      	movs	r0, r3
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	b004      	add	sp, #16
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	fffff7ff 	.word	0xfffff7ff

08004c84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d101      	bne.n	8004c96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e042      	b.n	8004d1c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	223d      	movs	r2, #61	; 0x3d
 8004c9a:	5c9b      	ldrb	r3, [r3, r2]
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d107      	bne.n	8004cb2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	223c      	movs	r2, #60	; 0x3c
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	0018      	movs	r0, r3
 8004cae:	f7fc fb9b 	bl	80013e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	223d      	movs	r2, #61	; 0x3d
 8004cb6:	2102      	movs	r1, #2
 8004cb8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	3304      	adds	r3, #4
 8004cc2:	0019      	movs	r1, r3
 8004cc4:	0010      	movs	r0, r2
 8004cc6:	f000 fa1f 	bl	8005108 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2246      	movs	r2, #70	; 0x46
 8004cce:	2101      	movs	r1, #1
 8004cd0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	223e      	movs	r2, #62	; 0x3e
 8004cd6:	2101      	movs	r1, #1
 8004cd8:	5499      	strb	r1, [r3, r2]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	223f      	movs	r2, #63	; 0x3f
 8004cde:	2101      	movs	r1, #1
 8004ce0:	5499      	strb	r1, [r3, r2]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2240      	movs	r2, #64	; 0x40
 8004ce6:	2101      	movs	r1, #1
 8004ce8:	5499      	strb	r1, [r3, r2]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2241      	movs	r2, #65	; 0x41
 8004cee:	2101      	movs	r1, #1
 8004cf0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2242      	movs	r2, #66	; 0x42
 8004cf6:	2101      	movs	r1, #1
 8004cf8:	5499      	strb	r1, [r3, r2]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2243      	movs	r2, #67	; 0x43
 8004cfe:	2101      	movs	r1, #1
 8004d00:	5499      	strb	r1, [r3, r2]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2244      	movs	r2, #68	; 0x44
 8004d06:	2101      	movs	r1, #1
 8004d08:	5499      	strb	r1, [r3, r2]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2245      	movs	r2, #69	; 0x45
 8004d0e:	2101      	movs	r1, #1
 8004d10:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	223d      	movs	r2, #61	; 0x3d
 8004d16:	2101      	movs	r1, #1
 8004d18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	0018      	movs	r0, r3
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	b002      	add	sp, #8
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e042      	b.n	8004dbc <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	223d      	movs	r2, #61	; 0x3d
 8004d3a:	5c9b      	ldrb	r3, [r3, r2]
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d107      	bne.n	8004d52 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	223c      	movs	r2, #60	; 0x3c
 8004d46:	2100      	movs	r1, #0
 8004d48:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	0018      	movs	r0, r3
 8004d4e:	f000 f839 	bl	8004dc4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	223d      	movs	r2, #61	; 0x3d
 8004d56:	2102      	movs	r1, #2
 8004d58:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	3304      	adds	r3, #4
 8004d62:	0019      	movs	r1, r3
 8004d64:	0010      	movs	r0, r2
 8004d66:	f000 f9cf 	bl	8005108 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2246      	movs	r2, #70	; 0x46
 8004d6e:	2101      	movs	r1, #1
 8004d70:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	223e      	movs	r2, #62	; 0x3e
 8004d76:	2101      	movs	r1, #1
 8004d78:	5499      	strb	r1, [r3, r2]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	223f      	movs	r2, #63	; 0x3f
 8004d7e:	2101      	movs	r1, #1
 8004d80:	5499      	strb	r1, [r3, r2]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2240      	movs	r2, #64	; 0x40
 8004d86:	2101      	movs	r1, #1
 8004d88:	5499      	strb	r1, [r3, r2]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2241      	movs	r2, #65	; 0x41
 8004d8e:	2101      	movs	r1, #1
 8004d90:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2242      	movs	r2, #66	; 0x42
 8004d96:	2101      	movs	r1, #1
 8004d98:	5499      	strb	r1, [r3, r2]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2243      	movs	r2, #67	; 0x43
 8004d9e:	2101      	movs	r1, #1
 8004da0:	5499      	strb	r1, [r3, r2]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2244      	movs	r2, #68	; 0x44
 8004da6:	2101      	movs	r1, #1
 8004da8:	5499      	strb	r1, [r3, r2]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2245      	movs	r2, #69	; 0x45
 8004dae:	2101      	movs	r1, #1
 8004db0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	223d      	movs	r2, #61	; 0x3d
 8004db6:	2101      	movs	r1, #1
 8004db8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	0018      	movs	r0, r3
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	b002      	add	sp, #8
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004dcc:	46c0      	nop			; (mov r8, r8)
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	b002      	add	sp, #8
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004de0:	2317      	movs	r3, #23
 8004de2:	18fb      	adds	r3, r7, r3
 8004de4:	2200      	movs	r2, #0
 8004de6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	223c      	movs	r2, #60	; 0x3c
 8004dec:	5c9b      	ldrb	r3, [r3, r2]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d101      	bne.n	8004df6 <HAL_TIM_PWM_ConfigChannel+0x22>
 8004df2:	2302      	movs	r3, #2
 8004df4:	e0ad      	b.n	8004f52 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	223c      	movs	r2, #60	; 0x3c
 8004dfa:	2101      	movs	r1, #1
 8004dfc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2b0c      	cmp	r3, #12
 8004e02:	d100      	bne.n	8004e06 <HAL_TIM_PWM_ConfigChannel+0x32>
 8004e04:	e076      	b.n	8004ef4 <HAL_TIM_PWM_ConfigChannel+0x120>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2b0c      	cmp	r3, #12
 8004e0a:	d900      	bls.n	8004e0e <HAL_TIM_PWM_ConfigChannel+0x3a>
 8004e0c:	e095      	b.n	8004f3a <HAL_TIM_PWM_ConfigChannel+0x166>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2b08      	cmp	r3, #8
 8004e12:	d04e      	beq.n	8004eb2 <HAL_TIM_PWM_ConfigChannel+0xde>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2b08      	cmp	r3, #8
 8004e18:	d900      	bls.n	8004e1c <HAL_TIM_PWM_ConfigChannel+0x48>
 8004e1a:	e08e      	b.n	8004f3a <HAL_TIM_PWM_ConfigChannel+0x166>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d003      	beq.n	8004e2a <HAL_TIM_PWM_ConfigChannel+0x56>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2b04      	cmp	r3, #4
 8004e26:	d021      	beq.n	8004e6c <HAL_TIM_PWM_ConfigChannel+0x98>
 8004e28:	e087      	b.n	8004f3a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68ba      	ldr	r2, [r7, #8]
 8004e30:	0011      	movs	r1, r2
 8004e32:	0018      	movs	r0, r3
 8004e34:	f000 f9de 	bl	80051f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	699a      	ldr	r2, [r3, #24]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2108      	movs	r1, #8
 8004e44:	430a      	orrs	r2, r1
 8004e46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	699a      	ldr	r2, [r3, #24]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2104      	movs	r1, #4
 8004e54:	438a      	bics	r2, r1
 8004e56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6999      	ldr	r1, [r3, #24]
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	691a      	ldr	r2, [r3, #16]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	619a      	str	r2, [r3, #24]
      break;
 8004e6a:	e06b      	b.n	8004f44 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68ba      	ldr	r2, [r7, #8]
 8004e72:	0011      	movs	r1, r2
 8004e74:	0018      	movs	r0, r3
 8004e76:	f000 fa45 	bl	8005304 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	699a      	ldr	r2, [r3, #24]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2180      	movs	r1, #128	; 0x80
 8004e86:	0109      	lsls	r1, r1, #4
 8004e88:	430a      	orrs	r2, r1
 8004e8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	699a      	ldr	r2, [r3, #24]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4931      	ldr	r1, [pc, #196]	; (8004f5c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004e98:	400a      	ands	r2, r1
 8004e9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	6999      	ldr	r1, [r3, #24]
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	021a      	lsls	r2, r3, #8
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	430a      	orrs	r2, r1
 8004eae:	619a      	str	r2, [r3, #24]
      break;
 8004eb0:	e048      	b.n	8004f44 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68ba      	ldr	r2, [r7, #8]
 8004eb8:	0011      	movs	r1, r2
 8004eba:	0018      	movs	r0, r3
 8004ebc:	f000 faa6 	bl	800540c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	69da      	ldr	r2, [r3, #28]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2108      	movs	r1, #8
 8004ecc:	430a      	orrs	r2, r1
 8004ece:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	69da      	ldr	r2, [r3, #28]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2104      	movs	r1, #4
 8004edc:	438a      	bics	r2, r1
 8004ede:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	69d9      	ldr	r1, [r3, #28]
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	691a      	ldr	r2, [r3, #16]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	61da      	str	r2, [r3, #28]
      break;
 8004ef2:	e027      	b.n	8004f44 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68ba      	ldr	r2, [r7, #8]
 8004efa:	0011      	movs	r1, r2
 8004efc:	0018      	movs	r0, r3
 8004efe:	f000 fb0b 	bl	8005518 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	69da      	ldr	r2, [r3, #28]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2180      	movs	r1, #128	; 0x80
 8004f0e:	0109      	lsls	r1, r1, #4
 8004f10:	430a      	orrs	r2, r1
 8004f12:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	69da      	ldr	r2, [r3, #28]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	490f      	ldr	r1, [pc, #60]	; (8004f5c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004f20:	400a      	ands	r2, r1
 8004f22:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	69d9      	ldr	r1, [r3, #28]
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	021a      	lsls	r2, r3, #8
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	430a      	orrs	r2, r1
 8004f36:	61da      	str	r2, [r3, #28]
      break;
 8004f38:	e004      	b.n	8004f44 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8004f3a:	2317      	movs	r3, #23
 8004f3c:	18fb      	adds	r3, r7, r3
 8004f3e:	2201      	movs	r2, #1
 8004f40:	701a      	strb	r2, [r3, #0]
      break;
 8004f42:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	223c      	movs	r2, #60	; 0x3c
 8004f48:	2100      	movs	r1, #0
 8004f4a:	5499      	strb	r1, [r3, r2]

  return status;
 8004f4c:	2317      	movs	r3, #23
 8004f4e:	18fb      	adds	r3, r7, r3
 8004f50:	781b      	ldrb	r3, [r3, #0]
}
 8004f52:	0018      	movs	r0, r3
 8004f54:	46bd      	mov	sp, r7
 8004f56:	b006      	add	sp, #24
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	46c0      	nop			; (mov r8, r8)
 8004f5c:	fffffbff 	.word	0xfffffbff

08004f60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f6a:	230f      	movs	r3, #15
 8004f6c:	18fb      	adds	r3, r7, r3
 8004f6e:	2200      	movs	r2, #0
 8004f70:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	223c      	movs	r2, #60	; 0x3c
 8004f76:	5c9b      	ldrb	r3, [r3, r2]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d101      	bne.n	8004f80 <HAL_TIM_ConfigClockSource+0x20>
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	e0bc      	b.n	80050fa <HAL_TIM_ConfigClockSource+0x19a>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	223c      	movs	r2, #60	; 0x3c
 8004f84:	2101      	movs	r1, #1
 8004f86:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	223d      	movs	r2, #61	; 0x3d
 8004f8c:	2102      	movs	r1, #2
 8004f8e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	2277      	movs	r2, #119	; 0x77
 8004f9c:	4393      	bics	r3, r2
 8004f9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	4a58      	ldr	r2, [pc, #352]	; (8005104 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68ba      	ldr	r2, [r7, #8]
 8004fae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2280      	movs	r2, #128	; 0x80
 8004fb6:	0192      	lsls	r2, r2, #6
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d040      	beq.n	800503e <HAL_TIM_ConfigClockSource+0xde>
 8004fbc:	2280      	movs	r2, #128	; 0x80
 8004fbe:	0192      	lsls	r2, r2, #6
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d900      	bls.n	8004fc6 <HAL_TIM_ConfigClockSource+0x66>
 8004fc4:	e088      	b.n	80050d8 <HAL_TIM_ConfigClockSource+0x178>
 8004fc6:	2280      	movs	r2, #128	; 0x80
 8004fc8:	0152      	lsls	r2, r2, #5
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d100      	bne.n	8004fd0 <HAL_TIM_ConfigClockSource+0x70>
 8004fce:	e088      	b.n	80050e2 <HAL_TIM_ConfigClockSource+0x182>
 8004fd0:	2280      	movs	r2, #128	; 0x80
 8004fd2:	0152      	lsls	r2, r2, #5
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d900      	bls.n	8004fda <HAL_TIM_ConfigClockSource+0x7a>
 8004fd8:	e07e      	b.n	80050d8 <HAL_TIM_ConfigClockSource+0x178>
 8004fda:	2b70      	cmp	r3, #112	; 0x70
 8004fdc:	d018      	beq.n	8005010 <HAL_TIM_ConfigClockSource+0xb0>
 8004fde:	d900      	bls.n	8004fe2 <HAL_TIM_ConfigClockSource+0x82>
 8004fe0:	e07a      	b.n	80050d8 <HAL_TIM_ConfigClockSource+0x178>
 8004fe2:	2b60      	cmp	r3, #96	; 0x60
 8004fe4:	d04f      	beq.n	8005086 <HAL_TIM_ConfigClockSource+0x126>
 8004fe6:	d900      	bls.n	8004fea <HAL_TIM_ConfigClockSource+0x8a>
 8004fe8:	e076      	b.n	80050d8 <HAL_TIM_ConfigClockSource+0x178>
 8004fea:	2b50      	cmp	r3, #80	; 0x50
 8004fec:	d03b      	beq.n	8005066 <HAL_TIM_ConfigClockSource+0x106>
 8004fee:	d900      	bls.n	8004ff2 <HAL_TIM_ConfigClockSource+0x92>
 8004ff0:	e072      	b.n	80050d8 <HAL_TIM_ConfigClockSource+0x178>
 8004ff2:	2b40      	cmp	r3, #64	; 0x40
 8004ff4:	d057      	beq.n	80050a6 <HAL_TIM_ConfigClockSource+0x146>
 8004ff6:	d900      	bls.n	8004ffa <HAL_TIM_ConfigClockSource+0x9a>
 8004ff8:	e06e      	b.n	80050d8 <HAL_TIM_ConfigClockSource+0x178>
 8004ffa:	2b30      	cmp	r3, #48	; 0x30
 8004ffc:	d063      	beq.n	80050c6 <HAL_TIM_ConfigClockSource+0x166>
 8004ffe:	d86b      	bhi.n	80050d8 <HAL_TIM_ConfigClockSource+0x178>
 8005000:	2b20      	cmp	r3, #32
 8005002:	d060      	beq.n	80050c6 <HAL_TIM_ConfigClockSource+0x166>
 8005004:	d868      	bhi.n	80050d8 <HAL_TIM_ConfigClockSource+0x178>
 8005006:	2b00      	cmp	r3, #0
 8005008:	d05d      	beq.n	80050c6 <HAL_TIM_ConfigClockSource+0x166>
 800500a:	2b10      	cmp	r3, #16
 800500c:	d05b      	beq.n	80050c6 <HAL_TIM_ConfigClockSource+0x166>
 800500e:	e063      	b.n	80050d8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005020:	f000 fb5e 	bl	80056e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	2277      	movs	r2, #119	; 0x77
 8005030:	4313      	orrs	r3, r2
 8005032:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68ba      	ldr	r2, [r7, #8]
 800503a:	609a      	str	r2, [r3, #8]
      break;
 800503c:	e052      	b.n	80050e4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800504e:	f000 fb47 	bl	80056e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	689a      	ldr	r2, [r3, #8]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2180      	movs	r1, #128	; 0x80
 800505e:	01c9      	lsls	r1, r1, #7
 8005060:	430a      	orrs	r2, r1
 8005062:	609a      	str	r2, [r3, #8]
      break;
 8005064:	e03e      	b.n	80050e4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005072:	001a      	movs	r2, r3
 8005074:	f000 faba 	bl	80055ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2150      	movs	r1, #80	; 0x50
 800507e:	0018      	movs	r0, r3
 8005080:	f000 fb14 	bl	80056ac <TIM_ITRx_SetConfig>
      break;
 8005084:	e02e      	b.n	80050e4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005092:	001a      	movs	r2, r3
 8005094:	f000 fad8 	bl	8005648 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2160      	movs	r1, #96	; 0x60
 800509e:	0018      	movs	r0, r3
 80050a0:	f000 fb04 	bl	80056ac <TIM_ITRx_SetConfig>
      break;
 80050a4:	e01e      	b.n	80050e4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050b2:	001a      	movs	r2, r3
 80050b4:	f000 fa9a 	bl	80055ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2140      	movs	r1, #64	; 0x40
 80050be:	0018      	movs	r0, r3
 80050c0:	f000 faf4 	bl	80056ac <TIM_ITRx_SetConfig>
      break;
 80050c4:	e00e      	b.n	80050e4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	0019      	movs	r1, r3
 80050d0:	0010      	movs	r0, r2
 80050d2:	f000 faeb 	bl	80056ac <TIM_ITRx_SetConfig>
      break;
 80050d6:	e005      	b.n	80050e4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80050d8:	230f      	movs	r3, #15
 80050da:	18fb      	adds	r3, r7, r3
 80050dc:	2201      	movs	r2, #1
 80050de:	701a      	strb	r2, [r3, #0]
      break;
 80050e0:	e000      	b.n	80050e4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80050e2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	223d      	movs	r2, #61	; 0x3d
 80050e8:	2101      	movs	r1, #1
 80050ea:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	223c      	movs	r2, #60	; 0x3c
 80050f0:	2100      	movs	r1, #0
 80050f2:	5499      	strb	r1, [r3, r2]

  return status;
 80050f4:	230f      	movs	r3, #15
 80050f6:	18fb      	adds	r3, r7, r3
 80050f8:	781b      	ldrb	r3, [r3, #0]
}
 80050fa:	0018      	movs	r0, r3
 80050fc:	46bd      	mov	sp, r7
 80050fe:	b004      	add	sp, #16
 8005100:	bd80      	pop	{r7, pc}
 8005102:	46c0      	nop			; (mov r8, r8)
 8005104:	ffff00ff 	.word	0xffff00ff

08005108 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a2f      	ldr	r2, [pc, #188]	; (80051d8 <TIM_Base_SetConfig+0xd0>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d003      	beq.n	8005128 <TIM_Base_SetConfig+0x20>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a2e      	ldr	r2, [pc, #184]	; (80051dc <TIM_Base_SetConfig+0xd4>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d108      	bne.n	800513a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2270      	movs	r2, #112	; 0x70
 800512c:	4393      	bics	r3, r2
 800512e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	4313      	orrs	r3, r2
 8005138:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a26      	ldr	r2, [pc, #152]	; (80051d8 <TIM_Base_SetConfig+0xd0>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d013      	beq.n	800516a <TIM_Base_SetConfig+0x62>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a25      	ldr	r2, [pc, #148]	; (80051dc <TIM_Base_SetConfig+0xd4>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d00f      	beq.n	800516a <TIM_Base_SetConfig+0x62>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a24      	ldr	r2, [pc, #144]	; (80051e0 <TIM_Base_SetConfig+0xd8>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d00b      	beq.n	800516a <TIM_Base_SetConfig+0x62>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a23      	ldr	r2, [pc, #140]	; (80051e4 <TIM_Base_SetConfig+0xdc>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d007      	beq.n	800516a <TIM_Base_SetConfig+0x62>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a22      	ldr	r2, [pc, #136]	; (80051e8 <TIM_Base_SetConfig+0xe0>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d003      	beq.n	800516a <TIM_Base_SetConfig+0x62>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a21      	ldr	r2, [pc, #132]	; (80051ec <TIM_Base_SetConfig+0xe4>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d108      	bne.n	800517c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	4a20      	ldr	r2, [pc, #128]	; (80051f0 <TIM_Base_SetConfig+0xe8>)
 800516e:	4013      	ands	r3, r2
 8005170:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	4313      	orrs	r3, r2
 800517a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2280      	movs	r2, #128	; 0x80
 8005180:	4393      	bics	r3, r2
 8005182:	001a      	movs	r2, r3
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	695b      	ldr	r3, [r3, #20]
 8005188:	4313      	orrs	r3, r2
 800518a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	689a      	ldr	r2, [r3, #8]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a0c      	ldr	r2, [pc, #48]	; (80051d8 <TIM_Base_SetConfig+0xd0>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d00b      	beq.n	80051c2 <TIM_Base_SetConfig+0xba>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a0d      	ldr	r2, [pc, #52]	; (80051e4 <TIM_Base_SetConfig+0xdc>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d007      	beq.n	80051c2 <TIM_Base_SetConfig+0xba>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a0c      	ldr	r2, [pc, #48]	; (80051e8 <TIM_Base_SetConfig+0xe0>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d003      	beq.n	80051c2 <TIM_Base_SetConfig+0xba>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a0b      	ldr	r2, [pc, #44]	; (80051ec <TIM_Base_SetConfig+0xe4>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d103      	bne.n	80051ca <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	691a      	ldr	r2, [r3, #16]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	615a      	str	r2, [r3, #20]
}
 80051d0:	46c0      	nop			; (mov r8, r8)
 80051d2:	46bd      	mov	sp, r7
 80051d4:	b004      	add	sp, #16
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	40012c00 	.word	0x40012c00
 80051dc:	40000400 	.word	0x40000400
 80051e0:	40002000 	.word	0x40002000
 80051e4:	40014000 	.word	0x40014000
 80051e8:	40014400 	.word	0x40014400
 80051ec:	40014800 	.word	0x40014800
 80051f0:	fffffcff 	.word	0xfffffcff

080051f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b086      	sub	sp, #24
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	2201      	movs	r2, #1
 8005204:	4393      	bics	r3, r2
 8005206:	001a      	movs	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a1b      	ldr	r3, [r3, #32]
 8005210:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2270      	movs	r2, #112	; 0x70
 8005222:	4393      	bics	r3, r2
 8005224:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2203      	movs	r2, #3
 800522a:	4393      	bics	r3, r2
 800522c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	4313      	orrs	r3, r2
 8005236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	2202      	movs	r2, #2
 800523c:	4393      	bics	r3, r2
 800523e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	4313      	orrs	r3, r2
 8005248:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a27      	ldr	r2, [pc, #156]	; (80052ec <TIM_OC1_SetConfig+0xf8>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d00b      	beq.n	800526a <TIM_OC1_SetConfig+0x76>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a26      	ldr	r2, [pc, #152]	; (80052f0 <TIM_OC1_SetConfig+0xfc>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d007      	beq.n	800526a <TIM_OC1_SetConfig+0x76>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a25      	ldr	r2, [pc, #148]	; (80052f4 <TIM_OC1_SetConfig+0x100>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d003      	beq.n	800526a <TIM_OC1_SetConfig+0x76>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a24      	ldr	r2, [pc, #144]	; (80052f8 <TIM_OC1_SetConfig+0x104>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d10c      	bne.n	8005284 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	2208      	movs	r2, #8
 800526e:	4393      	bics	r3, r2
 8005270:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	4313      	orrs	r3, r2
 800527a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	2204      	movs	r2, #4
 8005280:	4393      	bics	r3, r2
 8005282:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a19      	ldr	r2, [pc, #100]	; (80052ec <TIM_OC1_SetConfig+0xf8>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d00b      	beq.n	80052a4 <TIM_OC1_SetConfig+0xb0>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a18      	ldr	r2, [pc, #96]	; (80052f0 <TIM_OC1_SetConfig+0xfc>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d007      	beq.n	80052a4 <TIM_OC1_SetConfig+0xb0>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a17      	ldr	r2, [pc, #92]	; (80052f4 <TIM_OC1_SetConfig+0x100>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d003      	beq.n	80052a4 <TIM_OC1_SetConfig+0xb0>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a16      	ldr	r2, [pc, #88]	; (80052f8 <TIM_OC1_SetConfig+0x104>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d111      	bne.n	80052c8 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	4a15      	ldr	r2, [pc, #84]	; (80052fc <TIM_OC1_SetConfig+0x108>)
 80052a8:	4013      	ands	r3, r2
 80052aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	4a14      	ldr	r2, [pc, #80]	; (8005300 <TIM_OC1_SetConfig+0x10c>)
 80052b0:	4013      	ands	r3, r2
 80052b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	695b      	ldr	r3, [r3, #20]
 80052b8:	693a      	ldr	r2, [r7, #16]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	693a      	ldr	r2, [r7, #16]
 80052cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	685a      	ldr	r2, [r3, #4]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	621a      	str	r2, [r3, #32]
}
 80052e2:	46c0      	nop			; (mov r8, r8)
 80052e4:	46bd      	mov	sp, r7
 80052e6:	b006      	add	sp, #24
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	46c0      	nop			; (mov r8, r8)
 80052ec:	40012c00 	.word	0x40012c00
 80052f0:	40014000 	.word	0x40014000
 80052f4:	40014400 	.word	0x40014400
 80052f8:	40014800 	.word	0x40014800
 80052fc:	fffffeff 	.word	0xfffffeff
 8005300:	fffffdff 	.word	0xfffffdff

08005304 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b086      	sub	sp, #24
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	2210      	movs	r2, #16
 8005314:	4393      	bics	r3, r2
 8005316:	001a      	movs	r2, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a1b      	ldr	r3, [r3, #32]
 8005320:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	4a2e      	ldr	r2, [pc, #184]	; (80053ec <TIM_OC2_SetConfig+0xe8>)
 8005332:	4013      	ands	r3, r2
 8005334:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	4a2d      	ldr	r2, [pc, #180]	; (80053f0 <TIM_OC2_SetConfig+0xec>)
 800533a:	4013      	ands	r3, r2
 800533c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	021b      	lsls	r3, r3, #8
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	4313      	orrs	r3, r2
 8005348:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	2220      	movs	r2, #32
 800534e:	4393      	bics	r3, r2
 8005350:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	011b      	lsls	r3, r3, #4
 8005358:	697a      	ldr	r2, [r7, #20]
 800535a:	4313      	orrs	r3, r2
 800535c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a24      	ldr	r2, [pc, #144]	; (80053f4 <TIM_OC2_SetConfig+0xf0>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d10d      	bne.n	8005382 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	2280      	movs	r2, #128	; 0x80
 800536a:	4393      	bics	r3, r2
 800536c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	011b      	lsls	r3, r3, #4
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	4313      	orrs	r3, r2
 8005378:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	2240      	movs	r2, #64	; 0x40
 800537e:	4393      	bics	r3, r2
 8005380:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a1b      	ldr	r2, [pc, #108]	; (80053f4 <TIM_OC2_SetConfig+0xf0>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d00b      	beq.n	80053a2 <TIM_OC2_SetConfig+0x9e>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a1a      	ldr	r2, [pc, #104]	; (80053f8 <TIM_OC2_SetConfig+0xf4>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d007      	beq.n	80053a2 <TIM_OC2_SetConfig+0x9e>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a19      	ldr	r2, [pc, #100]	; (80053fc <TIM_OC2_SetConfig+0xf8>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d003      	beq.n	80053a2 <TIM_OC2_SetConfig+0x9e>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a18      	ldr	r2, [pc, #96]	; (8005400 <TIM_OC2_SetConfig+0xfc>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d113      	bne.n	80053ca <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	4a17      	ldr	r2, [pc, #92]	; (8005404 <TIM_OC2_SetConfig+0x100>)
 80053a6:	4013      	ands	r3, r2
 80053a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	4a16      	ldr	r2, [pc, #88]	; (8005408 <TIM_OC2_SetConfig+0x104>)
 80053ae:	4013      	ands	r3, r2
 80053b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	693a      	ldr	r2, [r7, #16]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	685a      	ldr	r2, [r3, #4]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	621a      	str	r2, [r3, #32]
}
 80053e4:	46c0      	nop			; (mov r8, r8)
 80053e6:	46bd      	mov	sp, r7
 80053e8:	b006      	add	sp, #24
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	ffff8fff 	.word	0xffff8fff
 80053f0:	fffffcff 	.word	0xfffffcff
 80053f4:	40012c00 	.word	0x40012c00
 80053f8:	40014000 	.word	0x40014000
 80053fc:	40014400 	.word	0x40014400
 8005400:	40014800 	.word	0x40014800
 8005404:	fffffbff 	.word	0xfffffbff
 8005408:	fffff7ff 	.word	0xfffff7ff

0800540c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b086      	sub	sp, #24
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	4a35      	ldr	r2, [pc, #212]	; (80054f0 <TIM_OC3_SetConfig+0xe4>)
 800541c:	401a      	ands	r2, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	69db      	ldr	r3, [r3, #28]
 8005432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2270      	movs	r2, #112	; 0x70
 8005438:	4393      	bics	r3, r2
 800543a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2203      	movs	r2, #3
 8005440:	4393      	bics	r3, r2
 8005442:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	4313      	orrs	r3, r2
 800544c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	4a28      	ldr	r2, [pc, #160]	; (80054f4 <TIM_OC3_SetConfig+0xe8>)
 8005452:	4013      	ands	r3, r2
 8005454:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	021b      	lsls	r3, r3, #8
 800545c:	697a      	ldr	r2, [r7, #20]
 800545e:	4313      	orrs	r3, r2
 8005460:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a24      	ldr	r2, [pc, #144]	; (80054f8 <TIM_OC3_SetConfig+0xec>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d10d      	bne.n	8005486 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	4a23      	ldr	r2, [pc, #140]	; (80054fc <TIM_OC3_SetConfig+0xf0>)
 800546e:	4013      	ands	r3, r2
 8005470:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	021b      	lsls	r3, r3, #8
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	4313      	orrs	r3, r2
 800547c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	4a1f      	ldr	r2, [pc, #124]	; (8005500 <TIM_OC3_SetConfig+0xf4>)
 8005482:	4013      	ands	r3, r2
 8005484:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a1b      	ldr	r2, [pc, #108]	; (80054f8 <TIM_OC3_SetConfig+0xec>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d00b      	beq.n	80054a6 <TIM_OC3_SetConfig+0x9a>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a1c      	ldr	r2, [pc, #112]	; (8005504 <TIM_OC3_SetConfig+0xf8>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d007      	beq.n	80054a6 <TIM_OC3_SetConfig+0x9a>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a1b      	ldr	r2, [pc, #108]	; (8005508 <TIM_OC3_SetConfig+0xfc>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d003      	beq.n	80054a6 <TIM_OC3_SetConfig+0x9a>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a1a      	ldr	r2, [pc, #104]	; (800550c <TIM_OC3_SetConfig+0x100>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d113      	bne.n	80054ce <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	4a19      	ldr	r2, [pc, #100]	; (8005510 <TIM_OC3_SetConfig+0x104>)
 80054aa:	4013      	ands	r3, r2
 80054ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	4a18      	ldr	r2, [pc, #96]	; (8005514 <TIM_OC3_SetConfig+0x108>)
 80054b2:	4013      	ands	r3, r2
 80054b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	011b      	lsls	r3, r3, #4
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	4313      	orrs	r3, r2
 80054c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	011b      	lsls	r3, r3, #4
 80054c8:	693a      	ldr	r2, [r7, #16]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	685a      	ldr	r2, [r3, #4]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	697a      	ldr	r2, [r7, #20]
 80054e6:	621a      	str	r2, [r3, #32]
}
 80054e8:	46c0      	nop			; (mov r8, r8)
 80054ea:	46bd      	mov	sp, r7
 80054ec:	b006      	add	sp, #24
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	fffffeff 	.word	0xfffffeff
 80054f4:	fffffdff 	.word	0xfffffdff
 80054f8:	40012c00 	.word	0x40012c00
 80054fc:	fffff7ff 	.word	0xfffff7ff
 8005500:	fffffbff 	.word	0xfffffbff
 8005504:	40014000 	.word	0x40014000
 8005508:	40014400 	.word	0x40014400
 800550c:	40014800 	.word	0x40014800
 8005510:	ffffefff 	.word	0xffffefff
 8005514:	ffffdfff 	.word	0xffffdfff

08005518 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b086      	sub	sp, #24
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	4a28      	ldr	r2, [pc, #160]	; (80055c8 <TIM_OC4_SetConfig+0xb0>)
 8005528:	401a      	ands	r2, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	69db      	ldr	r3, [r3, #28]
 800553e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	4a22      	ldr	r2, [pc, #136]	; (80055cc <TIM_OC4_SetConfig+0xb4>)
 8005544:	4013      	ands	r3, r2
 8005546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	4a21      	ldr	r2, [pc, #132]	; (80055d0 <TIM_OC4_SetConfig+0xb8>)
 800554c:	4013      	ands	r3, r2
 800554e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	021b      	lsls	r3, r3, #8
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	4313      	orrs	r3, r2
 800555a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	4a1d      	ldr	r2, [pc, #116]	; (80055d4 <TIM_OC4_SetConfig+0xbc>)
 8005560:	4013      	ands	r3, r2
 8005562:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	031b      	lsls	r3, r3, #12
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	4313      	orrs	r3, r2
 800556e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a19      	ldr	r2, [pc, #100]	; (80055d8 <TIM_OC4_SetConfig+0xc0>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d00b      	beq.n	8005590 <TIM_OC4_SetConfig+0x78>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a18      	ldr	r2, [pc, #96]	; (80055dc <TIM_OC4_SetConfig+0xc4>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d007      	beq.n	8005590 <TIM_OC4_SetConfig+0x78>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a17      	ldr	r2, [pc, #92]	; (80055e0 <TIM_OC4_SetConfig+0xc8>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d003      	beq.n	8005590 <TIM_OC4_SetConfig+0x78>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a16      	ldr	r2, [pc, #88]	; (80055e4 <TIM_OC4_SetConfig+0xcc>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d109      	bne.n	80055a4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	4a15      	ldr	r2, [pc, #84]	; (80055e8 <TIM_OC4_SetConfig+0xd0>)
 8005594:	4013      	ands	r3, r2
 8005596:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	695b      	ldr	r3, [r3, #20]
 800559c:	019b      	lsls	r3, r3, #6
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	685a      	ldr	r2, [r3, #4]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	621a      	str	r2, [r3, #32]
}
 80055be:	46c0      	nop			; (mov r8, r8)
 80055c0:	46bd      	mov	sp, r7
 80055c2:	b006      	add	sp, #24
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	46c0      	nop			; (mov r8, r8)
 80055c8:	ffffefff 	.word	0xffffefff
 80055cc:	ffff8fff 	.word	0xffff8fff
 80055d0:	fffffcff 	.word	0xfffffcff
 80055d4:	ffffdfff 	.word	0xffffdfff
 80055d8:	40012c00 	.word	0x40012c00
 80055dc:	40014000 	.word	0x40014000
 80055e0:	40014400 	.word	0x40014400
 80055e4:	40014800 	.word	0x40014800
 80055e8:	ffffbfff 	.word	0xffffbfff

080055ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b086      	sub	sp, #24
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6a1b      	ldr	r3, [r3, #32]
 80055fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6a1b      	ldr	r3, [r3, #32]
 8005602:	2201      	movs	r2, #1
 8005604:	4393      	bics	r3, r2
 8005606:	001a      	movs	r2, r3
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	22f0      	movs	r2, #240	; 0xf0
 8005616:	4393      	bics	r3, r2
 8005618:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	011b      	lsls	r3, r3, #4
 800561e:	693a      	ldr	r2, [r7, #16]
 8005620:	4313      	orrs	r3, r2
 8005622:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	220a      	movs	r2, #10
 8005628:	4393      	bics	r3, r2
 800562a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800562c:	697a      	ldr	r2, [r7, #20]
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	4313      	orrs	r3, r2
 8005632:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	621a      	str	r2, [r3, #32]
}
 8005640:	46c0      	nop			; (mov r8, r8)
 8005642:	46bd      	mov	sp, r7
 8005644:	b006      	add	sp, #24
 8005646:	bd80      	pop	{r7, pc}

08005648 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b086      	sub	sp, #24
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6a1b      	ldr	r3, [r3, #32]
 8005658:	2210      	movs	r2, #16
 800565a:	4393      	bics	r3, r2
 800565c:	001a      	movs	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	699b      	ldr	r3, [r3, #24]
 8005666:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6a1b      	ldr	r3, [r3, #32]
 800566c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	4a0d      	ldr	r2, [pc, #52]	; (80056a8 <TIM_TI2_ConfigInputStage+0x60>)
 8005672:	4013      	ands	r3, r2
 8005674:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	031b      	lsls	r3, r3, #12
 800567a:	697a      	ldr	r2, [r7, #20]
 800567c:	4313      	orrs	r3, r2
 800567e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	22a0      	movs	r2, #160	; 0xa0
 8005684:	4393      	bics	r3, r2
 8005686:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	011b      	lsls	r3, r3, #4
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	4313      	orrs	r3, r2
 8005690:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	697a      	ldr	r2, [r7, #20]
 8005696:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	621a      	str	r2, [r3, #32]
}
 800569e:	46c0      	nop			; (mov r8, r8)
 80056a0:	46bd      	mov	sp, r7
 80056a2:	b006      	add	sp, #24
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	46c0      	nop			; (mov r8, r8)
 80056a8:	ffff0fff 	.word	0xffff0fff

080056ac <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2270      	movs	r2, #112	; 0x70
 80056c0:	4393      	bics	r3, r2
 80056c2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056c4:	683a      	ldr	r2, [r7, #0]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	2207      	movs	r2, #7
 80056cc:	4313      	orrs	r3, r2
 80056ce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	609a      	str	r2, [r3, #8]
}
 80056d6:	46c0      	nop			; (mov r8, r8)
 80056d8:	46bd      	mov	sp, r7
 80056da:	b004      	add	sp, #16
 80056dc:	bd80      	pop	{r7, pc}
	...

080056e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b086      	sub	sp, #24
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
 80056ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	4a09      	ldr	r2, [pc, #36]	; (800571c <TIM_ETR_SetConfig+0x3c>)
 80056f8:	4013      	ands	r3, r2
 80056fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	021a      	lsls	r2, r3, #8
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	431a      	orrs	r2, r3
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	4313      	orrs	r3, r2
 8005708:	697a      	ldr	r2, [r7, #20]
 800570a:	4313      	orrs	r3, r2
 800570c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	697a      	ldr	r2, [r7, #20]
 8005712:	609a      	str	r2, [r3, #8]
}
 8005714:	46c0      	nop			; (mov r8, r8)
 8005716:	46bd      	mov	sp, r7
 8005718:	b006      	add	sp, #24
 800571a:	bd80      	pop	{r7, pc}
 800571c:	ffff00ff 	.word	0xffff00ff

08005720 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	223c      	movs	r2, #60	; 0x3c
 800572e:	5c9b      	ldrb	r3, [r3, r2]
 8005730:	2b01      	cmp	r3, #1
 8005732:	d101      	bne.n	8005738 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005734:	2302      	movs	r3, #2
 8005736:	e041      	b.n	80057bc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	223c      	movs	r2, #60	; 0x3c
 800573c:	2101      	movs	r1, #1
 800573e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	223d      	movs	r2, #61	; 0x3d
 8005744:	2102      	movs	r1, #2
 8005746:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2270      	movs	r2, #112	; 0x70
 800575c:	4393      	bics	r3, r2
 800575e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	4313      	orrs	r3, r2
 8005768:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a13      	ldr	r2, [pc, #76]	; (80057c4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d009      	beq.n	8005790 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a11      	ldr	r2, [pc, #68]	; (80057c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d004      	beq.n	8005790 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a10      	ldr	r2, [pc, #64]	; (80057cc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d10c      	bne.n	80057aa <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	2280      	movs	r2, #128	; 0x80
 8005794:	4393      	bics	r3, r2
 8005796:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	68ba      	ldr	r2, [r7, #8]
 800579e:	4313      	orrs	r3, r2
 80057a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68ba      	ldr	r2, [r7, #8]
 80057a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	223d      	movs	r2, #61	; 0x3d
 80057ae:	2101      	movs	r1, #1
 80057b0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	223c      	movs	r2, #60	; 0x3c
 80057b6:	2100      	movs	r1, #0
 80057b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	0018      	movs	r0, r3
 80057be:	46bd      	mov	sp, r7
 80057c0:	b004      	add	sp, #16
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	40012c00 	.word	0x40012c00
 80057c8:	40000400 	.word	0x40000400
 80057cc:	40014000 	.word	0x40014000

080057d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80057da:	2300      	movs	r3, #0
 80057dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	223c      	movs	r2, #60	; 0x3c
 80057e2:	5c9b      	ldrb	r3, [r3, r2]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d101      	bne.n	80057ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80057e8:	2302      	movs	r3, #2
 80057ea:	e03e      	b.n	800586a <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	223c      	movs	r2, #60	; 0x3c
 80057f0:	2101      	movs	r1, #1
 80057f2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	22ff      	movs	r2, #255	; 0xff
 80057f8:	4393      	bics	r3, r2
 80057fa:	001a      	movs	r2, r3
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	4313      	orrs	r3, r2
 8005802:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	4a1b      	ldr	r2, [pc, #108]	; (8005874 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8005808:	401a      	ands	r2, r3
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	4313      	orrs	r3, r2
 8005810:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	4a18      	ldr	r2, [pc, #96]	; (8005878 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8005816:	401a      	ands	r2, r3
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	4313      	orrs	r3, r2
 800581e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	4a16      	ldr	r2, [pc, #88]	; (800587c <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8005824:	401a      	ands	r2, r3
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4313      	orrs	r3, r2
 800582c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	4a13      	ldr	r2, [pc, #76]	; (8005880 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8005832:	401a      	ands	r2, r3
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	4313      	orrs	r3, r2
 800583a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	4a11      	ldr	r2, [pc, #68]	; (8005884 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8005840:	401a      	ands	r2, r3
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	4313      	orrs	r3, r2
 8005848:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	4a0e      	ldr	r2, [pc, #56]	; (8005888 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800584e:	401a      	ands	r2, r3
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	69db      	ldr	r3, [r3, #28]
 8005854:	4313      	orrs	r3, r2
 8005856:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	223c      	movs	r2, #60	; 0x3c
 8005864:	2100      	movs	r1, #0
 8005866:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	0018      	movs	r0, r3
 800586c:	46bd      	mov	sp, r7
 800586e:	b004      	add	sp, #16
 8005870:	bd80      	pop	{r7, pc}
 8005872:	46c0      	nop			; (mov r8, r8)
 8005874:	fffffcff 	.word	0xfffffcff
 8005878:	fffffbff 	.word	0xfffffbff
 800587c:	fffff7ff 	.word	0xfffff7ff
 8005880:	ffffefff 	.word	0xffffefff
 8005884:	ffffdfff 	.word	0xffffdfff
 8005888:	ffffbfff 	.word	0xffffbfff

0800588c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d101      	bne.n	800589e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e044      	b.n	8005928 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d107      	bne.n	80058b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2278      	movs	r2, #120	; 0x78
 80058aa:	2100      	movs	r1, #0
 80058ac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	0018      	movs	r0, r3
 80058b2:	f7fb fe1d 	bl	80014f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2224      	movs	r2, #36	; 0x24
 80058ba:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2101      	movs	r1, #1
 80058c8:	438a      	bics	r2, r1
 80058ca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	0018      	movs	r0, r3
 80058d0:	f000 f830 	bl	8005934 <UART_SetConfig>
 80058d4:	0003      	movs	r3, r0
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d101      	bne.n	80058de <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e024      	b.n	8005928 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d003      	beq.n	80058ee <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	0018      	movs	r0, r3
 80058ea:	f000 f97b 	bl	8005be4 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	685a      	ldr	r2, [r3, #4]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	490d      	ldr	r1, [pc, #52]	; (8005930 <HAL_UART_Init+0xa4>)
 80058fa:	400a      	ands	r2, r1
 80058fc:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	689a      	ldr	r2, [r3, #8]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2108      	movs	r1, #8
 800590a:	438a      	bics	r2, r1
 800590c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2101      	movs	r1, #1
 800591a:	430a      	orrs	r2, r1
 800591c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	0018      	movs	r0, r3
 8005922:	f000 fa13 	bl	8005d4c <UART_CheckIdleState>
 8005926:	0003      	movs	r3, r0
}
 8005928:	0018      	movs	r0, r3
 800592a:	46bd      	mov	sp, r7
 800592c:	b002      	add	sp, #8
 800592e:	bd80      	pop	{r7, pc}
 8005930:	fffff7ff 	.word	0xfffff7ff

08005934 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b088      	sub	sp, #32
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800593c:	231e      	movs	r3, #30
 800593e:	18fb      	adds	r3, r7, r3
 8005940:	2200      	movs	r2, #0
 8005942:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	689a      	ldr	r2, [r3, #8]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	431a      	orrs	r2, r3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	695b      	ldr	r3, [r3, #20]
 8005952:	431a      	orrs	r2, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	69db      	ldr	r3, [r3, #28]
 8005958:	4313      	orrs	r3, r2
 800595a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a97      	ldr	r2, [pc, #604]	; (8005bc0 <UART_SetConfig+0x28c>)
 8005964:	4013      	ands	r3, r2
 8005966:	0019      	movs	r1, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	697a      	ldr	r2, [r7, #20]
 800596e:	430a      	orrs	r2, r1
 8005970:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	4a92      	ldr	r2, [pc, #584]	; (8005bc4 <UART_SetConfig+0x290>)
 800597a:	4013      	ands	r3, r2
 800597c:	0019      	movs	r1, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68da      	ldr	r2, [r3, #12]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	430a      	orrs	r2, r1
 8005988:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a1b      	ldr	r3, [r3, #32]
 8005994:	697a      	ldr	r2, [r7, #20]
 8005996:	4313      	orrs	r3, r2
 8005998:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	4a89      	ldr	r2, [pc, #548]	; (8005bc8 <UART_SetConfig+0x294>)
 80059a2:	4013      	ands	r3, r2
 80059a4:	0019      	movs	r1, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	697a      	ldr	r2, [r7, #20]
 80059ac:	430a      	orrs	r2, r1
 80059ae:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a85      	ldr	r2, [pc, #532]	; (8005bcc <UART_SetConfig+0x298>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d127      	bne.n	8005a0a <UART_SetConfig+0xd6>
 80059ba:	4b85      	ldr	r3, [pc, #532]	; (8005bd0 <UART_SetConfig+0x29c>)
 80059bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059be:	2203      	movs	r2, #3
 80059c0:	4013      	ands	r3, r2
 80059c2:	2b03      	cmp	r3, #3
 80059c4:	d00d      	beq.n	80059e2 <UART_SetConfig+0xae>
 80059c6:	d81b      	bhi.n	8005a00 <UART_SetConfig+0xcc>
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d014      	beq.n	80059f6 <UART_SetConfig+0xc2>
 80059cc:	d818      	bhi.n	8005a00 <UART_SetConfig+0xcc>
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d002      	beq.n	80059d8 <UART_SetConfig+0xa4>
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d00a      	beq.n	80059ec <UART_SetConfig+0xb8>
 80059d6:	e013      	b.n	8005a00 <UART_SetConfig+0xcc>
 80059d8:	231f      	movs	r3, #31
 80059da:	18fb      	adds	r3, r7, r3
 80059dc:	2200      	movs	r2, #0
 80059de:	701a      	strb	r2, [r3, #0]
 80059e0:	e035      	b.n	8005a4e <UART_SetConfig+0x11a>
 80059e2:	231f      	movs	r3, #31
 80059e4:	18fb      	adds	r3, r7, r3
 80059e6:	2202      	movs	r2, #2
 80059e8:	701a      	strb	r2, [r3, #0]
 80059ea:	e030      	b.n	8005a4e <UART_SetConfig+0x11a>
 80059ec:	231f      	movs	r3, #31
 80059ee:	18fb      	adds	r3, r7, r3
 80059f0:	2204      	movs	r2, #4
 80059f2:	701a      	strb	r2, [r3, #0]
 80059f4:	e02b      	b.n	8005a4e <UART_SetConfig+0x11a>
 80059f6:	231f      	movs	r3, #31
 80059f8:	18fb      	adds	r3, r7, r3
 80059fa:	2208      	movs	r2, #8
 80059fc:	701a      	strb	r2, [r3, #0]
 80059fe:	e026      	b.n	8005a4e <UART_SetConfig+0x11a>
 8005a00:	231f      	movs	r3, #31
 8005a02:	18fb      	adds	r3, r7, r3
 8005a04:	2210      	movs	r2, #16
 8005a06:	701a      	strb	r2, [r3, #0]
 8005a08:	e021      	b.n	8005a4e <UART_SetConfig+0x11a>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a71      	ldr	r2, [pc, #452]	; (8005bd4 <UART_SetConfig+0x2a0>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d104      	bne.n	8005a1e <UART_SetConfig+0xea>
 8005a14:	231f      	movs	r3, #31
 8005a16:	18fb      	adds	r3, r7, r3
 8005a18:	2200      	movs	r2, #0
 8005a1a:	701a      	strb	r2, [r3, #0]
 8005a1c:	e017      	b.n	8005a4e <UART_SetConfig+0x11a>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a6d      	ldr	r2, [pc, #436]	; (8005bd8 <UART_SetConfig+0x2a4>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d104      	bne.n	8005a32 <UART_SetConfig+0xfe>
 8005a28:	231f      	movs	r3, #31
 8005a2a:	18fb      	adds	r3, r7, r3
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	701a      	strb	r2, [r3, #0]
 8005a30:	e00d      	b.n	8005a4e <UART_SetConfig+0x11a>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a69      	ldr	r2, [pc, #420]	; (8005bdc <UART_SetConfig+0x2a8>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d104      	bne.n	8005a46 <UART_SetConfig+0x112>
 8005a3c:	231f      	movs	r3, #31
 8005a3e:	18fb      	adds	r3, r7, r3
 8005a40:	2200      	movs	r2, #0
 8005a42:	701a      	strb	r2, [r3, #0]
 8005a44:	e003      	b.n	8005a4e <UART_SetConfig+0x11a>
 8005a46:	231f      	movs	r3, #31
 8005a48:	18fb      	adds	r3, r7, r3
 8005a4a:	2210      	movs	r2, #16
 8005a4c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	69da      	ldr	r2, [r3, #28]
 8005a52:	2380      	movs	r3, #128	; 0x80
 8005a54:	021b      	lsls	r3, r3, #8
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d15c      	bne.n	8005b14 <UART_SetConfig+0x1e0>
  {
    switch (clocksource)
 8005a5a:	231f      	movs	r3, #31
 8005a5c:	18fb      	adds	r3, r7, r3
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	2b08      	cmp	r3, #8
 8005a62:	d015      	beq.n	8005a90 <UART_SetConfig+0x15c>
 8005a64:	dc18      	bgt.n	8005a98 <UART_SetConfig+0x164>
 8005a66:	2b04      	cmp	r3, #4
 8005a68:	d00d      	beq.n	8005a86 <UART_SetConfig+0x152>
 8005a6a:	dc15      	bgt.n	8005a98 <UART_SetConfig+0x164>
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d002      	beq.n	8005a76 <UART_SetConfig+0x142>
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d005      	beq.n	8005a80 <UART_SetConfig+0x14c>
 8005a74:	e010      	b.n	8005a98 <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a76:	f7fe ff59 	bl	800492c <HAL_RCC_GetPCLK1Freq>
 8005a7a:	0003      	movs	r3, r0
 8005a7c:	61bb      	str	r3, [r7, #24]
        break;
 8005a7e:	e012      	b.n	8005aa6 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a80:	4b57      	ldr	r3, [pc, #348]	; (8005be0 <UART_SetConfig+0x2ac>)
 8005a82:	61bb      	str	r3, [r7, #24]
        break;
 8005a84:	e00f      	b.n	8005aa6 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a86:	f7fe feed 	bl	8004864 <HAL_RCC_GetSysClockFreq>
 8005a8a:	0003      	movs	r3, r0
 8005a8c:	61bb      	str	r3, [r7, #24]
        break;
 8005a8e:	e00a      	b.n	8005aa6 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a90:	2380      	movs	r3, #128	; 0x80
 8005a92:	021b      	lsls	r3, r3, #8
 8005a94:	61bb      	str	r3, [r7, #24]
        break;
 8005a96:	e006      	b.n	8005aa6 <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005a9c:	231e      	movs	r3, #30
 8005a9e:	18fb      	adds	r3, r7, r3
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	701a      	strb	r2, [r3, #0]
        break;
 8005aa4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d100      	bne.n	8005aae <UART_SetConfig+0x17a>
 8005aac:	e07a      	b.n	8005ba4 <UART_SetConfig+0x270>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	005a      	lsls	r2, r3, #1
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	085b      	lsrs	r3, r3, #1
 8005ab8:	18d2      	adds	r2, r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	0019      	movs	r1, r3
 8005ac0:	0010      	movs	r0, r2
 8005ac2:	f7fa fb2b 	bl	800011c <__udivsi3>
 8005ac6:	0003      	movs	r3, r0
 8005ac8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	2b0f      	cmp	r3, #15
 8005ace:	d91c      	bls.n	8005b0a <UART_SetConfig+0x1d6>
 8005ad0:	693a      	ldr	r2, [r7, #16]
 8005ad2:	2380      	movs	r3, #128	; 0x80
 8005ad4:	025b      	lsls	r3, r3, #9
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d217      	bcs.n	8005b0a <UART_SetConfig+0x1d6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	200e      	movs	r0, #14
 8005ae0:	183b      	adds	r3, r7, r0
 8005ae2:	210f      	movs	r1, #15
 8005ae4:	438a      	bics	r2, r1
 8005ae6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	085b      	lsrs	r3, r3, #1
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	2207      	movs	r2, #7
 8005af0:	4013      	ands	r3, r2
 8005af2:	b299      	uxth	r1, r3
 8005af4:	183b      	adds	r3, r7, r0
 8005af6:	183a      	adds	r2, r7, r0
 8005af8:	8812      	ldrh	r2, [r2, #0]
 8005afa:	430a      	orrs	r2, r1
 8005afc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	183a      	adds	r2, r7, r0
 8005b04:	8812      	ldrh	r2, [r2, #0]
 8005b06:	60da      	str	r2, [r3, #12]
 8005b08:	e04c      	b.n	8005ba4 <UART_SetConfig+0x270>
      }
      else
      {
        ret = HAL_ERROR;
 8005b0a:	231e      	movs	r3, #30
 8005b0c:	18fb      	adds	r3, r7, r3
 8005b0e:	2201      	movs	r2, #1
 8005b10:	701a      	strb	r2, [r3, #0]
 8005b12:	e047      	b.n	8005ba4 <UART_SetConfig+0x270>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b14:	231f      	movs	r3, #31
 8005b16:	18fb      	adds	r3, r7, r3
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	2b08      	cmp	r3, #8
 8005b1c:	d015      	beq.n	8005b4a <UART_SetConfig+0x216>
 8005b1e:	dc18      	bgt.n	8005b52 <UART_SetConfig+0x21e>
 8005b20:	2b04      	cmp	r3, #4
 8005b22:	d00d      	beq.n	8005b40 <UART_SetConfig+0x20c>
 8005b24:	dc15      	bgt.n	8005b52 <UART_SetConfig+0x21e>
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d002      	beq.n	8005b30 <UART_SetConfig+0x1fc>
 8005b2a:	2b02      	cmp	r3, #2
 8005b2c:	d005      	beq.n	8005b3a <UART_SetConfig+0x206>
 8005b2e:	e010      	b.n	8005b52 <UART_SetConfig+0x21e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b30:	f7fe fefc 	bl	800492c <HAL_RCC_GetPCLK1Freq>
 8005b34:	0003      	movs	r3, r0
 8005b36:	61bb      	str	r3, [r7, #24]
        break;
 8005b38:	e012      	b.n	8005b60 <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b3a:	4b29      	ldr	r3, [pc, #164]	; (8005be0 <UART_SetConfig+0x2ac>)
 8005b3c:	61bb      	str	r3, [r7, #24]
        break;
 8005b3e:	e00f      	b.n	8005b60 <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b40:	f7fe fe90 	bl	8004864 <HAL_RCC_GetSysClockFreq>
 8005b44:	0003      	movs	r3, r0
 8005b46:	61bb      	str	r3, [r7, #24]
        break;
 8005b48:	e00a      	b.n	8005b60 <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b4a:	2380      	movs	r3, #128	; 0x80
 8005b4c:	021b      	lsls	r3, r3, #8
 8005b4e:	61bb      	str	r3, [r7, #24]
        break;
 8005b50:	e006      	b.n	8005b60 <UART_SetConfig+0x22c>
      default:
        pclk = 0U;
 8005b52:	2300      	movs	r3, #0
 8005b54:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b56:	231e      	movs	r3, #30
 8005b58:	18fb      	adds	r3, r7, r3
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	701a      	strb	r2, [r3, #0]
        break;
 8005b5e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d01e      	beq.n	8005ba4 <UART_SetConfig+0x270>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	085a      	lsrs	r2, r3, #1
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	18d2      	adds	r2, r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	0019      	movs	r1, r3
 8005b76:	0010      	movs	r0, r2
 8005b78:	f7fa fad0 	bl	800011c <__udivsi3>
 8005b7c:	0003      	movs	r3, r0
 8005b7e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	2b0f      	cmp	r3, #15
 8005b84:	d90a      	bls.n	8005b9c <UART_SetConfig+0x268>
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	2380      	movs	r3, #128	; 0x80
 8005b8a:	025b      	lsls	r3, r3, #9
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d205      	bcs.n	8005b9c <UART_SetConfig+0x268>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	b29a      	uxth	r2, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	60da      	str	r2, [r3, #12]
 8005b9a:	e003      	b.n	8005ba4 <UART_SetConfig+0x270>
      }
      else
      {
        ret = HAL_ERROR;
 8005b9c:	231e      	movs	r3, #30
 8005b9e:	18fb      	adds	r3, r7, r3
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005bb0:	231e      	movs	r3, #30
 8005bb2:	18fb      	adds	r3, r7, r3
 8005bb4:	781b      	ldrb	r3, [r3, #0]
}
 8005bb6:	0018      	movs	r0, r3
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	b008      	add	sp, #32
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	46c0      	nop			; (mov r8, r8)
 8005bc0:	efff69f3 	.word	0xefff69f3
 8005bc4:	ffffcfff 	.word	0xffffcfff
 8005bc8:	fffff4ff 	.word	0xfffff4ff
 8005bcc:	40013800 	.word	0x40013800
 8005bd0:	40021000 	.word	0x40021000
 8005bd4:	40004400 	.word	0x40004400
 8005bd8:	40004800 	.word	0x40004800
 8005bdc:	40004c00 	.word	0x40004c00
 8005be0:	007a1200 	.word	0x007a1200

08005be4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	d00b      	beq.n	8005c0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	4a4a      	ldr	r2, [pc, #296]	; (8005d28 <UART_AdvFeatureConfig+0x144>)
 8005bfe:	4013      	ands	r3, r2
 8005c00:	0019      	movs	r1, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	430a      	orrs	r2, r1
 8005c0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c12:	2202      	movs	r2, #2
 8005c14:	4013      	ands	r3, r2
 8005c16:	d00b      	beq.n	8005c30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	4a43      	ldr	r2, [pc, #268]	; (8005d2c <UART_AdvFeatureConfig+0x148>)
 8005c20:	4013      	ands	r3, r2
 8005c22:	0019      	movs	r1, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	430a      	orrs	r2, r1
 8005c2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c34:	2204      	movs	r2, #4
 8005c36:	4013      	ands	r3, r2
 8005c38:	d00b      	beq.n	8005c52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	4a3b      	ldr	r2, [pc, #236]	; (8005d30 <UART_AdvFeatureConfig+0x14c>)
 8005c42:	4013      	ands	r3, r2
 8005c44:	0019      	movs	r1, r3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	430a      	orrs	r2, r1
 8005c50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c56:	2208      	movs	r2, #8
 8005c58:	4013      	ands	r3, r2
 8005c5a:	d00b      	beq.n	8005c74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	4a34      	ldr	r2, [pc, #208]	; (8005d34 <UART_AdvFeatureConfig+0x150>)
 8005c64:	4013      	ands	r3, r2
 8005c66:	0019      	movs	r1, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	430a      	orrs	r2, r1
 8005c72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c78:	2210      	movs	r2, #16
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	d00b      	beq.n	8005c96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	4a2c      	ldr	r2, [pc, #176]	; (8005d38 <UART_AdvFeatureConfig+0x154>)
 8005c86:	4013      	ands	r3, r2
 8005c88:	0019      	movs	r1, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	430a      	orrs	r2, r1
 8005c94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9a:	2220      	movs	r2, #32
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	d00b      	beq.n	8005cb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	4a25      	ldr	r2, [pc, #148]	; (8005d3c <UART_AdvFeatureConfig+0x158>)
 8005ca8:	4013      	ands	r3, r2
 8005caa:	0019      	movs	r1, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	430a      	orrs	r2, r1
 8005cb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cbc:	2240      	movs	r2, #64	; 0x40
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	d01d      	beq.n	8005cfe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	4a1d      	ldr	r2, [pc, #116]	; (8005d40 <UART_AdvFeatureConfig+0x15c>)
 8005cca:	4013      	ands	r3, r2
 8005ccc:	0019      	movs	r1, r3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cde:	2380      	movs	r3, #128	; 0x80
 8005ce0:	035b      	lsls	r3, r3, #13
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d10b      	bne.n	8005cfe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	4a15      	ldr	r2, [pc, #84]	; (8005d44 <UART_AdvFeatureConfig+0x160>)
 8005cee:	4013      	ands	r3, r2
 8005cf0:	0019      	movs	r1, r3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	430a      	orrs	r2, r1
 8005cfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d02:	2280      	movs	r2, #128	; 0x80
 8005d04:	4013      	ands	r3, r2
 8005d06:	d00b      	beq.n	8005d20 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	4a0e      	ldr	r2, [pc, #56]	; (8005d48 <UART_AdvFeatureConfig+0x164>)
 8005d10:	4013      	ands	r3, r2
 8005d12:	0019      	movs	r1, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	430a      	orrs	r2, r1
 8005d1e:	605a      	str	r2, [r3, #4]
  }
}
 8005d20:	46c0      	nop			; (mov r8, r8)
 8005d22:	46bd      	mov	sp, r7
 8005d24:	b002      	add	sp, #8
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	fffdffff 	.word	0xfffdffff
 8005d2c:	fffeffff 	.word	0xfffeffff
 8005d30:	fffbffff 	.word	0xfffbffff
 8005d34:	ffff7fff 	.word	0xffff7fff
 8005d38:	ffffefff 	.word	0xffffefff
 8005d3c:	ffffdfff 	.word	0xffffdfff
 8005d40:	ffefffff 	.word	0xffefffff
 8005d44:	ff9fffff 	.word	0xff9fffff
 8005d48:	fff7ffff 	.word	0xfff7ffff

08005d4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b092      	sub	sp, #72	; 0x48
 8005d50:	af02      	add	r7, sp, #8
 8005d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2284      	movs	r2, #132	; 0x84
 8005d58:	2100      	movs	r1, #0
 8005d5a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d5c:	f7fb fd6c 	bl	8001838 <HAL_GetTick>
 8005d60:	0003      	movs	r3, r0
 8005d62:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2208      	movs	r2, #8
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	2b08      	cmp	r3, #8
 8005d70:	d12c      	bne.n	8005dcc <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d74:	2280      	movs	r2, #128	; 0x80
 8005d76:	0391      	lsls	r1, r2, #14
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	4a46      	ldr	r2, [pc, #280]	; (8005e94 <UART_CheckIdleState+0x148>)
 8005d7c:	9200      	str	r2, [sp, #0]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f000 f88c 	bl	8005e9c <UART_WaitOnFlagUntilTimeout>
 8005d84:	1e03      	subs	r3, r0, #0
 8005d86:	d021      	beq.n	8005dcc <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d88:	f3ef 8310 	mrs	r3, PRIMASK
 8005d8c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005d90:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d92:	2301      	movs	r3, #1
 8005d94:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d98:	f383 8810 	msr	PRIMASK, r3
}
 8005d9c:	46c0      	nop			; (mov r8, r8)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2180      	movs	r1, #128	; 0x80
 8005daa:	438a      	bics	r2, r1
 8005dac:	601a      	str	r2, [r3, #0]
 8005dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db4:	f383 8810 	msr	PRIMASK, r3
}
 8005db8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2220      	movs	r2, #32
 8005dbe:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2278      	movs	r2, #120	; 0x78
 8005dc4:	2100      	movs	r1, #0
 8005dc6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	e05f      	b.n	8005e8c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2204      	movs	r2, #4
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	2b04      	cmp	r3, #4
 8005dd8:	d146      	bne.n	8005e68 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ddc:	2280      	movs	r2, #128	; 0x80
 8005dde:	03d1      	lsls	r1, r2, #15
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	4a2c      	ldr	r2, [pc, #176]	; (8005e94 <UART_CheckIdleState+0x148>)
 8005de4:	9200      	str	r2, [sp, #0]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f000 f858 	bl	8005e9c <UART_WaitOnFlagUntilTimeout>
 8005dec:	1e03      	subs	r3, r0, #0
 8005dee:	d03b      	beq.n	8005e68 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005df0:	f3ef 8310 	mrs	r3, PRIMASK
 8005df4:	60fb      	str	r3, [r7, #12]
  return(result);
 8005df6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005df8:	637b      	str	r3, [r7, #52]	; 0x34
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	f383 8810 	msr	PRIMASK, r3
}
 8005e04:	46c0      	nop			; (mov r8, r8)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4921      	ldr	r1, [pc, #132]	; (8005e98 <UART_CheckIdleState+0x14c>)
 8005e12:	400a      	ands	r2, r1
 8005e14:	601a      	str	r2, [r3, #0]
 8005e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e18:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	f383 8810 	msr	PRIMASK, r3
}
 8005e20:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e22:	f3ef 8310 	mrs	r3, PRIMASK
 8005e26:	61bb      	str	r3, [r7, #24]
  return(result);
 8005e28:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e2a:	633b      	str	r3, [r7, #48]	; 0x30
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	f383 8810 	msr	PRIMASK, r3
}
 8005e36:	46c0      	nop			; (mov r8, r8)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	689a      	ldr	r2, [r3, #8]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2101      	movs	r1, #1
 8005e44:	438a      	bics	r2, r1
 8005e46:	609a      	str	r2, [r3, #8]
 8005e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e4a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e4c:	6a3b      	ldr	r3, [r7, #32]
 8005e4e:	f383 8810 	msr	PRIMASK, r3
}
 8005e52:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2280      	movs	r2, #128	; 0x80
 8005e58:	2120      	movs	r1, #32
 8005e5a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2278      	movs	r2, #120	; 0x78
 8005e60:	2100      	movs	r1, #0
 8005e62:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e64:	2303      	movs	r3, #3
 8005e66:	e011      	b.n	8005e8c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2220      	movs	r2, #32
 8005e6c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2280      	movs	r2, #128	; 0x80
 8005e72:	2120      	movs	r1, #32
 8005e74:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2278      	movs	r2, #120	; 0x78
 8005e86:	2100      	movs	r1, #0
 8005e88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e8a:	2300      	movs	r3, #0
}
 8005e8c:	0018      	movs	r0, r3
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	b010      	add	sp, #64	; 0x40
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	01ffffff 	.word	0x01ffffff
 8005e98:	fffffedf 	.word	0xfffffedf

08005e9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	603b      	str	r3, [r7, #0]
 8005ea8:	1dfb      	adds	r3, r7, #7
 8005eaa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005eac:	e04b      	b.n	8005f46 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	d048      	beq.n	8005f46 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eb4:	f7fb fcc0 	bl	8001838 <HAL_GetTick>
 8005eb8:	0002      	movs	r2, r0
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	69ba      	ldr	r2, [r7, #24]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d302      	bcc.n	8005eca <UART_WaitOnFlagUntilTimeout+0x2e>
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d101      	bne.n	8005ece <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	e04b      	b.n	8005f66 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2204      	movs	r2, #4
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	d035      	beq.n	8005f46 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	69db      	ldr	r3, [r3, #28]
 8005ee0:	2208      	movs	r2, #8
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	2b08      	cmp	r3, #8
 8005ee6:	d111      	bne.n	8005f0c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2208      	movs	r2, #8
 8005eee:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	0018      	movs	r0, r3
 8005ef4:	f000 f83c 	bl	8005f70 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2284      	movs	r2, #132	; 0x84
 8005efc:	2108      	movs	r1, #8
 8005efe:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2278      	movs	r2, #120	; 0x78
 8005f04:	2100      	movs	r1, #0
 8005f06:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e02c      	b.n	8005f66 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	69da      	ldr	r2, [r3, #28]
 8005f12:	2380      	movs	r3, #128	; 0x80
 8005f14:	011b      	lsls	r3, r3, #4
 8005f16:	401a      	ands	r2, r3
 8005f18:	2380      	movs	r3, #128	; 0x80
 8005f1a:	011b      	lsls	r3, r3, #4
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d112      	bne.n	8005f46 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2280      	movs	r2, #128	; 0x80
 8005f26:	0112      	lsls	r2, r2, #4
 8005f28:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	0018      	movs	r0, r3
 8005f2e:	f000 f81f 	bl	8005f70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2284      	movs	r2, #132	; 0x84
 8005f36:	2120      	movs	r1, #32
 8005f38:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2278      	movs	r2, #120	; 0x78
 8005f3e:	2100      	movs	r1, #0
 8005f40:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e00f      	b.n	8005f66 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	69db      	ldr	r3, [r3, #28]
 8005f4c:	68ba      	ldr	r2, [r7, #8]
 8005f4e:	4013      	ands	r3, r2
 8005f50:	68ba      	ldr	r2, [r7, #8]
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	425a      	negs	r2, r3
 8005f56:	4153      	adcs	r3, r2
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	001a      	movs	r2, r3
 8005f5c:	1dfb      	adds	r3, r7, #7
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d0a4      	beq.n	8005eae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	0018      	movs	r0, r3
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	b004      	add	sp, #16
 8005f6c:	bd80      	pop	{r7, pc}
	...

08005f70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b08e      	sub	sp, #56	; 0x38
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f78:	f3ef 8310 	mrs	r3, PRIMASK
 8005f7c:	617b      	str	r3, [r7, #20]
  return(result);
 8005f7e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f80:	637b      	str	r3, [r7, #52]	; 0x34
 8005f82:	2301      	movs	r3, #1
 8005f84:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	f383 8810 	msr	PRIMASK, r3
}
 8005f8c:	46c0      	nop			; (mov r8, r8)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4926      	ldr	r1, [pc, #152]	; (8006034 <UART_EndRxTransfer+0xc4>)
 8005f9a:	400a      	ands	r2, r1
 8005f9c:	601a      	str	r2, [r3, #0]
 8005f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fa0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	f383 8810 	msr	PRIMASK, r3
}
 8005fa8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005faa:	f3ef 8310 	mrs	r3, PRIMASK
 8005fae:	623b      	str	r3, [r7, #32]
  return(result);
 8005fb0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fb2:	633b      	str	r3, [r7, #48]	; 0x30
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fba:	f383 8810 	msr	PRIMASK, r3
}
 8005fbe:	46c0      	nop			; (mov r8, r8)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	689a      	ldr	r2, [r3, #8]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2101      	movs	r1, #1
 8005fcc:	438a      	bics	r2, r1
 8005fce:	609a      	str	r2, [r3, #8]
 8005fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd6:	f383 8810 	msr	PRIMASK, r3
}
 8005fda:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d118      	bne.n	8006016 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fe4:	f3ef 8310 	mrs	r3, PRIMASK
 8005fe8:	60bb      	str	r3, [r7, #8]
  return(result);
 8005fea:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fee:	2301      	movs	r3, #1
 8005ff0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f383 8810 	msr	PRIMASK, r3
}
 8005ff8:	46c0      	nop			; (mov r8, r8)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2110      	movs	r1, #16
 8006006:	438a      	bics	r2, r1
 8006008:	601a      	str	r2, [r3, #0]
 800600a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800600c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	f383 8810 	msr	PRIMASK, r3
}
 8006014:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2280      	movs	r2, #128	; 0x80
 800601a:	2120      	movs	r1, #32
 800601c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	669a      	str	r2, [r3, #104]	; 0x68
}
 800602a:	46c0      	nop			; (mov r8, r8)
 800602c:	46bd      	mov	sp, r7
 800602e:	b00e      	add	sp, #56	; 0x38
 8006030:	bd80      	pop	{r7, pc}
 8006032:	46c0      	nop			; (mov r8, r8)
 8006034:	fffffedf 	.word	0xfffffedf

08006038 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2244      	movs	r2, #68	; 0x44
 8006044:	2100      	movs	r1, #0
 8006046:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006048:	4b05      	ldr	r3, [pc, #20]	; (8006060 <USB_EnableGlobalInt+0x28>)
 800604a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	b299      	uxth	r1, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2240      	movs	r2, #64	; 0x40
 8006054:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8006056:	2300      	movs	r3, #0
}
 8006058:	0018      	movs	r0, r3
 800605a:	46bd      	mov	sp, r7
 800605c:	b004      	add	sp, #16
 800605e:	bd80      	pop	{r7, pc}
 8006060:	0000bf80 	.word	0x0000bf80

08006064 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800606c:	4b09      	ldr	r3, [pc, #36]	; (8006094 <USB_DisableGlobalInt+0x30>)
 800606e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2240      	movs	r2, #64	; 0x40
 8006074:	5a9b      	ldrh	r3, [r3, r2]
 8006076:	b29b      	uxth	r3, r3
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	b292      	uxth	r2, r2
 800607c:	43d2      	mvns	r2, r2
 800607e:	b292      	uxth	r2, r2
 8006080:	4013      	ands	r3, r2
 8006082:	b299      	uxth	r1, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2240      	movs	r2, #64	; 0x40
 8006088:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800608a:	2300      	movs	r3, #0
}
 800608c:	0018      	movs	r0, r3
 800608e:	46bd      	mov	sp, r7
 8006090:	b004      	add	sp, #16
 8006092:	bd80      	pop	{r7, pc}
 8006094:	0000bf80 	.word	0x0000bf80

08006098 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006098:	b084      	sub	sp, #16
 800609a:	b590      	push	{r4, r7, lr}
 800609c:	b083      	sub	sp, #12
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
 80060a2:	2004      	movs	r0, #4
 80060a4:	2410      	movs	r4, #16
 80060a6:	1900      	adds	r0, r0, r4
 80060a8:	2408      	movs	r4, #8
 80060aa:	46a4      	mov	ip, r4
 80060ac:	44bc      	add	ip, r7
 80060ae:	4460      	add	r0, ip
 80060b0:	6001      	str	r1, [r0, #0]
 80060b2:	6042      	str	r2, [r0, #4]
 80060b4:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2240      	movs	r2, #64	; 0x40
 80060ba:	2101      	movs	r1, #1
 80060bc:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2240      	movs	r2, #64	; 0x40
 80060c2:	2100      	movs	r1, #0
 80060c4:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2244      	movs	r2, #68	; 0x44
 80060ca:	2100      	movs	r1, #0
 80060cc:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2250      	movs	r2, #80	; 0x50
 80060d2:	2100      	movs	r1, #0
 80060d4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	0018      	movs	r0, r3
 80060da:	46bd      	mov	sp, r7
 80060dc:	b003      	add	sp, #12
 80060de:	bc90      	pop	{r4, r7}
 80060e0:	bc08      	pop	{r3}
 80060e2:	b004      	add	sp, #16
 80060e4:	4718      	bx	r3
	...

080060e8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b09c      	sub	sp, #112	; 0x70
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80060f2:	236f      	movs	r3, #111	; 0x6f
 80060f4:	18fb      	adds	r3, r7, r3
 80060f6:	2200      	movs	r2, #0
 80060f8:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	18d3      	adds	r3, r2, r3
 8006104:	881b      	ldrh	r3, [r3, #0]
 8006106:	b29a      	uxth	r2, r3
 8006108:	236c      	movs	r3, #108	; 0x6c
 800610a:	18fb      	adds	r3, r7, r3
 800610c:	49a3      	ldr	r1, [pc, #652]	; (800639c <USB_ActivateEndpoint+0x2b4>)
 800610e:	400a      	ands	r2, r1
 8006110:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	78db      	ldrb	r3, [r3, #3]
 8006116:	2b03      	cmp	r3, #3
 8006118:	d017      	beq.n	800614a <USB_ActivateEndpoint+0x62>
 800611a:	dc28      	bgt.n	800616e <USB_ActivateEndpoint+0x86>
 800611c:	2b02      	cmp	r3, #2
 800611e:	d00e      	beq.n	800613e <USB_ActivateEndpoint+0x56>
 8006120:	dc25      	bgt.n	800616e <USB_ActivateEndpoint+0x86>
 8006122:	2b00      	cmp	r3, #0
 8006124:	d002      	beq.n	800612c <USB_ActivateEndpoint+0x44>
 8006126:	2b01      	cmp	r3, #1
 8006128:	d018      	beq.n	800615c <USB_ActivateEndpoint+0x74>
 800612a:	e020      	b.n	800616e <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800612c:	226c      	movs	r2, #108	; 0x6c
 800612e:	18bb      	adds	r3, r7, r2
 8006130:	18ba      	adds	r2, r7, r2
 8006132:	8812      	ldrh	r2, [r2, #0]
 8006134:	2180      	movs	r1, #128	; 0x80
 8006136:	0089      	lsls	r1, r1, #2
 8006138:	430a      	orrs	r2, r1
 800613a:	801a      	strh	r2, [r3, #0]
      break;
 800613c:	e01c      	b.n	8006178 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 800613e:	226c      	movs	r2, #108	; 0x6c
 8006140:	18bb      	adds	r3, r7, r2
 8006142:	18ba      	adds	r2, r7, r2
 8006144:	8812      	ldrh	r2, [r2, #0]
 8006146:	801a      	strh	r2, [r3, #0]
      break;
 8006148:	e016      	b.n	8006178 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800614a:	226c      	movs	r2, #108	; 0x6c
 800614c:	18bb      	adds	r3, r7, r2
 800614e:	18ba      	adds	r2, r7, r2
 8006150:	8812      	ldrh	r2, [r2, #0]
 8006152:	21c0      	movs	r1, #192	; 0xc0
 8006154:	00c9      	lsls	r1, r1, #3
 8006156:	430a      	orrs	r2, r1
 8006158:	801a      	strh	r2, [r3, #0]
      break;
 800615a:	e00d      	b.n	8006178 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800615c:	226c      	movs	r2, #108	; 0x6c
 800615e:	18bb      	adds	r3, r7, r2
 8006160:	18ba      	adds	r2, r7, r2
 8006162:	8812      	ldrh	r2, [r2, #0]
 8006164:	2180      	movs	r1, #128	; 0x80
 8006166:	00c9      	lsls	r1, r1, #3
 8006168:	430a      	orrs	r2, r1
 800616a:	801a      	strh	r2, [r3, #0]
      break;
 800616c:	e004      	b.n	8006178 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 800616e:	236f      	movs	r3, #111	; 0x6f
 8006170:	18fb      	adds	r3, r7, r3
 8006172:	2201      	movs	r2, #1
 8006174:	701a      	strb	r2, [r3, #0]
      break;
 8006176:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	18d3      	adds	r3, r2, r3
 8006182:	226c      	movs	r2, #108	; 0x6c
 8006184:	18ba      	adds	r2, r7, r2
 8006186:	8812      	ldrh	r2, [r2, #0]
 8006188:	4985      	ldr	r1, [pc, #532]	; (80063a0 <USB_ActivateEndpoint+0x2b8>)
 800618a:	430a      	orrs	r2, r1
 800618c:	b292      	uxth	r2, r2
 800618e:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	18d3      	adds	r3, r2, r3
 800619a:	881b      	ldrh	r3, [r3, #0]
 800619c:	b29b      	uxth	r3, r3
 800619e:	b21b      	sxth	r3, r3
 80061a0:	4a80      	ldr	r2, [pc, #512]	; (80063a4 <USB_ActivateEndpoint+0x2bc>)
 80061a2:	4013      	ands	r3, r2
 80061a4:	b21a      	sxth	r2, r3
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	b21b      	sxth	r3, r3
 80061ac:	4313      	orrs	r3, r2
 80061ae:	b21a      	sxth	r2, r3
 80061b0:	2166      	movs	r1, #102	; 0x66
 80061b2:	187b      	adds	r3, r7, r1
 80061b4:	801a      	strh	r2, [r3, #0]
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	18d3      	adds	r3, r2, r3
 80061c0:	187a      	adds	r2, r7, r1
 80061c2:	8812      	ldrh	r2, [r2, #0]
 80061c4:	4976      	ldr	r1, [pc, #472]	; (80063a0 <USB_ActivateEndpoint+0x2b8>)
 80061c6:	430a      	orrs	r2, r1
 80061c8:	b292      	uxth	r2, r2
 80061ca:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	7b1b      	ldrb	r3, [r3, #12]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d000      	beq.n	80061d6 <USB_ActivateEndpoint+0xee>
 80061d4:	e178      	b.n	80064c8 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	785b      	ldrb	r3, [r3, #1]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d100      	bne.n	80061e0 <USB_ActivateEndpoint+0xf8>
 80061de:	e07a      	b.n	80062d6 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	61bb      	str	r3, [r7, #24]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2250      	movs	r2, #80	; 0x50
 80061e8:	5a9b      	ldrh	r3, [r3, r2]
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	001a      	movs	r2, r3
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	189b      	adds	r3, r3, r2
 80061f2:	61bb      	str	r3, [r7, #24]
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	00da      	lsls	r2, r3, #3
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	18d3      	adds	r3, r2, r3
 80061fe:	2280      	movs	r2, #128	; 0x80
 8006200:	00d2      	lsls	r2, r2, #3
 8006202:	4694      	mov	ip, r2
 8006204:	4463      	add	r3, ip
 8006206:	617b      	str	r3, [r7, #20]
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	88db      	ldrh	r3, [r3, #6]
 800620c:	085b      	lsrs	r3, r3, #1
 800620e:	b29b      	uxth	r3, r3
 8006210:	18db      	adds	r3, r3, r3
 8006212:	b29a      	uxth	r2, r3
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	18d2      	adds	r2, r2, r3
 8006222:	2112      	movs	r1, #18
 8006224:	187b      	adds	r3, r7, r1
 8006226:	8812      	ldrh	r2, [r2, #0]
 8006228:	801a      	strh	r2, [r3, #0]
 800622a:	187b      	adds	r3, r7, r1
 800622c:	881b      	ldrh	r3, [r3, #0]
 800622e:	2240      	movs	r2, #64	; 0x40
 8006230:	4013      	ands	r3, r2
 8006232:	d016      	beq.n	8006262 <USB_ActivateEndpoint+0x17a>
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	18d3      	adds	r3, r2, r3
 800623e:	881b      	ldrh	r3, [r3, #0]
 8006240:	b29a      	uxth	r2, r3
 8006242:	2010      	movs	r0, #16
 8006244:	183b      	adds	r3, r7, r0
 8006246:	4957      	ldr	r1, [pc, #348]	; (80063a4 <USB_ActivateEndpoint+0x2bc>)
 8006248:	400a      	ands	r2, r1
 800624a:	801a      	strh	r2, [r3, #0]
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	18d3      	adds	r3, r2, r3
 8006256:	183a      	adds	r2, r7, r0
 8006258:	8812      	ldrh	r2, [r2, #0]
 800625a:	4953      	ldr	r1, [pc, #332]	; (80063a8 <USB_ActivateEndpoint+0x2c0>)
 800625c:	430a      	orrs	r2, r1
 800625e:	b292      	uxth	r2, r2
 8006260:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	78db      	ldrb	r3, [r3, #3]
 8006266:	2b01      	cmp	r3, #1
 8006268:	d01d      	beq.n	80062a6 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	18d3      	adds	r3, r2, r3
 8006274:	881b      	ldrh	r3, [r3, #0]
 8006276:	b29a      	uxth	r2, r3
 8006278:	200c      	movs	r0, #12
 800627a:	183b      	adds	r3, r7, r0
 800627c:	494b      	ldr	r1, [pc, #300]	; (80063ac <USB_ActivateEndpoint+0x2c4>)
 800627e:	400a      	ands	r2, r1
 8006280:	801a      	strh	r2, [r3, #0]
 8006282:	183b      	adds	r3, r7, r0
 8006284:	183a      	adds	r2, r7, r0
 8006286:	8812      	ldrh	r2, [r2, #0]
 8006288:	2120      	movs	r1, #32
 800628a:	404a      	eors	r2, r1
 800628c:	801a      	strh	r2, [r3, #0]
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	18d3      	adds	r3, r2, r3
 8006298:	183a      	adds	r2, r7, r0
 800629a:	8812      	ldrh	r2, [r2, #0]
 800629c:	4940      	ldr	r1, [pc, #256]	; (80063a0 <USB_ActivateEndpoint+0x2b8>)
 800629e:	430a      	orrs	r2, r1
 80062a0:	b292      	uxth	r2, r2
 80062a2:	801a      	strh	r2, [r3, #0]
 80062a4:	e2b4      	b.n	8006810 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	18d3      	adds	r3, r2, r3
 80062b0:	881b      	ldrh	r3, [r3, #0]
 80062b2:	b29a      	uxth	r2, r3
 80062b4:	200e      	movs	r0, #14
 80062b6:	183b      	adds	r3, r7, r0
 80062b8:	493c      	ldr	r1, [pc, #240]	; (80063ac <USB_ActivateEndpoint+0x2c4>)
 80062ba:	400a      	ands	r2, r1
 80062bc:	801a      	strh	r2, [r3, #0]
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	18d3      	adds	r3, r2, r3
 80062c8:	183a      	adds	r2, r7, r0
 80062ca:	8812      	ldrh	r2, [r2, #0]
 80062cc:	4934      	ldr	r1, [pc, #208]	; (80063a0 <USB_ActivateEndpoint+0x2b8>)
 80062ce:	430a      	orrs	r2, r1
 80062d0:	b292      	uxth	r2, r2
 80062d2:	801a      	strh	r2, [r3, #0]
 80062d4:	e29c      	b.n	8006810 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	633b      	str	r3, [r7, #48]	; 0x30
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2250      	movs	r2, #80	; 0x50
 80062de:	5a9b      	ldrh	r3, [r3, r2]
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	001a      	movs	r2, r3
 80062e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e6:	189b      	adds	r3, r3, r2
 80062e8:	633b      	str	r3, [r7, #48]	; 0x30
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	00da      	lsls	r2, r3, #3
 80062f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f2:	18d3      	adds	r3, r2, r3
 80062f4:	4a2e      	ldr	r2, [pc, #184]	; (80063b0 <USB_ActivateEndpoint+0x2c8>)
 80062f6:	4694      	mov	ip, r2
 80062f8:	4463      	add	r3, ip
 80062fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	88db      	ldrh	r3, [r3, #6]
 8006300:	085b      	lsrs	r3, r3, #1
 8006302:	b29b      	uxth	r3, r3
 8006304:	18db      	adds	r3, r3, r3
 8006306:	b29a      	uxth	r2, r3
 8006308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800630a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2250      	movs	r2, #80	; 0x50
 8006314:	5a9b      	ldrh	r3, [r3, r2]
 8006316:	b29b      	uxth	r3, r3
 8006318:	001a      	movs	r2, r3
 800631a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631c:	189b      	adds	r3, r3, r2
 800631e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	00da      	lsls	r2, r3, #3
 8006326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006328:	18d3      	adds	r3, r2, r3
 800632a:	4a22      	ldr	r2, [pc, #136]	; (80063b4 <USB_ActivateEndpoint+0x2cc>)
 800632c:	4694      	mov	ip, r2
 800632e:	4463      	add	r3, ip
 8006330:	627b      	str	r3, [r7, #36]	; 0x24
 8006332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006334:	881b      	ldrh	r3, [r3, #0]
 8006336:	b29b      	uxth	r3, r3
 8006338:	059b      	lsls	r3, r3, #22
 800633a:	0d9b      	lsrs	r3, r3, #22
 800633c:	b29a      	uxth	r2, r3
 800633e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006340:	801a      	strh	r2, [r3, #0]
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	2b3e      	cmp	r3, #62	; 0x3e
 8006348:	d91a      	bls.n	8006380 <USB_ActivateEndpoint+0x298>
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	095b      	lsrs	r3, r3, #5
 8006350:	66bb      	str	r3, [r7, #104]	; 0x68
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	221f      	movs	r2, #31
 8006358:	4013      	ands	r3, r2
 800635a:	d102      	bne.n	8006362 <USB_ActivateEndpoint+0x27a>
 800635c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800635e:	3b01      	subs	r3, #1
 8006360:	66bb      	str	r3, [r7, #104]	; 0x68
 8006362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006364:	881b      	ldrh	r3, [r3, #0]
 8006366:	b29a      	uxth	r2, r3
 8006368:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800636a:	b29b      	uxth	r3, r3
 800636c:	029b      	lsls	r3, r3, #10
 800636e:	b29b      	uxth	r3, r3
 8006370:	4313      	orrs	r3, r2
 8006372:	b29b      	uxth	r3, r3
 8006374:	4a10      	ldr	r2, [pc, #64]	; (80063b8 <USB_ActivateEndpoint+0x2d0>)
 8006376:	4313      	orrs	r3, r2
 8006378:	b29a      	uxth	r2, r3
 800637a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637c:	801a      	strh	r2, [r3, #0]
 800637e:	e034      	b.n	80063ea <USB_ActivateEndpoint+0x302>
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d119      	bne.n	80063bc <USB_ActivateEndpoint+0x2d4>
 8006388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638a:	881b      	ldrh	r3, [r3, #0]
 800638c:	b29b      	uxth	r3, r3
 800638e:	4a0a      	ldr	r2, [pc, #40]	; (80063b8 <USB_ActivateEndpoint+0x2d0>)
 8006390:	4313      	orrs	r3, r2
 8006392:	b29a      	uxth	r2, r3
 8006394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006396:	801a      	strh	r2, [r3, #0]
 8006398:	e027      	b.n	80063ea <USB_ActivateEndpoint+0x302>
 800639a:	46c0      	nop			; (mov r8, r8)
 800639c:	ffff898f 	.word	0xffff898f
 80063a0:	ffff8080 	.word	0xffff8080
 80063a4:	ffff8f8f 	.word	0xffff8f8f
 80063a8:	ffff80c0 	.word	0xffff80c0
 80063ac:	ffff8fbf 	.word	0xffff8fbf
 80063b0:	00000404 	.word	0x00000404
 80063b4:	00000406 	.word	0x00000406
 80063b8:	ffff8000 	.word	0xffff8000
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	691b      	ldr	r3, [r3, #16]
 80063c0:	085b      	lsrs	r3, r3, #1
 80063c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	2201      	movs	r2, #1
 80063ca:	4013      	ands	r3, r2
 80063cc:	d002      	beq.n	80063d4 <USB_ActivateEndpoint+0x2ec>
 80063ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063d0:	3301      	adds	r3, #1
 80063d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80063d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d6:	881b      	ldrh	r3, [r3, #0]
 80063d8:	b29a      	uxth	r2, r3
 80063da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063dc:	b29b      	uxth	r3, r3
 80063de:	029b      	lsls	r3, r3, #10
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	4313      	orrs	r3, r2
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	18d2      	adds	r2, r2, r3
 80063f4:	2122      	movs	r1, #34	; 0x22
 80063f6:	187b      	adds	r3, r7, r1
 80063f8:	8812      	ldrh	r2, [r2, #0]
 80063fa:	801a      	strh	r2, [r3, #0]
 80063fc:	187b      	adds	r3, r7, r1
 80063fe:	881a      	ldrh	r2, [r3, #0]
 8006400:	2380      	movs	r3, #128	; 0x80
 8006402:	01db      	lsls	r3, r3, #7
 8006404:	4013      	ands	r3, r2
 8006406:	d016      	beq.n	8006436 <USB_ActivateEndpoint+0x34e>
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	18d3      	adds	r3, r2, r3
 8006412:	881b      	ldrh	r3, [r3, #0]
 8006414:	b29a      	uxth	r2, r3
 8006416:	2020      	movs	r0, #32
 8006418:	183b      	adds	r3, r7, r0
 800641a:	49dd      	ldr	r1, [pc, #884]	; (8006790 <USB_ActivateEndpoint+0x6a8>)
 800641c:	400a      	ands	r2, r1
 800641e:	801a      	strh	r2, [r3, #0]
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	18d3      	adds	r3, r2, r3
 800642a:	183a      	adds	r2, r7, r0
 800642c:	8812      	ldrh	r2, [r2, #0]
 800642e:	49d9      	ldr	r1, [pc, #868]	; (8006794 <USB_ActivateEndpoint+0x6ac>)
 8006430:	430a      	orrs	r2, r1
 8006432:	b292      	uxth	r2, r2
 8006434:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d125      	bne.n	800648a <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	18d3      	adds	r3, r2, r3
 8006448:	881b      	ldrh	r3, [r3, #0]
 800644a:	b29a      	uxth	r2, r3
 800644c:	201c      	movs	r0, #28
 800644e:	183b      	adds	r3, r7, r0
 8006450:	49d1      	ldr	r1, [pc, #836]	; (8006798 <USB_ActivateEndpoint+0x6b0>)
 8006452:	400a      	ands	r2, r1
 8006454:	801a      	strh	r2, [r3, #0]
 8006456:	183b      	adds	r3, r7, r0
 8006458:	183a      	adds	r2, r7, r0
 800645a:	8812      	ldrh	r2, [r2, #0]
 800645c:	2180      	movs	r1, #128	; 0x80
 800645e:	0149      	lsls	r1, r1, #5
 8006460:	404a      	eors	r2, r1
 8006462:	801a      	strh	r2, [r3, #0]
 8006464:	183b      	adds	r3, r7, r0
 8006466:	183a      	adds	r2, r7, r0
 8006468:	8812      	ldrh	r2, [r2, #0]
 800646a:	2180      	movs	r1, #128	; 0x80
 800646c:	0189      	lsls	r1, r1, #6
 800646e:	404a      	eors	r2, r1
 8006470:	801a      	strh	r2, [r3, #0]
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	18d3      	adds	r3, r2, r3
 800647c:	183a      	adds	r2, r7, r0
 800647e:	8812      	ldrh	r2, [r2, #0]
 8006480:	49c6      	ldr	r1, [pc, #792]	; (800679c <USB_ActivateEndpoint+0x6b4>)
 8006482:	430a      	orrs	r2, r1
 8006484:	b292      	uxth	r2, r2
 8006486:	801a      	strh	r2, [r3, #0]
 8006488:	e1c2      	b.n	8006810 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	18d3      	adds	r3, r2, r3
 8006494:	881b      	ldrh	r3, [r3, #0]
 8006496:	b29a      	uxth	r2, r3
 8006498:	201e      	movs	r0, #30
 800649a:	183b      	adds	r3, r7, r0
 800649c:	49be      	ldr	r1, [pc, #760]	; (8006798 <USB_ActivateEndpoint+0x6b0>)
 800649e:	400a      	ands	r2, r1
 80064a0:	801a      	strh	r2, [r3, #0]
 80064a2:	183b      	adds	r3, r7, r0
 80064a4:	183a      	adds	r2, r7, r0
 80064a6:	8812      	ldrh	r2, [r2, #0]
 80064a8:	2180      	movs	r1, #128	; 0x80
 80064aa:	0189      	lsls	r1, r1, #6
 80064ac:	404a      	eors	r2, r1
 80064ae:	801a      	strh	r2, [r3, #0]
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	18d3      	adds	r3, r2, r3
 80064ba:	183a      	adds	r2, r7, r0
 80064bc:	8812      	ldrh	r2, [r2, #0]
 80064be:	49b7      	ldr	r1, [pc, #732]	; (800679c <USB_ActivateEndpoint+0x6b4>)
 80064c0:	430a      	orrs	r2, r1
 80064c2:	b292      	uxth	r2, r2
 80064c4:	801a      	strh	r2, [r3, #0]
 80064c6:	e1a3      	b.n	8006810 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	78db      	ldrb	r3, [r3, #3]
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d117      	bne.n	8006500 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	18d3      	adds	r3, r2, r3
 80064da:	881b      	ldrh	r3, [r3, #0]
 80064dc:	b29a      	uxth	r2, r3
 80064de:	2062      	movs	r0, #98	; 0x62
 80064e0:	183b      	adds	r3, r7, r0
 80064e2:	49ab      	ldr	r1, [pc, #684]	; (8006790 <USB_ActivateEndpoint+0x6a8>)
 80064e4:	400a      	ands	r2, r1
 80064e6:	801a      	strh	r2, [r3, #0]
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	18d3      	adds	r3, r2, r3
 80064f2:	183a      	adds	r2, r7, r0
 80064f4:	8812      	ldrh	r2, [r2, #0]
 80064f6:	49aa      	ldr	r1, [pc, #680]	; (80067a0 <USB_ActivateEndpoint+0x6b8>)
 80064f8:	430a      	orrs	r2, r1
 80064fa:	b292      	uxth	r2, r2
 80064fc:	801a      	strh	r2, [r3, #0]
 80064fe:	e016      	b.n	800652e <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	18d3      	adds	r3, r2, r3
 800650a:	881b      	ldrh	r3, [r3, #0]
 800650c:	b29a      	uxth	r2, r3
 800650e:	2064      	movs	r0, #100	; 0x64
 8006510:	183b      	adds	r3, r7, r0
 8006512:	49a4      	ldr	r1, [pc, #656]	; (80067a4 <USB_ActivateEndpoint+0x6bc>)
 8006514:	400a      	ands	r2, r1
 8006516:	801a      	strh	r2, [r3, #0]
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	18d3      	adds	r3, r2, r3
 8006522:	183a      	adds	r2, r7, r0
 8006524:	8812      	ldrh	r2, [r2, #0]
 8006526:	499d      	ldr	r1, [pc, #628]	; (800679c <USB_ActivateEndpoint+0x6b4>)
 8006528:	430a      	orrs	r2, r1
 800652a:	b292      	uxth	r2, r2
 800652c:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2250      	movs	r2, #80	; 0x50
 8006536:	5a9b      	ldrh	r3, [r3, r2]
 8006538:	b29b      	uxth	r3, r3
 800653a:	001a      	movs	r2, r3
 800653c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800653e:	189b      	adds	r3, r3, r2
 8006540:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	00da      	lsls	r2, r3, #3
 8006548:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800654a:	18d3      	adds	r3, r2, r3
 800654c:	2280      	movs	r2, #128	; 0x80
 800654e:	00d2      	lsls	r2, r2, #3
 8006550:	4694      	mov	ip, r2
 8006552:	4463      	add	r3, ip
 8006554:	65bb      	str	r3, [r7, #88]	; 0x58
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	891b      	ldrh	r3, [r3, #8]
 800655a:	085b      	lsrs	r3, r3, #1
 800655c:	b29b      	uxth	r3, r3
 800655e:	18db      	adds	r3, r3, r3
 8006560:	b29a      	uxth	r2, r3
 8006562:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006564:	801a      	strh	r2, [r3, #0]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	657b      	str	r3, [r7, #84]	; 0x54
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2250      	movs	r2, #80	; 0x50
 800656e:	5a9b      	ldrh	r3, [r3, r2]
 8006570:	b29b      	uxth	r3, r3
 8006572:	001a      	movs	r2, r3
 8006574:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006576:	189b      	adds	r3, r3, r2
 8006578:	657b      	str	r3, [r7, #84]	; 0x54
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	00da      	lsls	r2, r3, #3
 8006580:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006582:	18d3      	adds	r3, r2, r3
 8006584:	4a88      	ldr	r2, [pc, #544]	; (80067a8 <USB_ActivateEndpoint+0x6c0>)
 8006586:	4694      	mov	ip, r2
 8006588:	4463      	add	r3, ip
 800658a:	653b      	str	r3, [r7, #80]	; 0x50
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	895b      	ldrh	r3, [r3, #10]
 8006590:	085b      	lsrs	r3, r3, #1
 8006592:	b29b      	uxth	r3, r3
 8006594:	18db      	adds	r3, r3, r3
 8006596:	b29a      	uxth	r2, r3
 8006598:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800659a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	785b      	ldrb	r3, [r3, #1]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d000      	beq.n	80065a6 <USB_ActivateEndpoint+0x4be>
 80065a4:	e087      	b.n	80066b6 <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	18d2      	adds	r2, r2, r3
 80065b0:	2140      	movs	r1, #64	; 0x40
 80065b2:	187b      	adds	r3, r7, r1
 80065b4:	8812      	ldrh	r2, [r2, #0]
 80065b6:	801a      	strh	r2, [r3, #0]
 80065b8:	187b      	adds	r3, r7, r1
 80065ba:	881a      	ldrh	r2, [r3, #0]
 80065bc:	2380      	movs	r3, #128	; 0x80
 80065be:	01db      	lsls	r3, r3, #7
 80065c0:	4013      	ands	r3, r2
 80065c2:	d016      	beq.n	80065f2 <USB_ActivateEndpoint+0x50a>
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	18d3      	adds	r3, r2, r3
 80065ce:	881b      	ldrh	r3, [r3, #0]
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	203e      	movs	r0, #62	; 0x3e
 80065d4:	183b      	adds	r3, r7, r0
 80065d6:	496e      	ldr	r1, [pc, #440]	; (8006790 <USB_ActivateEndpoint+0x6a8>)
 80065d8:	400a      	ands	r2, r1
 80065da:	801a      	strh	r2, [r3, #0]
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	18d3      	adds	r3, r2, r3
 80065e6:	183a      	adds	r2, r7, r0
 80065e8:	8812      	ldrh	r2, [r2, #0]
 80065ea:	496a      	ldr	r1, [pc, #424]	; (8006794 <USB_ActivateEndpoint+0x6ac>)
 80065ec:	430a      	orrs	r2, r1
 80065ee:	b292      	uxth	r2, r2
 80065f0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	18d2      	adds	r2, r2, r3
 80065fc:	213c      	movs	r1, #60	; 0x3c
 80065fe:	187b      	adds	r3, r7, r1
 8006600:	8812      	ldrh	r2, [r2, #0]
 8006602:	801a      	strh	r2, [r3, #0]
 8006604:	187b      	adds	r3, r7, r1
 8006606:	881b      	ldrh	r3, [r3, #0]
 8006608:	2240      	movs	r2, #64	; 0x40
 800660a:	4013      	ands	r3, r2
 800660c:	d016      	beq.n	800663c <USB_ActivateEndpoint+0x554>
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	18d3      	adds	r3, r2, r3
 8006618:	881b      	ldrh	r3, [r3, #0]
 800661a:	b29a      	uxth	r2, r3
 800661c:	203a      	movs	r0, #58	; 0x3a
 800661e:	183b      	adds	r3, r7, r0
 8006620:	495b      	ldr	r1, [pc, #364]	; (8006790 <USB_ActivateEndpoint+0x6a8>)
 8006622:	400a      	ands	r2, r1
 8006624:	801a      	strh	r2, [r3, #0]
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	18d3      	adds	r3, r2, r3
 8006630:	183a      	adds	r2, r7, r0
 8006632:	8812      	ldrh	r2, [r2, #0]
 8006634:	495d      	ldr	r1, [pc, #372]	; (80067ac <USB_ActivateEndpoint+0x6c4>)
 8006636:	430a      	orrs	r2, r1
 8006638:	b292      	uxth	r2, r2
 800663a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	18d3      	adds	r3, r2, r3
 8006646:	881b      	ldrh	r3, [r3, #0]
 8006648:	b29a      	uxth	r2, r3
 800664a:	2038      	movs	r0, #56	; 0x38
 800664c:	183b      	adds	r3, r7, r0
 800664e:	4952      	ldr	r1, [pc, #328]	; (8006798 <USB_ActivateEndpoint+0x6b0>)
 8006650:	400a      	ands	r2, r1
 8006652:	801a      	strh	r2, [r3, #0]
 8006654:	183b      	adds	r3, r7, r0
 8006656:	183a      	adds	r2, r7, r0
 8006658:	8812      	ldrh	r2, [r2, #0]
 800665a:	2180      	movs	r1, #128	; 0x80
 800665c:	0149      	lsls	r1, r1, #5
 800665e:	404a      	eors	r2, r1
 8006660:	801a      	strh	r2, [r3, #0]
 8006662:	183b      	adds	r3, r7, r0
 8006664:	183a      	adds	r2, r7, r0
 8006666:	8812      	ldrh	r2, [r2, #0]
 8006668:	2180      	movs	r1, #128	; 0x80
 800666a:	0189      	lsls	r1, r1, #6
 800666c:	404a      	eors	r2, r1
 800666e:	801a      	strh	r2, [r3, #0]
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	18d3      	adds	r3, r2, r3
 800667a:	183a      	adds	r2, r7, r0
 800667c:	8812      	ldrh	r2, [r2, #0]
 800667e:	4947      	ldr	r1, [pc, #284]	; (800679c <USB_ActivateEndpoint+0x6b4>)
 8006680:	430a      	orrs	r2, r1
 8006682:	b292      	uxth	r2, r2
 8006684:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	18d3      	adds	r3, r2, r3
 8006690:	881b      	ldrh	r3, [r3, #0]
 8006692:	b29a      	uxth	r2, r3
 8006694:	2036      	movs	r0, #54	; 0x36
 8006696:	183b      	adds	r3, r7, r0
 8006698:	4945      	ldr	r1, [pc, #276]	; (80067b0 <USB_ActivateEndpoint+0x6c8>)
 800669a:	400a      	ands	r2, r1
 800669c:	801a      	strh	r2, [r3, #0]
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	18d3      	adds	r3, r2, r3
 80066a8:	183a      	adds	r2, r7, r0
 80066aa:	8812      	ldrh	r2, [r2, #0]
 80066ac:	493b      	ldr	r1, [pc, #236]	; (800679c <USB_ActivateEndpoint+0x6b4>)
 80066ae:	430a      	orrs	r2, r1
 80066b0:	b292      	uxth	r2, r2
 80066b2:	801a      	strh	r2, [r3, #0]
 80066b4:	e0ac      	b.n	8006810 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	18d2      	adds	r2, r2, r3
 80066c0:	214e      	movs	r1, #78	; 0x4e
 80066c2:	187b      	adds	r3, r7, r1
 80066c4:	8812      	ldrh	r2, [r2, #0]
 80066c6:	801a      	strh	r2, [r3, #0]
 80066c8:	187b      	adds	r3, r7, r1
 80066ca:	881a      	ldrh	r2, [r3, #0]
 80066cc:	2380      	movs	r3, #128	; 0x80
 80066ce:	01db      	lsls	r3, r3, #7
 80066d0:	4013      	ands	r3, r2
 80066d2:	d016      	beq.n	8006702 <USB_ActivateEndpoint+0x61a>
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	18d3      	adds	r3, r2, r3
 80066de:	881b      	ldrh	r3, [r3, #0]
 80066e0:	b29a      	uxth	r2, r3
 80066e2:	204c      	movs	r0, #76	; 0x4c
 80066e4:	183b      	adds	r3, r7, r0
 80066e6:	492a      	ldr	r1, [pc, #168]	; (8006790 <USB_ActivateEndpoint+0x6a8>)
 80066e8:	400a      	ands	r2, r1
 80066ea:	801a      	strh	r2, [r3, #0]
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	18d3      	adds	r3, r2, r3
 80066f6:	183a      	adds	r2, r7, r0
 80066f8:	8812      	ldrh	r2, [r2, #0]
 80066fa:	4926      	ldr	r1, [pc, #152]	; (8006794 <USB_ActivateEndpoint+0x6ac>)
 80066fc:	430a      	orrs	r2, r1
 80066fe:	b292      	uxth	r2, r2
 8006700:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	18d2      	adds	r2, r2, r3
 800670c:	214a      	movs	r1, #74	; 0x4a
 800670e:	187b      	adds	r3, r7, r1
 8006710:	8812      	ldrh	r2, [r2, #0]
 8006712:	801a      	strh	r2, [r3, #0]
 8006714:	187b      	adds	r3, r7, r1
 8006716:	881b      	ldrh	r3, [r3, #0]
 8006718:	2240      	movs	r2, #64	; 0x40
 800671a:	4013      	ands	r3, r2
 800671c:	d016      	beq.n	800674c <USB_ActivateEndpoint+0x664>
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	18d3      	adds	r3, r2, r3
 8006728:	881b      	ldrh	r3, [r3, #0]
 800672a:	b29a      	uxth	r2, r3
 800672c:	2048      	movs	r0, #72	; 0x48
 800672e:	183b      	adds	r3, r7, r0
 8006730:	4917      	ldr	r1, [pc, #92]	; (8006790 <USB_ActivateEndpoint+0x6a8>)
 8006732:	400a      	ands	r2, r1
 8006734:	801a      	strh	r2, [r3, #0]
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	18d3      	adds	r3, r2, r3
 8006740:	183a      	adds	r2, r7, r0
 8006742:	8812      	ldrh	r2, [r2, #0]
 8006744:	4919      	ldr	r1, [pc, #100]	; (80067ac <USB_ActivateEndpoint+0x6c4>)
 8006746:	430a      	orrs	r2, r1
 8006748:	b292      	uxth	r2, r2
 800674a:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	78db      	ldrb	r3, [r3, #3]
 8006750:	2b01      	cmp	r3, #1
 8006752:	d02f      	beq.n	80067b4 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	18d3      	adds	r3, r2, r3
 800675e:	881b      	ldrh	r3, [r3, #0]
 8006760:	b29a      	uxth	r2, r3
 8006762:	2044      	movs	r0, #68	; 0x44
 8006764:	183b      	adds	r3, r7, r0
 8006766:	4912      	ldr	r1, [pc, #72]	; (80067b0 <USB_ActivateEndpoint+0x6c8>)
 8006768:	400a      	ands	r2, r1
 800676a:	801a      	strh	r2, [r3, #0]
 800676c:	183b      	adds	r3, r7, r0
 800676e:	183a      	adds	r2, r7, r0
 8006770:	8812      	ldrh	r2, [r2, #0]
 8006772:	2120      	movs	r1, #32
 8006774:	404a      	eors	r2, r1
 8006776:	801a      	strh	r2, [r3, #0]
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	18d3      	adds	r3, r2, r3
 8006782:	183a      	adds	r2, r7, r0
 8006784:	8812      	ldrh	r2, [r2, #0]
 8006786:	4905      	ldr	r1, [pc, #20]	; (800679c <USB_ActivateEndpoint+0x6b4>)
 8006788:	430a      	orrs	r2, r1
 800678a:	b292      	uxth	r2, r2
 800678c:	801a      	strh	r2, [r3, #0]
 800678e:	e028      	b.n	80067e2 <USB_ActivateEndpoint+0x6fa>
 8006790:	ffff8f8f 	.word	0xffff8f8f
 8006794:	ffffc080 	.word	0xffffc080
 8006798:	ffffbf8f 	.word	0xffffbf8f
 800679c:	ffff8080 	.word	0xffff8080
 80067a0:	ffff8180 	.word	0xffff8180
 80067a4:	ffff8e8f 	.word	0xffff8e8f
 80067a8:	00000404 	.word	0x00000404
 80067ac:	ffff80c0 	.word	0xffff80c0
 80067b0:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	18d3      	adds	r3, r2, r3
 80067be:	881b      	ldrh	r3, [r3, #0]
 80067c0:	b29a      	uxth	r2, r3
 80067c2:	2046      	movs	r0, #70	; 0x46
 80067c4:	183b      	adds	r3, r7, r0
 80067c6:	4916      	ldr	r1, [pc, #88]	; (8006820 <USB_ActivateEndpoint+0x738>)
 80067c8:	400a      	ands	r2, r1
 80067ca:	801a      	strh	r2, [r3, #0]
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	18d3      	adds	r3, r2, r3
 80067d6:	183a      	adds	r2, r7, r0
 80067d8:	8812      	ldrh	r2, [r2, #0]
 80067da:	4912      	ldr	r1, [pc, #72]	; (8006824 <USB_ActivateEndpoint+0x73c>)
 80067dc:	430a      	orrs	r2, r1
 80067de:	b292      	uxth	r2, r2
 80067e0:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	18d3      	adds	r3, r2, r3
 80067ec:	881b      	ldrh	r3, [r3, #0]
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	2042      	movs	r0, #66	; 0x42
 80067f2:	183b      	adds	r3, r7, r0
 80067f4:	490c      	ldr	r1, [pc, #48]	; (8006828 <USB_ActivateEndpoint+0x740>)
 80067f6:	400a      	ands	r2, r1
 80067f8:	801a      	strh	r2, [r3, #0]
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	18d3      	adds	r3, r2, r3
 8006804:	183a      	adds	r2, r7, r0
 8006806:	8812      	ldrh	r2, [r2, #0]
 8006808:	4906      	ldr	r1, [pc, #24]	; (8006824 <USB_ActivateEndpoint+0x73c>)
 800680a:	430a      	orrs	r2, r1
 800680c:	b292      	uxth	r2, r2
 800680e:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006810:	236f      	movs	r3, #111	; 0x6f
 8006812:	18fb      	adds	r3, r7, r3
 8006814:	781b      	ldrb	r3, [r3, #0]
}
 8006816:	0018      	movs	r0, r3
 8006818:	46bd      	mov	sp, r7
 800681a:	b01c      	add	sp, #112	; 0x70
 800681c:	bd80      	pop	{r7, pc}
 800681e:	46c0      	nop			; (mov r8, r8)
 8006820:	ffff8fbf 	.word	0xffff8fbf
 8006824:	ffff8080 	.word	0xffff8080
 8006828:	ffffbf8f 	.word	0xffffbf8f

0800682c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b08c      	sub	sp, #48	; 0x30
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	7b1b      	ldrb	r3, [r3, #12]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d000      	beq.n	8006840 <USB_DeactivateEndpoint+0x14>
 800683e:	e07e      	b.n	800693e <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	785b      	ldrb	r3, [r3, #1]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d03c      	beq.n	80068c2 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	18d2      	adds	r2, r2, r3
 8006852:	210c      	movs	r1, #12
 8006854:	187b      	adds	r3, r7, r1
 8006856:	8812      	ldrh	r2, [r2, #0]
 8006858:	801a      	strh	r2, [r3, #0]
 800685a:	187b      	adds	r3, r7, r1
 800685c:	881b      	ldrh	r3, [r3, #0]
 800685e:	2240      	movs	r2, #64	; 0x40
 8006860:	4013      	ands	r3, r2
 8006862:	d016      	beq.n	8006892 <USB_DeactivateEndpoint+0x66>
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	18d3      	adds	r3, r2, r3
 800686e:	881b      	ldrh	r3, [r3, #0]
 8006870:	b29a      	uxth	r2, r3
 8006872:	200a      	movs	r0, #10
 8006874:	183b      	adds	r3, r7, r0
 8006876:	49c7      	ldr	r1, [pc, #796]	; (8006b94 <USB_DeactivateEndpoint+0x368>)
 8006878:	400a      	ands	r2, r1
 800687a:	801a      	strh	r2, [r3, #0]
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	18d3      	adds	r3, r2, r3
 8006886:	183a      	adds	r2, r7, r0
 8006888:	8812      	ldrh	r2, [r2, #0]
 800688a:	49c3      	ldr	r1, [pc, #780]	; (8006b98 <USB_DeactivateEndpoint+0x36c>)
 800688c:	430a      	orrs	r2, r1
 800688e:	b292      	uxth	r2, r2
 8006890:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	18d3      	adds	r3, r2, r3
 800689c:	881b      	ldrh	r3, [r3, #0]
 800689e:	b29a      	uxth	r2, r3
 80068a0:	2008      	movs	r0, #8
 80068a2:	183b      	adds	r3, r7, r0
 80068a4:	49bd      	ldr	r1, [pc, #756]	; (8006b9c <USB_DeactivateEndpoint+0x370>)
 80068a6:	400a      	ands	r2, r1
 80068a8:	801a      	strh	r2, [r3, #0]
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	18d3      	adds	r3, r2, r3
 80068b4:	183a      	adds	r2, r7, r0
 80068b6:	8812      	ldrh	r2, [r2, #0]
 80068b8:	49b9      	ldr	r1, [pc, #740]	; (8006ba0 <USB_DeactivateEndpoint+0x374>)
 80068ba:	430a      	orrs	r2, r1
 80068bc:	b292      	uxth	r2, r2
 80068be:	801a      	strh	r2, [r3, #0]
 80068c0:	e163      	b.n	8006b8a <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	18d2      	adds	r2, r2, r3
 80068cc:	2112      	movs	r1, #18
 80068ce:	187b      	adds	r3, r7, r1
 80068d0:	8812      	ldrh	r2, [r2, #0]
 80068d2:	801a      	strh	r2, [r3, #0]
 80068d4:	187b      	adds	r3, r7, r1
 80068d6:	881a      	ldrh	r2, [r3, #0]
 80068d8:	2380      	movs	r3, #128	; 0x80
 80068da:	01db      	lsls	r3, r3, #7
 80068dc:	4013      	ands	r3, r2
 80068de:	d016      	beq.n	800690e <USB_DeactivateEndpoint+0xe2>
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	18d3      	adds	r3, r2, r3
 80068ea:	881b      	ldrh	r3, [r3, #0]
 80068ec:	b29a      	uxth	r2, r3
 80068ee:	2010      	movs	r0, #16
 80068f0:	183b      	adds	r3, r7, r0
 80068f2:	49a8      	ldr	r1, [pc, #672]	; (8006b94 <USB_DeactivateEndpoint+0x368>)
 80068f4:	400a      	ands	r2, r1
 80068f6:	801a      	strh	r2, [r3, #0]
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	18d3      	adds	r3, r2, r3
 8006902:	183a      	adds	r2, r7, r0
 8006904:	8812      	ldrh	r2, [r2, #0]
 8006906:	49a7      	ldr	r1, [pc, #668]	; (8006ba4 <USB_DeactivateEndpoint+0x378>)
 8006908:	430a      	orrs	r2, r1
 800690a:	b292      	uxth	r2, r2
 800690c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	18d3      	adds	r3, r2, r3
 8006918:	881b      	ldrh	r3, [r3, #0]
 800691a:	b29a      	uxth	r2, r3
 800691c:	200e      	movs	r0, #14
 800691e:	183b      	adds	r3, r7, r0
 8006920:	49a1      	ldr	r1, [pc, #644]	; (8006ba8 <USB_DeactivateEndpoint+0x37c>)
 8006922:	400a      	ands	r2, r1
 8006924:	801a      	strh	r2, [r3, #0]
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	18d3      	adds	r3, r2, r3
 8006930:	183a      	adds	r2, r7, r0
 8006932:	8812      	ldrh	r2, [r2, #0]
 8006934:	499a      	ldr	r1, [pc, #616]	; (8006ba0 <USB_DeactivateEndpoint+0x374>)
 8006936:	430a      	orrs	r2, r1
 8006938:	b292      	uxth	r2, r2
 800693a:	801a      	strh	r2, [r3, #0]
 800693c:	e125      	b.n	8006b8a <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	785b      	ldrb	r3, [r3, #1]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d000      	beq.n	8006948 <USB_DeactivateEndpoint+0x11c>
 8006946:	e090      	b.n	8006a6a <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	18d2      	adds	r2, r2, r3
 8006952:	2120      	movs	r1, #32
 8006954:	187b      	adds	r3, r7, r1
 8006956:	8812      	ldrh	r2, [r2, #0]
 8006958:	801a      	strh	r2, [r3, #0]
 800695a:	187b      	adds	r3, r7, r1
 800695c:	881a      	ldrh	r2, [r3, #0]
 800695e:	2380      	movs	r3, #128	; 0x80
 8006960:	01db      	lsls	r3, r3, #7
 8006962:	4013      	ands	r3, r2
 8006964:	d016      	beq.n	8006994 <USB_DeactivateEndpoint+0x168>
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	18d3      	adds	r3, r2, r3
 8006970:	881b      	ldrh	r3, [r3, #0]
 8006972:	b29a      	uxth	r2, r3
 8006974:	201e      	movs	r0, #30
 8006976:	183b      	adds	r3, r7, r0
 8006978:	4986      	ldr	r1, [pc, #536]	; (8006b94 <USB_DeactivateEndpoint+0x368>)
 800697a:	400a      	ands	r2, r1
 800697c:	801a      	strh	r2, [r3, #0]
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	18d3      	adds	r3, r2, r3
 8006988:	183a      	adds	r2, r7, r0
 800698a:	8812      	ldrh	r2, [r2, #0]
 800698c:	4985      	ldr	r1, [pc, #532]	; (8006ba4 <USB_DeactivateEndpoint+0x378>)
 800698e:	430a      	orrs	r2, r1
 8006990:	b292      	uxth	r2, r2
 8006992:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	18d2      	adds	r2, r2, r3
 800699e:	211c      	movs	r1, #28
 80069a0:	187b      	adds	r3, r7, r1
 80069a2:	8812      	ldrh	r2, [r2, #0]
 80069a4:	801a      	strh	r2, [r3, #0]
 80069a6:	187b      	adds	r3, r7, r1
 80069a8:	881b      	ldrh	r3, [r3, #0]
 80069aa:	2240      	movs	r2, #64	; 0x40
 80069ac:	4013      	ands	r3, r2
 80069ae:	d016      	beq.n	80069de <USB_DeactivateEndpoint+0x1b2>
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	18d3      	adds	r3, r2, r3
 80069ba:	881b      	ldrh	r3, [r3, #0]
 80069bc:	b29a      	uxth	r2, r3
 80069be:	201a      	movs	r0, #26
 80069c0:	183b      	adds	r3, r7, r0
 80069c2:	4974      	ldr	r1, [pc, #464]	; (8006b94 <USB_DeactivateEndpoint+0x368>)
 80069c4:	400a      	ands	r2, r1
 80069c6:	801a      	strh	r2, [r3, #0]
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	18d3      	adds	r3, r2, r3
 80069d2:	183a      	adds	r2, r7, r0
 80069d4:	8812      	ldrh	r2, [r2, #0]
 80069d6:	4970      	ldr	r1, [pc, #448]	; (8006b98 <USB_DeactivateEndpoint+0x36c>)
 80069d8:	430a      	orrs	r2, r1
 80069da:	b292      	uxth	r2, r2
 80069dc:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	18d3      	adds	r3, r2, r3
 80069e8:	881b      	ldrh	r3, [r3, #0]
 80069ea:	b29a      	uxth	r2, r3
 80069ec:	2018      	movs	r0, #24
 80069ee:	183b      	adds	r3, r7, r0
 80069f0:	4968      	ldr	r1, [pc, #416]	; (8006b94 <USB_DeactivateEndpoint+0x368>)
 80069f2:	400a      	ands	r2, r1
 80069f4:	801a      	strh	r2, [r3, #0]
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	18d3      	adds	r3, r2, r3
 8006a00:	183a      	adds	r2, r7, r0
 8006a02:	8812      	ldrh	r2, [r2, #0]
 8006a04:	4964      	ldr	r1, [pc, #400]	; (8006b98 <USB_DeactivateEndpoint+0x36c>)
 8006a06:	430a      	orrs	r2, r1
 8006a08:	b292      	uxth	r2, r2
 8006a0a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	18d3      	adds	r3, r2, r3
 8006a16:	881b      	ldrh	r3, [r3, #0]
 8006a18:	b29a      	uxth	r2, r3
 8006a1a:	2016      	movs	r0, #22
 8006a1c:	183b      	adds	r3, r7, r0
 8006a1e:	4962      	ldr	r1, [pc, #392]	; (8006ba8 <USB_DeactivateEndpoint+0x37c>)
 8006a20:	400a      	ands	r2, r1
 8006a22:	801a      	strh	r2, [r3, #0]
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	18d3      	adds	r3, r2, r3
 8006a2e:	183a      	adds	r2, r7, r0
 8006a30:	8812      	ldrh	r2, [r2, #0]
 8006a32:	495b      	ldr	r1, [pc, #364]	; (8006ba0 <USB_DeactivateEndpoint+0x374>)
 8006a34:	430a      	orrs	r2, r1
 8006a36:	b292      	uxth	r2, r2
 8006a38:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	18d3      	adds	r3, r2, r3
 8006a44:	881b      	ldrh	r3, [r3, #0]
 8006a46:	b29a      	uxth	r2, r3
 8006a48:	2014      	movs	r0, #20
 8006a4a:	183b      	adds	r3, r7, r0
 8006a4c:	4953      	ldr	r1, [pc, #332]	; (8006b9c <USB_DeactivateEndpoint+0x370>)
 8006a4e:	400a      	ands	r2, r1
 8006a50:	801a      	strh	r2, [r3, #0]
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	18d3      	adds	r3, r2, r3
 8006a5c:	183a      	adds	r2, r7, r0
 8006a5e:	8812      	ldrh	r2, [r2, #0]
 8006a60:	494f      	ldr	r1, [pc, #316]	; (8006ba0 <USB_DeactivateEndpoint+0x374>)
 8006a62:	430a      	orrs	r2, r1
 8006a64:	b292      	uxth	r2, r2
 8006a66:	801a      	strh	r2, [r3, #0]
 8006a68:	e08f      	b.n	8006b8a <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	18d2      	adds	r2, r2, r3
 8006a74:	212e      	movs	r1, #46	; 0x2e
 8006a76:	187b      	adds	r3, r7, r1
 8006a78:	8812      	ldrh	r2, [r2, #0]
 8006a7a:	801a      	strh	r2, [r3, #0]
 8006a7c:	187b      	adds	r3, r7, r1
 8006a7e:	881a      	ldrh	r2, [r3, #0]
 8006a80:	2380      	movs	r3, #128	; 0x80
 8006a82:	01db      	lsls	r3, r3, #7
 8006a84:	4013      	ands	r3, r2
 8006a86:	d016      	beq.n	8006ab6 <USB_DeactivateEndpoint+0x28a>
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	18d3      	adds	r3, r2, r3
 8006a92:	881b      	ldrh	r3, [r3, #0]
 8006a94:	b29a      	uxth	r2, r3
 8006a96:	202c      	movs	r0, #44	; 0x2c
 8006a98:	183b      	adds	r3, r7, r0
 8006a9a:	493e      	ldr	r1, [pc, #248]	; (8006b94 <USB_DeactivateEndpoint+0x368>)
 8006a9c:	400a      	ands	r2, r1
 8006a9e:	801a      	strh	r2, [r3, #0]
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	18d3      	adds	r3, r2, r3
 8006aaa:	183a      	adds	r2, r7, r0
 8006aac:	8812      	ldrh	r2, [r2, #0]
 8006aae:	493d      	ldr	r1, [pc, #244]	; (8006ba4 <USB_DeactivateEndpoint+0x378>)
 8006ab0:	430a      	orrs	r2, r1
 8006ab2:	b292      	uxth	r2, r2
 8006ab4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	18d2      	adds	r2, r2, r3
 8006ac0:	212a      	movs	r1, #42	; 0x2a
 8006ac2:	187b      	adds	r3, r7, r1
 8006ac4:	8812      	ldrh	r2, [r2, #0]
 8006ac6:	801a      	strh	r2, [r3, #0]
 8006ac8:	187b      	adds	r3, r7, r1
 8006aca:	881b      	ldrh	r3, [r3, #0]
 8006acc:	2240      	movs	r2, #64	; 0x40
 8006ace:	4013      	ands	r3, r2
 8006ad0:	d016      	beq.n	8006b00 <USB_DeactivateEndpoint+0x2d4>
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	18d3      	adds	r3, r2, r3
 8006adc:	881b      	ldrh	r3, [r3, #0]
 8006ade:	b29a      	uxth	r2, r3
 8006ae0:	2028      	movs	r0, #40	; 0x28
 8006ae2:	183b      	adds	r3, r7, r0
 8006ae4:	492b      	ldr	r1, [pc, #172]	; (8006b94 <USB_DeactivateEndpoint+0x368>)
 8006ae6:	400a      	ands	r2, r1
 8006ae8:	801a      	strh	r2, [r3, #0]
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	18d3      	adds	r3, r2, r3
 8006af4:	183a      	adds	r2, r7, r0
 8006af6:	8812      	ldrh	r2, [r2, #0]
 8006af8:	4927      	ldr	r1, [pc, #156]	; (8006b98 <USB_DeactivateEndpoint+0x36c>)
 8006afa:	430a      	orrs	r2, r1
 8006afc:	b292      	uxth	r2, r2
 8006afe:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	18d3      	adds	r3, r2, r3
 8006b0a:	881b      	ldrh	r3, [r3, #0]
 8006b0c:	b29a      	uxth	r2, r3
 8006b0e:	2026      	movs	r0, #38	; 0x26
 8006b10:	183b      	adds	r3, r7, r0
 8006b12:	4920      	ldr	r1, [pc, #128]	; (8006b94 <USB_DeactivateEndpoint+0x368>)
 8006b14:	400a      	ands	r2, r1
 8006b16:	801a      	strh	r2, [r3, #0]
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	18d3      	adds	r3, r2, r3
 8006b22:	183a      	adds	r2, r7, r0
 8006b24:	8812      	ldrh	r2, [r2, #0]
 8006b26:	491f      	ldr	r1, [pc, #124]	; (8006ba4 <USB_DeactivateEndpoint+0x378>)
 8006b28:	430a      	orrs	r2, r1
 8006b2a:	b292      	uxth	r2, r2
 8006b2c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	18d3      	adds	r3, r2, r3
 8006b38:	881b      	ldrh	r3, [r3, #0]
 8006b3a:	b29a      	uxth	r2, r3
 8006b3c:	2024      	movs	r0, #36	; 0x24
 8006b3e:	183b      	adds	r3, r7, r0
 8006b40:	4916      	ldr	r1, [pc, #88]	; (8006b9c <USB_DeactivateEndpoint+0x370>)
 8006b42:	400a      	ands	r2, r1
 8006b44:	801a      	strh	r2, [r3, #0]
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	18d3      	adds	r3, r2, r3
 8006b50:	183a      	adds	r2, r7, r0
 8006b52:	8812      	ldrh	r2, [r2, #0]
 8006b54:	4912      	ldr	r1, [pc, #72]	; (8006ba0 <USB_DeactivateEndpoint+0x374>)
 8006b56:	430a      	orrs	r2, r1
 8006b58:	b292      	uxth	r2, r2
 8006b5a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	18d3      	adds	r3, r2, r3
 8006b66:	881b      	ldrh	r3, [r3, #0]
 8006b68:	b29a      	uxth	r2, r3
 8006b6a:	2022      	movs	r0, #34	; 0x22
 8006b6c:	183b      	adds	r3, r7, r0
 8006b6e:	490e      	ldr	r1, [pc, #56]	; (8006ba8 <USB_DeactivateEndpoint+0x37c>)
 8006b70:	400a      	ands	r2, r1
 8006b72:	801a      	strh	r2, [r3, #0]
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	18d3      	adds	r3, r2, r3
 8006b7e:	183a      	adds	r2, r7, r0
 8006b80:	8812      	ldrh	r2, [r2, #0]
 8006b82:	4907      	ldr	r1, [pc, #28]	; (8006ba0 <USB_DeactivateEndpoint+0x374>)
 8006b84:	430a      	orrs	r2, r1
 8006b86:	b292      	uxth	r2, r2
 8006b88:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006b8a:	2300      	movs	r3, #0
}
 8006b8c:	0018      	movs	r0, r3
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	b00c      	add	sp, #48	; 0x30
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	ffff8f8f 	.word	0xffff8f8f
 8006b98:	ffff80c0 	.word	0xffff80c0
 8006b9c:	ffff8fbf 	.word	0xffff8fbf
 8006ba0:	ffff8080 	.word	0xffff8080
 8006ba4:	ffffc080 	.word	0xffffc080
 8006ba8:	ffffbf8f 	.word	0xffffbf8f

08006bac <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006bac:	b590      	push	{r4, r7, lr}
 8006bae:	b0c3      	sub	sp, #268	; 0x10c
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	785b      	ldrb	r3, [r3, #1]
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d001      	beq.n	8006bc2 <USB_EPStartXfer+0x16>
 8006bbe:	f000 fd2d 	bl	800761c <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	699a      	ldr	r2, [r3, #24]
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d905      	bls.n	8006bda <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	1d7a      	adds	r2, r7, #5
 8006bd4:	32ff      	adds	r2, #255	; 0xff
 8006bd6:	6013      	str	r3, [r2, #0]
 8006bd8:	e004      	b.n	8006be4 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	1d7a      	adds	r2, r7, #5
 8006be0:	32ff      	adds	r2, #255	; 0xff
 8006be2:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	7b1b      	ldrb	r3, [r3, #12]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d125      	bne.n	8006c38 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	6959      	ldr	r1, [r3, #20]
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	88da      	ldrh	r2, [r3, #6]
 8006bf4:	1d7b      	adds	r3, r7, #5
 8006bf6:	33ff      	adds	r3, #255	; 0xff
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f001 fa47 	bl	8008090 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	613b      	str	r3, [r7, #16]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2250      	movs	r2, #80	; 0x50
 8006c0a:	5a9b      	ldrh	r3, [r3, r2]
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	001a      	movs	r2, r3
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	189b      	adds	r3, r3, r2
 8006c14:	613b      	str	r3, [r7, #16]
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	00da      	lsls	r2, r3, #3
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	18d3      	adds	r3, r2, r3
 8006c20:	4ad7      	ldr	r2, [pc, #860]	; (8006f80 <USB_EPStartXfer+0x3d4>)
 8006c22:	4694      	mov	ip, r2
 8006c24:	4463      	add	r3, ip
 8006c26:	60fb      	str	r3, [r7, #12]
 8006c28:	1d7b      	adds	r3, r7, #5
 8006c2a:	33ff      	adds	r3, #255	; 0xff
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	b29a      	uxth	r2, r3
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	801a      	strh	r2, [r3, #0]
 8006c34:	f000 fccd 	bl	80075d2 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	78db      	ldrb	r3, [r3, #3]
 8006c3c:	2b02      	cmp	r3, #2
 8006c3e:	d000      	beq.n	8006c42 <USB_EPStartXfer+0x96>
 8006c40:	e362      	b.n	8007308 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	6a1a      	ldr	r2, [r3, #32]
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d800      	bhi.n	8006c50 <USB_EPStartXfer+0xa4>
 8006c4e:	e309      	b.n	8007264 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	18d3      	adds	r3, r2, r3
 8006c5a:	881b      	ldrh	r3, [r3, #0]
 8006c5c:	b29a      	uxth	r2, r3
 8006c5e:	2056      	movs	r0, #86	; 0x56
 8006c60:	183b      	adds	r3, r7, r0
 8006c62:	49c8      	ldr	r1, [pc, #800]	; (8006f84 <USB_EPStartXfer+0x3d8>)
 8006c64:	400a      	ands	r2, r1
 8006c66:	801a      	strh	r2, [r3, #0]
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	18d3      	adds	r3, r2, r3
 8006c72:	183a      	adds	r2, r7, r0
 8006c74:	8812      	ldrh	r2, [r2, #0]
 8006c76:	49c4      	ldr	r1, [pc, #784]	; (8006f88 <USB_EPStartXfer+0x3dc>)
 8006c78:	430a      	orrs	r2, r1
 8006c7a:	b292      	uxth	r2, r2
 8006c7c:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	6a1a      	ldr	r2, [r3, #32]
 8006c82:	1d7b      	adds	r3, r7, #5
 8006c84:	33ff      	adds	r3, #255	; 0xff
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	1ad2      	subs	r2, r2, r3
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	18d3      	adds	r3, r2, r3
 8006c98:	881b      	ldrh	r3, [r3, #0]
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	001a      	movs	r2, r3
 8006c9e:	2340      	movs	r3, #64	; 0x40
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	d100      	bne.n	8006ca6 <USB_EPStartXfer+0xfa>
 8006ca4:	e176      	b.n	8006f94 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	633b      	str	r3, [r7, #48]	; 0x30
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	785b      	ldrb	r3, [r3, #1]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d000      	beq.n	8006cb4 <USB_EPStartXfer+0x108>
 8006cb2:	e074      	b.n	8006d9e <USB_EPStartXfer+0x1f2>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2250      	movs	r2, #80	; 0x50
 8006cbc:	5a9b      	ldrh	r3, [r3, r2]
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	001a      	movs	r2, r3
 8006cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc4:	189b      	adds	r3, r3, r2
 8006cc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	00da      	lsls	r2, r3, #3
 8006cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd0:	18d3      	adds	r3, r2, r3
 8006cd2:	4aae      	ldr	r2, [pc, #696]	; (8006f8c <USB_EPStartXfer+0x3e0>)
 8006cd4:	4694      	mov	ip, r2
 8006cd6:	4463      	add	r3, ip
 8006cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8006cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cdc:	881b      	ldrh	r3, [r3, #0]
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	059b      	lsls	r3, r3, #22
 8006ce2:	0d9b      	lsrs	r3, r3, #22
 8006ce4:	b29a      	uxth	r2, r3
 8006ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce8:	801a      	strh	r2, [r3, #0]
 8006cea:	1d7b      	adds	r3, r7, #5
 8006cec:	33ff      	adds	r3, #255	; 0xff
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2b3e      	cmp	r3, #62	; 0x3e
 8006cf2:	d924      	bls.n	8006d3e <USB_EPStartXfer+0x192>
 8006cf4:	1d7b      	adds	r3, r7, #5
 8006cf6:	33ff      	adds	r3, #255	; 0xff
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	095b      	lsrs	r3, r3, #5
 8006cfc:	1c7a      	adds	r2, r7, #1
 8006cfe:	32ff      	adds	r2, #255	; 0xff
 8006d00:	6013      	str	r3, [r2, #0]
 8006d02:	1d7b      	adds	r3, r7, #5
 8006d04:	33ff      	adds	r3, #255	; 0xff
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	221f      	movs	r2, #31
 8006d0a:	4013      	ands	r3, r2
 8006d0c:	d106      	bne.n	8006d1c <USB_EPStartXfer+0x170>
 8006d0e:	1c7b      	adds	r3, r7, #1
 8006d10:	33ff      	adds	r3, #255	; 0xff
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	3b01      	subs	r3, #1
 8006d16:	1c7a      	adds	r2, r7, #1
 8006d18:	32ff      	adds	r2, #255	; 0xff
 8006d1a:	6013      	str	r3, [r2, #0]
 8006d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1e:	881b      	ldrh	r3, [r3, #0]
 8006d20:	b29a      	uxth	r2, r3
 8006d22:	1c7b      	adds	r3, r7, #1
 8006d24:	33ff      	adds	r3, #255	; 0xff
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	029b      	lsls	r3, r3, #10
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	4a97      	ldr	r2, [pc, #604]	; (8006f90 <USB_EPStartXfer+0x3e4>)
 8006d34:	4313      	orrs	r3, r2
 8006d36:	b29a      	uxth	r2, r3
 8006d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3a:	801a      	strh	r2, [r3, #0]
 8006d3c:	e04a      	b.n	8006dd4 <USB_EPStartXfer+0x228>
 8006d3e:	1d7b      	adds	r3, r7, #5
 8006d40:	33ff      	adds	r3, #255	; 0xff
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d108      	bne.n	8006d5a <USB_EPStartXfer+0x1ae>
 8006d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4a:	881b      	ldrh	r3, [r3, #0]
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	4a90      	ldr	r2, [pc, #576]	; (8006f90 <USB_EPStartXfer+0x3e4>)
 8006d50:	4313      	orrs	r3, r2
 8006d52:	b29a      	uxth	r2, r3
 8006d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d56:	801a      	strh	r2, [r3, #0]
 8006d58:	e03c      	b.n	8006dd4 <USB_EPStartXfer+0x228>
 8006d5a:	1d7b      	adds	r3, r7, #5
 8006d5c:	33ff      	adds	r3, #255	; 0xff
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	085b      	lsrs	r3, r3, #1
 8006d62:	1c7a      	adds	r2, r7, #1
 8006d64:	32ff      	adds	r2, #255	; 0xff
 8006d66:	6013      	str	r3, [r2, #0]
 8006d68:	1d7b      	adds	r3, r7, #5
 8006d6a:	33ff      	adds	r3, #255	; 0xff
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	4013      	ands	r3, r2
 8006d72:	d006      	beq.n	8006d82 <USB_EPStartXfer+0x1d6>
 8006d74:	1c7b      	adds	r3, r7, #1
 8006d76:	33ff      	adds	r3, #255	; 0xff
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	1c7a      	adds	r2, r7, #1
 8006d7e:	32ff      	adds	r2, #255	; 0xff
 8006d80:	6013      	str	r3, [r2, #0]
 8006d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d84:	881b      	ldrh	r3, [r3, #0]
 8006d86:	b29a      	uxth	r2, r3
 8006d88:	1c7b      	adds	r3, r7, #1
 8006d8a:	33ff      	adds	r3, #255	; 0xff
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	029b      	lsls	r3, r3, #10
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	4313      	orrs	r3, r2
 8006d96:	b29a      	uxth	r2, r3
 8006d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9a:	801a      	strh	r2, [r3, #0]
 8006d9c:	e01a      	b.n	8006dd4 <USB_EPStartXfer+0x228>
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	785b      	ldrb	r3, [r3, #1]
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d116      	bne.n	8006dd4 <USB_EPStartXfer+0x228>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2250      	movs	r2, #80	; 0x50
 8006daa:	5a9b      	ldrh	r3, [r3, r2]
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	001a      	movs	r2, r3
 8006db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db2:	189b      	adds	r3, r3, r2
 8006db4:	633b      	str	r3, [r7, #48]	; 0x30
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	00da      	lsls	r2, r3, #3
 8006dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dbe:	18d3      	adds	r3, r2, r3
 8006dc0:	4a72      	ldr	r2, [pc, #456]	; (8006f8c <USB_EPStartXfer+0x3e0>)
 8006dc2:	4694      	mov	ip, r2
 8006dc4:	4463      	add	r3, ip
 8006dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dc8:	1d7b      	adds	r3, r7, #5
 8006dca:	33ff      	adds	r3, #255	; 0xff
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	b29a      	uxth	r2, r3
 8006dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006dd4:	2076      	movs	r0, #118	; 0x76
 8006dd6:	183b      	adds	r3, r7, r0
 8006dd8:	683a      	ldr	r2, [r7, #0]
 8006dda:	8952      	ldrh	r2, [r2, #10]
 8006ddc:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	6959      	ldr	r1, [r3, #20]
 8006de2:	1d7b      	adds	r3, r7, #5
 8006de4:	33ff      	adds	r3, #255	; 0xff
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	b29c      	uxth	r4, r3
 8006dea:	183b      	adds	r3, r7, r0
 8006dec:	881a      	ldrh	r2, [r3, #0]
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	0023      	movs	r3, r4
 8006df2:	f001 f94d 	bl	8008090 <USB_WritePMA>
            ep->xfer_buff += len;
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	695a      	ldr	r2, [r3, #20]
 8006dfa:	1d7b      	adds	r3, r7, #5
 8006dfc:	33ff      	adds	r3, #255	; 0xff
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	18d2      	adds	r2, r2, r3
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	6a1a      	ldr	r2, [r3, #32]
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d908      	bls.n	8006e24 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	6a1a      	ldr	r2, [r3, #32]
 8006e16:	1d7b      	adds	r3, r7, #5
 8006e18:	33ff      	adds	r3, #255	; 0xff
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	1ad2      	subs	r2, r2, r3
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	621a      	str	r2, [r3, #32]
 8006e22:	e007      	b.n	8006e34 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	6a1b      	ldr	r3, [r3, #32]
 8006e28:	1d7a      	adds	r2, r7, #5
 8006e2a:	32ff      	adds	r2, #255	; 0xff
 8006e2c:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	2200      	movs	r2, #0
 8006e32:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	785b      	ldrb	r3, [r3, #1]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d000      	beq.n	8006e3e <USB_EPStartXfer+0x292>
 8006e3c:	e070      	b.n	8006f20 <USB_EPStartXfer+0x374>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	61bb      	str	r3, [r7, #24]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2250      	movs	r2, #80	; 0x50
 8006e46:	5a9b      	ldrh	r3, [r3, r2]
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	001a      	movs	r2, r3
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	189b      	adds	r3, r3, r2
 8006e50:	61bb      	str	r3, [r7, #24]
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	00da      	lsls	r2, r3, #3
 8006e58:	69bb      	ldr	r3, [r7, #24]
 8006e5a:	18d3      	adds	r3, r2, r3
 8006e5c:	4a48      	ldr	r2, [pc, #288]	; (8006f80 <USB_EPStartXfer+0x3d4>)
 8006e5e:	4694      	mov	ip, r2
 8006e60:	4463      	add	r3, ip
 8006e62:	617b      	str	r3, [r7, #20]
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	881b      	ldrh	r3, [r3, #0]
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	059b      	lsls	r3, r3, #22
 8006e6c:	0d9b      	lsrs	r3, r3, #22
 8006e6e:	b29a      	uxth	r2, r3
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	801a      	strh	r2, [r3, #0]
 8006e74:	1d7b      	adds	r3, r7, #5
 8006e76:	33ff      	adds	r3, #255	; 0xff
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2b3e      	cmp	r3, #62	; 0x3e
 8006e7c:	d922      	bls.n	8006ec4 <USB_EPStartXfer+0x318>
 8006e7e:	1d7b      	adds	r3, r7, #5
 8006e80:	33ff      	adds	r3, #255	; 0xff
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	095b      	lsrs	r3, r3, #5
 8006e86:	21fc      	movs	r1, #252	; 0xfc
 8006e88:	187a      	adds	r2, r7, r1
 8006e8a:	6013      	str	r3, [r2, #0]
 8006e8c:	1d7b      	adds	r3, r7, #5
 8006e8e:	33ff      	adds	r3, #255	; 0xff
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	221f      	movs	r2, #31
 8006e94:	4013      	ands	r3, r2
 8006e96:	d104      	bne.n	8006ea2 <USB_EPStartXfer+0x2f6>
 8006e98:	187b      	adds	r3, r7, r1
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	187a      	adds	r2, r7, r1
 8006ea0:	6013      	str	r3, [r2, #0]
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	881b      	ldrh	r3, [r3, #0]
 8006ea6:	b29a      	uxth	r2, r3
 8006ea8:	23fc      	movs	r3, #252	; 0xfc
 8006eaa:	18fb      	adds	r3, r7, r3
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	029b      	lsls	r3, r3, #10
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	4a35      	ldr	r2, [pc, #212]	; (8006f90 <USB_EPStartXfer+0x3e4>)
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	b29a      	uxth	r2, r3
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	801a      	strh	r2, [r3, #0]
 8006ec2:	e04a      	b.n	8006f5a <USB_EPStartXfer+0x3ae>
 8006ec4:	1d7b      	adds	r3, r7, #5
 8006ec6:	33ff      	adds	r3, #255	; 0xff
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d108      	bne.n	8006ee0 <USB_EPStartXfer+0x334>
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	881b      	ldrh	r3, [r3, #0]
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	4a2e      	ldr	r2, [pc, #184]	; (8006f90 <USB_EPStartXfer+0x3e4>)
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	b29a      	uxth	r2, r3
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	801a      	strh	r2, [r3, #0]
 8006ede:	e03c      	b.n	8006f5a <USB_EPStartXfer+0x3ae>
 8006ee0:	1d7b      	adds	r3, r7, #5
 8006ee2:	33ff      	adds	r3, #255	; 0xff
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	085b      	lsrs	r3, r3, #1
 8006ee8:	21fc      	movs	r1, #252	; 0xfc
 8006eea:	187a      	adds	r2, r7, r1
 8006eec:	6013      	str	r3, [r2, #0]
 8006eee:	1d7b      	adds	r3, r7, #5
 8006ef0:	33ff      	adds	r3, #255	; 0xff
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	4013      	ands	r3, r2
 8006ef8:	d004      	beq.n	8006f04 <USB_EPStartXfer+0x358>
 8006efa:	187b      	adds	r3, r7, r1
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	3301      	adds	r3, #1
 8006f00:	187a      	adds	r2, r7, r1
 8006f02:	6013      	str	r3, [r2, #0]
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	881b      	ldrh	r3, [r3, #0]
 8006f08:	b29a      	uxth	r2, r3
 8006f0a:	23fc      	movs	r3, #252	; 0xfc
 8006f0c:	18fb      	adds	r3, r7, r3
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	029b      	lsls	r3, r3, #10
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	4313      	orrs	r3, r2
 8006f18:	b29a      	uxth	r2, r3
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	801a      	strh	r2, [r3, #0]
 8006f1e:	e01c      	b.n	8006f5a <USB_EPStartXfer+0x3ae>
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	785b      	ldrb	r3, [r3, #1]
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d118      	bne.n	8006f5a <USB_EPStartXfer+0x3ae>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	623b      	str	r3, [r7, #32]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2250      	movs	r2, #80	; 0x50
 8006f30:	5a9b      	ldrh	r3, [r3, r2]
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	001a      	movs	r2, r3
 8006f36:	6a3b      	ldr	r3, [r7, #32]
 8006f38:	189b      	adds	r3, r3, r2
 8006f3a:	623b      	str	r3, [r7, #32]
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	00da      	lsls	r2, r3, #3
 8006f42:	6a3b      	ldr	r3, [r7, #32]
 8006f44:	18d3      	adds	r3, r2, r3
 8006f46:	4a0e      	ldr	r2, [pc, #56]	; (8006f80 <USB_EPStartXfer+0x3d4>)
 8006f48:	4694      	mov	ip, r2
 8006f4a:	4463      	add	r3, ip
 8006f4c:	61fb      	str	r3, [r7, #28]
 8006f4e:	1d7b      	adds	r3, r7, #5
 8006f50:	33ff      	adds	r3, #255	; 0xff
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	b29a      	uxth	r2, r3
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006f5a:	2076      	movs	r0, #118	; 0x76
 8006f5c:	183b      	adds	r3, r7, r0
 8006f5e:	683a      	ldr	r2, [r7, #0]
 8006f60:	8912      	ldrh	r2, [r2, #8]
 8006f62:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	6959      	ldr	r1, [r3, #20]
 8006f68:	1d7b      	adds	r3, r7, #5
 8006f6a:	33ff      	adds	r3, #255	; 0xff
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	b29c      	uxth	r4, r3
 8006f70:	183b      	adds	r3, r7, r0
 8006f72:	881a      	ldrh	r2, [r3, #0]
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	0023      	movs	r3, r4
 8006f78:	f001 f88a 	bl	8008090 <USB_WritePMA>
 8006f7c:	e329      	b.n	80075d2 <USB_EPStartXfer+0xa26>
 8006f7e:	46c0      	nop			; (mov r8, r8)
 8006f80:	00000402 	.word	0x00000402
 8006f84:	ffff8f8f 	.word	0xffff8f8f
 8006f88:	ffff8180 	.word	0xffff8180
 8006f8c:	00000406 	.word	0x00000406
 8006f90:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	785b      	ldrb	r3, [r3, #1]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d000      	beq.n	8006f9e <USB_EPStartXfer+0x3f2>
 8006f9c:	e070      	b.n	8007080 <USB_EPStartXfer+0x4d4>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2250      	movs	r2, #80	; 0x50
 8006fa6:	5a9b      	ldrh	r3, [r3, r2]
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	001a      	movs	r2, r3
 8006fac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fae:	189b      	adds	r3, r3, r2
 8006fb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	00da      	lsls	r2, r3, #3
 8006fb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fba:	18d3      	adds	r3, r2, r3
 8006fbc:	4acd      	ldr	r2, [pc, #820]	; (80072f4 <USB_EPStartXfer+0x748>)
 8006fbe:	4694      	mov	ip, r2
 8006fc0:	4463      	add	r3, ip
 8006fc2:	647b      	str	r3, [r7, #68]	; 0x44
 8006fc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fc6:	881b      	ldrh	r3, [r3, #0]
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	059b      	lsls	r3, r3, #22
 8006fcc:	0d9b      	lsrs	r3, r3, #22
 8006fce:	b29a      	uxth	r2, r3
 8006fd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fd2:	801a      	strh	r2, [r3, #0]
 8006fd4:	1d7b      	adds	r3, r7, #5
 8006fd6:	33ff      	adds	r3, #255	; 0xff
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2b3e      	cmp	r3, #62	; 0x3e
 8006fdc:	d922      	bls.n	8007024 <USB_EPStartXfer+0x478>
 8006fde:	1d7b      	adds	r3, r7, #5
 8006fe0:	33ff      	adds	r3, #255	; 0xff
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	095b      	lsrs	r3, r3, #5
 8006fe6:	21f8      	movs	r1, #248	; 0xf8
 8006fe8:	187a      	adds	r2, r7, r1
 8006fea:	6013      	str	r3, [r2, #0]
 8006fec:	1d7b      	adds	r3, r7, #5
 8006fee:	33ff      	adds	r3, #255	; 0xff
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	221f      	movs	r2, #31
 8006ff4:	4013      	ands	r3, r2
 8006ff6:	d104      	bne.n	8007002 <USB_EPStartXfer+0x456>
 8006ff8:	187b      	adds	r3, r7, r1
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	187a      	adds	r2, r7, r1
 8007000:	6013      	str	r3, [r2, #0]
 8007002:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007004:	881b      	ldrh	r3, [r3, #0]
 8007006:	b29a      	uxth	r2, r3
 8007008:	23f8      	movs	r3, #248	; 0xf8
 800700a:	18fb      	adds	r3, r7, r3
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	b29b      	uxth	r3, r3
 8007010:	029b      	lsls	r3, r3, #10
 8007012:	b29b      	uxth	r3, r3
 8007014:	4313      	orrs	r3, r2
 8007016:	b29b      	uxth	r3, r3
 8007018:	4ab7      	ldr	r2, [pc, #732]	; (80072f8 <USB_EPStartXfer+0x74c>)
 800701a:	4313      	orrs	r3, r2
 800701c:	b29a      	uxth	r2, r3
 800701e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007020:	801a      	strh	r2, [r3, #0]
 8007022:	e04a      	b.n	80070ba <USB_EPStartXfer+0x50e>
 8007024:	1d7b      	adds	r3, r7, #5
 8007026:	33ff      	adds	r3, #255	; 0xff
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d108      	bne.n	8007040 <USB_EPStartXfer+0x494>
 800702e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007030:	881b      	ldrh	r3, [r3, #0]
 8007032:	b29b      	uxth	r3, r3
 8007034:	4ab0      	ldr	r2, [pc, #704]	; (80072f8 <USB_EPStartXfer+0x74c>)
 8007036:	4313      	orrs	r3, r2
 8007038:	b29a      	uxth	r2, r3
 800703a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800703c:	801a      	strh	r2, [r3, #0]
 800703e:	e03c      	b.n	80070ba <USB_EPStartXfer+0x50e>
 8007040:	1d7b      	adds	r3, r7, #5
 8007042:	33ff      	adds	r3, #255	; 0xff
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	085b      	lsrs	r3, r3, #1
 8007048:	21f8      	movs	r1, #248	; 0xf8
 800704a:	187a      	adds	r2, r7, r1
 800704c:	6013      	str	r3, [r2, #0]
 800704e:	1d7b      	adds	r3, r7, #5
 8007050:	33ff      	adds	r3, #255	; 0xff
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2201      	movs	r2, #1
 8007056:	4013      	ands	r3, r2
 8007058:	d004      	beq.n	8007064 <USB_EPStartXfer+0x4b8>
 800705a:	187b      	adds	r3, r7, r1
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	3301      	adds	r3, #1
 8007060:	187a      	adds	r2, r7, r1
 8007062:	6013      	str	r3, [r2, #0]
 8007064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007066:	881b      	ldrh	r3, [r3, #0]
 8007068:	b29a      	uxth	r2, r3
 800706a:	23f8      	movs	r3, #248	; 0xf8
 800706c:	18fb      	adds	r3, r7, r3
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	b29b      	uxth	r3, r3
 8007072:	029b      	lsls	r3, r3, #10
 8007074:	b29b      	uxth	r3, r3
 8007076:	4313      	orrs	r3, r2
 8007078:	b29a      	uxth	r2, r3
 800707a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800707c:	801a      	strh	r2, [r3, #0]
 800707e:	e01c      	b.n	80070ba <USB_EPStartXfer+0x50e>
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	785b      	ldrb	r3, [r3, #1]
 8007084:	2b01      	cmp	r3, #1
 8007086:	d118      	bne.n	80070ba <USB_EPStartXfer+0x50e>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	653b      	str	r3, [r7, #80]	; 0x50
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2250      	movs	r2, #80	; 0x50
 8007090:	5a9b      	ldrh	r3, [r3, r2]
 8007092:	b29b      	uxth	r3, r3
 8007094:	001a      	movs	r2, r3
 8007096:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007098:	189b      	adds	r3, r3, r2
 800709a:	653b      	str	r3, [r7, #80]	; 0x50
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	00da      	lsls	r2, r3, #3
 80070a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070a4:	18d3      	adds	r3, r2, r3
 80070a6:	4a93      	ldr	r2, [pc, #588]	; (80072f4 <USB_EPStartXfer+0x748>)
 80070a8:	4694      	mov	ip, r2
 80070aa:	4463      	add	r3, ip
 80070ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070ae:	1d7b      	adds	r3, r7, #5
 80070b0:	33ff      	adds	r3, #255	; 0xff
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	b29a      	uxth	r2, r3
 80070b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070b8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80070ba:	2076      	movs	r0, #118	; 0x76
 80070bc:	183b      	adds	r3, r7, r0
 80070be:	683a      	ldr	r2, [r7, #0]
 80070c0:	8912      	ldrh	r2, [r2, #8]
 80070c2:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	6959      	ldr	r1, [r3, #20]
 80070c8:	1d7b      	adds	r3, r7, #5
 80070ca:	33ff      	adds	r3, #255	; 0xff
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	b29c      	uxth	r4, r3
 80070d0:	183b      	adds	r3, r7, r0
 80070d2:	881a      	ldrh	r2, [r3, #0]
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	0023      	movs	r3, r4
 80070d8:	f000 ffda 	bl	8008090 <USB_WritePMA>
            ep->xfer_buff += len;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	695a      	ldr	r2, [r3, #20]
 80070e0:	1d7b      	adds	r3, r7, #5
 80070e2:	33ff      	adds	r3, #255	; 0xff
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	18d2      	adds	r2, r2, r3
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	6a1a      	ldr	r2, [r3, #32]
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	691b      	ldr	r3, [r3, #16]
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d908      	bls.n	800710a <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	6a1a      	ldr	r2, [r3, #32]
 80070fc:	1d7b      	adds	r3, r7, #5
 80070fe:	33ff      	adds	r3, #255	; 0xff
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	1ad2      	subs	r2, r2, r3
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	621a      	str	r2, [r3, #32]
 8007108:	e007      	b.n	800711a <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	6a1b      	ldr	r3, [r3, #32]
 800710e:	1d7a      	adds	r2, r7, #5
 8007110:	32ff      	adds	r2, #255	; 0xff
 8007112:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	2200      	movs	r2, #0
 8007118:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	643b      	str	r3, [r7, #64]	; 0x40
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	785b      	ldrb	r3, [r3, #1]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d000      	beq.n	8007128 <USB_EPStartXfer+0x57c>
 8007126:	e070      	b.n	800720a <USB_EPStartXfer+0x65e>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	63bb      	str	r3, [r7, #56]	; 0x38
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2250      	movs	r2, #80	; 0x50
 8007130:	5a9b      	ldrh	r3, [r3, r2]
 8007132:	b29b      	uxth	r3, r3
 8007134:	001a      	movs	r2, r3
 8007136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007138:	189b      	adds	r3, r3, r2
 800713a:	63bb      	str	r3, [r7, #56]	; 0x38
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	00da      	lsls	r2, r3, #3
 8007142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007144:	18d3      	adds	r3, r2, r3
 8007146:	4a6d      	ldr	r2, [pc, #436]	; (80072fc <USB_EPStartXfer+0x750>)
 8007148:	4694      	mov	ip, r2
 800714a:	4463      	add	r3, ip
 800714c:	637b      	str	r3, [r7, #52]	; 0x34
 800714e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007150:	881b      	ldrh	r3, [r3, #0]
 8007152:	b29b      	uxth	r3, r3
 8007154:	059b      	lsls	r3, r3, #22
 8007156:	0d9b      	lsrs	r3, r3, #22
 8007158:	b29a      	uxth	r2, r3
 800715a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800715c:	801a      	strh	r2, [r3, #0]
 800715e:	1d7b      	adds	r3, r7, #5
 8007160:	33ff      	adds	r3, #255	; 0xff
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	2b3e      	cmp	r3, #62	; 0x3e
 8007166:	d922      	bls.n	80071ae <USB_EPStartXfer+0x602>
 8007168:	1d7b      	adds	r3, r7, #5
 800716a:	33ff      	adds	r3, #255	; 0xff
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	095b      	lsrs	r3, r3, #5
 8007170:	21f4      	movs	r1, #244	; 0xf4
 8007172:	187a      	adds	r2, r7, r1
 8007174:	6013      	str	r3, [r2, #0]
 8007176:	1d7b      	adds	r3, r7, #5
 8007178:	33ff      	adds	r3, #255	; 0xff
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	221f      	movs	r2, #31
 800717e:	4013      	ands	r3, r2
 8007180:	d104      	bne.n	800718c <USB_EPStartXfer+0x5e0>
 8007182:	187b      	adds	r3, r7, r1
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	3b01      	subs	r3, #1
 8007188:	187a      	adds	r2, r7, r1
 800718a:	6013      	str	r3, [r2, #0]
 800718c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800718e:	881b      	ldrh	r3, [r3, #0]
 8007190:	b29a      	uxth	r2, r3
 8007192:	23f4      	movs	r3, #244	; 0xf4
 8007194:	18fb      	adds	r3, r7, r3
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	b29b      	uxth	r3, r3
 800719a:	029b      	lsls	r3, r3, #10
 800719c:	b29b      	uxth	r3, r3
 800719e:	4313      	orrs	r3, r2
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	4a55      	ldr	r2, [pc, #340]	; (80072f8 <USB_EPStartXfer+0x74c>)
 80071a4:	4313      	orrs	r3, r2
 80071a6:	b29a      	uxth	r2, r3
 80071a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071aa:	801a      	strh	r2, [r3, #0]
 80071ac:	e048      	b.n	8007240 <USB_EPStartXfer+0x694>
 80071ae:	1d7b      	adds	r3, r7, #5
 80071b0:	33ff      	adds	r3, #255	; 0xff
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d108      	bne.n	80071ca <USB_EPStartXfer+0x61e>
 80071b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ba:	881b      	ldrh	r3, [r3, #0]
 80071bc:	b29b      	uxth	r3, r3
 80071be:	4a4e      	ldr	r2, [pc, #312]	; (80072f8 <USB_EPStartXfer+0x74c>)
 80071c0:	4313      	orrs	r3, r2
 80071c2:	b29a      	uxth	r2, r3
 80071c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071c6:	801a      	strh	r2, [r3, #0]
 80071c8:	e03a      	b.n	8007240 <USB_EPStartXfer+0x694>
 80071ca:	1d7b      	adds	r3, r7, #5
 80071cc:	33ff      	adds	r3, #255	; 0xff
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	085b      	lsrs	r3, r3, #1
 80071d2:	21f4      	movs	r1, #244	; 0xf4
 80071d4:	187a      	adds	r2, r7, r1
 80071d6:	6013      	str	r3, [r2, #0]
 80071d8:	1d7b      	adds	r3, r7, #5
 80071da:	33ff      	adds	r3, #255	; 0xff
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	2201      	movs	r2, #1
 80071e0:	4013      	ands	r3, r2
 80071e2:	d004      	beq.n	80071ee <USB_EPStartXfer+0x642>
 80071e4:	187b      	adds	r3, r7, r1
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	3301      	adds	r3, #1
 80071ea:	187a      	adds	r2, r7, r1
 80071ec:	6013      	str	r3, [r2, #0]
 80071ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071f0:	881b      	ldrh	r3, [r3, #0]
 80071f2:	b29a      	uxth	r2, r3
 80071f4:	23f4      	movs	r3, #244	; 0xf4
 80071f6:	18fb      	adds	r3, r7, r3
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	029b      	lsls	r3, r3, #10
 80071fe:	b29b      	uxth	r3, r3
 8007200:	4313      	orrs	r3, r2
 8007202:	b29a      	uxth	r2, r3
 8007204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007206:	801a      	strh	r2, [r3, #0]
 8007208:	e01a      	b.n	8007240 <USB_EPStartXfer+0x694>
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	785b      	ldrb	r3, [r3, #1]
 800720e:	2b01      	cmp	r3, #1
 8007210:	d116      	bne.n	8007240 <USB_EPStartXfer+0x694>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2250      	movs	r2, #80	; 0x50
 8007216:	5a9b      	ldrh	r3, [r3, r2]
 8007218:	b29b      	uxth	r3, r3
 800721a:	001a      	movs	r2, r3
 800721c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800721e:	189b      	adds	r3, r3, r2
 8007220:	643b      	str	r3, [r7, #64]	; 0x40
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	00da      	lsls	r2, r3, #3
 8007228:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800722a:	18d3      	adds	r3, r2, r3
 800722c:	4a33      	ldr	r2, [pc, #204]	; (80072fc <USB_EPStartXfer+0x750>)
 800722e:	4694      	mov	ip, r2
 8007230:	4463      	add	r3, ip
 8007232:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007234:	1d7b      	adds	r3, r7, #5
 8007236:	33ff      	adds	r3, #255	; 0xff
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	b29a      	uxth	r2, r3
 800723c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800723e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007240:	2076      	movs	r0, #118	; 0x76
 8007242:	183b      	adds	r3, r7, r0
 8007244:	683a      	ldr	r2, [r7, #0]
 8007246:	8952      	ldrh	r2, [r2, #10]
 8007248:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	6959      	ldr	r1, [r3, #20]
 800724e:	1d7b      	adds	r3, r7, #5
 8007250:	33ff      	adds	r3, #255	; 0xff
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	b29c      	uxth	r4, r3
 8007256:	183b      	adds	r3, r7, r0
 8007258:	881a      	ldrh	r2, [r3, #0]
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	0023      	movs	r3, r4
 800725e:	f000 ff17 	bl	8008090 <USB_WritePMA>
 8007262:	e1b6      	b.n	80075d2 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	6a1b      	ldr	r3, [r3, #32]
 8007268:	1d7a      	adds	r2, r7, #5
 800726a:	32ff      	adds	r2, #255	; 0xff
 800726c:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	18d3      	adds	r3, r2, r3
 8007278:	881b      	ldrh	r3, [r3, #0]
 800727a:	b29a      	uxth	r2, r3
 800727c:	2062      	movs	r0, #98	; 0x62
 800727e:	183b      	adds	r3, r7, r0
 8007280:	491f      	ldr	r1, [pc, #124]	; (8007300 <USB_EPStartXfer+0x754>)
 8007282:	400a      	ands	r2, r1
 8007284:	801a      	strh	r2, [r3, #0]
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	18d3      	adds	r3, r2, r3
 8007290:	183a      	adds	r2, r7, r0
 8007292:	8812      	ldrh	r2, [r2, #0]
 8007294:	491b      	ldr	r1, [pc, #108]	; (8007304 <USB_EPStartXfer+0x758>)
 8007296:	430a      	orrs	r2, r1
 8007298:	b292      	uxth	r2, r2
 800729a:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2250      	movs	r2, #80	; 0x50
 80072a4:	5a9b      	ldrh	r3, [r3, r2]
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	001a      	movs	r2, r3
 80072aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072ac:	189b      	adds	r3, r3, r2
 80072ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	00da      	lsls	r2, r3, #3
 80072b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072b8:	18d3      	adds	r3, r2, r3
 80072ba:	4a0e      	ldr	r2, [pc, #56]	; (80072f4 <USB_EPStartXfer+0x748>)
 80072bc:	4694      	mov	ip, r2
 80072be:	4463      	add	r3, ip
 80072c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80072c2:	1d7b      	adds	r3, r7, #5
 80072c4:	33ff      	adds	r3, #255	; 0xff
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	b29a      	uxth	r2, r3
 80072ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80072cc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80072ce:	2076      	movs	r0, #118	; 0x76
 80072d0:	183b      	adds	r3, r7, r0
 80072d2:	683a      	ldr	r2, [r7, #0]
 80072d4:	8912      	ldrh	r2, [r2, #8]
 80072d6:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	6959      	ldr	r1, [r3, #20]
 80072dc:	1d7b      	adds	r3, r7, #5
 80072de:	33ff      	adds	r3, #255	; 0xff
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	b29c      	uxth	r4, r3
 80072e4:	183b      	adds	r3, r7, r0
 80072e6:	881a      	ldrh	r2, [r3, #0]
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	0023      	movs	r3, r4
 80072ec:	f000 fed0 	bl	8008090 <USB_WritePMA>
 80072f0:	e16f      	b.n	80075d2 <USB_EPStartXfer+0xa26>
 80072f2:	46c0      	nop			; (mov r8, r8)
 80072f4:	00000402 	.word	0x00000402
 80072f8:	ffff8000 	.word	0xffff8000
 80072fc:	00000406 	.word	0x00000406
 8007300:	ffff8e8f 	.word	0xffff8e8f
 8007304:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	6a1a      	ldr	r2, [r3, #32]
 800730c:	1d7b      	adds	r3, r7, #5
 800730e:	33ff      	adds	r3, #255	; 0xff
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	1ad2      	subs	r2, r2, r3
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	18d3      	adds	r3, r2, r3
 8007322:	881b      	ldrh	r3, [r3, #0]
 8007324:	b29b      	uxth	r3, r3
 8007326:	001a      	movs	r2, r3
 8007328:	2340      	movs	r3, #64	; 0x40
 800732a:	4013      	ands	r3, r2
 800732c:	d100      	bne.n	8007330 <USB_EPStartXfer+0x784>
 800732e:	e0a4      	b.n	800747a <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	673b      	str	r3, [r7, #112]	; 0x70
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	785b      	ldrb	r3, [r3, #1]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d000      	beq.n	800733e <USB_EPStartXfer+0x792>
 800733c:	e070      	b.n	8007420 <USB_EPStartXfer+0x874>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	66bb      	str	r3, [r7, #104]	; 0x68
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2250      	movs	r2, #80	; 0x50
 8007346:	5a9b      	ldrh	r3, [r3, r2]
 8007348:	b29b      	uxth	r3, r3
 800734a:	001a      	movs	r2, r3
 800734c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800734e:	189b      	adds	r3, r3, r2
 8007350:	66bb      	str	r3, [r7, #104]	; 0x68
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	00da      	lsls	r2, r3, #3
 8007358:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800735a:	18d3      	adds	r3, r2, r3
 800735c:	4abc      	ldr	r2, [pc, #752]	; (8007650 <USB_EPStartXfer+0xaa4>)
 800735e:	4694      	mov	ip, r2
 8007360:	4463      	add	r3, ip
 8007362:	667b      	str	r3, [r7, #100]	; 0x64
 8007364:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007366:	881b      	ldrh	r3, [r3, #0]
 8007368:	b29b      	uxth	r3, r3
 800736a:	059b      	lsls	r3, r3, #22
 800736c:	0d9b      	lsrs	r3, r3, #22
 800736e:	b29a      	uxth	r2, r3
 8007370:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007372:	801a      	strh	r2, [r3, #0]
 8007374:	1d7b      	adds	r3, r7, #5
 8007376:	33ff      	adds	r3, #255	; 0xff
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	2b3e      	cmp	r3, #62	; 0x3e
 800737c:	d922      	bls.n	80073c4 <USB_EPStartXfer+0x818>
 800737e:	1d7b      	adds	r3, r7, #5
 8007380:	33ff      	adds	r3, #255	; 0xff
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	095b      	lsrs	r3, r3, #5
 8007386:	21f0      	movs	r1, #240	; 0xf0
 8007388:	187a      	adds	r2, r7, r1
 800738a:	6013      	str	r3, [r2, #0]
 800738c:	1d7b      	adds	r3, r7, #5
 800738e:	33ff      	adds	r3, #255	; 0xff
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	221f      	movs	r2, #31
 8007394:	4013      	ands	r3, r2
 8007396:	d104      	bne.n	80073a2 <USB_EPStartXfer+0x7f6>
 8007398:	187b      	adds	r3, r7, r1
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	3b01      	subs	r3, #1
 800739e:	187a      	adds	r2, r7, r1
 80073a0:	6013      	str	r3, [r2, #0]
 80073a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073a4:	881b      	ldrh	r3, [r3, #0]
 80073a6:	b29a      	uxth	r2, r3
 80073a8:	23f0      	movs	r3, #240	; 0xf0
 80073aa:	18fb      	adds	r3, r7, r3
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	029b      	lsls	r3, r3, #10
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	4313      	orrs	r3, r2
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	4aa6      	ldr	r2, [pc, #664]	; (8007654 <USB_EPStartXfer+0xaa8>)
 80073ba:	4313      	orrs	r3, r2
 80073bc:	b29a      	uxth	r2, r3
 80073be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073c0:	801a      	strh	r2, [r3, #0]
 80073c2:	e048      	b.n	8007456 <USB_EPStartXfer+0x8aa>
 80073c4:	1d7b      	adds	r3, r7, #5
 80073c6:	33ff      	adds	r3, #255	; 0xff
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d108      	bne.n	80073e0 <USB_EPStartXfer+0x834>
 80073ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073d0:	881b      	ldrh	r3, [r3, #0]
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	4a9f      	ldr	r2, [pc, #636]	; (8007654 <USB_EPStartXfer+0xaa8>)
 80073d6:	4313      	orrs	r3, r2
 80073d8:	b29a      	uxth	r2, r3
 80073da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073dc:	801a      	strh	r2, [r3, #0]
 80073de:	e03a      	b.n	8007456 <USB_EPStartXfer+0x8aa>
 80073e0:	1d7b      	adds	r3, r7, #5
 80073e2:	33ff      	adds	r3, #255	; 0xff
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	085b      	lsrs	r3, r3, #1
 80073e8:	21f0      	movs	r1, #240	; 0xf0
 80073ea:	187a      	adds	r2, r7, r1
 80073ec:	6013      	str	r3, [r2, #0]
 80073ee:	1d7b      	adds	r3, r7, #5
 80073f0:	33ff      	adds	r3, #255	; 0xff
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2201      	movs	r2, #1
 80073f6:	4013      	ands	r3, r2
 80073f8:	d004      	beq.n	8007404 <USB_EPStartXfer+0x858>
 80073fa:	187b      	adds	r3, r7, r1
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	3301      	adds	r3, #1
 8007400:	187a      	adds	r2, r7, r1
 8007402:	6013      	str	r3, [r2, #0]
 8007404:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007406:	881b      	ldrh	r3, [r3, #0]
 8007408:	b29a      	uxth	r2, r3
 800740a:	23f0      	movs	r3, #240	; 0xf0
 800740c:	18fb      	adds	r3, r7, r3
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	b29b      	uxth	r3, r3
 8007412:	029b      	lsls	r3, r3, #10
 8007414:	b29b      	uxth	r3, r3
 8007416:	4313      	orrs	r3, r2
 8007418:	b29a      	uxth	r2, r3
 800741a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800741c:	801a      	strh	r2, [r3, #0]
 800741e:	e01a      	b.n	8007456 <USB_EPStartXfer+0x8aa>
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	785b      	ldrb	r3, [r3, #1]
 8007424:	2b01      	cmp	r3, #1
 8007426:	d116      	bne.n	8007456 <USB_EPStartXfer+0x8aa>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2250      	movs	r2, #80	; 0x50
 800742c:	5a9b      	ldrh	r3, [r3, r2]
 800742e:	b29b      	uxth	r3, r3
 8007430:	001a      	movs	r2, r3
 8007432:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007434:	189b      	adds	r3, r3, r2
 8007436:	673b      	str	r3, [r7, #112]	; 0x70
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	00da      	lsls	r2, r3, #3
 800743e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007440:	18d3      	adds	r3, r2, r3
 8007442:	4a83      	ldr	r2, [pc, #524]	; (8007650 <USB_EPStartXfer+0xaa4>)
 8007444:	4694      	mov	ip, r2
 8007446:	4463      	add	r3, ip
 8007448:	66fb      	str	r3, [r7, #108]	; 0x6c
 800744a:	1d7b      	adds	r3, r7, #5
 800744c:	33ff      	adds	r3, #255	; 0xff
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	b29a      	uxth	r2, r3
 8007452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007454:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007456:	2076      	movs	r0, #118	; 0x76
 8007458:	183b      	adds	r3, r7, r0
 800745a:	683a      	ldr	r2, [r7, #0]
 800745c:	8952      	ldrh	r2, [r2, #10]
 800745e:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	6959      	ldr	r1, [r3, #20]
 8007464:	1d7b      	adds	r3, r7, #5
 8007466:	33ff      	adds	r3, #255	; 0xff
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	b29c      	uxth	r4, r3
 800746c:	183b      	adds	r3, r7, r0
 800746e:	881a      	ldrh	r2, [r3, #0]
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	0023      	movs	r3, r4
 8007474:	f000 fe0c 	bl	8008090 <USB_WritePMA>
 8007478:	e0ab      	b.n	80075d2 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	785b      	ldrb	r3, [r3, #1]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d000      	beq.n	8007484 <USB_EPStartXfer+0x8d8>
 8007482:	e070      	b.n	8007566 <USB_EPStartXfer+0x9ba>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2250      	movs	r2, #80	; 0x50
 800748c:	5a9b      	ldrh	r3, [r3, r2]
 800748e:	b29b      	uxth	r3, r3
 8007490:	001a      	movs	r2, r3
 8007492:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007494:	189b      	adds	r3, r3, r2
 8007496:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	00da      	lsls	r2, r3, #3
 800749e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80074a0:	18d3      	adds	r3, r2, r3
 80074a2:	4a6d      	ldr	r2, [pc, #436]	; (8007658 <USB_EPStartXfer+0xaac>)
 80074a4:	4694      	mov	ip, r2
 80074a6:	4463      	add	r3, ip
 80074a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80074aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074ac:	881b      	ldrh	r3, [r3, #0]
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	059b      	lsls	r3, r3, #22
 80074b2:	0d9b      	lsrs	r3, r3, #22
 80074b4:	b29a      	uxth	r2, r3
 80074b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074b8:	801a      	strh	r2, [r3, #0]
 80074ba:	1d7b      	adds	r3, r7, #5
 80074bc:	33ff      	adds	r3, #255	; 0xff
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	2b3e      	cmp	r3, #62	; 0x3e
 80074c2:	d922      	bls.n	800750a <USB_EPStartXfer+0x95e>
 80074c4:	1d7b      	adds	r3, r7, #5
 80074c6:	33ff      	adds	r3, #255	; 0xff
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	095b      	lsrs	r3, r3, #5
 80074cc:	21ec      	movs	r1, #236	; 0xec
 80074ce:	187a      	adds	r2, r7, r1
 80074d0:	6013      	str	r3, [r2, #0]
 80074d2:	1d7b      	adds	r3, r7, #5
 80074d4:	33ff      	adds	r3, #255	; 0xff
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	221f      	movs	r2, #31
 80074da:	4013      	ands	r3, r2
 80074dc:	d104      	bne.n	80074e8 <USB_EPStartXfer+0x93c>
 80074de:	187b      	adds	r3, r7, r1
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	3b01      	subs	r3, #1
 80074e4:	187a      	adds	r2, r7, r1
 80074e6:	6013      	str	r3, [r2, #0]
 80074e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074ea:	881b      	ldrh	r3, [r3, #0]
 80074ec:	b29a      	uxth	r2, r3
 80074ee:	23ec      	movs	r3, #236	; 0xec
 80074f0:	18fb      	adds	r3, r7, r3
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	029b      	lsls	r3, r3, #10
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	4313      	orrs	r3, r2
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	4a55      	ldr	r2, [pc, #340]	; (8007654 <USB_EPStartXfer+0xaa8>)
 8007500:	4313      	orrs	r3, r2
 8007502:	b29a      	uxth	r2, r3
 8007504:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007506:	801a      	strh	r2, [r3, #0]
 8007508:	e052      	b.n	80075b0 <USB_EPStartXfer+0xa04>
 800750a:	1d7b      	adds	r3, r7, #5
 800750c:	33ff      	adds	r3, #255	; 0xff
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d108      	bne.n	8007526 <USB_EPStartXfer+0x97a>
 8007514:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007516:	881b      	ldrh	r3, [r3, #0]
 8007518:	b29b      	uxth	r3, r3
 800751a:	4a4e      	ldr	r2, [pc, #312]	; (8007654 <USB_EPStartXfer+0xaa8>)
 800751c:	4313      	orrs	r3, r2
 800751e:	b29a      	uxth	r2, r3
 8007520:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007522:	801a      	strh	r2, [r3, #0]
 8007524:	e044      	b.n	80075b0 <USB_EPStartXfer+0xa04>
 8007526:	1d7b      	adds	r3, r7, #5
 8007528:	33ff      	adds	r3, #255	; 0xff
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	085b      	lsrs	r3, r3, #1
 800752e:	21ec      	movs	r1, #236	; 0xec
 8007530:	187a      	adds	r2, r7, r1
 8007532:	6013      	str	r3, [r2, #0]
 8007534:	1d7b      	adds	r3, r7, #5
 8007536:	33ff      	adds	r3, #255	; 0xff
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	2201      	movs	r2, #1
 800753c:	4013      	ands	r3, r2
 800753e:	d004      	beq.n	800754a <USB_EPStartXfer+0x99e>
 8007540:	187b      	adds	r3, r7, r1
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	3301      	adds	r3, #1
 8007546:	187a      	adds	r2, r7, r1
 8007548:	6013      	str	r3, [r2, #0]
 800754a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800754c:	881b      	ldrh	r3, [r3, #0]
 800754e:	b29a      	uxth	r2, r3
 8007550:	23ec      	movs	r3, #236	; 0xec
 8007552:	18fb      	adds	r3, r7, r3
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	b29b      	uxth	r3, r3
 8007558:	029b      	lsls	r3, r3, #10
 800755a:	b29b      	uxth	r3, r3
 800755c:	4313      	orrs	r3, r2
 800755e:	b29a      	uxth	r2, r3
 8007560:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007562:	801a      	strh	r2, [r3, #0]
 8007564:	e024      	b.n	80075b0 <USB_EPStartXfer+0xa04>
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	785b      	ldrb	r3, [r3, #1]
 800756a:	2b01      	cmp	r3, #1
 800756c:	d120      	bne.n	80075b0 <USB_EPStartXfer+0xa04>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2184      	movs	r1, #132	; 0x84
 8007572:	187a      	adds	r2, r7, r1
 8007574:	6013      	str	r3, [r2, #0]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2250      	movs	r2, #80	; 0x50
 800757a:	5a9b      	ldrh	r3, [r3, r2]
 800757c:	b29b      	uxth	r3, r3
 800757e:	001a      	movs	r2, r3
 8007580:	187b      	adds	r3, r7, r1
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	189b      	adds	r3, r3, r2
 8007586:	187a      	adds	r2, r7, r1
 8007588:	6013      	str	r3, [r2, #0]
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	00da      	lsls	r2, r3, #3
 8007590:	187b      	adds	r3, r7, r1
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	18d3      	adds	r3, r2, r3
 8007596:	4a30      	ldr	r2, [pc, #192]	; (8007658 <USB_EPStartXfer+0xaac>)
 8007598:	4694      	mov	ip, r2
 800759a:	4463      	add	r3, ip
 800759c:	2180      	movs	r1, #128	; 0x80
 800759e:	187a      	adds	r2, r7, r1
 80075a0:	6013      	str	r3, [r2, #0]
 80075a2:	1d7b      	adds	r3, r7, #5
 80075a4:	33ff      	adds	r3, #255	; 0xff
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	b29a      	uxth	r2, r3
 80075aa:	187b      	adds	r3, r7, r1
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80075b0:	2076      	movs	r0, #118	; 0x76
 80075b2:	183b      	adds	r3, r7, r0
 80075b4:	683a      	ldr	r2, [r7, #0]
 80075b6:	8912      	ldrh	r2, [r2, #8]
 80075b8:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	6959      	ldr	r1, [r3, #20]
 80075be:	1d7b      	adds	r3, r7, #5
 80075c0:	33ff      	adds	r3, #255	; 0xff
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	b29c      	uxth	r4, r3
 80075c6:	183b      	adds	r3, r7, r0
 80075c8:	881a      	ldrh	r2, [r3, #0]
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	0023      	movs	r3, r4
 80075ce:	f000 fd5f 	bl	8008090 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	18d3      	adds	r3, r2, r3
 80075dc:	881b      	ldrh	r3, [r3, #0]
 80075de:	b29a      	uxth	r2, r3
 80075e0:	200a      	movs	r0, #10
 80075e2:	183b      	adds	r3, r7, r0
 80075e4:	491d      	ldr	r1, [pc, #116]	; (800765c <USB_EPStartXfer+0xab0>)
 80075e6:	400a      	ands	r2, r1
 80075e8:	801a      	strh	r2, [r3, #0]
 80075ea:	183b      	adds	r3, r7, r0
 80075ec:	183a      	adds	r2, r7, r0
 80075ee:	8812      	ldrh	r2, [r2, #0]
 80075f0:	2110      	movs	r1, #16
 80075f2:	404a      	eors	r2, r1
 80075f4:	801a      	strh	r2, [r3, #0]
 80075f6:	183b      	adds	r3, r7, r0
 80075f8:	183a      	adds	r2, r7, r0
 80075fa:	8812      	ldrh	r2, [r2, #0]
 80075fc:	2120      	movs	r1, #32
 80075fe:	404a      	eors	r2, r1
 8007600:	801a      	strh	r2, [r3, #0]
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	18d3      	adds	r3, r2, r3
 800760c:	183a      	adds	r2, r7, r0
 800760e:	8812      	ldrh	r2, [r2, #0]
 8007610:	4913      	ldr	r1, [pc, #76]	; (8007660 <USB_EPStartXfer+0xab4>)
 8007612:	430a      	orrs	r2, r1
 8007614:	b292      	uxth	r2, r2
 8007616:	801a      	strh	r2, [r3, #0]
 8007618:	f000 fbf4 	bl	8007e04 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	7b1b      	ldrb	r3, [r3, #12]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d000      	beq.n	8007626 <USB_EPStartXfer+0xa7a>
 8007624:	e0a9      	b.n	800777a <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	699a      	ldr	r2, [r3, #24]
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	429a      	cmp	r2, r3
 8007630:	d918      	bls.n	8007664 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	691b      	ldr	r3, [r3, #16]
 8007636:	1d7a      	adds	r2, r7, #5
 8007638:	32ff      	adds	r2, #255	; 0xff
 800763a:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	699a      	ldr	r2, [r3, #24]
 8007640:	1d7b      	adds	r3, r7, #5
 8007642:	33ff      	adds	r3, #255	; 0xff
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	1ad2      	subs	r2, r2, r3
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	619a      	str	r2, [r3, #24]
 800764c:	e012      	b.n	8007674 <USB_EPStartXfer+0xac8>
 800764e:	46c0      	nop			; (mov r8, r8)
 8007650:	00000406 	.word	0x00000406
 8007654:	ffff8000 	.word	0xffff8000
 8007658:	00000402 	.word	0x00000402
 800765c:	ffff8fbf 	.word	0xffff8fbf
 8007660:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	699b      	ldr	r3, [r3, #24]
 8007668:	1d7a      	adds	r2, r7, #5
 800766a:	32ff      	adds	r2, #255	; 0xff
 800766c:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	2200      	movs	r2, #0
 8007672:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2190      	movs	r1, #144	; 0x90
 8007678:	187a      	adds	r2, r7, r1
 800767a:	6013      	str	r3, [r2, #0]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2250      	movs	r2, #80	; 0x50
 8007680:	5a9b      	ldrh	r3, [r3, r2]
 8007682:	b29b      	uxth	r3, r3
 8007684:	001a      	movs	r2, r3
 8007686:	187b      	adds	r3, r7, r1
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	189b      	adds	r3, r3, r2
 800768c:	187a      	adds	r2, r7, r1
 800768e:	6013      	str	r3, [r2, #0]
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	00da      	lsls	r2, r3, #3
 8007696:	187b      	adds	r3, r7, r1
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	18d3      	adds	r3, r2, r3
 800769c:	4acf      	ldr	r2, [pc, #828]	; (80079dc <USB_EPStartXfer+0xe30>)
 800769e:	4694      	mov	ip, r2
 80076a0:	4463      	add	r3, ip
 80076a2:	218c      	movs	r1, #140	; 0x8c
 80076a4:	187a      	adds	r2, r7, r1
 80076a6:	6013      	str	r3, [r2, #0]
 80076a8:	187b      	adds	r3, r7, r1
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	881b      	ldrh	r3, [r3, #0]
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	059b      	lsls	r3, r3, #22
 80076b2:	0d9b      	lsrs	r3, r3, #22
 80076b4:	b29a      	uxth	r2, r3
 80076b6:	187b      	adds	r3, r7, r1
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	801a      	strh	r2, [r3, #0]
 80076bc:	1d7b      	adds	r3, r7, #5
 80076be:	33ff      	adds	r3, #255	; 0xff
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	2b3e      	cmp	r3, #62	; 0x3e
 80076c4:	d925      	bls.n	8007712 <USB_EPStartXfer+0xb66>
 80076c6:	1d7b      	adds	r3, r7, #5
 80076c8:	33ff      	adds	r3, #255	; 0xff
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	095b      	lsrs	r3, r3, #5
 80076ce:	21e8      	movs	r1, #232	; 0xe8
 80076d0:	187a      	adds	r2, r7, r1
 80076d2:	6013      	str	r3, [r2, #0]
 80076d4:	1d7b      	adds	r3, r7, #5
 80076d6:	33ff      	adds	r3, #255	; 0xff
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	221f      	movs	r2, #31
 80076dc:	4013      	ands	r3, r2
 80076de:	d104      	bne.n	80076ea <USB_EPStartXfer+0xb3e>
 80076e0:	187b      	adds	r3, r7, r1
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	3b01      	subs	r3, #1
 80076e6:	187a      	adds	r2, r7, r1
 80076e8:	6013      	str	r3, [r2, #0]
 80076ea:	218c      	movs	r1, #140	; 0x8c
 80076ec:	187b      	adds	r3, r7, r1
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	881b      	ldrh	r3, [r3, #0]
 80076f2:	b29a      	uxth	r2, r3
 80076f4:	23e8      	movs	r3, #232	; 0xe8
 80076f6:	18fb      	adds	r3, r7, r3
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	029b      	lsls	r3, r3, #10
 80076fe:	b29b      	uxth	r3, r3
 8007700:	4313      	orrs	r3, r2
 8007702:	b29b      	uxth	r3, r3
 8007704:	4ab6      	ldr	r2, [pc, #728]	; (80079e0 <USB_EPStartXfer+0xe34>)
 8007706:	4313      	orrs	r3, r2
 8007708:	b29a      	uxth	r2, r3
 800770a:	187b      	adds	r3, r7, r1
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	801a      	strh	r2, [r3, #0]
 8007710:	e353      	b.n	8007dba <USB_EPStartXfer+0x120e>
 8007712:	1d7b      	adds	r3, r7, #5
 8007714:	33ff      	adds	r3, #255	; 0xff
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d10b      	bne.n	8007734 <USB_EPStartXfer+0xb88>
 800771c:	218c      	movs	r1, #140	; 0x8c
 800771e:	187b      	adds	r3, r7, r1
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	881b      	ldrh	r3, [r3, #0]
 8007724:	b29b      	uxth	r3, r3
 8007726:	4aae      	ldr	r2, [pc, #696]	; (80079e0 <USB_EPStartXfer+0xe34>)
 8007728:	4313      	orrs	r3, r2
 800772a:	b29a      	uxth	r2, r3
 800772c:	187b      	adds	r3, r7, r1
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	801a      	strh	r2, [r3, #0]
 8007732:	e342      	b.n	8007dba <USB_EPStartXfer+0x120e>
 8007734:	1d7b      	adds	r3, r7, #5
 8007736:	33ff      	adds	r3, #255	; 0xff
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	085b      	lsrs	r3, r3, #1
 800773c:	21e8      	movs	r1, #232	; 0xe8
 800773e:	187a      	adds	r2, r7, r1
 8007740:	6013      	str	r3, [r2, #0]
 8007742:	1d7b      	adds	r3, r7, #5
 8007744:	33ff      	adds	r3, #255	; 0xff
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	2201      	movs	r2, #1
 800774a:	4013      	ands	r3, r2
 800774c:	d004      	beq.n	8007758 <USB_EPStartXfer+0xbac>
 800774e:	187b      	adds	r3, r7, r1
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	3301      	adds	r3, #1
 8007754:	187a      	adds	r2, r7, r1
 8007756:	6013      	str	r3, [r2, #0]
 8007758:	218c      	movs	r1, #140	; 0x8c
 800775a:	187b      	adds	r3, r7, r1
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	881b      	ldrh	r3, [r3, #0]
 8007760:	b29a      	uxth	r2, r3
 8007762:	23e8      	movs	r3, #232	; 0xe8
 8007764:	18fb      	adds	r3, r7, r3
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	b29b      	uxth	r3, r3
 800776a:	029b      	lsls	r3, r3, #10
 800776c:	b29b      	uxth	r3, r3
 800776e:	4313      	orrs	r3, r2
 8007770:	b29a      	uxth	r2, r3
 8007772:	187b      	adds	r3, r7, r1
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	801a      	strh	r2, [r3, #0]
 8007778:	e31f      	b.n	8007dba <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	78db      	ldrb	r3, [r3, #3]
 800777e:	2b02      	cmp	r3, #2
 8007780:	d000      	beq.n	8007784 <USB_EPStartXfer+0xbd8>
 8007782:	e191      	b.n	8007aa8 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	785b      	ldrb	r3, [r3, #1]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d000      	beq.n	800778e <USB_EPStartXfer+0xbe2>
 800778c:	e07c      	b.n	8007888 <USB_EPStartXfer+0xcdc>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	21ac      	movs	r1, #172	; 0xac
 8007792:	187a      	adds	r2, r7, r1
 8007794:	6013      	str	r3, [r2, #0]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2250      	movs	r2, #80	; 0x50
 800779a:	5a9b      	ldrh	r3, [r3, r2]
 800779c:	b29b      	uxth	r3, r3
 800779e:	001a      	movs	r2, r3
 80077a0:	187b      	adds	r3, r7, r1
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	189b      	adds	r3, r3, r2
 80077a6:	187a      	adds	r2, r7, r1
 80077a8:	6013      	str	r3, [r2, #0]
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	00da      	lsls	r2, r3, #3
 80077b0:	187b      	adds	r3, r7, r1
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	18d3      	adds	r3, r2, r3
 80077b6:	4a8b      	ldr	r2, [pc, #556]	; (80079e4 <USB_EPStartXfer+0xe38>)
 80077b8:	4694      	mov	ip, r2
 80077ba:	4463      	add	r3, ip
 80077bc:	21a8      	movs	r1, #168	; 0xa8
 80077be:	187a      	adds	r2, r7, r1
 80077c0:	6013      	str	r3, [r2, #0]
 80077c2:	187b      	adds	r3, r7, r1
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	881b      	ldrh	r3, [r3, #0]
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	059b      	lsls	r3, r3, #22
 80077cc:	0d9b      	lsrs	r3, r3, #22
 80077ce:	b29a      	uxth	r2, r3
 80077d0:	187b      	adds	r3, r7, r1
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	801a      	strh	r2, [r3, #0]
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	691b      	ldr	r3, [r3, #16]
 80077da:	2b3e      	cmp	r3, #62	; 0x3e
 80077dc:	d923      	bls.n	8007826 <USB_EPStartXfer+0xc7a>
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	095b      	lsrs	r3, r3, #5
 80077e4:	21e4      	movs	r1, #228	; 0xe4
 80077e6:	187a      	adds	r2, r7, r1
 80077e8:	6013      	str	r3, [r2, #0]
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	221f      	movs	r2, #31
 80077f0:	4013      	ands	r3, r2
 80077f2:	d104      	bne.n	80077fe <USB_EPStartXfer+0xc52>
 80077f4:	187b      	adds	r3, r7, r1
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	3b01      	subs	r3, #1
 80077fa:	187a      	adds	r2, r7, r1
 80077fc:	6013      	str	r3, [r2, #0]
 80077fe:	21a8      	movs	r1, #168	; 0xa8
 8007800:	187b      	adds	r3, r7, r1
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	881b      	ldrh	r3, [r3, #0]
 8007806:	b29a      	uxth	r2, r3
 8007808:	23e4      	movs	r3, #228	; 0xe4
 800780a:	18fb      	adds	r3, r7, r3
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	b29b      	uxth	r3, r3
 8007810:	029b      	lsls	r3, r3, #10
 8007812:	b29b      	uxth	r3, r3
 8007814:	4313      	orrs	r3, r2
 8007816:	b29b      	uxth	r3, r3
 8007818:	4a71      	ldr	r2, [pc, #452]	; (80079e0 <USB_EPStartXfer+0xe34>)
 800781a:	4313      	orrs	r3, r2
 800781c:	b29a      	uxth	r2, r3
 800781e:	187b      	adds	r3, r7, r1
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	801a      	strh	r2, [r3, #0]
 8007824:	e054      	b.n	80078d0 <USB_EPStartXfer+0xd24>
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d10b      	bne.n	8007846 <USB_EPStartXfer+0xc9a>
 800782e:	21a8      	movs	r1, #168	; 0xa8
 8007830:	187b      	adds	r3, r7, r1
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	881b      	ldrh	r3, [r3, #0]
 8007836:	b29b      	uxth	r3, r3
 8007838:	4a69      	ldr	r2, [pc, #420]	; (80079e0 <USB_EPStartXfer+0xe34>)
 800783a:	4313      	orrs	r3, r2
 800783c:	b29a      	uxth	r2, r3
 800783e:	187b      	adds	r3, r7, r1
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	801a      	strh	r2, [r3, #0]
 8007844:	e044      	b.n	80078d0 <USB_EPStartXfer+0xd24>
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	691b      	ldr	r3, [r3, #16]
 800784a:	085b      	lsrs	r3, r3, #1
 800784c:	21e4      	movs	r1, #228	; 0xe4
 800784e:	187a      	adds	r2, r7, r1
 8007850:	6013      	str	r3, [r2, #0]
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	691b      	ldr	r3, [r3, #16]
 8007856:	2201      	movs	r2, #1
 8007858:	4013      	ands	r3, r2
 800785a:	d004      	beq.n	8007866 <USB_EPStartXfer+0xcba>
 800785c:	187b      	adds	r3, r7, r1
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	3301      	adds	r3, #1
 8007862:	187a      	adds	r2, r7, r1
 8007864:	6013      	str	r3, [r2, #0]
 8007866:	21a8      	movs	r1, #168	; 0xa8
 8007868:	187b      	adds	r3, r7, r1
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	881b      	ldrh	r3, [r3, #0]
 800786e:	b29a      	uxth	r2, r3
 8007870:	23e4      	movs	r3, #228	; 0xe4
 8007872:	18fb      	adds	r3, r7, r3
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	b29b      	uxth	r3, r3
 8007878:	029b      	lsls	r3, r3, #10
 800787a:	b29b      	uxth	r3, r3
 800787c:	4313      	orrs	r3, r2
 800787e:	b29a      	uxth	r2, r3
 8007880:	187b      	adds	r3, r7, r1
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	801a      	strh	r2, [r3, #0]
 8007886:	e023      	b.n	80078d0 <USB_EPStartXfer+0xd24>
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	785b      	ldrb	r3, [r3, #1]
 800788c:	2b01      	cmp	r3, #1
 800788e:	d11f      	bne.n	80078d0 <USB_EPStartXfer+0xd24>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	21b4      	movs	r1, #180	; 0xb4
 8007894:	187a      	adds	r2, r7, r1
 8007896:	6013      	str	r3, [r2, #0]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2250      	movs	r2, #80	; 0x50
 800789c:	5a9b      	ldrh	r3, [r3, r2]
 800789e:	b29b      	uxth	r3, r3
 80078a0:	001a      	movs	r2, r3
 80078a2:	187b      	adds	r3, r7, r1
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	189b      	adds	r3, r3, r2
 80078a8:	187a      	adds	r2, r7, r1
 80078aa:	6013      	str	r3, [r2, #0]
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	00da      	lsls	r2, r3, #3
 80078b2:	187b      	adds	r3, r7, r1
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	18d3      	adds	r3, r2, r3
 80078b8:	4a4a      	ldr	r2, [pc, #296]	; (80079e4 <USB_EPStartXfer+0xe38>)
 80078ba:	4694      	mov	ip, r2
 80078bc:	4463      	add	r3, ip
 80078be:	21b0      	movs	r1, #176	; 0xb0
 80078c0:	187a      	adds	r2, r7, r1
 80078c2:	6013      	str	r3, [r2, #0]
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	691b      	ldr	r3, [r3, #16]
 80078c8:	b29a      	uxth	r2, r3
 80078ca:	187b      	adds	r3, r7, r1
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	801a      	strh	r2, [r3, #0]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	22a4      	movs	r2, #164	; 0xa4
 80078d4:	18ba      	adds	r2, r7, r2
 80078d6:	6013      	str	r3, [r2, #0]
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	785b      	ldrb	r3, [r3, #1]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d000      	beq.n	80078e2 <USB_EPStartXfer+0xd36>
 80078e0:	e082      	b.n	80079e8 <USB_EPStartXfer+0xe3c>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	219c      	movs	r1, #156	; 0x9c
 80078e6:	187a      	adds	r2, r7, r1
 80078e8:	6013      	str	r3, [r2, #0]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2250      	movs	r2, #80	; 0x50
 80078ee:	5a9b      	ldrh	r3, [r3, r2]
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	001a      	movs	r2, r3
 80078f4:	187b      	adds	r3, r7, r1
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	189b      	adds	r3, r3, r2
 80078fa:	187a      	adds	r2, r7, r1
 80078fc:	6013      	str	r3, [r2, #0]
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	00da      	lsls	r2, r3, #3
 8007904:	187b      	adds	r3, r7, r1
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	18d3      	adds	r3, r2, r3
 800790a:	4a34      	ldr	r2, [pc, #208]	; (80079dc <USB_EPStartXfer+0xe30>)
 800790c:	4694      	mov	ip, r2
 800790e:	4463      	add	r3, ip
 8007910:	2198      	movs	r1, #152	; 0x98
 8007912:	187a      	adds	r2, r7, r1
 8007914:	6013      	str	r3, [r2, #0]
 8007916:	187b      	adds	r3, r7, r1
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	881b      	ldrh	r3, [r3, #0]
 800791c:	b29b      	uxth	r3, r3
 800791e:	059b      	lsls	r3, r3, #22
 8007920:	0d9b      	lsrs	r3, r3, #22
 8007922:	b29a      	uxth	r2, r3
 8007924:	187b      	adds	r3, r7, r1
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	801a      	strh	r2, [r3, #0]
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	691b      	ldr	r3, [r3, #16]
 800792e:	2b3e      	cmp	r3, #62	; 0x3e
 8007930:	d923      	bls.n	800797a <USB_EPStartXfer+0xdce>
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	691b      	ldr	r3, [r3, #16]
 8007936:	095b      	lsrs	r3, r3, #5
 8007938:	21e0      	movs	r1, #224	; 0xe0
 800793a:	187a      	adds	r2, r7, r1
 800793c:	6013      	str	r3, [r2, #0]
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	221f      	movs	r2, #31
 8007944:	4013      	ands	r3, r2
 8007946:	d104      	bne.n	8007952 <USB_EPStartXfer+0xda6>
 8007948:	187b      	adds	r3, r7, r1
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	3b01      	subs	r3, #1
 800794e:	187a      	adds	r2, r7, r1
 8007950:	6013      	str	r3, [r2, #0]
 8007952:	2198      	movs	r1, #152	; 0x98
 8007954:	187b      	adds	r3, r7, r1
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	881b      	ldrh	r3, [r3, #0]
 800795a:	b29a      	uxth	r2, r3
 800795c:	23e0      	movs	r3, #224	; 0xe0
 800795e:	18fb      	adds	r3, r7, r3
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	b29b      	uxth	r3, r3
 8007964:	029b      	lsls	r3, r3, #10
 8007966:	b29b      	uxth	r3, r3
 8007968:	4313      	orrs	r3, r2
 800796a:	b29b      	uxth	r3, r3
 800796c:	4a1c      	ldr	r2, [pc, #112]	; (80079e0 <USB_EPStartXfer+0xe34>)
 800796e:	4313      	orrs	r3, r2
 8007970:	b29a      	uxth	r2, r3
 8007972:	187b      	adds	r3, r7, r1
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	801a      	strh	r2, [r3, #0]
 8007978:	e057      	b.n	8007a2a <USB_EPStartXfer+0xe7e>
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	691b      	ldr	r3, [r3, #16]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d10b      	bne.n	800799a <USB_EPStartXfer+0xdee>
 8007982:	2198      	movs	r1, #152	; 0x98
 8007984:	187b      	adds	r3, r7, r1
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	881b      	ldrh	r3, [r3, #0]
 800798a:	b29b      	uxth	r3, r3
 800798c:	4a14      	ldr	r2, [pc, #80]	; (80079e0 <USB_EPStartXfer+0xe34>)
 800798e:	4313      	orrs	r3, r2
 8007990:	b29a      	uxth	r2, r3
 8007992:	187b      	adds	r3, r7, r1
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	801a      	strh	r2, [r3, #0]
 8007998:	e047      	b.n	8007a2a <USB_EPStartXfer+0xe7e>
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	691b      	ldr	r3, [r3, #16]
 800799e:	085b      	lsrs	r3, r3, #1
 80079a0:	21e0      	movs	r1, #224	; 0xe0
 80079a2:	187a      	adds	r2, r7, r1
 80079a4:	6013      	str	r3, [r2, #0]
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	691b      	ldr	r3, [r3, #16]
 80079aa:	2201      	movs	r2, #1
 80079ac:	4013      	ands	r3, r2
 80079ae:	d004      	beq.n	80079ba <USB_EPStartXfer+0xe0e>
 80079b0:	187b      	adds	r3, r7, r1
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	3301      	adds	r3, #1
 80079b6:	187a      	adds	r2, r7, r1
 80079b8:	6013      	str	r3, [r2, #0]
 80079ba:	2198      	movs	r1, #152	; 0x98
 80079bc:	187b      	adds	r3, r7, r1
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	881b      	ldrh	r3, [r3, #0]
 80079c2:	b29a      	uxth	r2, r3
 80079c4:	23e0      	movs	r3, #224	; 0xe0
 80079c6:	18fb      	adds	r3, r7, r3
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	029b      	lsls	r3, r3, #10
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	4313      	orrs	r3, r2
 80079d2:	b29a      	uxth	r2, r3
 80079d4:	187b      	adds	r3, r7, r1
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	801a      	strh	r2, [r3, #0]
 80079da:	e026      	b.n	8007a2a <USB_EPStartXfer+0xe7e>
 80079dc:	00000406 	.word	0x00000406
 80079e0:	ffff8000 	.word	0xffff8000
 80079e4:	00000402 	.word	0x00000402
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	785b      	ldrb	r3, [r3, #1]
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d11c      	bne.n	8007a2a <USB_EPStartXfer+0xe7e>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2250      	movs	r2, #80	; 0x50
 80079f4:	5a9b      	ldrh	r3, [r3, r2]
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	001a      	movs	r2, r3
 80079fa:	21a4      	movs	r1, #164	; 0xa4
 80079fc:	187b      	adds	r3, r7, r1
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	189b      	adds	r3, r3, r2
 8007a02:	187a      	adds	r2, r7, r1
 8007a04:	6013      	str	r3, [r2, #0]
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	00da      	lsls	r2, r3, #3
 8007a0c:	187b      	adds	r3, r7, r1
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	18d3      	adds	r3, r2, r3
 8007a12:	4ad2      	ldr	r2, [pc, #840]	; (8007d5c <USB_EPStartXfer+0x11b0>)
 8007a14:	4694      	mov	ip, r2
 8007a16:	4463      	add	r3, ip
 8007a18:	21a0      	movs	r1, #160	; 0xa0
 8007a1a:	187a      	adds	r2, r7, r1
 8007a1c:	6013      	str	r3, [r2, #0]
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	691b      	ldr	r3, [r3, #16]
 8007a22:	b29a      	uxth	r2, r3
 8007a24:	187b      	adds	r3, r7, r1
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	69db      	ldr	r3, [r3, #28]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d100      	bne.n	8007a34 <USB_EPStartXfer+0xe88>
 8007a32:	e1c2      	b.n	8007dba <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007a34:	687a      	ldr	r2, [r7, #4]
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	009b      	lsls	r3, r3, #2
 8007a3c:	18d2      	adds	r2, r2, r3
 8007a3e:	2196      	movs	r1, #150	; 0x96
 8007a40:	187b      	adds	r3, r7, r1
 8007a42:	8812      	ldrh	r2, [r2, #0]
 8007a44:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007a46:	187b      	adds	r3, r7, r1
 8007a48:	881a      	ldrh	r2, [r3, #0]
 8007a4a:	2380      	movs	r3, #128	; 0x80
 8007a4c:	01db      	lsls	r3, r3, #7
 8007a4e:	4013      	ands	r3, r2
 8007a50:	d004      	beq.n	8007a5c <USB_EPStartXfer+0xeb0>
 8007a52:	187b      	adds	r3, r7, r1
 8007a54:	881b      	ldrh	r3, [r3, #0]
 8007a56:	2240      	movs	r2, #64	; 0x40
 8007a58:	4013      	ands	r3, r2
 8007a5a:	d10d      	bne.n	8007a78 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007a5c:	2196      	movs	r1, #150	; 0x96
 8007a5e:	187b      	adds	r3, r7, r1
 8007a60:	881a      	ldrh	r2, [r3, #0]
 8007a62:	2380      	movs	r3, #128	; 0x80
 8007a64:	01db      	lsls	r3, r3, #7
 8007a66:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007a68:	d000      	beq.n	8007a6c <USB_EPStartXfer+0xec0>
 8007a6a:	e1a6      	b.n	8007dba <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007a6c:	187b      	adds	r3, r7, r1
 8007a6e:	881b      	ldrh	r3, [r3, #0]
 8007a70:	2240      	movs	r2, #64	; 0x40
 8007a72:	4013      	ands	r3, r2
 8007a74:	d000      	beq.n	8007a78 <USB_EPStartXfer+0xecc>
 8007a76:	e1a0      	b.n	8007dba <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	18d3      	adds	r3, r2, r3
 8007a82:	881b      	ldrh	r3, [r3, #0]
 8007a84:	b29a      	uxth	r2, r3
 8007a86:	2094      	movs	r0, #148	; 0x94
 8007a88:	183b      	adds	r3, r7, r0
 8007a8a:	49b5      	ldr	r1, [pc, #724]	; (8007d60 <USB_EPStartXfer+0x11b4>)
 8007a8c:	400a      	ands	r2, r1
 8007a8e:	801a      	strh	r2, [r3, #0]
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	18d3      	adds	r3, r2, r3
 8007a9a:	183a      	adds	r2, r7, r0
 8007a9c:	8812      	ldrh	r2, [r2, #0]
 8007a9e:	49b1      	ldr	r1, [pc, #708]	; (8007d64 <USB_EPStartXfer+0x11b8>)
 8007aa0:	430a      	orrs	r2, r1
 8007aa2:	b292      	uxth	r2, r2
 8007aa4:	801a      	strh	r2, [r3, #0]
 8007aa6:	e188      	b.n	8007dba <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	78db      	ldrb	r3, [r3, #3]
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d000      	beq.n	8007ab2 <USB_EPStartXfer+0xf06>
 8007ab0:	e181      	b.n	8007db6 <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	699a      	ldr	r2, [r3, #24]
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	691b      	ldr	r3, [r3, #16]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d90d      	bls.n	8007ada <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	1d7a      	adds	r2, r7, #5
 8007ac4:	32ff      	adds	r2, #255	; 0xff
 8007ac6:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	699a      	ldr	r2, [r3, #24]
 8007acc:	1d7b      	adds	r3, r7, #5
 8007ace:	33ff      	adds	r3, #255	; 0xff
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	1ad2      	subs	r2, r2, r3
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	619a      	str	r2, [r3, #24]
 8007ad8:	e007      	b.n	8007aea <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	699b      	ldr	r3, [r3, #24]
 8007ade:	1d7a      	adds	r2, r7, #5
 8007ae0:	32ff      	adds	r2, #255	; 0xff
 8007ae2:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	785b      	ldrb	r3, [r3, #1]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d000      	beq.n	8007af4 <USB_EPStartXfer+0xf48>
 8007af2:	e082      	b.n	8007bfa <USB_EPStartXfer+0x104e>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	21cc      	movs	r1, #204	; 0xcc
 8007af8:	187a      	adds	r2, r7, r1
 8007afa:	6013      	str	r3, [r2, #0]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2250      	movs	r2, #80	; 0x50
 8007b00:	5a9b      	ldrh	r3, [r3, r2]
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	001a      	movs	r2, r3
 8007b06:	187b      	adds	r3, r7, r1
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	189b      	adds	r3, r3, r2
 8007b0c:	187a      	adds	r2, r7, r1
 8007b0e:	6013      	str	r3, [r2, #0]
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	00da      	lsls	r2, r3, #3
 8007b16:	187b      	adds	r3, r7, r1
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	18d3      	adds	r3, r2, r3
 8007b1c:	4a92      	ldr	r2, [pc, #584]	; (8007d68 <USB_EPStartXfer+0x11bc>)
 8007b1e:	4694      	mov	ip, r2
 8007b20:	4463      	add	r3, ip
 8007b22:	21c8      	movs	r1, #200	; 0xc8
 8007b24:	187a      	adds	r2, r7, r1
 8007b26:	6013      	str	r3, [r2, #0]
 8007b28:	187b      	adds	r3, r7, r1
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	881b      	ldrh	r3, [r3, #0]
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	059b      	lsls	r3, r3, #22
 8007b32:	0d9b      	lsrs	r3, r3, #22
 8007b34:	b29a      	uxth	r2, r3
 8007b36:	187b      	adds	r3, r7, r1
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	801a      	strh	r2, [r3, #0]
 8007b3c:	1d7b      	adds	r3, r7, #5
 8007b3e:	33ff      	adds	r3, #255	; 0xff
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	2b3e      	cmp	r3, #62	; 0x3e
 8007b44:	d925      	bls.n	8007b92 <USB_EPStartXfer+0xfe6>
 8007b46:	1d7b      	adds	r3, r7, #5
 8007b48:	33ff      	adds	r3, #255	; 0xff
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	095b      	lsrs	r3, r3, #5
 8007b4e:	21dc      	movs	r1, #220	; 0xdc
 8007b50:	187a      	adds	r2, r7, r1
 8007b52:	6013      	str	r3, [r2, #0]
 8007b54:	1d7b      	adds	r3, r7, #5
 8007b56:	33ff      	adds	r3, #255	; 0xff
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	221f      	movs	r2, #31
 8007b5c:	4013      	ands	r3, r2
 8007b5e:	d104      	bne.n	8007b6a <USB_EPStartXfer+0xfbe>
 8007b60:	187b      	adds	r3, r7, r1
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	3b01      	subs	r3, #1
 8007b66:	187a      	adds	r2, r7, r1
 8007b68:	6013      	str	r3, [r2, #0]
 8007b6a:	21c8      	movs	r1, #200	; 0xc8
 8007b6c:	187b      	adds	r3, r7, r1
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	881b      	ldrh	r3, [r3, #0]
 8007b72:	b29a      	uxth	r2, r3
 8007b74:	23dc      	movs	r3, #220	; 0xdc
 8007b76:	18fb      	adds	r3, r7, r3
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	029b      	lsls	r3, r3, #10
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	4313      	orrs	r3, r2
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	4a79      	ldr	r2, [pc, #484]	; (8007d6c <USB_EPStartXfer+0x11c0>)
 8007b86:	4313      	orrs	r3, r2
 8007b88:	b29a      	uxth	r2, r3
 8007b8a:	187b      	adds	r3, r7, r1
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	801a      	strh	r2, [r3, #0]
 8007b90:	e058      	b.n	8007c44 <USB_EPStartXfer+0x1098>
 8007b92:	1d7b      	adds	r3, r7, #5
 8007b94:	33ff      	adds	r3, #255	; 0xff
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d10b      	bne.n	8007bb4 <USB_EPStartXfer+0x1008>
 8007b9c:	21c8      	movs	r1, #200	; 0xc8
 8007b9e:	187b      	adds	r3, r7, r1
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	881b      	ldrh	r3, [r3, #0]
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	4a71      	ldr	r2, [pc, #452]	; (8007d6c <USB_EPStartXfer+0x11c0>)
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	b29a      	uxth	r2, r3
 8007bac:	187b      	adds	r3, r7, r1
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	801a      	strh	r2, [r3, #0]
 8007bb2:	e047      	b.n	8007c44 <USB_EPStartXfer+0x1098>
 8007bb4:	1d7b      	adds	r3, r7, #5
 8007bb6:	33ff      	adds	r3, #255	; 0xff
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	085b      	lsrs	r3, r3, #1
 8007bbc:	21dc      	movs	r1, #220	; 0xdc
 8007bbe:	187a      	adds	r2, r7, r1
 8007bc0:	6013      	str	r3, [r2, #0]
 8007bc2:	1d7b      	adds	r3, r7, #5
 8007bc4:	33ff      	adds	r3, #255	; 0xff
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2201      	movs	r2, #1
 8007bca:	4013      	ands	r3, r2
 8007bcc:	d004      	beq.n	8007bd8 <USB_EPStartXfer+0x102c>
 8007bce:	187b      	adds	r3, r7, r1
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	187a      	adds	r2, r7, r1
 8007bd6:	6013      	str	r3, [r2, #0]
 8007bd8:	21c8      	movs	r1, #200	; 0xc8
 8007bda:	187b      	adds	r3, r7, r1
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	881b      	ldrh	r3, [r3, #0]
 8007be0:	b29a      	uxth	r2, r3
 8007be2:	23dc      	movs	r3, #220	; 0xdc
 8007be4:	18fb      	adds	r3, r7, r3
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	029b      	lsls	r3, r3, #10
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	b29a      	uxth	r2, r3
 8007bf2:	187b      	adds	r3, r7, r1
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	801a      	strh	r2, [r3, #0]
 8007bf8:	e024      	b.n	8007c44 <USB_EPStartXfer+0x1098>
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	785b      	ldrb	r3, [r3, #1]
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d120      	bne.n	8007c44 <USB_EPStartXfer+0x1098>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	21d4      	movs	r1, #212	; 0xd4
 8007c06:	187a      	adds	r2, r7, r1
 8007c08:	6013      	str	r3, [r2, #0]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2250      	movs	r2, #80	; 0x50
 8007c0e:	5a9b      	ldrh	r3, [r3, r2]
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	001a      	movs	r2, r3
 8007c14:	187b      	adds	r3, r7, r1
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	189b      	adds	r3, r3, r2
 8007c1a:	187a      	adds	r2, r7, r1
 8007c1c:	6013      	str	r3, [r2, #0]
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	00da      	lsls	r2, r3, #3
 8007c24:	187b      	adds	r3, r7, r1
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	18d3      	adds	r3, r2, r3
 8007c2a:	4a4f      	ldr	r2, [pc, #316]	; (8007d68 <USB_EPStartXfer+0x11bc>)
 8007c2c:	4694      	mov	ip, r2
 8007c2e:	4463      	add	r3, ip
 8007c30:	21d0      	movs	r1, #208	; 0xd0
 8007c32:	187a      	adds	r2, r7, r1
 8007c34:	6013      	str	r3, [r2, #0]
 8007c36:	1d7b      	adds	r3, r7, #5
 8007c38:	33ff      	adds	r3, #255	; 0xff
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	b29a      	uxth	r2, r3
 8007c3e:	187b      	adds	r3, r7, r1
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	801a      	strh	r2, [r3, #0]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	22c4      	movs	r2, #196	; 0xc4
 8007c48:	18ba      	adds	r2, r7, r2
 8007c4a:	6013      	str	r3, [r2, #0]
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	785b      	ldrb	r3, [r3, #1]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d000      	beq.n	8007c56 <USB_EPStartXfer+0x10aa>
 8007c54:	e08c      	b.n	8007d70 <USB_EPStartXfer+0x11c4>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	21bc      	movs	r1, #188	; 0xbc
 8007c5a:	187a      	adds	r2, r7, r1
 8007c5c:	6013      	str	r3, [r2, #0]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2250      	movs	r2, #80	; 0x50
 8007c62:	5a9b      	ldrh	r3, [r3, r2]
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	001a      	movs	r2, r3
 8007c68:	187b      	adds	r3, r7, r1
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	189b      	adds	r3, r3, r2
 8007c6e:	187a      	adds	r2, r7, r1
 8007c70:	6013      	str	r3, [r2, #0]
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	00da      	lsls	r2, r3, #3
 8007c78:	187b      	adds	r3, r7, r1
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	18d3      	adds	r3, r2, r3
 8007c7e:	4a37      	ldr	r2, [pc, #220]	; (8007d5c <USB_EPStartXfer+0x11b0>)
 8007c80:	4694      	mov	ip, r2
 8007c82:	4463      	add	r3, ip
 8007c84:	21b8      	movs	r1, #184	; 0xb8
 8007c86:	187a      	adds	r2, r7, r1
 8007c88:	6013      	str	r3, [r2, #0]
 8007c8a:	187b      	adds	r3, r7, r1
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	881b      	ldrh	r3, [r3, #0]
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	059b      	lsls	r3, r3, #22
 8007c94:	0d9b      	lsrs	r3, r3, #22
 8007c96:	b29a      	uxth	r2, r3
 8007c98:	187b      	adds	r3, r7, r1
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	801a      	strh	r2, [r3, #0]
 8007c9e:	1d7b      	adds	r3, r7, #5
 8007ca0:	33ff      	adds	r3, #255	; 0xff
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	2b3e      	cmp	r3, #62	; 0x3e
 8007ca6:	d925      	bls.n	8007cf4 <USB_EPStartXfer+0x1148>
 8007ca8:	1d7b      	adds	r3, r7, #5
 8007caa:	33ff      	adds	r3, #255	; 0xff
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	095b      	lsrs	r3, r3, #5
 8007cb0:	21d8      	movs	r1, #216	; 0xd8
 8007cb2:	187a      	adds	r2, r7, r1
 8007cb4:	6013      	str	r3, [r2, #0]
 8007cb6:	1d7b      	adds	r3, r7, #5
 8007cb8:	33ff      	adds	r3, #255	; 0xff
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	221f      	movs	r2, #31
 8007cbe:	4013      	ands	r3, r2
 8007cc0:	d104      	bne.n	8007ccc <USB_EPStartXfer+0x1120>
 8007cc2:	187b      	adds	r3, r7, r1
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	3b01      	subs	r3, #1
 8007cc8:	187a      	adds	r2, r7, r1
 8007cca:	6013      	str	r3, [r2, #0]
 8007ccc:	21b8      	movs	r1, #184	; 0xb8
 8007cce:	187b      	adds	r3, r7, r1
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	881b      	ldrh	r3, [r3, #0]
 8007cd4:	b29a      	uxth	r2, r3
 8007cd6:	23d8      	movs	r3, #216	; 0xd8
 8007cd8:	18fb      	adds	r3, r7, r3
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	029b      	lsls	r3, r3, #10
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	4a21      	ldr	r2, [pc, #132]	; (8007d6c <USB_EPStartXfer+0x11c0>)
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	b29a      	uxth	r2, r3
 8007cec:	187b      	adds	r3, r7, r1
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	801a      	strh	r2, [r3, #0]
 8007cf2:	e062      	b.n	8007dba <USB_EPStartXfer+0x120e>
 8007cf4:	1d7b      	adds	r3, r7, #5
 8007cf6:	33ff      	adds	r3, #255	; 0xff
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d10b      	bne.n	8007d16 <USB_EPStartXfer+0x116a>
 8007cfe:	21b8      	movs	r1, #184	; 0xb8
 8007d00:	187b      	adds	r3, r7, r1
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	881b      	ldrh	r3, [r3, #0]
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	4a18      	ldr	r2, [pc, #96]	; (8007d6c <USB_EPStartXfer+0x11c0>)
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	b29a      	uxth	r2, r3
 8007d0e:	187b      	adds	r3, r7, r1
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	801a      	strh	r2, [r3, #0]
 8007d14:	e051      	b.n	8007dba <USB_EPStartXfer+0x120e>
 8007d16:	1d7b      	adds	r3, r7, #5
 8007d18:	33ff      	adds	r3, #255	; 0xff
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	085b      	lsrs	r3, r3, #1
 8007d1e:	21d8      	movs	r1, #216	; 0xd8
 8007d20:	187a      	adds	r2, r7, r1
 8007d22:	6013      	str	r3, [r2, #0]
 8007d24:	1d7b      	adds	r3, r7, #5
 8007d26:	33ff      	adds	r3, #255	; 0xff
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	4013      	ands	r3, r2
 8007d2e:	d004      	beq.n	8007d3a <USB_EPStartXfer+0x118e>
 8007d30:	187b      	adds	r3, r7, r1
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	3301      	adds	r3, #1
 8007d36:	187a      	adds	r2, r7, r1
 8007d38:	6013      	str	r3, [r2, #0]
 8007d3a:	21b8      	movs	r1, #184	; 0xb8
 8007d3c:	187b      	adds	r3, r7, r1
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	881b      	ldrh	r3, [r3, #0]
 8007d42:	b29a      	uxth	r2, r3
 8007d44:	23d8      	movs	r3, #216	; 0xd8
 8007d46:	18fb      	adds	r3, r7, r3
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	029b      	lsls	r3, r3, #10
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	4313      	orrs	r3, r2
 8007d52:	b29a      	uxth	r2, r3
 8007d54:	187b      	adds	r3, r7, r1
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	801a      	strh	r2, [r3, #0]
 8007d5a:	e02e      	b.n	8007dba <USB_EPStartXfer+0x120e>
 8007d5c:	00000406 	.word	0x00000406
 8007d60:	ffff8f8f 	.word	0xffff8f8f
 8007d64:	ffff80c0 	.word	0xffff80c0
 8007d68:	00000402 	.word	0x00000402
 8007d6c:	ffff8000 	.word	0xffff8000
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	785b      	ldrb	r3, [r3, #1]
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d120      	bne.n	8007dba <USB_EPStartXfer+0x120e>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2250      	movs	r2, #80	; 0x50
 8007d7c:	5a9b      	ldrh	r3, [r3, r2]
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	001a      	movs	r2, r3
 8007d82:	21c4      	movs	r1, #196	; 0xc4
 8007d84:	187b      	adds	r3, r7, r1
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	189b      	adds	r3, r3, r2
 8007d8a:	187a      	adds	r2, r7, r1
 8007d8c:	6013      	str	r3, [r2, #0]
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	00da      	lsls	r2, r3, #3
 8007d94:	187b      	adds	r3, r7, r1
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	18d3      	adds	r3, r2, r3
 8007d9a:	4a1d      	ldr	r2, [pc, #116]	; (8007e10 <USB_EPStartXfer+0x1264>)
 8007d9c:	4694      	mov	ip, r2
 8007d9e:	4463      	add	r3, ip
 8007da0:	21c0      	movs	r1, #192	; 0xc0
 8007da2:	187a      	adds	r2, r7, r1
 8007da4:	6013      	str	r3, [r2, #0]
 8007da6:	1d7b      	adds	r3, r7, #5
 8007da8:	33ff      	adds	r3, #255	; 0xff
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	b29a      	uxth	r2, r3
 8007dae:	187b      	adds	r3, r7, r1
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	801a      	strh	r2, [r3, #0]
 8007db4:	e001      	b.n	8007dba <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 8007db6:	2301      	movs	r3, #1
 8007db8:	e025      	b.n	8007e06 <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	18d3      	adds	r3, r2, r3
 8007dc4:	881b      	ldrh	r3, [r3, #0]
 8007dc6:	b29a      	uxth	r2, r3
 8007dc8:	208a      	movs	r0, #138	; 0x8a
 8007dca:	183b      	adds	r3, r7, r0
 8007dcc:	4911      	ldr	r1, [pc, #68]	; (8007e14 <USB_EPStartXfer+0x1268>)
 8007dce:	400a      	ands	r2, r1
 8007dd0:	801a      	strh	r2, [r3, #0]
 8007dd2:	183b      	adds	r3, r7, r0
 8007dd4:	183a      	adds	r2, r7, r0
 8007dd6:	8812      	ldrh	r2, [r2, #0]
 8007dd8:	2180      	movs	r1, #128	; 0x80
 8007dda:	0149      	lsls	r1, r1, #5
 8007ddc:	404a      	eors	r2, r1
 8007dde:	801a      	strh	r2, [r3, #0]
 8007de0:	183b      	adds	r3, r7, r0
 8007de2:	183a      	adds	r2, r7, r0
 8007de4:	8812      	ldrh	r2, [r2, #0]
 8007de6:	2180      	movs	r1, #128	; 0x80
 8007de8:	0189      	lsls	r1, r1, #6
 8007dea:	404a      	eors	r2, r1
 8007dec:	801a      	strh	r2, [r3, #0]
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	18d3      	adds	r3, r2, r3
 8007df8:	183a      	adds	r2, r7, r0
 8007dfa:	8812      	ldrh	r2, [r2, #0]
 8007dfc:	4906      	ldr	r1, [pc, #24]	; (8007e18 <USB_EPStartXfer+0x126c>)
 8007dfe:	430a      	orrs	r2, r1
 8007e00:	b292      	uxth	r2, r2
 8007e02:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8007e04:	2300      	movs	r3, #0
}
 8007e06:	0018      	movs	r0, r3
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	b043      	add	sp, #268	; 0x10c
 8007e0c:	bd90      	pop	{r4, r7, pc}
 8007e0e:	46c0      	nop			; (mov r8, r8)
 8007e10:	00000406 	.word	0x00000406
 8007e14:	ffffbf8f 	.word	0xffffbf8f
 8007e18:	ffff8080 	.word	0xffff8080

08007e1c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	785b      	ldrb	r3, [r3, #1]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d01d      	beq.n	8007e6a <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	009b      	lsls	r3, r3, #2
 8007e36:	18d3      	adds	r3, r2, r3
 8007e38:	881b      	ldrh	r3, [r3, #0]
 8007e3a:	b29a      	uxth	r2, r3
 8007e3c:	200c      	movs	r0, #12
 8007e3e:	183b      	adds	r3, r7, r0
 8007e40:	491b      	ldr	r1, [pc, #108]	; (8007eb0 <USB_EPSetStall+0x94>)
 8007e42:	400a      	ands	r2, r1
 8007e44:	801a      	strh	r2, [r3, #0]
 8007e46:	183b      	adds	r3, r7, r0
 8007e48:	183a      	adds	r2, r7, r0
 8007e4a:	8812      	ldrh	r2, [r2, #0]
 8007e4c:	2110      	movs	r1, #16
 8007e4e:	404a      	eors	r2, r1
 8007e50:	801a      	strh	r2, [r3, #0]
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	18d3      	adds	r3, r2, r3
 8007e5c:	183a      	adds	r2, r7, r0
 8007e5e:	8812      	ldrh	r2, [r2, #0]
 8007e60:	4914      	ldr	r1, [pc, #80]	; (8007eb4 <USB_EPSetStall+0x98>)
 8007e62:	430a      	orrs	r2, r1
 8007e64:	b292      	uxth	r2, r2
 8007e66:	801a      	strh	r2, [r3, #0]
 8007e68:	e01d      	b.n	8007ea6 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	18d3      	adds	r3, r2, r3
 8007e74:	881b      	ldrh	r3, [r3, #0]
 8007e76:	b29a      	uxth	r2, r3
 8007e78:	200e      	movs	r0, #14
 8007e7a:	183b      	adds	r3, r7, r0
 8007e7c:	490e      	ldr	r1, [pc, #56]	; (8007eb8 <USB_EPSetStall+0x9c>)
 8007e7e:	400a      	ands	r2, r1
 8007e80:	801a      	strh	r2, [r3, #0]
 8007e82:	183b      	adds	r3, r7, r0
 8007e84:	183a      	adds	r2, r7, r0
 8007e86:	8812      	ldrh	r2, [r2, #0]
 8007e88:	2180      	movs	r1, #128	; 0x80
 8007e8a:	0149      	lsls	r1, r1, #5
 8007e8c:	404a      	eors	r2, r1
 8007e8e:	801a      	strh	r2, [r3, #0]
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	18d3      	adds	r3, r2, r3
 8007e9a:	183a      	adds	r2, r7, r0
 8007e9c:	8812      	ldrh	r2, [r2, #0]
 8007e9e:	4905      	ldr	r1, [pc, #20]	; (8007eb4 <USB_EPSetStall+0x98>)
 8007ea0:	430a      	orrs	r2, r1
 8007ea2:	b292      	uxth	r2, r2
 8007ea4:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8007ea6:	2300      	movs	r3, #0
}
 8007ea8:	0018      	movs	r0, r3
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	b004      	add	sp, #16
 8007eae:	bd80      	pop	{r7, pc}
 8007eb0:	ffff8fbf 	.word	0xffff8fbf
 8007eb4:	ffff8080 	.word	0xffff8080
 8007eb8:	ffffbf8f 	.word	0xffffbf8f

08007ebc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b086      	sub	sp, #24
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	7b1b      	ldrb	r3, [r3, #12]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d000      	beq.n	8007ed0 <USB_EPClearStall+0x14>
 8007ece:	e095      	b.n	8007ffc <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	785b      	ldrb	r3, [r3, #1]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d046      	beq.n	8007f66 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	18d2      	adds	r2, r2, r3
 8007ee2:	2110      	movs	r1, #16
 8007ee4:	187b      	adds	r3, r7, r1
 8007ee6:	8812      	ldrh	r2, [r2, #0]
 8007ee8:	801a      	strh	r2, [r3, #0]
 8007eea:	187b      	adds	r3, r7, r1
 8007eec:	881b      	ldrh	r3, [r3, #0]
 8007eee:	2240      	movs	r2, #64	; 0x40
 8007ef0:	4013      	ands	r3, r2
 8007ef2:	d016      	beq.n	8007f22 <USB_EPClearStall+0x66>
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	18d3      	adds	r3, r2, r3
 8007efe:	881b      	ldrh	r3, [r3, #0]
 8007f00:	b29a      	uxth	r2, r3
 8007f02:	200e      	movs	r0, #14
 8007f04:	183b      	adds	r3, r7, r0
 8007f06:	4940      	ldr	r1, [pc, #256]	; (8008008 <USB_EPClearStall+0x14c>)
 8007f08:	400a      	ands	r2, r1
 8007f0a:	801a      	strh	r2, [r3, #0]
 8007f0c:	687a      	ldr	r2, [r7, #4]
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	009b      	lsls	r3, r3, #2
 8007f14:	18d3      	adds	r3, r2, r3
 8007f16:	183a      	adds	r2, r7, r0
 8007f18:	8812      	ldrh	r2, [r2, #0]
 8007f1a:	493c      	ldr	r1, [pc, #240]	; (800800c <USB_EPClearStall+0x150>)
 8007f1c:	430a      	orrs	r2, r1
 8007f1e:	b292      	uxth	r2, r2
 8007f20:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	78db      	ldrb	r3, [r3, #3]
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d068      	beq.n	8007ffc <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	18d3      	adds	r3, r2, r3
 8007f34:	881b      	ldrh	r3, [r3, #0]
 8007f36:	b29a      	uxth	r2, r3
 8007f38:	200c      	movs	r0, #12
 8007f3a:	183b      	adds	r3, r7, r0
 8007f3c:	4934      	ldr	r1, [pc, #208]	; (8008010 <USB_EPClearStall+0x154>)
 8007f3e:	400a      	ands	r2, r1
 8007f40:	801a      	strh	r2, [r3, #0]
 8007f42:	183b      	adds	r3, r7, r0
 8007f44:	183a      	adds	r2, r7, r0
 8007f46:	8812      	ldrh	r2, [r2, #0]
 8007f48:	2120      	movs	r1, #32
 8007f4a:	404a      	eors	r2, r1
 8007f4c:	801a      	strh	r2, [r3, #0]
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	18d3      	adds	r3, r2, r3
 8007f58:	183a      	adds	r2, r7, r0
 8007f5a:	8812      	ldrh	r2, [r2, #0]
 8007f5c:	492d      	ldr	r1, [pc, #180]	; (8008014 <USB_EPClearStall+0x158>)
 8007f5e:	430a      	orrs	r2, r1
 8007f60:	b292      	uxth	r2, r2
 8007f62:	801a      	strh	r2, [r3, #0]
 8007f64:	e04a      	b.n	8007ffc <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	18d2      	adds	r2, r2, r3
 8007f70:	2116      	movs	r1, #22
 8007f72:	187b      	adds	r3, r7, r1
 8007f74:	8812      	ldrh	r2, [r2, #0]
 8007f76:	801a      	strh	r2, [r3, #0]
 8007f78:	187b      	adds	r3, r7, r1
 8007f7a:	881a      	ldrh	r2, [r3, #0]
 8007f7c:	2380      	movs	r3, #128	; 0x80
 8007f7e:	01db      	lsls	r3, r3, #7
 8007f80:	4013      	ands	r3, r2
 8007f82:	d016      	beq.n	8007fb2 <USB_EPClearStall+0xf6>
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	009b      	lsls	r3, r3, #2
 8007f8c:	18d3      	adds	r3, r2, r3
 8007f8e:	881b      	ldrh	r3, [r3, #0]
 8007f90:	b29a      	uxth	r2, r3
 8007f92:	2014      	movs	r0, #20
 8007f94:	183b      	adds	r3, r7, r0
 8007f96:	491c      	ldr	r1, [pc, #112]	; (8008008 <USB_EPClearStall+0x14c>)
 8007f98:	400a      	ands	r2, r1
 8007f9a:	801a      	strh	r2, [r3, #0]
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	009b      	lsls	r3, r3, #2
 8007fa4:	18d3      	adds	r3, r2, r3
 8007fa6:	183a      	adds	r2, r7, r0
 8007fa8:	8812      	ldrh	r2, [r2, #0]
 8007faa:	491b      	ldr	r1, [pc, #108]	; (8008018 <USB_EPClearStall+0x15c>)
 8007fac:	430a      	orrs	r2, r1
 8007fae:	b292      	uxth	r2, r2
 8007fb0:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	18d3      	adds	r3, r2, r3
 8007fbc:	881b      	ldrh	r3, [r3, #0]
 8007fbe:	b29a      	uxth	r2, r3
 8007fc0:	2012      	movs	r0, #18
 8007fc2:	183b      	adds	r3, r7, r0
 8007fc4:	4915      	ldr	r1, [pc, #84]	; (800801c <USB_EPClearStall+0x160>)
 8007fc6:	400a      	ands	r2, r1
 8007fc8:	801a      	strh	r2, [r3, #0]
 8007fca:	183b      	adds	r3, r7, r0
 8007fcc:	183a      	adds	r2, r7, r0
 8007fce:	8812      	ldrh	r2, [r2, #0]
 8007fd0:	2180      	movs	r1, #128	; 0x80
 8007fd2:	0149      	lsls	r1, r1, #5
 8007fd4:	404a      	eors	r2, r1
 8007fd6:	801a      	strh	r2, [r3, #0]
 8007fd8:	183b      	adds	r3, r7, r0
 8007fda:	183a      	adds	r2, r7, r0
 8007fdc:	8812      	ldrh	r2, [r2, #0]
 8007fde:	2180      	movs	r1, #128	; 0x80
 8007fe0:	0189      	lsls	r1, r1, #6
 8007fe2:	404a      	eors	r2, r1
 8007fe4:	801a      	strh	r2, [r3, #0]
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	18d3      	adds	r3, r2, r3
 8007ff0:	183a      	adds	r2, r7, r0
 8007ff2:	8812      	ldrh	r2, [r2, #0]
 8007ff4:	4907      	ldr	r1, [pc, #28]	; (8008014 <USB_EPClearStall+0x158>)
 8007ff6:	430a      	orrs	r2, r1
 8007ff8:	b292      	uxth	r2, r2
 8007ffa:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8007ffc:	2300      	movs	r3, #0
}
 8007ffe:	0018      	movs	r0, r3
 8008000:	46bd      	mov	sp, r7
 8008002:	b006      	add	sp, #24
 8008004:	bd80      	pop	{r7, pc}
 8008006:	46c0      	nop			; (mov r8, r8)
 8008008:	ffff8f8f 	.word	0xffff8f8f
 800800c:	ffff80c0 	.word	0xffff80c0
 8008010:	ffff8fbf 	.word	0xffff8fbf
 8008014:	ffff8080 	.word	0xffff8080
 8008018:	ffffc080 	.word	0xffffc080
 800801c:	ffffbf8f 	.word	0xffffbf8f

08008020 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b082      	sub	sp, #8
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	000a      	movs	r2, r1
 800802a:	1cfb      	adds	r3, r7, #3
 800802c:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800802e:	1cfb      	adds	r3, r7, #3
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d103      	bne.n	800803e <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	224c      	movs	r2, #76	; 0x4c
 800803a:	2180      	movs	r1, #128	; 0x80
 800803c:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800803e:	2300      	movs	r3, #0
}
 8008040:	0018      	movs	r0, r3
 8008042:	46bd      	mov	sp, r7
 8008044:	b002      	add	sp, #8
 8008046:	bd80      	pop	{r7, pc}

08008048 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2258      	movs	r2, #88	; 0x58
 8008054:	5a9b      	ldrh	r3, [r3, r2]
 8008056:	b29b      	uxth	r3, r3
 8008058:	4a05      	ldr	r2, [pc, #20]	; (8008070 <USB_DevConnect+0x28>)
 800805a:	4313      	orrs	r3, r2
 800805c:	b299      	uxth	r1, r3
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2258      	movs	r2, #88	; 0x58
 8008062:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8008064:	2300      	movs	r3, #0
}
 8008066:	0018      	movs	r0, r3
 8008068:	46bd      	mov	sp, r7
 800806a:	b002      	add	sp, #8
 800806c:	bd80      	pop	{r7, pc}
 800806e:	46c0      	nop			; (mov r8, r8)
 8008070:	ffff8000 	.word	0xffff8000

08008074 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b084      	sub	sp, #16
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2244      	movs	r2, #68	; 0x44
 8008080:	5a9b      	ldrh	r3, [r3, r2]
 8008082:	b29b      	uxth	r3, r3
 8008084:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008086:	68fb      	ldr	r3, [r7, #12]
}
 8008088:	0018      	movs	r0, r3
 800808a:	46bd      	mov	sp, r7
 800808c:	b004      	add	sp, #16
 800808e:	bd80      	pop	{r7, pc}

08008090 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b08a      	sub	sp, #40	; 0x28
 8008094:	af00      	add	r7, sp, #0
 8008096:	60f8      	str	r0, [r7, #12]
 8008098:	60b9      	str	r1, [r7, #8]
 800809a:	0019      	movs	r1, r3
 800809c:	1dbb      	adds	r3, r7, #6
 800809e:	801a      	strh	r2, [r3, #0]
 80080a0:	1d3b      	adds	r3, r7, #4
 80080a2:	1c0a      	adds	r2, r1, #0
 80080a4:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80080a6:	1d3b      	adds	r3, r7, #4
 80080a8:	881b      	ldrh	r3, [r3, #0]
 80080aa:	3301      	adds	r3, #1
 80080ac:	085b      	lsrs	r3, r3, #1
 80080ae:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80080b8:	1dbb      	adds	r3, r7, #6
 80080ba:	881a      	ldrh	r2, [r3, #0]
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	18d3      	adds	r3, r2, r3
 80080c0:	2280      	movs	r2, #128	; 0x80
 80080c2:	00d2      	lsls	r2, r2, #3
 80080c4:	4694      	mov	ip, r2
 80080c6:	4463      	add	r3, ip
 80080c8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80080ca:	69bb      	ldr	r3, [r7, #24]
 80080cc:	627b      	str	r3, [r7, #36]	; 0x24
 80080ce:	e020      	b.n	8008112 <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 80080d0:	69fb      	ldr	r3, [r7, #28]
 80080d2:	781a      	ldrb	r2, [r3, #0]
 80080d4:	2112      	movs	r1, #18
 80080d6:	187b      	adds	r3, r7, r1
 80080d8:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80080da:	69fb      	ldr	r3, [r7, #28]
 80080dc:	3301      	adds	r3, #1
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	021b      	lsls	r3, r3, #8
 80080e2:	b21a      	sxth	r2, r3
 80080e4:	187b      	adds	r3, r7, r1
 80080e6:	2000      	movs	r0, #0
 80080e8:	5e1b      	ldrsh	r3, [r3, r0]
 80080ea:	4313      	orrs	r3, r2
 80080ec:	b21a      	sxth	r2, r3
 80080ee:	187b      	adds	r3, r7, r1
 80080f0:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 80080f2:	6a3b      	ldr	r3, [r7, #32]
 80080f4:	187a      	adds	r2, r7, r1
 80080f6:	8812      	ldrh	r2, [r2, #0]
 80080f8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80080fa:	6a3b      	ldr	r3, [r7, #32]
 80080fc:	3302      	adds	r3, #2
 80080fe:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8008100:	69fb      	ldr	r3, [r7, #28]
 8008102:	3301      	adds	r3, #1
 8008104:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	3301      	adds	r3, #1
 800810a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800810c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810e:	3b01      	subs	r3, #1
 8008110:	627b      	str	r3, [r7, #36]	; 0x24
 8008112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008114:	2b00      	cmp	r3, #0
 8008116:	d1db      	bne.n	80080d0 <USB_WritePMA+0x40>
  }
}
 8008118:	46c0      	nop			; (mov r8, r8)
 800811a:	46c0      	nop			; (mov r8, r8)
 800811c:	46bd      	mov	sp, r7
 800811e:	b00a      	add	sp, #40	; 0x28
 8008120:	bd80      	pop	{r7, pc}

08008122 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008122:	b580      	push	{r7, lr}
 8008124:	b08a      	sub	sp, #40	; 0x28
 8008126:	af00      	add	r7, sp, #0
 8008128:	60f8      	str	r0, [r7, #12]
 800812a:	60b9      	str	r1, [r7, #8]
 800812c:	0019      	movs	r1, r3
 800812e:	1dbb      	adds	r3, r7, #6
 8008130:	801a      	strh	r2, [r3, #0]
 8008132:	1d3b      	adds	r3, r7, #4
 8008134:	1c0a      	adds	r2, r1, #0
 8008136:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008138:	1d3b      	adds	r3, r7, #4
 800813a:	881b      	ldrh	r3, [r3, #0]
 800813c:	085b      	lsrs	r3, r3, #1
 800813e:	b29b      	uxth	r3, r3
 8008140:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800814a:	1dbb      	adds	r3, r7, #6
 800814c:	881a      	ldrh	r2, [r3, #0]
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	18d3      	adds	r3, r2, r3
 8008152:	2280      	movs	r2, #128	; 0x80
 8008154:	00d2      	lsls	r2, r2, #3
 8008156:	4694      	mov	ip, r2
 8008158:	4463      	add	r3, ip
 800815a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800815c:	69bb      	ldr	r3, [r7, #24]
 800815e:	627b      	str	r3, [r7, #36]	; 0x24
 8008160:	e018      	b.n	8008194 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008162:	6a3b      	ldr	r3, [r7, #32]
 8008164:	881b      	ldrh	r3, [r3, #0]
 8008166:	b29b      	uxth	r3, r3
 8008168:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800816a:	6a3b      	ldr	r3, [r7, #32]
 800816c:	3302      	adds	r3, #2
 800816e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	b2da      	uxtb	r2, r3
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	3301      	adds	r3, #1
 800817c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	0a1b      	lsrs	r3, r3, #8
 8008182:	b2da      	uxtb	r2, r3
 8008184:	69fb      	ldr	r3, [r7, #28]
 8008186:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008188:	69fb      	ldr	r3, [r7, #28]
 800818a:	3301      	adds	r3, #1
 800818c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800818e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008190:	3b01      	subs	r3, #1
 8008192:	627b      	str	r3, [r7, #36]	; 0x24
 8008194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008196:	2b00      	cmp	r3, #0
 8008198:	d1e3      	bne.n	8008162 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800819a:	1d3b      	adds	r3, r7, #4
 800819c:	881b      	ldrh	r3, [r3, #0]
 800819e:	2201      	movs	r2, #1
 80081a0:	4013      	ands	r3, r2
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d007      	beq.n	80081b8 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 80081a8:	6a3b      	ldr	r3, [r7, #32]
 80081aa:	881b      	ldrh	r3, [r3, #0]
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	b2da      	uxtb	r2, r3
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	701a      	strb	r2, [r3, #0]
  }
}
 80081b8:	46c0      	nop			; (mov r8, r8)
 80081ba:	46bd      	mov	sp, r7
 80081bc:	b00a      	add	sp, #40	; 0x28
 80081be:	bd80      	pop	{r7, pc}

080081c0 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b082      	sub	sp, #8
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	000a      	movs	r2, r1
 80081ca:	1cfb      	adds	r3, r7, #3
 80081cc:	701a      	strb	r2, [r3, #0]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	2304      	movs	r3, #4
 80081d2:	2203      	movs	r2, #3
 80081d4:	2181      	movs	r1, #129	; 0x81
 80081d6:	f001 fe8a 	bl	8009eee <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2201      	movs	r2, #1
 80081de:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80081e0:	2010      	movs	r0, #16
 80081e2:	f002 f807 	bl	800a1f4 <USBD_static_malloc>
 80081e6:	0001      	movs	r1, r0
 80081e8:	687a      	ldr	r2, [r7, #4]
 80081ea:	23ae      	movs	r3, #174	; 0xae
 80081ec:	009b      	lsls	r3, r3, #2
 80081ee:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	23ae      	movs	r3, #174	; 0xae
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	58d3      	ldr	r3, [r2, r3]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d101      	bne.n	8008200 <USBD_HID_Init+0x40>
  {
    return USBD_FAIL;
 80081fc:	2302      	movs	r3, #2
 80081fe:	e006      	b.n	800820e <USBD_HID_Init+0x4e>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	23ae      	movs	r3, #174	; 0xae
 8008204:	009b      	lsls	r3, r3, #2
 8008206:	58d3      	ldr	r3, [r2, r3]
 8008208:	2200      	movs	r2, #0
 800820a:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 800820c:	2300      	movs	r3, #0
}
 800820e:	0018      	movs	r0, r3
 8008210:	46bd      	mov	sp, r7
 8008212:	b002      	add	sp, #8
 8008214:	bd80      	pop	{r7, pc}

08008216 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8008216:	b580      	push	{r7, lr}
 8008218:	b082      	sub	sp, #8
 800821a:	af00      	add	r7, sp, #0
 800821c:	6078      	str	r0, [r7, #4]
 800821e:	000a      	movs	r2, r1
 8008220:	1cfb      	adds	r3, r7, #3
 8008222:	701a      	strb	r2, [r3, #0]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2181      	movs	r1, #129	; 0x81
 8008228:	0018      	movs	r0, r3
 800822a:	f001 fe97 	bl	8009f5c <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	23ae      	movs	r3, #174	; 0xae
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	58d3      	ldr	r3, [r2, r3]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d00b      	beq.n	8008258 <USBD_HID_DeInit+0x42>
  {
    USBD_free(pdev->pClassData);
 8008240:	687a      	ldr	r2, [r7, #4]
 8008242:	23ae      	movs	r3, #174	; 0xae
 8008244:	009b      	lsls	r3, r3, #2
 8008246:	58d3      	ldr	r3, [r2, r3]
 8008248:	0018      	movs	r0, r3
 800824a:	f001 ffdf 	bl	800a20c <USBD_static_free>
    pdev->pClassData = NULL;
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	23ae      	movs	r3, #174	; 0xae
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	2100      	movs	r1, #0
 8008256:	50d1      	str	r1, [r2, r3]
  }

  return USBD_OK;
 8008258:	2300      	movs	r3, #0
}
 800825a:	0018      	movs	r0, r3
 800825c:	46bd      	mov	sp, r7
 800825e:	b002      	add	sp, #8
 8008260:	bd80      	pop	{r7, pc}
	...

08008264 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b088      	sub	sp, #32
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	23ae      	movs	r3, #174	; 0xae
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	58d3      	ldr	r3, [r2, r3]
 8008276:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8008278:	231e      	movs	r3, #30
 800827a:	18fb      	adds	r3, r7, r3
 800827c:	2200      	movs	r2, #0
 800827e:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8008280:	2300      	movs	r3, #0
 8008282:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8008284:	230e      	movs	r3, #14
 8008286:	18fb      	adds	r3, r7, r3
 8008288:	2200      	movs	r2, #0
 800828a:	801a      	strh	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800828c:	2317      	movs	r3, #23
 800828e:	18fb      	adds	r3, r7, r3
 8008290:	2200      	movs	r2, #0
 8008292:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	001a      	movs	r2, r3
 800829a:	2360      	movs	r3, #96	; 0x60
 800829c:	4013      	ands	r3, r2
 800829e:	d03a      	beq.n	8008316 <USBD_HID_Setup+0xb2>
 80082a0:	2b20      	cmp	r3, #32
 80082a2:	d000      	beq.n	80082a6 <USBD_HID_Setup+0x42>
 80082a4:	e0d6      	b.n	8008454 <USBD_HID_Setup+0x1f0>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	785b      	ldrb	r3, [r3, #1]
 80082aa:	2b0b      	cmp	r3, #11
 80082ac:	d008      	beq.n	80082c0 <USBD_HID_Setup+0x5c>
 80082ae:	dc26      	bgt.n	80082fe <USBD_HID_Setup+0x9a>
 80082b0:	2b0a      	cmp	r3, #10
 80082b2:	d013      	beq.n	80082dc <USBD_HID_Setup+0x78>
 80082b4:	dc23      	bgt.n	80082fe <USBD_HID_Setup+0x9a>
 80082b6:	2b02      	cmp	r3, #2
 80082b8:	d019      	beq.n	80082ee <USBD_HID_Setup+0x8a>
 80082ba:	2b03      	cmp	r3, #3
 80082bc:	d007      	beq.n	80082ce <USBD_HID_Setup+0x6a>
 80082be:	e01e      	b.n	80082fe <USBD_HID_Setup+0x9a>
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	885b      	ldrh	r3, [r3, #2]
 80082c4:	b2db      	uxtb	r3, r3
 80082c6:	001a      	movs	r2, r3
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	601a      	str	r2, [r3, #0]
          break;
 80082cc:	e022      	b.n	8008314 <USBD_HID_Setup+0xb0>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80082ce:	6939      	ldr	r1, [r7, #16]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2201      	movs	r2, #1
 80082d4:	0018      	movs	r0, r3
 80082d6:	f001 fadf 	bl	8009898 <USBD_CtlSendData>
          break;
 80082da:	e01b      	b.n	8008314 <USBD_HID_Setup+0xb0>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	885b      	ldrh	r3, [r3, #2]
 80082e0:	0a1b      	lsrs	r3, r3, #8
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	001a      	movs	r2, r3
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	605a      	str	r2, [r3, #4]
          break;
 80082ec:	e012      	b.n	8008314 <USBD_HID_Setup+0xb0>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	1d19      	adds	r1, r3, #4
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2201      	movs	r2, #1
 80082f6:	0018      	movs	r0, r3
 80082f8:	f001 face 	bl	8009898 <USBD_CtlSendData>
          break;
 80082fc:	e00a      	b.n	8008314 <USBD_HID_Setup+0xb0>

        default:
          USBD_CtlError(pdev, req);
 80082fe:	683a      	ldr	r2, [r7, #0]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	0011      	movs	r1, r2
 8008304:	0018      	movs	r0, r3
 8008306:	f001 fa49 	bl	800979c <USBD_CtlError>
          ret = USBD_FAIL;
 800830a:	2317      	movs	r3, #23
 800830c:	18fb      	adds	r3, r7, r3
 800830e:	2202      	movs	r2, #2
 8008310:	701a      	strb	r2, [r3, #0]
          break;
 8008312:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8008314:	e0a9      	b.n	800846a <USBD_HID_Setup+0x206>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	785b      	ldrb	r3, [r3, #1]
 800831a:	2b0b      	cmp	r3, #11
 800831c:	d100      	bne.n	8008320 <USBD_HID_Setup+0xbc>
 800831e:	e075      	b.n	800840c <USBD_HID_Setup+0x1a8>
 8008320:	dd00      	ble.n	8008324 <USBD_HID_Setup+0xc0>
 8008322:	e08b      	b.n	800843c <USBD_HID_Setup+0x1d8>
 8008324:	2b0a      	cmp	r3, #10
 8008326:	d057      	beq.n	80083d8 <USBD_HID_Setup+0x174>
 8008328:	dd00      	ble.n	800832c <USBD_HID_Setup+0xc8>
 800832a:	e087      	b.n	800843c <USBD_HID_Setup+0x1d8>
 800832c:	2b00      	cmp	r3, #0
 800832e:	d002      	beq.n	8008336 <USBD_HID_Setup+0xd2>
 8008330:	2b06      	cmp	r3, #6
 8008332:	d019      	beq.n	8008368 <USBD_HID_Setup+0x104>
 8008334:	e082      	b.n	800843c <USBD_HID_Setup+0x1d8>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008336:	687a      	ldr	r2, [r7, #4]
 8008338:	23a7      	movs	r3, #167	; 0xa7
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	5cd3      	ldrb	r3, [r2, r3]
 800833e:	2b03      	cmp	r3, #3
 8008340:	d107      	bne.n	8008352 <USBD_HID_Setup+0xee>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008342:	230e      	movs	r3, #14
 8008344:	18f9      	adds	r1, r7, r3
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2202      	movs	r2, #2
 800834a:	0018      	movs	r0, r3
 800834c:	f001 faa4 	bl	8009898 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008350:	e07f      	b.n	8008452 <USBD_HID_Setup+0x1ee>
            USBD_CtlError(pdev, req);
 8008352:	683a      	ldr	r2, [r7, #0]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	0011      	movs	r1, r2
 8008358:	0018      	movs	r0, r3
 800835a:	f001 fa1f 	bl	800979c <USBD_CtlError>
            ret = USBD_FAIL;
 800835e:	2317      	movs	r3, #23
 8008360:	18fb      	adds	r3, r7, r3
 8008362:	2202      	movs	r2, #2
 8008364:	701a      	strb	r2, [r3, #0]
          break;
 8008366:	e074      	b.n	8008452 <USBD_HID_Setup+0x1ee>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	885b      	ldrh	r3, [r3, #2]
 800836c:	0a1b      	lsrs	r3, r3, #8
 800836e:	b29b      	uxth	r3, r3
 8008370:	2b22      	cmp	r3, #34	; 0x22
 8008372:	d10b      	bne.n	800838c <USBD_HID_Setup+0x128>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	88db      	ldrh	r3, [r3, #6]
 8008378:	221e      	movs	r2, #30
 800837a:	18ba      	adds	r2, r7, r2
 800837c:	b299      	uxth	r1, r3
 800837e:	294a      	cmp	r1, #74	; 0x4a
 8008380:	d900      	bls.n	8008384 <USBD_HID_Setup+0x120>
 8008382:	234a      	movs	r3, #74	; 0x4a
 8008384:	8013      	strh	r3, [r2, #0]
            pbuf = HID_MOUSE_ReportDesc;
 8008386:	4b3c      	ldr	r3, [pc, #240]	; (8008478 <USBD_HID_Setup+0x214>)
 8008388:	61bb      	str	r3, [r7, #24]
 800838a:	e01c      	b.n	80083c6 <USBD_HID_Setup+0x162>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	885b      	ldrh	r3, [r3, #2]
 8008390:	0a1b      	lsrs	r3, r3, #8
 8008392:	b29b      	uxth	r3, r3
 8008394:	2b21      	cmp	r3, #33	; 0x21
 8008396:	d10b      	bne.n	80083b0 <USBD_HID_Setup+0x14c>
          {
            pbuf = USBD_HID_Desc;
 8008398:	4b38      	ldr	r3, [pc, #224]	; (800847c <USBD_HID_Setup+0x218>)
 800839a:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	88db      	ldrh	r3, [r3, #6]
 80083a0:	221e      	movs	r2, #30
 80083a2:	18ba      	adds	r2, r7, r2
 80083a4:	b299      	uxth	r1, r3
 80083a6:	2909      	cmp	r1, #9
 80083a8:	d900      	bls.n	80083ac <USBD_HID_Setup+0x148>
 80083aa:	2309      	movs	r3, #9
 80083ac:	8013      	strh	r3, [r2, #0]
 80083ae:	e00a      	b.n	80083c6 <USBD_HID_Setup+0x162>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80083b0:	683a      	ldr	r2, [r7, #0]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	0011      	movs	r1, r2
 80083b6:	0018      	movs	r0, r3
 80083b8:	f001 f9f0 	bl	800979c <USBD_CtlError>
            ret = USBD_FAIL;
 80083bc:	2317      	movs	r3, #23
 80083be:	18fb      	adds	r3, r7, r3
 80083c0:	2202      	movs	r2, #2
 80083c2:	701a      	strb	r2, [r3, #0]
            break;
 80083c4:	e045      	b.n	8008452 <USBD_HID_Setup+0x1ee>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 80083c6:	231e      	movs	r3, #30
 80083c8:	18fb      	adds	r3, r7, r3
 80083ca:	881a      	ldrh	r2, [r3, #0]
 80083cc:	69b9      	ldr	r1, [r7, #24]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	0018      	movs	r0, r3
 80083d2:	f001 fa61 	bl	8009898 <USBD_CtlSendData>
          break;
 80083d6:	e03c      	b.n	8008452 <USBD_HID_Setup+0x1ee>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083d8:	687a      	ldr	r2, [r7, #4]
 80083da:	23a7      	movs	r3, #167	; 0xa7
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	5cd3      	ldrb	r3, [r2, r3]
 80083e0:	2b03      	cmp	r3, #3
 80083e2:	d108      	bne.n	80083f6 <USBD_HID_Setup+0x192>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	3308      	adds	r3, #8
 80083e8:	0019      	movs	r1, r3
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2201      	movs	r2, #1
 80083ee:	0018      	movs	r0, r3
 80083f0:	f001 fa52 	bl	8009898 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80083f4:	e02d      	b.n	8008452 <USBD_HID_Setup+0x1ee>
            USBD_CtlError(pdev, req);
 80083f6:	683a      	ldr	r2, [r7, #0]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	0011      	movs	r1, r2
 80083fc:	0018      	movs	r0, r3
 80083fe:	f001 f9cd 	bl	800979c <USBD_CtlError>
            ret = USBD_FAIL;
 8008402:	2317      	movs	r3, #23
 8008404:	18fb      	adds	r3, r7, r3
 8008406:	2202      	movs	r2, #2
 8008408:	701a      	strb	r2, [r3, #0]
          break;
 800840a:	e022      	b.n	8008452 <USBD_HID_Setup+0x1ee>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800840c:	687a      	ldr	r2, [r7, #4]
 800840e:	23a7      	movs	r3, #167	; 0xa7
 8008410:	009b      	lsls	r3, r3, #2
 8008412:	5cd3      	ldrb	r3, [r2, r3]
 8008414:	2b03      	cmp	r3, #3
 8008416:	d106      	bne.n	8008426 <USBD_HID_Setup+0x1c2>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	885b      	ldrh	r3, [r3, #2]
 800841c:	b2db      	uxtb	r3, r3
 800841e:	001a      	movs	r2, r3
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008424:	e015      	b.n	8008452 <USBD_HID_Setup+0x1ee>
            USBD_CtlError(pdev, req);
 8008426:	683a      	ldr	r2, [r7, #0]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	0011      	movs	r1, r2
 800842c:	0018      	movs	r0, r3
 800842e:	f001 f9b5 	bl	800979c <USBD_CtlError>
            ret = USBD_FAIL;
 8008432:	2317      	movs	r3, #23
 8008434:	18fb      	adds	r3, r7, r3
 8008436:	2202      	movs	r2, #2
 8008438:	701a      	strb	r2, [r3, #0]
          break;
 800843a:	e00a      	b.n	8008452 <USBD_HID_Setup+0x1ee>

        default:
          USBD_CtlError(pdev, req);
 800843c:	683a      	ldr	r2, [r7, #0]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	0011      	movs	r1, r2
 8008442:	0018      	movs	r0, r3
 8008444:	f001 f9aa 	bl	800979c <USBD_CtlError>
          ret = USBD_FAIL;
 8008448:	2317      	movs	r3, #23
 800844a:	18fb      	adds	r3, r7, r3
 800844c:	2202      	movs	r2, #2
 800844e:	701a      	strb	r2, [r3, #0]
          break;
 8008450:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8008452:	e00a      	b.n	800846a <USBD_HID_Setup+0x206>

    default:
      USBD_CtlError(pdev, req);
 8008454:	683a      	ldr	r2, [r7, #0]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	0011      	movs	r1, r2
 800845a:	0018      	movs	r0, r3
 800845c:	f001 f99e 	bl	800979c <USBD_CtlError>
      ret = USBD_FAIL;
 8008460:	2317      	movs	r3, #23
 8008462:	18fb      	adds	r3, r7, r3
 8008464:	2202      	movs	r2, #2
 8008466:	701a      	strb	r2, [r3, #0]
      break;
 8008468:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800846a:	2317      	movs	r3, #23
 800846c:	18fb      	adds	r3, r7, r3
 800846e:	781b      	ldrb	r3, [r3, #0]
}
 8008470:	0018      	movs	r0, r3
 8008472:	46bd      	mov	sp, r7
 8008474:	b008      	add	sp, #32
 8008476:	bd80      	pop	{r7, pc}
 8008478:	200000c8 	.word	0x200000c8
 800847c:	200000b0 	.word	0x200000b0

08008480 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b086      	sub	sp, #24
 8008484:	af00      	add	r7, sp, #0
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	60b9      	str	r1, [r7, #8]
 800848a:	1dbb      	adds	r3, r7, #6
 800848c:	801a      	strh	r2, [r3, #0]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800848e:	68fa      	ldr	r2, [r7, #12]
 8008490:	23ae      	movs	r3, #174	; 0xae
 8008492:	009b      	lsls	r3, r3, #2
 8008494:	58d3      	ldr	r3, [r2, r3]
 8008496:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008498:	68fa      	ldr	r2, [r7, #12]
 800849a:	23a7      	movs	r3, #167	; 0xa7
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	5cd3      	ldrb	r3, [r2, r3]
 80084a0:	2b03      	cmp	r3, #3
 80084a2:	d10d      	bne.n	80084c0 <USBD_HID_SendReport+0x40>
  {
    if (hhid->state == HID_IDLE)
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	7b1b      	ldrb	r3, [r3, #12]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d109      	bne.n	80084c0 <USBD_HID_SendReport+0x40>
    {
      hhid->state = HID_BUSY;
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	2201      	movs	r2, #1
 80084b0:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 80084b2:	1dbb      	adds	r3, r7, #6
 80084b4:	881b      	ldrh	r3, [r3, #0]
 80084b6:	68ba      	ldr	r2, [r7, #8]
 80084b8:	68f8      	ldr	r0, [r7, #12]
 80084ba:	2181      	movs	r1, #129	; 0x81
 80084bc:	f001 fe2b 	bl	800a116 <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 80084c0:	2300      	movs	r3, #0
}
 80084c2:	0018      	movs	r0, r3
 80084c4:	46bd      	mov	sp, r7
 80084c6:	b006      	add	sp, #24
 80084c8:	bd80      	pop	{r7, pc}
	...

080084cc <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2222      	movs	r2, #34	; 0x22
 80084d8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 80084da:	4b02      	ldr	r3, [pc, #8]	; (80084e4 <USBD_HID_GetFSCfgDesc+0x18>)
}
 80084dc:	0018      	movs	r0, r3
 80084de:	46bd      	mov	sp, r7
 80084e0:	b002      	add	sp, #8
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	20000044 	.word	0x20000044

080084e8 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2222      	movs	r2, #34	; 0x22
 80084f4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 80084f6:	4b02      	ldr	r3, [pc, #8]	; (8008500 <USBD_HID_GetHSCfgDesc+0x18>)
}
 80084f8:	0018      	movs	r0, r3
 80084fa:	46bd      	mov	sp, r7
 80084fc:	b002      	add	sp, #8
 80084fe:	bd80      	pop	{r7, pc}
 8008500:	20000068 	.word	0x20000068

08008504 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b082      	sub	sp, #8
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2222      	movs	r2, #34	; 0x22
 8008510:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8008512:	4b02      	ldr	r3, [pc, #8]	; (800851c <USBD_HID_GetOtherSpeedCfgDesc+0x18>)
}
 8008514:	0018      	movs	r0, r3
 8008516:	46bd      	mov	sp, r7
 8008518:	b002      	add	sp, #8
 800851a:	bd80      	pop	{r7, pc}
 800851c:	2000008c 	.word	0x2000008c

08008520 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b082      	sub	sp, #8
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	000a      	movs	r2, r1
 800852a:	1cfb      	adds	r3, r7, #3
 800852c:	701a      	strb	r2, [r3, #0]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	23ae      	movs	r3, #174	; 0xae
 8008532:	009b      	lsls	r3, r3, #2
 8008534:	58d3      	ldr	r3, [r2, r3]
 8008536:	2200      	movs	r2, #0
 8008538:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 800853a:	2300      	movs	r3, #0
}
 800853c:	0018      	movs	r0, r3
 800853e:	46bd      	mov	sp, r7
 8008540:	b002      	add	sp, #8
 8008542:	bd80      	pop	{r7, pc}

08008544 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b082      	sub	sp, #8
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	220a      	movs	r2, #10
 8008550:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8008552:	4b02      	ldr	r3, [pc, #8]	; (800855c <USBD_HID_GetDeviceQualifierDesc+0x18>)
}
 8008554:	0018      	movs	r0, r3
 8008556:	46bd      	mov	sp, r7
 8008558:	b002      	add	sp, #8
 800855a:	bd80      	pop	{r7, pc}
 800855c:	200000bc 	.word	0x200000bc

08008560 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	60f8      	str	r0, [r7, #12]
 8008568:	60b9      	str	r1, [r7, #8]
 800856a:	1dfb      	adds	r3, r7, #7
 800856c:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d10c      	bne.n	800858e <USBD_Init+0x2e>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 8008574:	4b18      	ldr	r3, [pc, #96]	; (80085d8 <USBD_Init+0x78>)
 8008576:	0018      	movs	r0, r3
 8008578:	f001 ff52 	bl	800a420 <iprintf>
 800857c:	4b17      	ldr	r3, [pc, #92]	; (80085dc <USBD_Init+0x7c>)
 800857e:	0018      	movs	r0, r3
 8008580:	f001 ff4e 	bl	800a420 <iprintf>
 8008584:	200a      	movs	r0, #10
 8008586:	f001 ff5b 	bl	800a440 <putchar>
#endif
    return USBD_FAIL;
 800858a:	2302      	movs	r3, #2
 800858c:	e020      	b.n	80085d0 <USBD_Init+0x70>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800858e:	68fa      	ldr	r2, [r7, #12]
 8008590:	23ad      	movs	r3, #173	; 0xad
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	58d3      	ldr	r3, [r2, r3]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d004      	beq.n	80085a4 <USBD_Init+0x44>
  {
    pdev->pClass = NULL;
 800859a:	68fa      	ldr	r2, [r7, #12]
 800859c:	23ad      	movs	r3, #173	; 0xad
 800859e:	009b      	lsls	r3, r3, #2
 80085a0:	2100      	movs	r1, #0
 80085a2:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d004      	beq.n	80085b4 <USBD_Init+0x54>
  {
    pdev->pDesc = pdesc;
 80085aa:	68fa      	ldr	r2, [r7, #12]
 80085ac:	23ac      	movs	r3, #172	; 0xac
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	68b9      	ldr	r1, [r7, #8]
 80085b2:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80085b4:	68fa      	ldr	r2, [r7, #12]
 80085b6:	23a7      	movs	r3, #167	; 0xa7
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	2101      	movs	r1, #1
 80085bc:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	1dfa      	adds	r2, r7, #7
 80085c2:	7812      	ldrb	r2, [r2, #0]
 80085c4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	0018      	movs	r0, r3
 80085ca:	f001 fc1b 	bl	8009e04 <USBD_LL_Init>

  return USBD_OK;
 80085ce:	2300      	movs	r3, #0
}
 80085d0:	0018      	movs	r0, r3
 80085d2:	46bd      	mov	sp, r7
 80085d4:	b004      	add	sp, #16
 80085d6:	bd80      	pop	{r7, pc}
 80085d8:	0800b204 	.word	0x0800b204
 80085dc:	0800b20c 	.word	0x0800b20c

080085e0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80085ea:	200f      	movs	r0, #15
 80085ec:	183b      	adds	r3, r7, r0
 80085ee:	2200      	movs	r2, #0
 80085f0:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d008      	beq.n	800860a <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80085f8:	687a      	ldr	r2, [r7, #4]
 80085fa:	23ad      	movs	r3, #173	; 0xad
 80085fc:	009b      	lsls	r3, r3, #2
 80085fe:	6839      	ldr	r1, [r7, #0]
 8008600:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8008602:	183b      	adds	r3, r7, r0
 8008604:	2200      	movs	r2, #0
 8008606:	701a      	strb	r2, [r3, #0]
 8008608:	e00e      	b.n	8008628 <USBD_RegisterClass+0x48>
  }
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 800860a:	4b0b      	ldr	r3, [pc, #44]	; (8008638 <USBD_RegisterClass+0x58>)
 800860c:	0018      	movs	r0, r3
 800860e:	f001 ff07 	bl	800a420 <iprintf>
 8008612:	4b0a      	ldr	r3, [pc, #40]	; (800863c <USBD_RegisterClass+0x5c>)
 8008614:	0018      	movs	r0, r3
 8008616:	f001 ff03 	bl	800a420 <iprintf>
 800861a:	200a      	movs	r0, #10
 800861c:	f001 ff10 	bl	800a440 <putchar>
#endif
    status = USBD_FAIL;
 8008620:	230f      	movs	r3, #15
 8008622:	18fb      	adds	r3, r7, r3
 8008624:	2202      	movs	r2, #2
 8008626:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8008628:	230f      	movs	r3, #15
 800862a:	18fb      	adds	r3, r7, r3
 800862c:	781b      	ldrb	r3, [r3, #0]
}
 800862e:	0018      	movs	r0, r3
 8008630:	46bd      	mov	sp, r7
 8008632:	b004      	add	sp, #16
 8008634:	bd80      	pop	{r7, pc}
 8008636:	46c0      	nop			; (mov r8, r8)
 8008638:	0800b204 	.word	0x0800b204
 800863c:	0800b224 	.word	0x0800b224

08008640 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b082      	sub	sp, #8
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	0018      	movs	r0, r3
 800864c:	f001 fc2a 	bl	8009ea4 <USBD_LL_Start>

  return USBD_OK;
 8008650:	2300      	movs	r3, #0
}
 8008652:	0018      	movs	r0, r3
 8008654:	46bd      	mov	sp, r7
 8008656:	b002      	add	sp, #8
 8008658:	bd80      	pop	{r7, pc}

0800865a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800865a:	b580      	push	{r7, lr}
 800865c:	b082      	sub	sp, #8
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008662:	2300      	movs	r3, #0
}
 8008664:	0018      	movs	r0, r3
 8008666:	46bd      	mov	sp, r7
 8008668:	b002      	add	sp, #8
 800866a:	bd80      	pop	{r7, pc}

0800866c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800866c:	b590      	push	{r4, r7, lr}
 800866e:	b085      	sub	sp, #20
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	000a      	movs	r2, r1
 8008676:	1cfb      	adds	r3, r7, #3
 8008678:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800867a:	240f      	movs	r4, #15
 800867c:	193b      	adds	r3, r7, r4
 800867e:	2202      	movs	r2, #2
 8008680:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	23ad      	movs	r3, #173	; 0xad
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	58d3      	ldr	r3, [r2, r3]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d00e      	beq.n	80086ac <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800868e:	687a      	ldr	r2, [r7, #4]
 8008690:	23ad      	movs	r3, #173	; 0xad
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	58d3      	ldr	r3, [r2, r3]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	1cfa      	adds	r2, r7, #3
 800869a:	7811      	ldrb	r1, [r2, #0]
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	0010      	movs	r0, r2
 80086a0:	4798      	blx	r3
 80086a2:	1e03      	subs	r3, r0, #0
 80086a4:	d102      	bne.n	80086ac <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 80086a6:	193b      	adds	r3, r7, r4
 80086a8:	2200      	movs	r2, #0
 80086aa:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 80086ac:	230f      	movs	r3, #15
 80086ae:	18fb      	adds	r3, r7, r3
 80086b0:	781b      	ldrb	r3, [r3, #0]
}
 80086b2:	0018      	movs	r0, r3
 80086b4:	46bd      	mov	sp, r7
 80086b6:	b005      	add	sp, #20
 80086b8:	bd90      	pop	{r4, r7, pc}

080086ba <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80086ba:	b580      	push	{r7, lr}
 80086bc:	b082      	sub	sp, #8
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
 80086c2:	000a      	movs	r2, r1
 80086c4:	1cfb      	adds	r3, r7, #3
 80086c6:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80086c8:	687a      	ldr	r2, [r7, #4]
 80086ca:	23ad      	movs	r3, #173	; 0xad
 80086cc:	009b      	lsls	r3, r3, #2
 80086ce:	58d3      	ldr	r3, [r2, r3]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	1cfa      	adds	r2, r7, #3
 80086d4:	7811      	ldrb	r1, [r2, #0]
 80086d6:	687a      	ldr	r2, [r7, #4]
 80086d8:	0010      	movs	r0, r2
 80086da:	4798      	blx	r3

  return USBD_OK;
 80086dc:	2300      	movs	r3, #0
}
 80086de:	0018      	movs	r0, r3
 80086e0:	46bd      	mov	sp, r7
 80086e2:	b002      	add	sp, #8
 80086e4:	bd80      	pop	{r7, pc}
	...

080086e8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	22aa      	movs	r2, #170	; 0xaa
 80086f6:	0092      	lsls	r2, r2, #2
 80086f8:	4694      	mov	ip, r2
 80086fa:	4463      	add	r3, ip
 80086fc:	683a      	ldr	r2, [r7, #0]
 80086fe:	0011      	movs	r1, r2
 8008700:	0018      	movs	r0, r3
 8008702:	f001 f810 	bl	8009726 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	23a5      	movs	r3, #165	; 0xa5
 800870a:	009b      	lsls	r3, r3, #2
 800870c:	2101      	movs	r1, #1
 800870e:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	4a23      	ldr	r2, [pc, #140]	; (80087a0 <USBD_LL_SetupStage+0xb8>)
 8008714:	5a9b      	ldrh	r3, [r3, r2]
 8008716:	0019      	movs	r1, r3
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	23a6      	movs	r3, #166	; 0xa6
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8008720:	687a      	ldr	r2, [r7, #4]
 8008722:	23aa      	movs	r3, #170	; 0xaa
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	5cd3      	ldrb	r3, [r2, r3]
 8008728:	001a      	movs	r2, r3
 800872a:	231f      	movs	r3, #31
 800872c:	4013      	ands	r3, r2
 800872e:	2b02      	cmp	r3, #2
 8008730:	d019      	beq.n	8008766 <USBD_LL_SetupStage+0x7e>
 8008732:	d822      	bhi.n	800877a <USBD_LL_SetupStage+0x92>
 8008734:	2b00      	cmp	r3, #0
 8008736:	d002      	beq.n	800873e <USBD_LL_SetupStage+0x56>
 8008738:	2b01      	cmp	r3, #1
 800873a:	d00a      	beq.n	8008752 <USBD_LL_SetupStage+0x6a>
 800873c:	e01d      	b.n	800877a <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	22aa      	movs	r2, #170	; 0xaa
 8008742:	0092      	lsls	r2, r2, #2
 8008744:	189a      	adds	r2, r3, r2
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	0011      	movs	r1, r2
 800874a:	0018      	movs	r0, r3
 800874c:	f000 fa10 	bl	8008b70 <USBD_StdDevReq>
      break;
 8008750:	e020      	b.n	8008794 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	22aa      	movs	r2, #170	; 0xaa
 8008756:	0092      	lsls	r2, r2, #2
 8008758:	189a      	adds	r2, r3, r2
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	0011      	movs	r1, r2
 800875e:	0018      	movs	r0, r3
 8008760:	f000 fa78 	bl	8008c54 <USBD_StdItfReq>
      break;
 8008764:	e016      	b.n	8008794 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	22aa      	movs	r2, #170	; 0xaa
 800876a:	0092      	lsls	r2, r2, #2
 800876c:	189a      	adds	r2, r3, r2
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	0011      	movs	r1, r2
 8008772:	0018      	movs	r0, r3
 8008774:	f000 fac5 	bl	8008d02 <USBD_StdEPReq>
      break;
 8008778:	e00c      	b.n	8008794 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800877a:	687a      	ldr	r2, [r7, #4]
 800877c:	23aa      	movs	r3, #170	; 0xaa
 800877e:	009b      	lsls	r3, r3, #2
 8008780:	5cd3      	ldrb	r3, [r2, r3]
 8008782:	227f      	movs	r2, #127	; 0x7f
 8008784:	4393      	bics	r3, r2
 8008786:	b2da      	uxtb	r2, r3
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	0011      	movs	r1, r2
 800878c:	0018      	movs	r0, r3
 800878e:	f001 fc10 	bl	8009fb2 <USBD_LL_StallEP>
      break;
 8008792:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8008794:	2300      	movs	r3, #0
}
 8008796:	0018      	movs	r0, r3
 8008798:	46bd      	mov	sp, r7
 800879a:	b002      	add	sp, #8
 800879c:	bd80      	pop	{r7, pc}
 800879e:	46c0      	nop			; (mov r8, r8)
 80087a0:	000002ae 	.word	0x000002ae

080087a4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b086      	sub	sp, #24
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	607a      	str	r2, [r7, #4]
 80087ae:	200b      	movs	r0, #11
 80087b0:	183b      	adds	r3, r7, r0
 80087b2:	1c0a      	adds	r2, r1, #0
 80087b4:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80087b6:	183b      	adds	r3, r7, r0
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d154      	bne.n	8008868 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	3355      	adds	r3, #85	; 0x55
 80087c2:	33ff      	adds	r3, #255	; 0xff
 80087c4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80087c6:	68fa      	ldr	r2, [r7, #12]
 80087c8:	23a5      	movs	r3, #165	; 0xa5
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	58d3      	ldr	r3, [r2, r3]
 80087ce:	2b03      	cmp	r3, #3
 80087d0:	d139      	bne.n	8008846 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	68da      	ldr	r2, [r3, #12]
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	691b      	ldr	r3, [r3, #16]
 80087da:	429a      	cmp	r2, r3
 80087dc:	d919      	bls.n	8008812 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	68da      	ldr	r2, [r3, #12]
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	691b      	ldr	r3, [r3, #16]
 80087e6:	1ad2      	subs	r2, r2, r3
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	68da      	ldr	r2, [r3, #12]
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d203      	bcs.n	8008800 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	e002      	b.n	8008806 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008804:	b29b      	uxth	r3, r3
 8008806:	6879      	ldr	r1, [r7, #4]
 8008808:	68f8      	ldr	r0, [r7, #12]
 800880a:	001a      	movs	r2, r3
 800880c:	f001 f877 	bl	80098fe <USBD_CtlContinueRx>
 8008810:	e045      	b.n	800889e <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008812:	68fa      	ldr	r2, [r7, #12]
 8008814:	23ad      	movs	r3, #173	; 0xad
 8008816:	009b      	lsls	r3, r3, #2
 8008818:	58d3      	ldr	r3, [r2, r3]
 800881a:	691b      	ldr	r3, [r3, #16]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d00d      	beq.n	800883c <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008820:	68fa      	ldr	r2, [r7, #12]
 8008822:	23a7      	movs	r3, #167	; 0xa7
 8008824:	009b      	lsls	r3, r3, #2
 8008826:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008828:	2b03      	cmp	r3, #3
 800882a:	d107      	bne.n	800883c <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800882c:	68fa      	ldr	r2, [r7, #12]
 800882e:	23ad      	movs	r3, #173	; 0xad
 8008830:	009b      	lsls	r3, r3, #2
 8008832:	58d3      	ldr	r3, [r2, r3]
 8008834:	691b      	ldr	r3, [r3, #16]
 8008836:	68fa      	ldr	r2, [r7, #12]
 8008838:	0010      	movs	r0, r2
 800883a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	0018      	movs	r0, r3
 8008840:	f001 f870 	bl	8009924 <USBD_CtlSendStatus>
 8008844:	e02b      	b.n	800889e <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008846:	68fa      	ldr	r2, [r7, #12]
 8008848:	23a5      	movs	r3, #165	; 0xa5
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	58d3      	ldr	r3, [r2, r3]
 800884e:	2b05      	cmp	r3, #5
 8008850:	d125      	bne.n	800889e <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008852:	68fa      	ldr	r2, [r7, #12]
 8008854:	23a5      	movs	r3, #165	; 0xa5
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	2100      	movs	r1, #0
 800885a:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2100      	movs	r1, #0
 8008860:	0018      	movs	r0, r3
 8008862:	f001 fba6 	bl	8009fb2 <USBD_LL_StallEP>
 8008866:	e01a      	b.n	800889e <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008868:	68fa      	ldr	r2, [r7, #12]
 800886a:	23ad      	movs	r3, #173	; 0xad
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	58d3      	ldr	r3, [r2, r3]
 8008870:	699b      	ldr	r3, [r3, #24]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d011      	beq.n	800889a <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008876:	68fa      	ldr	r2, [r7, #12]
 8008878:	23a7      	movs	r3, #167	; 0xa7
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 800887e:	2b03      	cmp	r3, #3
 8008880:	d10b      	bne.n	800889a <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008882:	68fa      	ldr	r2, [r7, #12]
 8008884:	23ad      	movs	r3, #173	; 0xad
 8008886:	009b      	lsls	r3, r3, #2
 8008888:	58d3      	ldr	r3, [r2, r3]
 800888a:	699b      	ldr	r3, [r3, #24]
 800888c:	220b      	movs	r2, #11
 800888e:	18ba      	adds	r2, r7, r2
 8008890:	7811      	ldrb	r1, [r2, #0]
 8008892:	68fa      	ldr	r2, [r7, #12]
 8008894:	0010      	movs	r0, r2
 8008896:	4798      	blx	r3
 8008898:	e001      	b.n	800889e <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800889a:	2302      	movs	r3, #2
 800889c:	e000      	b.n	80088a0 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800889e:	2300      	movs	r3, #0
}
 80088a0:	0018      	movs	r0, r3
 80088a2:	46bd      	mov	sp, r7
 80088a4:	b006      	add	sp, #24
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b086      	sub	sp, #24
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	607a      	str	r2, [r7, #4]
 80088b2:	200b      	movs	r0, #11
 80088b4:	183b      	adds	r3, r7, r0
 80088b6:	1c0a      	adds	r2, r1, #0
 80088b8:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80088ba:	183b      	adds	r3, r7, r0
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d000      	beq.n	80088c4 <USBD_LL_DataInStage+0x1c>
 80088c2:	e08e      	b.n	80089e2 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	3314      	adds	r3, #20
 80088c8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80088ca:	68fa      	ldr	r2, [r7, #12]
 80088cc:	23a5      	movs	r3, #165	; 0xa5
 80088ce:	009b      	lsls	r3, r3, #2
 80088d0:	58d3      	ldr	r3, [r2, r3]
 80088d2:	2b02      	cmp	r3, #2
 80088d4:	d164      	bne.n	80089a0 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	68da      	ldr	r2, [r3, #12]
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	691b      	ldr	r3, [r3, #16]
 80088de:	429a      	cmp	r2, r3
 80088e0:	d915      	bls.n	800890e <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	68da      	ldr	r2, [r3, #12]
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	691b      	ldr	r3, [r3, #16]
 80088ea:	1ad2      	subs	r2, r2, r3
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	68db      	ldr	r3, [r3, #12]
 80088f4:	b29a      	uxth	r2, r3
 80088f6:	6879      	ldr	r1, [r7, #4]
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	0018      	movs	r0, r3
 80088fc:	f000 ffec 	bl	80098d8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008900:	68f8      	ldr	r0, [r7, #12]
 8008902:	2300      	movs	r3, #0
 8008904:	2200      	movs	r2, #0
 8008906:	2100      	movs	r1, #0
 8008908:	f001 fc3c 	bl	800a184 <USBD_LL_PrepareReceive>
 800890c:	e059      	b.n	80089c2 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	689a      	ldr	r2, [r3, #8]
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	691b      	ldr	r3, [r3, #16]
 8008916:	0019      	movs	r1, r3
 8008918:	0010      	movs	r0, r2
 800891a:	f7f7 fc85 	bl	8000228 <__aeabi_uidivmod>
 800891e:	1e0b      	subs	r3, r1, #0
 8008920:	d11f      	bne.n	8008962 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	689a      	ldr	r2, [r3, #8]
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800892a:	429a      	cmp	r2, r3
 800892c:	d319      	bcc.n	8008962 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	689a      	ldr	r2, [r3, #8]
 8008932:	68f9      	ldr	r1, [r7, #12]
 8008934:	23a6      	movs	r3, #166	; 0xa6
 8008936:	009b      	lsls	r3, r3, #2
 8008938:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800893a:	429a      	cmp	r2, r3
 800893c:	d211      	bcs.n	8008962 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2200      	movs	r2, #0
 8008942:	2100      	movs	r1, #0
 8008944:	0018      	movs	r0, r3
 8008946:	f000 ffc7 	bl	80098d8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800894a:	68fa      	ldr	r2, [r7, #12]
 800894c:	23a6      	movs	r3, #166	; 0xa6
 800894e:	009b      	lsls	r3, r3, #2
 8008950:	2100      	movs	r1, #0
 8008952:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008954:	68f8      	ldr	r0, [r7, #12]
 8008956:	2300      	movs	r3, #0
 8008958:	2200      	movs	r2, #0
 800895a:	2100      	movs	r1, #0
 800895c:	f001 fc12 	bl	800a184 <USBD_LL_PrepareReceive>
 8008960:	e02f      	b.n	80089c2 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008962:	68fa      	ldr	r2, [r7, #12]
 8008964:	23ad      	movs	r3, #173	; 0xad
 8008966:	009b      	lsls	r3, r3, #2
 8008968:	58d3      	ldr	r3, [r2, r3]
 800896a:	68db      	ldr	r3, [r3, #12]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d00d      	beq.n	800898c <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008970:	68fa      	ldr	r2, [r7, #12]
 8008972:	23a7      	movs	r3, #167	; 0xa7
 8008974:	009b      	lsls	r3, r3, #2
 8008976:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008978:	2b03      	cmp	r3, #3
 800897a:	d107      	bne.n	800898c <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800897c:	68fa      	ldr	r2, [r7, #12]
 800897e:	23ad      	movs	r3, #173	; 0xad
 8008980:	009b      	lsls	r3, r3, #2
 8008982:	58d3      	ldr	r3, [r2, r3]
 8008984:	68db      	ldr	r3, [r3, #12]
 8008986:	68fa      	ldr	r2, [r7, #12]
 8008988:	0010      	movs	r0, r2
 800898a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2180      	movs	r1, #128	; 0x80
 8008990:	0018      	movs	r0, r3
 8008992:	f001 fb0e 	bl	8009fb2 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	0018      	movs	r0, r3
 800899a:	f000 ffd7 	bl	800994c <USBD_CtlReceiveStatus>
 800899e:	e010      	b.n	80089c2 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80089a0:	68fa      	ldr	r2, [r7, #12]
 80089a2:	23a5      	movs	r3, #165	; 0xa5
 80089a4:	009b      	lsls	r3, r3, #2
 80089a6:	58d3      	ldr	r3, [r2, r3]
 80089a8:	2b04      	cmp	r3, #4
 80089aa:	d005      	beq.n	80089b8 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80089ac:	68fa      	ldr	r2, [r7, #12]
 80089ae:	23a5      	movs	r3, #165	; 0xa5
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d104      	bne.n	80089c2 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2180      	movs	r1, #128	; 0x80
 80089bc:	0018      	movs	r0, r3
 80089be:	f001 faf8 	bl	8009fb2 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80089c2:	68fa      	ldr	r2, [r7, #12]
 80089c4:	23a8      	movs	r3, #168	; 0xa8
 80089c6:	009b      	lsls	r3, r3, #2
 80089c8:	5cd3      	ldrb	r3, [r2, r3]
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d124      	bne.n	8008a18 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	0018      	movs	r0, r3
 80089d2:	f7ff fe42 	bl	800865a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80089d6:	68fa      	ldr	r2, [r7, #12]
 80089d8:	23a8      	movs	r3, #168	; 0xa8
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	2100      	movs	r1, #0
 80089de:	54d1      	strb	r1, [r2, r3]
 80089e0:	e01a      	b.n	8008a18 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80089e2:	68fa      	ldr	r2, [r7, #12]
 80089e4:	23ad      	movs	r3, #173	; 0xad
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	58d3      	ldr	r3, [r2, r3]
 80089ea:	695b      	ldr	r3, [r3, #20]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d011      	beq.n	8008a14 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80089f0:	68fa      	ldr	r2, [r7, #12]
 80089f2:	23a7      	movs	r3, #167	; 0xa7
 80089f4:	009b      	lsls	r3, r3, #2
 80089f6:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 80089f8:	2b03      	cmp	r3, #3
 80089fa:	d10b      	bne.n	8008a14 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80089fc:	68fa      	ldr	r2, [r7, #12]
 80089fe:	23ad      	movs	r3, #173	; 0xad
 8008a00:	009b      	lsls	r3, r3, #2
 8008a02:	58d3      	ldr	r3, [r2, r3]
 8008a04:	695b      	ldr	r3, [r3, #20]
 8008a06:	220b      	movs	r2, #11
 8008a08:	18ba      	adds	r2, r7, r2
 8008a0a:	7811      	ldrb	r1, [r2, #0]
 8008a0c:	68fa      	ldr	r2, [r7, #12]
 8008a0e:	0010      	movs	r0, r2
 8008a10:	4798      	blx	r3
 8008a12:	e001      	b.n	8008a18 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008a14:	2302      	movs	r3, #2
 8008a16:	e000      	b.n	8008a1a <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8008a18:	2300      	movs	r3, #0
}
 8008a1a:	0018      	movs	r0, r3
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	b006      	add	sp, #24
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b082      	sub	sp, #8
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	2340      	movs	r3, #64	; 0x40
 8008a2e:	2200      	movs	r2, #0
 8008a30:	2100      	movs	r1, #0
 8008a32:	f001 fa5c 	bl	8009eee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	23ac      	movs	r3, #172	; 0xac
 8008a3a:	005b      	lsls	r3, r3, #1
 8008a3c:	2101      	movs	r1, #1
 8008a3e:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	23b2      	movs	r3, #178	; 0xb2
 8008a44:	005b      	lsls	r3, r3, #1
 8008a46:	2140      	movs	r1, #64	; 0x40
 8008a48:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	2340      	movs	r3, #64	; 0x40
 8008a4e:	2200      	movs	r2, #0
 8008a50:	2180      	movs	r1, #128	; 0x80
 8008a52:	f001 fa4c 	bl	8009eee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2201      	movs	r2, #1
 8008a5a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2240      	movs	r2, #64	; 0x40
 8008a60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	23a7      	movs	r3, #167	; 0xa7
 8008a66:	009b      	lsls	r3, r3, #2
 8008a68:	2101      	movs	r1, #1
 8008a6a:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8008a6c:	687a      	ldr	r2, [r7, #4]
 8008a6e:	23a5      	movs	r3, #165	; 0xa5
 8008a70:	009b      	lsls	r3, r3, #2
 8008a72:	2100      	movs	r1, #0
 8008a74:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	23a9      	movs	r3, #169	; 0xa9
 8008a80:	009b      	lsls	r3, r3, #2
 8008a82:	2100      	movs	r1, #0
 8008a84:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	23ae      	movs	r3, #174	; 0xae
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	58d3      	ldr	r3, [r2, r3]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d00a      	beq.n	8008aa8 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	23ad      	movs	r3, #173	; 0xad
 8008a96:	009b      	lsls	r3, r3, #2
 8008a98:	58d3      	ldr	r3, [r2, r3]
 8008a9a:	685a      	ldr	r2, [r3, #4]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	b2d9      	uxtb	r1, r3
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	0018      	movs	r0, r3
 8008aa6:	4790      	blx	r2
  }

  return USBD_OK;
 8008aa8:	2300      	movs	r3, #0
}
 8008aaa:	0018      	movs	r0, r3
 8008aac:	46bd      	mov	sp, r7
 8008aae:	b002      	add	sp, #8
 8008ab0:	bd80      	pop	{r7, pc}

08008ab2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008ab2:	b580      	push	{r7, lr}
 8008ab4:	b082      	sub	sp, #8
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	6078      	str	r0, [r7, #4]
 8008aba:	000a      	movs	r2, r1
 8008abc:	1cfb      	adds	r3, r7, #3
 8008abe:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	1cfa      	adds	r2, r7, #3
 8008ac4:	7812      	ldrb	r2, [r2, #0]
 8008ac6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008ac8:	2300      	movs	r3, #0
}
 8008aca:	0018      	movs	r0, r3
 8008acc:	46bd      	mov	sp, r7
 8008ace:	b002      	add	sp, #8
 8008ad0:	bd80      	pop	{r7, pc}
	...

08008ad4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b082      	sub	sp, #8
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	23a7      	movs	r3, #167	; 0xa7
 8008ae0:	009b      	lsls	r3, r3, #2
 8008ae2:	5cd1      	ldrb	r1, [r2, r3]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	4a06      	ldr	r2, [pc, #24]	; (8008b00 <USBD_LL_Suspend+0x2c>)
 8008ae8:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	23a7      	movs	r3, #167	; 0xa7
 8008aee:	009b      	lsls	r3, r3, #2
 8008af0:	2104      	movs	r1, #4
 8008af2:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8008af4:	2300      	movs	r3, #0
}
 8008af6:	0018      	movs	r0, r3
 8008af8:	46bd      	mov	sp, r7
 8008afa:	b002      	add	sp, #8
 8008afc:	bd80      	pop	{r7, pc}
 8008afe:	46c0      	nop			; (mov r8, r8)
 8008b00:	0000029d 	.word	0x0000029d

08008b04 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	23a7      	movs	r3, #167	; 0xa7
 8008b10:	009b      	lsls	r3, r3, #2
 8008b12:	5cd3      	ldrb	r3, [r2, r3]
 8008b14:	2b04      	cmp	r3, #4
 8008b16:	d106      	bne.n	8008b26 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	4a05      	ldr	r2, [pc, #20]	; (8008b30 <USBD_LL_Resume+0x2c>)
 8008b1c:	5c99      	ldrb	r1, [r3, r2]
 8008b1e:	687a      	ldr	r2, [r7, #4]
 8008b20:	23a7      	movs	r3, #167	; 0xa7
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8008b26:	2300      	movs	r3, #0
}
 8008b28:	0018      	movs	r0, r3
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	b002      	add	sp, #8
 8008b2e:	bd80      	pop	{r7, pc}
 8008b30:	0000029d 	.word	0x0000029d

08008b34 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b082      	sub	sp, #8
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b3c:	687a      	ldr	r2, [r7, #4]
 8008b3e:	23a7      	movs	r3, #167	; 0xa7
 8008b40:	009b      	lsls	r3, r3, #2
 8008b42:	5cd3      	ldrb	r3, [r2, r3]
 8008b44:	2b03      	cmp	r3, #3
 8008b46:	d10e      	bne.n	8008b66 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8008b48:	687a      	ldr	r2, [r7, #4]
 8008b4a:	23ad      	movs	r3, #173	; 0xad
 8008b4c:	009b      	lsls	r3, r3, #2
 8008b4e:	58d3      	ldr	r3, [r2, r3]
 8008b50:	69db      	ldr	r3, [r3, #28]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d007      	beq.n	8008b66 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8008b56:	687a      	ldr	r2, [r7, #4]
 8008b58:	23ad      	movs	r3, #173	; 0xad
 8008b5a:	009b      	lsls	r3, r3, #2
 8008b5c:	58d3      	ldr	r3, [r2, r3]
 8008b5e:	69db      	ldr	r3, [r3, #28]
 8008b60:	687a      	ldr	r2, [r7, #4]
 8008b62:	0010      	movs	r0, r2
 8008b64:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008b66:	2300      	movs	r3, #0
}
 8008b68:	0018      	movs	r0, r3
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	b002      	add	sp, #8
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b7a:	230f      	movs	r3, #15
 8008b7c:	18fb      	adds	r3, r7, r3
 8008b7e:	2200      	movs	r2, #0
 8008b80:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	781b      	ldrb	r3, [r3, #0]
 8008b86:	001a      	movs	r2, r3
 8008b88:	2360      	movs	r3, #96	; 0x60
 8008b8a:	4013      	ands	r3, r2
 8008b8c:	2b40      	cmp	r3, #64	; 0x40
 8008b8e:	d004      	beq.n	8008b9a <USBD_StdDevReq+0x2a>
 8008b90:	d84f      	bhi.n	8008c32 <USBD_StdDevReq+0xc2>
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d00b      	beq.n	8008bae <USBD_StdDevReq+0x3e>
 8008b96:	2b20      	cmp	r3, #32
 8008b98:	d14b      	bne.n	8008c32 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008b9a:	687a      	ldr	r2, [r7, #4]
 8008b9c:	23ad      	movs	r3, #173	; 0xad
 8008b9e:	009b      	lsls	r3, r3, #2
 8008ba0:	58d3      	ldr	r3, [r2, r3]
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	6839      	ldr	r1, [r7, #0]
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	0010      	movs	r0, r2
 8008baa:	4798      	blx	r3
      break;
 8008bac:	e048      	b.n	8008c40 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	785b      	ldrb	r3, [r3, #1]
 8008bb2:	2b09      	cmp	r3, #9
 8008bb4:	d835      	bhi.n	8008c22 <USBD_StdDevReq+0xb2>
 8008bb6:	009a      	lsls	r2, r3, #2
 8008bb8:	4b25      	ldr	r3, [pc, #148]	; (8008c50 <USBD_StdDevReq+0xe0>)
 8008bba:	18d3      	adds	r3, r2, r3
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008bc0:	683a      	ldr	r2, [r7, #0]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	0011      	movs	r1, r2
 8008bc6:	0018      	movs	r0, r3
 8008bc8:	f000 fa52 	bl	8009070 <USBD_GetDescriptor>
          break;
 8008bcc:	e030      	b.n	8008c30 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008bce:	683a      	ldr	r2, [r7, #0]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	0011      	movs	r1, r2
 8008bd4:	0018      	movs	r0, r3
 8008bd6:	f000 fbfd 	bl	80093d4 <USBD_SetAddress>
          break;
 8008bda:	e029      	b.n	8008c30 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008bdc:	683a      	ldr	r2, [r7, #0]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	0011      	movs	r1, r2
 8008be2:	0018      	movs	r0, r3
 8008be4:	f000 fc4a 	bl	800947c <USBD_SetConfig>
          break;
 8008be8:	e022      	b.n	8008c30 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008bea:	683a      	ldr	r2, [r7, #0]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	0011      	movs	r1, r2
 8008bf0:	0018      	movs	r0, r3
 8008bf2:	f000 fce7 	bl	80095c4 <USBD_GetConfig>
          break;
 8008bf6:	e01b      	b.n	8008c30 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008bf8:	683a      	ldr	r2, [r7, #0]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	0011      	movs	r1, r2
 8008bfe:	0018      	movs	r0, r3
 8008c00:	f000 fd1b 	bl	800963a <USBD_GetStatus>
          break;
 8008c04:	e014      	b.n	8008c30 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008c06:	683a      	ldr	r2, [r7, #0]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	0011      	movs	r1, r2
 8008c0c:	0018      	movs	r0, r3
 8008c0e:	f000 fd4e 	bl	80096ae <USBD_SetFeature>
          break;
 8008c12:	e00d      	b.n	8008c30 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008c14:	683a      	ldr	r2, [r7, #0]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	0011      	movs	r1, r2
 8008c1a:	0018      	movs	r0, r3
 8008c1c:	f000 fd5d 	bl	80096da <USBD_ClrFeature>
          break;
 8008c20:	e006      	b.n	8008c30 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008c22:	683a      	ldr	r2, [r7, #0]
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	0011      	movs	r1, r2
 8008c28:	0018      	movs	r0, r3
 8008c2a:	f000 fdb7 	bl	800979c <USBD_CtlError>
          break;
 8008c2e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8008c30:	e006      	b.n	8008c40 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008c32:	683a      	ldr	r2, [r7, #0]
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	0011      	movs	r1, r2
 8008c38:	0018      	movs	r0, r3
 8008c3a:	f000 fdaf 	bl	800979c <USBD_CtlError>
      break;
 8008c3e:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8008c40:	230f      	movs	r3, #15
 8008c42:	18fb      	adds	r3, r7, r3
 8008c44:	781b      	ldrb	r3, [r3, #0]
}
 8008c46:	0018      	movs	r0, r3
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	b004      	add	sp, #16
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	46c0      	nop			; (mov r8, r8)
 8008c50:	0800b2bc 	.word	0x0800b2bc

08008c54 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008c54:	b5b0      	push	{r4, r5, r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c5e:	230f      	movs	r3, #15
 8008c60:	18fb      	adds	r3, r7, r3
 8008c62:	2200      	movs	r2, #0
 8008c64:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	001a      	movs	r2, r3
 8008c6c:	2360      	movs	r3, #96	; 0x60
 8008c6e:	4013      	ands	r3, r2
 8008c70:	2b40      	cmp	r3, #64	; 0x40
 8008c72:	d004      	beq.n	8008c7e <USBD_StdItfReq+0x2a>
 8008c74:	d839      	bhi.n	8008cea <USBD_StdItfReq+0x96>
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d001      	beq.n	8008c7e <USBD_StdItfReq+0x2a>
 8008c7a:	2b20      	cmp	r3, #32
 8008c7c:	d135      	bne.n	8008cea <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008c7e:	687a      	ldr	r2, [r7, #4]
 8008c80:	23a7      	movs	r3, #167	; 0xa7
 8008c82:	009b      	lsls	r3, r3, #2
 8008c84:	5cd3      	ldrb	r3, [r2, r3]
 8008c86:	3b01      	subs	r3, #1
 8008c88:	2b02      	cmp	r3, #2
 8008c8a:	d825      	bhi.n	8008cd8 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	889b      	ldrh	r3, [r3, #4]
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	d819      	bhi.n	8008cca <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	23ad      	movs	r3, #173	; 0xad
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	58d3      	ldr	r3, [r2, r3]
 8008c9e:	689b      	ldr	r3, [r3, #8]
 8008ca0:	250f      	movs	r5, #15
 8008ca2:	197c      	adds	r4, r7, r5
 8008ca4:	6839      	ldr	r1, [r7, #0]
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	0010      	movs	r0, r2
 8008caa:	4798      	blx	r3
 8008cac:	0003      	movs	r3, r0
 8008cae:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	88db      	ldrh	r3, [r3, #6]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d116      	bne.n	8008ce6 <USBD_StdItfReq+0x92>
 8008cb8:	197b      	adds	r3, r7, r5
 8008cba:	781b      	ldrb	r3, [r3, #0]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d112      	bne.n	8008ce6 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	0018      	movs	r0, r3
 8008cc4:	f000 fe2e 	bl	8009924 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008cc8:	e00d      	b.n	8008ce6 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 8008cca:	683a      	ldr	r2, [r7, #0]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	0011      	movs	r1, r2
 8008cd0:	0018      	movs	r0, r3
 8008cd2:	f000 fd63 	bl	800979c <USBD_CtlError>
          break;
 8008cd6:	e006      	b.n	8008ce6 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8008cd8:	683a      	ldr	r2, [r7, #0]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	0011      	movs	r1, r2
 8008cde:	0018      	movs	r0, r3
 8008ce0:	f000 fd5c 	bl	800979c <USBD_CtlError>
          break;
 8008ce4:	e000      	b.n	8008ce8 <USBD_StdItfReq+0x94>
          break;
 8008ce6:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8008ce8:	e006      	b.n	8008cf8 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 8008cea:	683a      	ldr	r2, [r7, #0]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	0011      	movs	r1, r2
 8008cf0:	0018      	movs	r0, r3
 8008cf2:	f000 fd53 	bl	800979c <USBD_CtlError>
      break;
 8008cf6:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8008cf8:	2300      	movs	r3, #0
}
 8008cfa:	0018      	movs	r0, r3
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	b004      	add	sp, #16
 8008d00:	bdb0      	pop	{r4, r5, r7, pc}

08008d02 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008d02:	b5b0      	push	{r4, r5, r7, lr}
 8008d04:	b084      	sub	sp, #16
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
 8008d0a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008d0c:	230f      	movs	r3, #15
 8008d0e:	18fb      	adds	r3, r7, r3
 8008d10:	2200      	movs	r2, #0
 8008d12:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	889a      	ldrh	r2, [r3, #4]
 8008d18:	230e      	movs	r3, #14
 8008d1a:	18fb      	adds	r3, r7, r3
 8008d1c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	781b      	ldrb	r3, [r3, #0]
 8008d22:	001a      	movs	r2, r3
 8008d24:	2360      	movs	r3, #96	; 0x60
 8008d26:	4013      	ands	r3, r2
 8008d28:	2b40      	cmp	r3, #64	; 0x40
 8008d2a:	d006      	beq.n	8008d3a <USBD_StdEPReq+0x38>
 8008d2c:	d900      	bls.n	8008d30 <USBD_StdEPReq+0x2e>
 8008d2e:	e190      	b.n	8009052 <USBD_StdEPReq+0x350>
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d00c      	beq.n	8008d4e <USBD_StdEPReq+0x4c>
 8008d34:	2b20      	cmp	r3, #32
 8008d36:	d000      	beq.n	8008d3a <USBD_StdEPReq+0x38>
 8008d38:	e18b      	b.n	8009052 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008d3a:	687a      	ldr	r2, [r7, #4]
 8008d3c:	23ad      	movs	r3, #173	; 0xad
 8008d3e:	009b      	lsls	r3, r3, #2
 8008d40:	58d3      	ldr	r3, [r2, r3]
 8008d42:	689b      	ldr	r3, [r3, #8]
 8008d44:	6839      	ldr	r1, [r7, #0]
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	0010      	movs	r0, r2
 8008d4a:	4798      	blx	r3
      break;
 8008d4c:	e188      	b.n	8009060 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	781b      	ldrb	r3, [r3, #0]
 8008d52:	001a      	movs	r2, r3
 8008d54:	2360      	movs	r3, #96	; 0x60
 8008d56:	4013      	ands	r3, r2
 8008d58:	2b20      	cmp	r3, #32
 8008d5a:	d10f      	bne.n	8008d7c <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008d5c:	687a      	ldr	r2, [r7, #4]
 8008d5e:	23ad      	movs	r3, #173	; 0xad
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	58d3      	ldr	r3, [r2, r3]
 8008d64:	689b      	ldr	r3, [r3, #8]
 8008d66:	250f      	movs	r5, #15
 8008d68:	197c      	adds	r4, r7, r5
 8008d6a:	6839      	ldr	r1, [r7, #0]
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	0010      	movs	r0, r2
 8008d70:	4798      	blx	r3
 8008d72:	0003      	movs	r3, r0
 8008d74:	7023      	strb	r3, [r4, #0]

        return ret;
 8008d76:	197b      	adds	r3, r7, r5
 8008d78:	781b      	ldrb	r3, [r3, #0]
 8008d7a:	e174      	b.n	8009066 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	785b      	ldrb	r3, [r3, #1]
 8008d80:	2b03      	cmp	r3, #3
 8008d82:	d007      	beq.n	8008d94 <USBD_StdEPReq+0x92>
 8008d84:	dd00      	ble.n	8008d88 <USBD_StdEPReq+0x86>
 8008d86:	e15c      	b.n	8009042 <USBD_StdEPReq+0x340>
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d100      	bne.n	8008d8e <USBD_StdEPReq+0x8c>
 8008d8c:	e092      	b.n	8008eb4 <USBD_StdEPReq+0x1b2>
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	d04b      	beq.n	8008e2a <USBD_StdEPReq+0x128>
 8008d92:	e156      	b.n	8009042 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	23a7      	movs	r3, #167	; 0xa7
 8008d98:	009b      	lsls	r3, r3, #2
 8008d9a:	5cd3      	ldrb	r3, [r2, r3]
 8008d9c:	2b02      	cmp	r3, #2
 8008d9e:	d002      	beq.n	8008da6 <USBD_StdEPReq+0xa4>
 8008da0:	2b03      	cmp	r3, #3
 8008da2:	d01d      	beq.n	8008de0 <USBD_StdEPReq+0xde>
 8008da4:	e039      	b.n	8008e1a <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008da6:	220e      	movs	r2, #14
 8008da8:	18bb      	adds	r3, r7, r2
 8008daa:	781b      	ldrb	r3, [r3, #0]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d010      	beq.n	8008dd2 <USBD_StdEPReq+0xd0>
 8008db0:	18bb      	adds	r3, r7, r2
 8008db2:	781b      	ldrb	r3, [r3, #0]
 8008db4:	2b80      	cmp	r3, #128	; 0x80
 8008db6:	d00c      	beq.n	8008dd2 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008db8:	18bb      	adds	r3, r7, r2
 8008dba:	781a      	ldrb	r2, [r3, #0]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	0011      	movs	r1, r2
 8008dc0:	0018      	movs	r0, r3
 8008dc2:	f001 f8f6 	bl	8009fb2 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2180      	movs	r1, #128	; 0x80
 8008dca:	0018      	movs	r0, r3
 8008dcc:	f001 f8f1 	bl	8009fb2 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008dd0:	e02a      	b.n	8008e28 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 8008dd2:	683a      	ldr	r2, [r7, #0]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	0011      	movs	r1, r2
 8008dd8:	0018      	movs	r0, r3
 8008dda:	f000 fcdf 	bl	800979c <USBD_CtlError>
              break;
 8008dde:	e023      	b.n	8008e28 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	885b      	ldrh	r3, [r3, #2]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d113      	bne.n	8008e10 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8008de8:	220e      	movs	r2, #14
 8008dea:	18bb      	adds	r3, r7, r2
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d00e      	beq.n	8008e10 <USBD_StdEPReq+0x10e>
 8008df2:	18bb      	adds	r3, r7, r2
 8008df4:	781b      	ldrb	r3, [r3, #0]
 8008df6:	2b80      	cmp	r3, #128	; 0x80
 8008df8:	d00a      	beq.n	8008e10 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	88db      	ldrh	r3, [r3, #6]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d106      	bne.n	8008e10 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008e02:	18bb      	adds	r3, r7, r2
 8008e04:	781a      	ldrb	r2, [r3, #0]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	0011      	movs	r1, r2
 8008e0a:	0018      	movs	r0, r3
 8008e0c:	f001 f8d1 	bl	8009fb2 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	0018      	movs	r0, r3
 8008e14:	f000 fd86 	bl	8009924 <USBD_CtlSendStatus>

              break;
 8008e18:	e006      	b.n	8008e28 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8008e1a:	683a      	ldr	r2, [r7, #0]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	0011      	movs	r1, r2
 8008e20:	0018      	movs	r0, r3
 8008e22:	f000 fcbb 	bl	800979c <USBD_CtlError>
              break;
 8008e26:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8008e28:	e112      	b.n	8009050 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008e2a:	687a      	ldr	r2, [r7, #4]
 8008e2c:	23a7      	movs	r3, #167	; 0xa7
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	5cd3      	ldrb	r3, [r2, r3]
 8008e32:	2b02      	cmp	r3, #2
 8008e34:	d002      	beq.n	8008e3c <USBD_StdEPReq+0x13a>
 8008e36:	2b03      	cmp	r3, #3
 8008e38:	d01d      	beq.n	8008e76 <USBD_StdEPReq+0x174>
 8008e3a:	e032      	b.n	8008ea2 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e3c:	220e      	movs	r2, #14
 8008e3e:	18bb      	adds	r3, r7, r2
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d010      	beq.n	8008e68 <USBD_StdEPReq+0x166>
 8008e46:	18bb      	adds	r3, r7, r2
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	2b80      	cmp	r3, #128	; 0x80
 8008e4c:	d00c      	beq.n	8008e68 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008e4e:	18bb      	adds	r3, r7, r2
 8008e50:	781a      	ldrb	r2, [r3, #0]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	0011      	movs	r1, r2
 8008e56:	0018      	movs	r0, r3
 8008e58:	f001 f8ab 	bl	8009fb2 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2180      	movs	r1, #128	; 0x80
 8008e60:	0018      	movs	r0, r3
 8008e62:	f001 f8a6 	bl	8009fb2 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008e66:	e024      	b.n	8008eb2 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8008e68:	683a      	ldr	r2, [r7, #0]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	0011      	movs	r1, r2
 8008e6e:	0018      	movs	r0, r3
 8008e70:	f000 fc94 	bl	800979c <USBD_CtlError>
              break;
 8008e74:	e01d      	b.n	8008eb2 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	885b      	ldrh	r3, [r3, #2]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d118      	bne.n	8008eb0 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008e7e:	210e      	movs	r1, #14
 8008e80:	187b      	adds	r3, r7, r1
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	227f      	movs	r2, #127	; 0x7f
 8008e86:	4013      	ands	r3, r2
 8008e88:	d006      	beq.n	8008e98 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008e8a:	187b      	adds	r3, r7, r1
 8008e8c:	781a      	ldrb	r2, [r3, #0]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	0011      	movs	r1, r2
 8008e92:	0018      	movs	r0, r3
 8008e94:	f001 f8b8 	bl	800a008 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	0018      	movs	r0, r3
 8008e9c:	f000 fd42 	bl	8009924 <USBD_CtlSendStatus>
              }
              break;
 8008ea0:	e006      	b.n	8008eb0 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 8008ea2:	683a      	ldr	r2, [r7, #0]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	0011      	movs	r1, r2
 8008ea8:	0018      	movs	r0, r3
 8008eaa:	f000 fc77 	bl	800979c <USBD_CtlError>
              break;
 8008eae:	e000      	b.n	8008eb2 <USBD_StdEPReq+0x1b0>
              break;
 8008eb0:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8008eb2:	e0cd      	b.n	8009050 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	23a7      	movs	r3, #167	; 0xa7
 8008eb8:	009b      	lsls	r3, r3, #2
 8008eba:	5cd3      	ldrb	r3, [r2, r3]
 8008ebc:	2b02      	cmp	r3, #2
 8008ebe:	d002      	beq.n	8008ec6 <USBD_StdEPReq+0x1c4>
 8008ec0:	2b03      	cmp	r3, #3
 8008ec2:	d03c      	beq.n	8008f3e <USBD_StdEPReq+0x23c>
 8008ec4:	e0b5      	b.n	8009032 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ec6:	220e      	movs	r2, #14
 8008ec8:	18bb      	adds	r3, r7, r2
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d00a      	beq.n	8008ee6 <USBD_StdEPReq+0x1e4>
 8008ed0:	18bb      	adds	r3, r7, r2
 8008ed2:	781b      	ldrb	r3, [r3, #0]
 8008ed4:	2b80      	cmp	r3, #128	; 0x80
 8008ed6:	d006      	beq.n	8008ee6 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8008ed8:	683a      	ldr	r2, [r7, #0]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	0011      	movs	r1, r2
 8008ede:	0018      	movs	r0, r3
 8008ee0:	f000 fc5c 	bl	800979c <USBD_CtlError>
                break;
 8008ee4:	e0ac      	b.n	8009040 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ee6:	220e      	movs	r2, #14
 8008ee8:	18bb      	adds	r3, r7, r2
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	b25b      	sxtb	r3, r3
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	da0c      	bge.n	8008f0c <USBD_StdEPReq+0x20a>
 8008ef2:	18bb      	adds	r3, r7, r2
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	227f      	movs	r2, #127	; 0x7f
 8008ef8:	401a      	ands	r2, r3
 8008efa:	0013      	movs	r3, r2
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	189b      	adds	r3, r3, r2
 8008f00:	009b      	lsls	r3, r3, #2
 8008f02:	3310      	adds	r3, #16
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	18d3      	adds	r3, r2, r3
 8008f08:	3304      	adds	r3, #4
 8008f0a:	e00d      	b.n	8008f28 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008f0c:	230e      	movs	r3, #14
 8008f0e:	18fb      	adds	r3, r7, r3
 8008f10:	781b      	ldrb	r3, [r3, #0]
 8008f12:	227f      	movs	r2, #127	; 0x7f
 8008f14:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f16:	0013      	movs	r3, r2
 8008f18:	009b      	lsls	r3, r3, #2
 8008f1a:	189b      	adds	r3, r3, r2
 8008f1c:	009b      	lsls	r3, r3, #2
 8008f1e:	3351      	adds	r3, #81	; 0x51
 8008f20:	33ff      	adds	r3, #255	; 0xff
 8008f22:	687a      	ldr	r2, [r7, #4]
 8008f24:	18d3      	adds	r3, r2, r3
 8008f26:	3304      	adds	r3, #4
 8008f28:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008f30:	68b9      	ldr	r1, [r7, #8]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2202      	movs	r2, #2
 8008f36:	0018      	movs	r0, r3
 8008f38:	f000 fcae 	bl	8009898 <USBD_CtlSendData>
              break;
 8008f3c:	e080      	b.n	8009040 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008f3e:	220e      	movs	r2, #14
 8008f40:	18bb      	adds	r3, r7, r2
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	b25b      	sxtb	r3, r3
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	da14      	bge.n	8008f74 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008f4a:	18bb      	adds	r3, r7, r2
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	220f      	movs	r2, #15
 8008f50:	401a      	ands	r2, r3
 8008f52:	6879      	ldr	r1, [r7, #4]
 8008f54:	0013      	movs	r3, r2
 8008f56:	009b      	lsls	r3, r3, #2
 8008f58:	189b      	adds	r3, r3, r2
 8008f5a:	009b      	lsls	r3, r3, #2
 8008f5c:	18cb      	adds	r3, r1, r3
 8008f5e:	3318      	adds	r3, #24
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d11e      	bne.n	8008fa4 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8008f66:	683a      	ldr	r2, [r7, #0]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	0011      	movs	r1, r2
 8008f6c:	0018      	movs	r0, r3
 8008f6e:	f000 fc15 	bl	800979c <USBD_CtlError>
                  break;
 8008f72:	e065      	b.n	8009040 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008f74:	230e      	movs	r3, #14
 8008f76:	18fb      	adds	r3, r7, r3
 8008f78:	781b      	ldrb	r3, [r3, #0]
 8008f7a:	220f      	movs	r2, #15
 8008f7c:	401a      	ands	r2, r3
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	23ac      	movs	r3, #172	; 0xac
 8008f82:	0059      	lsls	r1, r3, #1
 8008f84:	0013      	movs	r3, r2
 8008f86:	009b      	lsls	r3, r3, #2
 8008f88:	189b      	adds	r3, r3, r2
 8008f8a:	009b      	lsls	r3, r3, #2
 8008f8c:	18c3      	adds	r3, r0, r3
 8008f8e:	185b      	adds	r3, r3, r1
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d106      	bne.n	8008fa4 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8008f96:	683a      	ldr	r2, [r7, #0]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	0011      	movs	r1, r2
 8008f9c:	0018      	movs	r0, r3
 8008f9e:	f000 fbfd 	bl	800979c <USBD_CtlError>
                  break;
 8008fa2:	e04d      	b.n	8009040 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008fa4:	220e      	movs	r2, #14
 8008fa6:	18bb      	adds	r3, r7, r2
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	b25b      	sxtb	r3, r3
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	da0c      	bge.n	8008fca <USBD_StdEPReq+0x2c8>
 8008fb0:	18bb      	adds	r3, r7, r2
 8008fb2:	781b      	ldrb	r3, [r3, #0]
 8008fb4:	227f      	movs	r2, #127	; 0x7f
 8008fb6:	401a      	ands	r2, r3
 8008fb8:	0013      	movs	r3, r2
 8008fba:	009b      	lsls	r3, r3, #2
 8008fbc:	189b      	adds	r3, r3, r2
 8008fbe:	009b      	lsls	r3, r3, #2
 8008fc0:	3310      	adds	r3, #16
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	18d3      	adds	r3, r2, r3
 8008fc6:	3304      	adds	r3, #4
 8008fc8:	e00d      	b.n	8008fe6 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008fca:	230e      	movs	r3, #14
 8008fcc:	18fb      	adds	r3, r7, r3
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	227f      	movs	r2, #127	; 0x7f
 8008fd2:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008fd4:	0013      	movs	r3, r2
 8008fd6:	009b      	lsls	r3, r3, #2
 8008fd8:	189b      	adds	r3, r3, r2
 8008fda:	009b      	lsls	r3, r3, #2
 8008fdc:	3351      	adds	r3, #81	; 0x51
 8008fde:	33ff      	adds	r3, #255	; 0xff
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	18d3      	adds	r3, r2, r3
 8008fe4:	3304      	adds	r3, #4
 8008fe6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008fe8:	220e      	movs	r2, #14
 8008fea:	18bb      	adds	r3, r7, r2
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d003      	beq.n	8008ffa <USBD_StdEPReq+0x2f8>
 8008ff2:	18bb      	adds	r3, r7, r2
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	2b80      	cmp	r3, #128	; 0x80
 8008ff8:	d103      	bne.n	8009002 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	601a      	str	r2, [r3, #0]
 8009000:	e010      	b.n	8009024 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009002:	230e      	movs	r3, #14
 8009004:	18fb      	adds	r3, r7, r3
 8009006:	781a      	ldrb	r2, [r3, #0]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	0011      	movs	r1, r2
 800900c:	0018      	movs	r0, r3
 800900e:	f001 f826 	bl	800a05e <USBD_LL_IsStallEP>
 8009012:	1e03      	subs	r3, r0, #0
 8009014:	d003      	beq.n	800901e <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	2201      	movs	r2, #1
 800901a:	601a      	str	r2, [r3, #0]
 800901c:	e002      	b.n	8009024 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	2200      	movs	r2, #0
 8009022:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009024:	68b9      	ldr	r1, [r7, #8]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2202      	movs	r2, #2
 800902a:	0018      	movs	r0, r3
 800902c:	f000 fc34 	bl	8009898 <USBD_CtlSendData>
              break;
 8009030:	e006      	b.n	8009040 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 8009032:	683a      	ldr	r2, [r7, #0]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	0011      	movs	r1, r2
 8009038:	0018      	movs	r0, r3
 800903a:	f000 fbaf 	bl	800979c <USBD_CtlError>
              break;
 800903e:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8009040:	e006      	b.n	8009050 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 8009042:	683a      	ldr	r2, [r7, #0]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	0011      	movs	r1, r2
 8009048:	0018      	movs	r0, r3
 800904a:	f000 fba7 	bl	800979c <USBD_CtlError>
          break;
 800904e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8009050:	e006      	b.n	8009060 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 8009052:	683a      	ldr	r2, [r7, #0]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	0011      	movs	r1, r2
 8009058:	0018      	movs	r0, r3
 800905a:	f000 fb9f 	bl	800979c <USBD_CtlError>
      break;
 800905e:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8009060:	230f      	movs	r3, #15
 8009062:	18fb      	adds	r3, r7, r3
 8009064:	781b      	ldrb	r3, [r3, #0]
}
 8009066:	0018      	movs	r0, r3
 8009068:	46bd      	mov	sp, r7
 800906a:	b004      	add	sp, #16
 800906c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009070 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b084      	sub	sp, #16
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800907a:	2308      	movs	r3, #8
 800907c:	18fb      	adds	r3, r7, r3
 800907e:	2200      	movs	r2, #0
 8009080:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8009082:	2300      	movs	r3, #0
 8009084:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009086:	230b      	movs	r3, #11
 8009088:	18fb      	adds	r3, r7, r3
 800908a:	2200      	movs	r2, #0
 800908c:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	885b      	ldrh	r3, [r3, #2]
 8009092:	0a1b      	lsrs	r3, r3, #8
 8009094:	b29b      	uxth	r3, r3
 8009096:	2b07      	cmp	r3, #7
 8009098:	d900      	bls.n	800909c <USBD_GetDescriptor+0x2c>
 800909a:	e159      	b.n	8009350 <USBD_GetDescriptor+0x2e0>
 800909c:	009a      	lsls	r2, r3, #2
 800909e:	4bcb      	ldr	r3, [pc, #812]	; (80093cc <USBD_GetDescriptor+0x35c>)
 80090a0:	18d3      	adds	r3, r2, r3
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80090a6:	687a      	ldr	r2, [r7, #4]
 80090a8:	23ac      	movs	r3, #172	; 0xac
 80090aa:	009b      	lsls	r3, r3, #2
 80090ac:	58d3      	ldr	r3, [r2, r3]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	7c12      	ldrb	r2, [r2, #16]
 80090b4:	2108      	movs	r1, #8
 80090b6:	1879      	adds	r1, r7, r1
 80090b8:	0010      	movs	r0, r2
 80090ba:	4798      	blx	r3
 80090bc:	0003      	movs	r3, r0
 80090be:	60fb      	str	r3, [r7, #12]
      break;
 80090c0:	e153      	b.n	800936a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	7c1b      	ldrb	r3, [r3, #16]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d10f      	bne.n	80090ea <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	23ad      	movs	r3, #173	; 0xad
 80090ce:	009b      	lsls	r3, r3, #2
 80090d0:	58d3      	ldr	r3, [r2, r3]
 80090d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090d4:	2208      	movs	r2, #8
 80090d6:	18ba      	adds	r2, r7, r2
 80090d8:	0010      	movs	r0, r2
 80090da:	4798      	blx	r3
 80090dc:	0003      	movs	r3, r0
 80090de:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	3301      	adds	r3, #1
 80090e4:	2202      	movs	r2, #2
 80090e6:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80090e8:	e13f      	b.n	800936a <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80090ea:	687a      	ldr	r2, [r7, #4]
 80090ec:	23ad      	movs	r3, #173	; 0xad
 80090ee:	009b      	lsls	r3, r3, #2
 80090f0:	58d3      	ldr	r3, [r2, r3]
 80090f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f4:	2208      	movs	r2, #8
 80090f6:	18ba      	adds	r2, r7, r2
 80090f8:	0010      	movs	r0, r2
 80090fa:	4798      	blx	r3
 80090fc:	0003      	movs	r3, r0
 80090fe:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	3301      	adds	r3, #1
 8009104:	2202      	movs	r2, #2
 8009106:	701a      	strb	r2, [r3, #0]
      break;
 8009108:	e12f      	b.n	800936a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	885b      	ldrh	r3, [r3, #2]
 800910e:	b2db      	uxtb	r3, r3
 8009110:	2b05      	cmp	r3, #5
 8009112:	d900      	bls.n	8009116 <USBD_GetDescriptor+0xa6>
 8009114:	e0d0      	b.n	80092b8 <USBD_GetDescriptor+0x248>
 8009116:	009a      	lsls	r2, r3, #2
 8009118:	4bad      	ldr	r3, [pc, #692]	; (80093d0 <USBD_GetDescriptor+0x360>)
 800911a:	18d3      	adds	r3, r2, r3
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009120:	687a      	ldr	r2, [r7, #4]
 8009122:	23ac      	movs	r3, #172	; 0xac
 8009124:	009b      	lsls	r3, r3, #2
 8009126:	58d3      	ldr	r3, [r2, r3]
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d00d      	beq.n	800914a <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	23ac      	movs	r3, #172	; 0xac
 8009132:	009b      	lsls	r3, r3, #2
 8009134:	58d3      	ldr	r3, [r2, r3]
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	687a      	ldr	r2, [r7, #4]
 800913a:	7c12      	ldrb	r2, [r2, #16]
 800913c:	2108      	movs	r1, #8
 800913e:	1879      	adds	r1, r7, r1
 8009140:	0010      	movs	r0, r2
 8009142:	4798      	blx	r3
 8009144:	0003      	movs	r3, r0
 8009146:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009148:	e0c3      	b.n	80092d2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800914a:	683a      	ldr	r2, [r7, #0]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	0011      	movs	r1, r2
 8009150:	0018      	movs	r0, r3
 8009152:	f000 fb23 	bl	800979c <USBD_CtlError>
            err++;
 8009156:	210b      	movs	r1, #11
 8009158:	187b      	adds	r3, r7, r1
 800915a:	781a      	ldrb	r2, [r3, #0]
 800915c:	187b      	adds	r3, r7, r1
 800915e:	3201      	adds	r2, #1
 8009160:	701a      	strb	r2, [r3, #0]
          break;
 8009162:	e0b6      	b.n	80092d2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	23ac      	movs	r3, #172	; 0xac
 8009168:	009b      	lsls	r3, r3, #2
 800916a:	58d3      	ldr	r3, [r2, r3]
 800916c:	689b      	ldr	r3, [r3, #8]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d00d      	beq.n	800918e <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009172:	687a      	ldr	r2, [r7, #4]
 8009174:	23ac      	movs	r3, #172	; 0xac
 8009176:	009b      	lsls	r3, r3, #2
 8009178:	58d3      	ldr	r3, [r2, r3]
 800917a:	689b      	ldr	r3, [r3, #8]
 800917c:	687a      	ldr	r2, [r7, #4]
 800917e:	7c12      	ldrb	r2, [r2, #16]
 8009180:	2108      	movs	r1, #8
 8009182:	1879      	adds	r1, r7, r1
 8009184:	0010      	movs	r0, r2
 8009186:	4798      	blx	r3
 8009188:	0003      	movs	r3, r0
 800918a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800918c:	e0a1      	b.n	80092d2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800918e:	683a      	ldr	r2, [r7, #0]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	0011      	movs	r1, r2
 8009194:	0018      	movs	r0, r3
 8009196:	f000 fb01 	bl	800979c <USBD_CtlError>
            err++;
 800919a:	210b      	movs	r1, #11
 800919c:	187b      	adds	r3, r7, r1
 800919e:	781a      	ldrb	r2, [r3, #0]
 80091a0:	187b      	adds	r3, r7, r1
 80091a2:	3201      	adds	r2, #1
 80091a4:	701a      	strb	r2, [r3, #0]
          break;
 80091a6:	e094      	b.n	80092d2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80091a8:	687a      	ldr	r2, [r7, #4]
 80091aa:	23ac      	movs	r3, #172	; 0xac
 80091ac:	009b      	lsls	r3, r3, #2
 80091ae:	58d3      	ldr	r3, [r2, r3]
 80091b0:	68db      	ldr	r3, [r3, #12]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d00d      	beq.n	80091d2 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	23ac      	movs	r3, #172	; 0xac
 80091ba:	009b      	lsls	r3, r3, #2
 80091bc:	58d3      	ldr	r3, [r2, r3]
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	7c12      	ldrb	r2, [r2, #16]
 80091c4:	2108      	movs	r1, #8
 80091c6:	1879      	adds	r1, r7, r1
 80091c8:	0010      	movs	r0, r2
 80091ca:	4798      	blx	r3
 80091cc:	0003      	movs	r3, r0
 80091ce:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091d0:	e07f      	b.n	80092d2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80091d2:	683a      	ldr	r2, [r7, #0]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	0011      	movs	r1, r2
 80091d8:	0018      	movs	r0, r3
 80091da:	f000 fadf 	bl	800979c <USBD_CtlError>
            err++;
 80091de:	210b      	movs	r1, #11
 80091e0:	187b      	adds	r3, r7, r1
 80091e2:	781a      	ldrb	r2, [r3, #0]
 80091e4:	187b      	adds	r3, r7, r1
 80091e6:	3201      	adds	r2, #1
 80091e8:	701a      	strb	r2, [r3, #0]
          break;
 80091ea:	e072      	b.n	80092d2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80091ec:	687a      	ldr	r2, [r7, #4]
 80091ee:	23ac      	movs	r3, #172	; 0xac
 80091f0:	009b      	lsls	r3, r3, #2
 80091f2:	58d3      	ldr	r3, [r2, r3]
 80091f4:	691b      	ldr	r3, [r3, #16]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d00d      	beq.n	8009216 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80091fa:	687a      	ldr	r2, [r7, #4]
 80091fc:	23ac      	movs	r3, #172	; 0xac
 80091fe:	009b      	lsls	r3, r3, #2
 8009200:	58d3      	ldr	r3, [r2, r3]
 8009202:	691b      	ldr	r3, [r3, #16]
 8009204:	687a      	ldr	r2, [r7, #4]
 8009206:	7c12      	ldrb	r2, [r2, #16]
 8009208:	2108      	movs	r1, #8
 800920a:	1879      	adds	r1, r7, r1
 800920c:	0010      	movs	r0, r2
 800920e:	4798      	blx	r3
 8009210:	0003      	movs	r3, r0
 8009212:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009214:	e05d      	b.n	80092d2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009216:	683a      	ldr	r2, [r7, #0]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	0011      	movs	r1, r2
 800921c:	0018      	movs	r0, r3
 800921e:	f000 fabd 	bl	800979c <USBD_CtlError>
            err++;
 8009222:	210b      	movs	r1, #11
 8009224:	187b      	adds	r3, r7, r1
 8009226:	781a      	ldrb	r2, [r3, #0]
 8009228:	187b      	adds	r3, r7, r1
 800922a:	3201      	adds	r2, #1
 800922c:	701a      	strb	r2, [r3, #0]
          break;
 800922e:	e050      	b.n	80092d2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	23ac      	movs	r3, #172	; 0xac
 8009234:	009b      	lsls	r3, r3, #2
 8009236:	58d3      	ldr	r3, [r2, r3]
 8009238:	695b      	ldr	r3, [r3, #20]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d00d      	beq.n	800925a <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800923e:	687a      	ldr	r2, [r7, #4]
 8009240:	23ac      	movs	r3, #172	; 0xac
 8009242:	009b      	lsls	r3, r3, #2
 8009244:	58d3      	ldr	r3, [r2, r3]
 8009246:	695b      	ldr	r3, [r3, #20]
 8009248:	687a      	ldr	r2, [r7, #4]
 800924a:	7c12      	ldrb	r2, [r2, #16]
 800924c:	2108      	movs	r1, #8
 800924e:	1879      	adds	r1, r7, r1
 8009250:	0010      	movs	r0, r2
 8009252:	4798      	blx	r3
 8009254:	0003      	movs	r3, r0
 8009256:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009258:	e03b      	b.n	80092d2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800925a:	683a      	ldr	r2, [r7, #0]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	0011      	movs	r1, r2
 8009260:	0018      	movs	r0, r3
 8009262:	f000 fa9b 	bl	800979c <USBD_CtlError>
            err++;
 8009266:	210b      	movs	r1, #11
 8009268:	187b      	adds	r3, r7, r1
 800926a:	781a      	ldrb	r2, [r3, #0]
 800926c:	187b      	adds	r3, r7, r1
 800926e:	3201      	adds	r2, #1
 8009270:	701a      	strb	r2, [r3, #0]
          break;
 8009272:	e02e      	b.n	80092d2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	23ac      	movs	r3, #172	; 0xac
 8009278:	009b      	lsls	r3, r3, #2
 800927a:	58d3      	ldr	r3, [r2, r3]
 800927c:	699b      	ldr	r3, [r3, #24]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d00d      	beq.n	800929e <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009282:	687a      	ldr	r2, [r7, #4]
 8009284:	23ac      	movs	r3, #172	; 0xac
 8009286:	009b      	lsls	r3, r3, #2
 8009288:	58d3      	ldr	r3, [r2, r3]
 800928a:	699b      	ldr	r3, [r3, #24]
 800928c:	687a      	ldr	r2, [r7, #4]
 800928e:	7c12      	ldrb	r2, [r2, #16]
 8009290:	2108      	movs	r1, #8
 8009292:	1879      	adds	r1, r7, r1
 8009294:	0010      	movs	r0, r2
 8009296:	4798      	blx	r3
 8009298:	0003      	movs	r3, r0
 800929a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800929c:	e019      	b.n	80092d2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800929e:	683a      	ldr	r2, [r7, #0]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	0011      	movs	r1, r2
 80092a4:	0018      	movs	r0, r3
 80092a6:	f000 fa79 	bl	800979c <USBD_CtlError>
            err++;
 80092aa:	210b      	movs	r1, #11
 80092ac:	187b      	adds	r3, r7, r1
 80092ae:	781a      	ldrb	r2, [r3, #0]
 80092b0:	187b      	adds	r3, r7, r1
 80092b2:	3201      	adds	r2, #1
 80092b4:	701a      	strb	r2, [r3, #0]
          break;
 80092b6:	e00c      	b.n	80092d2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80092b8:	683a      	ldr	r2, [r7, #0]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	0011      	movs	r1, r2
 80092be:	0018      	movs	r0, r3
 80092c0:	f000 fa6c 	bl	800979c <USBD_CtlError>
          err++;
 80092c4:	210b      	movs	r1, #11
 80092c6:	187b      	adds	r3, r7, r1
 80092c8:	781a      	ldrb	r2, [r3, #0]
 80092ca:	187b      	adds	r3, r7, r1
 80092cc:	3201      	adds	r2, #1
 80092ce:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 80092d0:	e04b      	b.n	800936a <USBD_GetDescriptor+0x2fa>
 80092d2:	e04a      	b.n	800936a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	7c1b      	ldrb	r3, [r3, #16]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d10b      	bne.n	80092f4 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80092dc:	687a      	ldr	r2, [r7, #4]
 80092de:	23ad      	movs	r3, #173	; 0xad
 80092e0:	009b      	lsls	r3, r3, #2
 80092e2:	58d3      	ldr	r3, [r2, r3]
 80092e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092e6:	2208      	movs	r2, #8
 80092e8:	18ba      	adds	r2, r7, r2
 80092ea:	0010      	movs	r0, r2
 80092ec:	4798      	blx	r3
 80092ee:	0003      	movs	r3, r0
 80092f0:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80092f2:	e03a      	b.n	800936a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 80092f4:	683a      	ldr	r2, [r7, #0]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	0011      	movs	r1, r2
 80092fa:	0018      	movs	r0, r3
 80092fc:	f000 fa4e 	bl	800979c <USBD_CtlError>
        err++;
 8009300:	210b      	movs	r1, #11
 8009302:	187b      	adds	r3, r7, r1
 8009304:	781a      	ldrb	r2, [r3, #0]
 8009306:	187b      	adds	r3, r7, r1
 8009308:	3201      	adds	r2, #1
 800930a:	701a      	strb	r2, [r3, #0]
      break;
 800930c:	e02d      	b.n	800936a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	7c1b      	ldrb	r3, [r3, #16]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d10f      	bne.n	8009336 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	23ad      	movs	r3, #173	; 0xad
 800931a:	009b      	lsls	r3, r3, #2
 800931c:	58d3      	ldr	r3, [r2, r3]
 800931e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009320:	2208      	movs	r2, #8
 8009322:	18ba      	adds	r2, r7, r2
 8009324:	0010      	movs	r0, r2
 8009326:	4798      	blx	r3
 8009328:	0003      	movs	r3, r0
 800932a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	3301      	adds	r3, #1
 8009330:	2207      	movs	r2, #7
 8009332:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009334:	e019      	b.n	800936a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8009336:	683a      	ldr	r2, [r7, #0]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	0011      	movs	r1, r2
 800933c:	0018      	movs	r0, r3
 800933e:	f000 fa2d 	bl	800979c <USBD_CtlError>
        err++;
 8009342:	210b      	movs	r1, #11
 8009344:	187b      	adds	r3, r7, r1
 8009346:	781a      	ldrb	r2, [r3, #0]
 8009348:	187b      	adds	r3, r7, r1
 800934a:	3201      	adds	r2, #1
 800934c:	701a      	strb	r2, [r3, #0]
      break;
 800934e:	e00c      	b.n	800936a <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8009350:	683a      	ldr	r2, [r7, #0]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	0011      	movs	r1, r2
 8009356:	0018      	movs	r0, r3
 8009358:	f000 fa20 	bl	800979c <USBD_CtlError>
      err++;
 800935c:	210b      	movs	r1, #11
 800935e:	187b      	adds	r3, r7, r1
 8009360:	781a      	ldrb	r2, [r3, #0]
 8009362:	187b      	adds	r3, r7, r1
 8009364:	3201      	adds	r2, #1
 8009366:	701a      	strb	r2, [r3, #0]
      break;
 8009368:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 800936a:	230b      	movs	r3, #11
 800936c:	18fb      	adds	r3, r7, r3
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d127      	bne.n	80093c4 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009374:	2108      	movs	r1, #8
 8009376:	187b      	adds	r3, r7, r1
 8009378:	881b      	ldrh	r3, [r3, #0]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d019      	beq.n	80093b2 <USBD_GetDescriptor+0x342>
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	88db      	ldrh	r3, [r3, #6]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d015      	beq.n	80093b2 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	88da      	ldrh	r2, [r3, #6]
 800938a:	187b      	adds	r3, r7, r1
 800938c:	881b      	ldrh	r3, [r3, #0]
 800938e:	1c18      	adds	r0, r3, #0
 8009390:	1c11      	adds	r1, r2, #0
 8009392:	b28a      	uxth	r2, r1
 8009394:	b283      	uxth	r3, r0
 8009396:	429a      	cmp	r2, r3
 8009398:	d900      	bls.n	800939c <USBD_GetDescriptor+0x32c>
 800939a:	1c01      	adds	r1, r0, #0
 800939c:	b28a      	uxth	r2, r1
 800939e:	2108      	movs	r1, #8
 80093a0:	187b      	adds	r3, r7, r1
 80093a2:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80093a4:	187b      	adds	r3, r7, r1
 80093a6:	881a      	ldrh	r2, [r3, #0]
 80093a8:	68f9      	ldr	r1, [r7, #12]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	0018      	movs	r0, r3
 80093ae:	f000 fa73 	bl	8009898 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	88db      	ldrh	r3, [r3, #6]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d105      	bne.n	80093c6 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	0018      	movs	r0, r3
 80093be:	f000 fab1 	bl	8009924 <USBD_CtlSendStatus>
 80093c2:	e000      	b.n	80093c6 <USBD_GetDescriptor+0x356>
    return;
 80093c4:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 80093c6:	46bd      	mov	sp, r7
 80093c8:	b004      	add	sp, #16
 80093ca:	bd80      	pop	{r7, pc}
 80093cc:	0800b2e4 	.word	0x0800b2e4
 80093d0:	0800b304 	.word	0x0800b304

080093d4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80093d4:	b590      	push	{r4, r7, lr}
 80093d6:	b085      	sub	sp, #20
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
 80093dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	889b      	ldrh	r3, [r3, #4]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d13d      	bne.n	8009462 <USBD_SetAddress+0x8e>
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	88db      	ldrh	r3, [r3, #6]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d139      	bne.n	8009462 <USBD_SetAddress+0x8e>
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	885b      	ldrh	r3, [r3, #2]
 80093f2:	2b7f      	cmp	r3, #127	; 0x7f
 80093f4:	d835      	bhi.n	8009462 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	885b      	ldrh	r3, [r3, #2]
 80093fa:	b2da      	uxtb	r2, r3
 80093fc:	230f      	movs	r3, #15
 80093fe:	18fb      	adds	r3, r7, r3
 8009400:	217f      	movs	r1, #127	; 0x7f
 8009402:	400a      	ands	r2, r1
 8009404:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009406:	687a      	ldr	r2, [r7, #4]
 8009408:	23a7      	movs	r3, #167	; 0xa7
 800940a:	009b      	lsls	r3, r3, #2
 800940c:	5cd3      	ldrb	r3, [r2, r3]
 800940e:	2b03      	cmp	r3, #3
 8009410:	d106      	bne.n	8009420 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8009412:	683a      	ldr	r2, [r7, #0]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	0011      	movs	r1, r2
 8009418:	0018      	movs	r0, r3
 800941a:	f000 f9bf 	bl	800979c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800941e:	e027      	b.n	8009470 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	240f      	movs	r4, #15
 8009424:	193a      	adds	r2, r7, r4
 8009426:	4914      	ldr	r1, [pc, #80]	; (8009478 <USBD_SetAddress+0xa4>)
 8009428:	7812      	ldrb	r2, [r2, #0]
 800942a:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800942c:	193b      	adds	r3, r7, r4
 800942e:	781a      	ldrb	r2, [r3, #0]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	0011      	movs	r1, r2
 8009434:	0018      	movs	r0, r3
 8009436:	f000 fe43 	bl	800a0c0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	0018      	movs	r0, r3
 800943e:	f000 fa71 	bl	8009924 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009442:	193b      	adds	r3, r7, r4
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d005      	beq.n	8009456 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800944a:	687a      	ldr	r2, [r7, #4]
 800944c:	23a7      	movs	r3, #167	; 0xa7
 800944e:	009b      	lsls	r3, r3, #2
 8009450:	2102      	movs	r1, #2
 8009452:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009454:	e00c      	b.n	8009470 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009456:	687a      	ldr	r2, [r7, #4]
 8009458:	23a7      	movs	r3, #167	; 0xa7
 800945a:	009b      	lsls	r3, r3, #2
 800945c:	2101      	movs	r1, #1
 800945e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009460:	e006      	b.n	8009470 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009462:	683a      	ldr	r2, [r7, #0]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	0011      	movs	r1, r2
 8009468:	0018      	movs	r0, r3
 800946a:	f000 f997 	bl	800979c <USBD_CtlError>
  }
}
 800946e:	46c0      	nop			; (mov r8, r8)
 8009470:	46c0      	nop			; (mov r8, r8)
 8009472:	46bd      	mov	sp, r7
 8009474:	b005      	add	sp, #20
 8009476:	bd90      	pop	{r4, r7, pc}
 8009478:	0000029e 	.word	0x0000029e

0800947c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b082      	sub	sp, #8
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	885b      	ldrh	r3, [r3, #2]
 800948a:	b2da      	uxtb	r2, r3
 800948c:	4b4c      	ldr	r3, [pc, #304]	; (80095c0 <USBD_SetConfig+0x144>)
 800948e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009490:	4b4b      	ldr	r3, [pc, #300]	; (80095c0 <USBD_SetConfig+0x144>)
 8009492:	781b      	ldrb	r3, [r3, #0]
 8009494:	2b01      	cmp	r3, #1
 8009496:	d906      	bls.n	80094a6 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8009498:	683a      	ldr	r2, [r7, #0]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	0011      	movs	r1, r2
 800949e:	0018      	movs	r0, r3
 80094a0:	f000 f97c 	bl	800979c <USBD_CtlError>
 80094a4:	e088      	b.n	80095b8 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 80094a6:	687a      	ldr	r2, [r7, #4]
 80094a8:	23a7      	movs	r3, #167	; 0xa7
 80094aa:	009b      	lsls	r3, r3, #2
 80094ac:	5cd3      	ldrb	r3, [r2, r3]
 80094ae:	2b02      	cmp	r3, #2
 80094b0:	d002      	beq.n	80094b8 <USBD_SetConfig+0x3c>
 80094b2:	2b03      	cmp	r3, #3
 80094b4:	d029      	beq.n	800950a <USBD_SetConfig+0x8e>
 80094b6:	e071      	b.n	800959c <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80094b8:	4b41      	ldr	r3, [pc, #260]	; (80095c0 <USBD_SetConfig+0x144>)
 80094ba:	781b      	ldrb	r3, [r3, #0]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d01f      	beq.n	8009500 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 80094c0:	4b3f      	ldr	r3, [pc, #252]	; (80095c0 <USBD_SetConfig+0x144>)
 80094c2:	781b      	ldrb	r3, [r3, #0]
 80094c4:	001a      	movs	r2, r3
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80094ca:	687a      	ldr	r2, [r7, #4]
 80094cc:	23a7      	movs	r3, #167	; 0xa7
 80094ce:	009b      	lsls	r3, r3, #2
 80094d0:	2103      	movs	r1, #3
 80094d2:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80094d4:	4b3a      	ldr	r3, [pc, #232]	; (80095c0 <USBD_SetConfig+0x144>)
 80094d6:	781a      	ldrb	r2, [r3, #0]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	0011      	movs	r1, r2
 80094dc:	0018      	movs	r0, r3
 80094de:	f7ff f8c5 	bl	800866c <USBD_SetClassConfig>
 80094e2:	0003      	movs	r3, r0
 80094e4:	2b02      	cmp	r3, #2
 80094e6:	d106      	bne.n	80094f6 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 80094e8:	683a      	ldr	r2, [r7, #0]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	0011      	movs	r1, r2
 80094ee:	0018      	movs	r0, r3
 80094f0:	f000 f954 	bl	800979c <USBD_CtlError>
            return;
 80094f4:	e060      	b.n	80095b8 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	0018      	movs	r0, r3
 80094fa:	f000 fa13 	bl	8009924 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80094fe:	e05b      	b.n	80095b8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	0018      	movs	r0, r3
 8009504:	f000 fa0e 	bl	8009924 <USBD_CtlSendStatus>
        break;
 8009508:	e056      	b.n	80095b8 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800950a:	4b2d      	ldr	r3, [pc, #180]	; (80095c0 <USBD_SetConfig+0x144>)
 800950c:	781b      	ldrb	r3, [r3, #0]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d115      	bne.n	800953e <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009512:	687a      	ldr	r2, [r7, #4]
 8009514:	23a7      	movs	r3, #167	; 0xa7
 8009516:	009b      	lsls	r3, r3, #2
 8009518:	2102      	movs	r1, #2
 800951a:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800951c:	4b28      	ldr	r3, [pc, #160]	; (80095c0 <USBD_SetConfig+0x144>)
 800951e:	781b      	ldrb	r3, [r3, #0]
 8009520:	001a      	movs	r2, r3
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009526:	4b26      	ldr	r3, [pc, #152]	; (80095c0 <USBD_SetConfig+0x144>)
 8009528:	781a      	ldrb	r2, [r3, #0]
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	0011      	movs	r1, r2
 800952e:	0018      	movs	r0, r3
 8009530:	f7ff f8c3 	bl	80086ba <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	0018      	movs	r0, r3
 8009538:	f000 f9f4 	bl	8009924 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800953c:	e03c      	b.n	80095b8 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800953e:	4b20      	ldr	r3, [pc, #128]	; (80095c0 <USBD_SetConfig+0x144>)
 8009540:	781b      	ldrb	r3, [r3, #0]
 8009542:	001a      	movs	r2, r3
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	429a      	cmp	r2, r3
 800954a:	d022      	beq.n	8009592 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	b2da      	uxtb	r2, r3
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	0011      	movs	r1, r2
 8009556:	0018      	movs	r0, r3
 8009558:	f7ff f8af 	bl	80086ba <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800955c:	4b18      	ldr	r3, [pc, #96]	; (80095c0 <USBD_SetConfig+0x144>)
 800955e:	781b      	ldrb	r3, [r3, #0]
 8009560:	001a      	movs	r2, r3
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009566:	4b16      	ldr	r3, [pc, #88]	; (80095c0 <USBD_SetConfig+0x144>)
 8009568:	781a      	ldrb	r2, [r3, #0]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	0011      	movs	r1, r2
 800956e:	0018      	movs	r0, r3
 8009570:	f7ff f87c 	bl	800866c <USBD_SetClassConfig>
 8009574:	0003      	movs	r3, r0
 8009576:	2b02      	cmp	r3, #2
 8009578:	d106      	bne.n	8009588 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 800957a:	683a      	ldr	r2, [r7, #0]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	0011      	movs	r1, r2
 8009580:	0018      	movs	r0, r3
 8009582:	f000 f90b 	bl	800979c <USBD_CtlError>
            return;
 8009586:	e017      	b.n	80095b8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	0018      	movs	r0, r3
 800958c:	f000 f9ca 	bl	8009924 <USBD_CtlSendStatus>
        break;
 8009590:	e012      	b.n	80095b8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	0018      	movs	r0, r3
 8009596:	f000 f9c5 	bl	8009924 <USBD_CtlSendStatus>
        break;
 800959a:	e00d      	b.n	80095b8 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 800959c:	683a      	ldr	r2, [r7, #0]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	0011      	movs	r1, r2
 80095a2:	0018      	movs	r0, r3
 80095a4:	f000 f8fa 	bl	800979c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80095a8:	4b05      	ldr	r3, [pc, #20]	; (80095c0 <USBD_SetConfig+0x144>)
 80095aa:	781a      	ldrb	r2, [r3, #0]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	0011      	movs	r1, r2
 80095b0:	0018      	movs	r0, r3
 80095b2:	f7ff f882 	bl	80086ba <USBD_ClrClassConfig>
        break;
 80095b6:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 80095b8:	46bd      	mov	sp, r7
 80095ba:	b002      	add	sp, #8
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	46c0      	nop			; (mov r8, r8)
 80095c0:	20000550 	.word	0x20000550

080095c4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	88db      	ldrh	r3, [r3, #6]
 80095d2:	2b01      	cmp	r3, #1
 80095d4:	d006      	beq.n	80095e4 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 80095d6:	683a      	ldr	r2, [r7, #0]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	0011      	movs	r1, r2
 80095dc:	0018      	movs	r0, r3
 80095de:	f000 f8dd 	bl	800979c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80095e2:	e026      	b.n	8009632 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 80095e4:	687a      	ldr	r2, [r7, #4]
 80095e6:	23a7      	movs	r3, #167	; 0xa7
 80095e8:	009b      	lsls	r3, r3, #2
 80095ea:	5cd3      	ldrb	r3, [r2, r3]
 80095ec:	2b02      	cmp	r3, #2
 80095ee:	dc02      	bgt.n	80095f6 <USBD_GetConfig+0x32>
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	dc03      	bgt.n	80095fc <USBD_GetConfig+0x38>
 80095f4:	e016      	b.n	8009624 <USBD_GetConfig+0x60>
 80095f6:	2b03      	cmp	r3, #3
 80095f8:	d00c      	beq.n	8009614 <USBD_GetConfig+0x50>
 80095fa:	e013      	b.n	8009624 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2200      	movs	r2, #0
 8009600:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	3308      	adds	r3, #8
 8009606:	0019      	movs	r1, r3
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2201      	movs	r2, #1
 800960c:	0018      	movs	r0, r3
 800960e:	f000 f943 	bl	8009898 <USBD_CtlSendData>
        break;
 8009612:	e00e      	b.n	8009632 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	1d19      	adds	r1, r3, #4
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2201      	movs	r2, #1
 800961c:	0018      	movs	r0, r3
 800961e:	f000 f93b 	bl	8009898 <USBD_CtlSendData>
        break;
 8009622:	e006      	b.n	8009632 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8009624:	683a      	ldr	r2, [r7, #0]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	0011      	movs	r1, r2
 800962a:	0018      	movs	r0, r3
 800962c:	f000 f8b6 	bl	800979c <USBD_CtlError>
        break;
 8009630:	46c0      	nop			; (mov r8, r8)
}
 8009632:	46c0      	nop			; (mov r8, r8)
 8009634:	46bd      	mov	sp, r7
 8009636:	b002      	add	sp, #8
 8009638:	bd80      	pop	{r7, pc}

0800963a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800963a:	b580      	push	{r7, lr}
 800963c:	b082      	sub	sp, #8
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
 8009642:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009644:	687a      	ldr	r2, [r7, #4]
 8009646:	23a7      	movs	r3, #167	; 0xa7
 8009648:	009b      	lsls	r3, r3, #2
 800964a:	5cd3      	ldrb	r3, [r2, r3]
 800964c:	3b01      	subs	r3, #1
 800964e:	2b02      	cmp	r3, #2
 8009650:	d822      	bhi.n	8009698 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	88db      	ldrh	r3, [r3, #6]
 8009656:	2b02      	cmp	r3, #2
 8009658:	d006      	beq.n	8009668 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800965a:	683a      	ldr	r2, [r7, #0]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	0011      	movs	r1, r2
 8009660:	0018      	movs	r0, r3
 8009662:	f000 f89b 	bl	800979c <USBD_CtlError>
        break;
 8009666:	e01e      	b.n	80096a6 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2200      	movs	r2, #0
 800966c:	60da      	str	r2, [r3, #12]
#endif

      if (pdev->dev_remote_wakeup)
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	23a9      	movs	r3, #169	; 0xa9
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	58d3      	ldr	r3, [r2, r3]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d005      	beq.n	8009686 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	68db      	ldr	r3, [r3, #12]
 800967e:	2202      	movs	r2, #2
 8009680:	431a      	orrs	r2, r3
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	330c      	adds	r3, #12
 800968a:	0019      	movs	r1, r3
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2202      	movs	r2, #2
 8009690:	0018      	movs	r0, r3
 8009692:	f000 f901 	bl	8009898 <USBD_CtlSendData>
      break;
 8009696:	e006      	b.n	80096a6 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8009698:	683a      	ldr	r2, [r7, #0]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	0011      	movs	r1, r2
 800969e:	0018      	movs	r0, r3
 80096a0:	f000 f87c 	bl	800979c <USBD_CtlError>
      break;
 80096a4:	46c0      	nop			; (mov r8, r8)
  }
}
 80096a6:	46c0      	nop			; (mov r8, r8)
 80096a8:	46bd      	mov	sp, r7
 80096aa:	b002      	add	sp, #8
 80096ac:	bd80      	pop	{r7, pc}

080096ae <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80096ae:	b580      	push	{r7, lr}
 80096b0:	b082      	sub	sp, #8
 80096b2:	af00      	add	r7, sp, #0
 80096b4:	6078      	str	r0, [r7, #4]
 80096b6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	885b      	ldrh	r3, [r3, #2]
 80096bc:	2b01      	cmp	r3, #1
 80096be:	d108      	bne.n	80096d2 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	23a9      	movs	r3, #169	; 0xa9
 80096c4:	009b      	lsls	r3, r3, #2
 80096c6:	2101      	movs	r1, #1
 80096c8:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	0018      	movs	r0, r3
 80096ce:	f000 f929 	bl	8009924 <USBD_CtlSendStatus>
  }
}
 80096d2:	46c0      	nop			; (mov r8, r8)
 80096d4:	46bd      	mov	sp, r7
 80096d6:	b002      	add	sp, #8
 80096d8:	bd80      	pop	{r7, pc}

080096da <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80096da:	b580      	push	{r7, lr}
 80096dc:	b082      	sub	sp, #8
 80096de:	af00      	add	r7, sp, #0
 80096e0:	6078      	str	r0, [r7, #4]
 80096e2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80096e4:	687a      	ldr	r2, [r7, #4]
 80096e6:	23a7      	movs	r3, #167	; 0xa7
 80096e8:	009b      	lsls	r3, r3, #2
 80096ea:	5cd3      	ldrb	r3, [r2, r3]
 80096ec:	3b01      	subs	r3, #1
 80096ee:	2b02      	cmp	r3, #2
 80096f0:	d80d      	bhi.n	800970e <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	885b      	ldrh	r3, [r3, #2]
 80096f6:	2b01      	cmp	r3, #1
 80096f8:	d110      	bne.n	800971c <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 80096fa:	687a      	ldr	r2, [r7, #4]
 80096fc:	23a9      	movs	r3, #169	; 0xa9
 80096fe:	009b      	lsls	r3, r3, #2
 8009700:	2100      	movs	r1, #0
 8009702:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	0018      	movs	r0, r3
 8009708:	f000 f90c 	bl	8009924 <USBD_CtlSendStatus>
      }
      break;
 800970c:	e006      	b.n	800971c <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800970e:	683a      	ldr	r2, [r7, #0]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	0011      	movs	r1, r2
 8009714:	0018      	movs	r0, r3
 8009716:	f000 f841 	bl	800979c <USBD_CtlError>
      break;
 800971a:	e000      	b.n	800971e <USBD_ClrFeature+0x44>
      break;
 800971c:	46c0      	nop			; (mov r8, r8)
  }
}
 800971e:	46c0      	nop			; (mov r8, r8)
 8009720:	46bd      	mov	sp, r7
 8009722:	b002      	add	sp, #8
 8009724:	bd80      	pop	{r7, pc}

08009726 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009726:	b580      	push	{r7, lr}
 8009728:	b082      	sub	sp, #8
 800972a:	af00      	add	r7, sp, #0
 800972c:	6078      	str	r0, [r7, #4]
 800972e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	781a      	ldrb	r2, [r3, #0]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	785a      	ldrb	r2, [r3, #1]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	3302      	adds	r3, #2
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	b29a      	uxth	r2, r3
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	3303      	adds	r3, #3
 800974c:	781b      	ldrb	r3, [r3, #0]
 800974e:	b29b      	uxth	r3, r3
 8009750:	021b      	lsls	r3, r3, #8
 8009752:	b29b      	uxth	r3, r3
 8009754:	18d3      	adds	r3, r2, r3
 8009756:	b29a      	uxth	r2, r3
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	3304      	adds	r3, #4
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	b29a      	uxth	r2, r3
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	3305      	adds	r3, #5
 8009768:	781b      	ldrb	r3, [r3, #0]
 800976a:	b29b      	uxth	r3, r3
 800976c:	021b      	lsls	r3, r3, #8
 800976e:	b29b      	uxth	r3, r3
 8009770:	18d3      	adds	r3, r2, r3
 8009772:	b29a      	uxth	r2, r3
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	3306      	adds	r3, #6
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	b29a      	uxth	r2, r3
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	3307      	adds	r3, #7
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	b29b      	uxth	r3, r3
 8009788:	021b      	lsls	r3, r3, #8
 800978a:	b29b      	uxth	r3, r3
 800978c:	18d3      	adds	r3, r2, r3
 800978e:	b29a      	uxth	r2, r3
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	80da      	strh	r2, [r3, #6]

}
 8009794:	46c0      	nop			; (mov r8, r8)
 8009796:	46bd      	mov	sp, r7
 8009798:	b002      	add	sp, #8
 800979a:	bd80      	pop	{r7, pc}

0800979c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b082      	sub	sp, #8
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2180      	movs	r1, #128	; 0x80
 80097aa:	0018      	movs	r0, r3
 80097ac:	f000 fc01 	bl	8009fb2 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2100      	movs	r1, #0
 80097b4:	0018      	movs	r0, r3
 80097b6:	f000 fbfc 	bl	8009fb2 <USBD_LL_StallEP>
}
 80097ba:	46c0      	nop			; (mov r8, r8)
 80097bc:	46bd      	mov	sp, r7
 80097be:	b002      	add	sp, #8
 80097c0:	bd80      	pop	{r7, pc}

080097c2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80097c2:	b590      	push	{r4, r7, lr}
 80097c4:	b087      	sub	sp, #28
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	60f8      	str	r0, [r7, #12]
 80097ca:	60b9      	str	r1, [r7, #8]
 80097cc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80097ce:	2417      	movs	r4, #23
 80097d0:	193b      	adds	r3, r7, r4
 80097d2:	2200      	movs	r2, #0
 80097d4:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d03c      	beq.n	8009856 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	0018      	movs	r0, r3
 80097e0:	f000 f83d 	bl	800985e <USBD_GetLen>
 80097e4:	0003      	movs	r3, r0
 80097e6:	3301      	adds	r3, #1
 80097e8:	b29b      	uxth	r3, r3
 80097ea:	18db      	adds	r3, r3, r3
 80097ec:	b29a      	uxth	r2, r3
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80097f2:	193b      	adds	r3, r7, r4
 80097f4:	781b      	ldrb	r3, [r3, #0]
 80097f6:	193a      	adds	r2, r7, r4
 80097f8:	1c59      	adds	r1, r3, #1
 80097fa:	7011      	strb	r1, [r2, #0]
 80097fc:	001a      	movs	r2, r3
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	189b      	adds	r3, r3, r2
 8009802:	687a      	ldr	r2, [r7, #4]
 8009804:	7812      	ldrb	r2, [r2, #0]
 8009806:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009808:	193b      	adds	r3, r7, r4
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	193a      	adds	r2, r7, r4
 800980e:	1c59      	adds	r1, r3, #1
 8009810:	7011      	strb	r1, [r2, #0]
 8009812:	001a      	movs	r2, r3
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	189b      	adds	r3, r3, r2
 8009818:	2203      	movs	r2, #3
 800981a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800981c:	e017      	b.n	800984e <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	1c5a      	adds	r2, r3, #1
 8009822:	60fa      	str	r2, [r7, #12]
 8009824:	2417      	movs	r4, #23
 8009826:	193a      	adds	r2, r7, r4
 8009828:	7812      	ldrb	r2, [r2, #0]
 800982a:	1939      	adds	r1, r7, r4
 800982c:	1c50      	adds	r0, r2, #1
 800982e:	7008      	strb	r0, [r1, #0]
 8009830:	0011      	movs	r1, r2
 8009832:	68ba      	ldr	r2, [r7, #8]
 8009834:	1852      	adds	r2, r2, r1
 8009836:	781b      	ldrb	r3, [r3, #0]
 8009838:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800983a:	193b      	adds	r3, r7, r4
 800983c:	781b      	ldrb	r3, [r3, #0]
 800983e:	193a      	adds	r2, r7, r4
 8009840:	1c59      	adds	r1, r3, #1
 8009842:	7011      	strb	r1, [r2, #0]
 8009844:	001a      	movs	r2, r3
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	189b      	adds	r3, r3, r2
 800984a:	2200      	movs	r2, #0
 800984c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	781b      	ldrb	r3, [r3, #0]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d1e3      	bne.n	800981e <USBD_GetString+0x5c>
    }
  }
}
 8009856:	46c0      	nop			; (mov r8, r8)
 8009858:	46bd      	mov	sp, r7
 800985a:	b007      	add	sp, #28
 800985c:	bd90      	pop	{r4, r7, pc}

0800985e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800985e:	b580      	push	{r7, lr}
 8009860:	b084      	sub	sp, #16
 8009862:	af00      	add	r7, sp, #0
 8009864:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009866:	230f      	movs	r3, #15
 8009868:	18fb      	adds	r3, r7, r3
 800986a:	2200      	movs	r2, #0
 800986c:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800986e:	e008      	b.n	8009882 <USBD_GetLen+0x24>
  {
    len++;
 8009870:	210f      	movs	r1, #15
 8009872:	187b      	adds	r3, r7, r1
 8009874:	781a      	ldrb	r2, [r3, #0]
 8009876:	187b      	adds	r3, r7, r1
 8009878:	3201      	adds	r2, #1
 800987a:	701a      	strb	r2, [r3, #0]
    buf++;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	3301      	adds	r3, #1
 8009880:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	781b      	ldrb	r3, [r3, #0]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d1f2      	bne.n	8009870 <USBD_GetLen+0x12>
  }

  return len;
 800988a:	230f      	movs	r3, #15
 800988c:	18fb      	adds	r3, r7, r3
 800988e:	781b      	ldrb	r3, [r3, #0]
}
 8009890:	0018      	movs	r0, r3
 8009892:	46bd      	mov	sp, r7
 8009894:	b004      	add	sp, #16
 8009896:	bd80      	pop	{r7, pc}

08009898 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b084      	sub	sp, #16
 800989c:	af00      	add	r7, sp, #0
 800989e:	60f8      	str	r0, [r7, #12]
 80098a0:	60b9      	str	r1, [r7, #8]
 80098a2:	1dbb      	adds	r3, r7, #6
 80098a4:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80098a6:	68fa      	ldr	r2, [r7, #12]
 80098a8:	23a5      	movs	r3, #165	; 0xa5
 80098aa:	009b      	lsls	r3, r3, #2
 80098ac:	2102      	movs	r1, #2
 80098ae:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 80098b0:	1dbb      	adds	r3, r7, #6
 80098b2:	881a      	ldrh	r2, [r3, #0]
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80098b8:	1dbb      	adds	r3, r7, #6
 80098ba:	881a      	ldrh	r2, [r3, #0]
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80098c0:	1dbb      	adds	r3, r7, #6
 80098c2:	881b      	ldrh	r3, [r3, #0]
 80098c4:	68ba      	ldr	r2, [r7, #8]
 80098c6:	68f8      	ldr	r0, [r7, #12]
 80098c8:	2100      	movs	r1, #0
 80098ca:	f000 fc24 	bl	800a116 <USBD_LL_Transmit>

  return USBD_OK;
 80098ce:	2300      	movs	r3, #0
}
 80098d0:	0018      	movs	r0, r3
 80098d2:	46bd      	mov	sp, r7
 80098d4:	b004      	add	sp, #16
 80098d6:	bd80      	pop	{r7, pc}

080098d8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b084      	sub	sp, #16
 80098dc:	af00      	add	r7, sp, #0
 80098de:	60f8      	str	r0, [r7, #12]
 80098e0:	60b9      	str	r1, [r7, #8]
 80098e2:	1dbb      	adds	r3, r7, #6
 80098e4:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80098e6:	1dbb      	adds	r3, r7, #6
 80098e8:	881b      	ldrh	r3, [r3, #0]
 80098ea:	68ba      	ldr	r2, [r7, #8]
 80098ec:	68f8      	ldr	r0, [r7, #12]
 80098ee:	2100      	movs	r1, #0
 80098f0:	f000 fc11 	bl	800a116 <USBD_LL_Transmit>

  return USBD_OK;
 80098f4:	2300      	movs	r3, #0
}
 80098f6:	0018      	movs	r0, r3
 80098f8:	46bd      	mov	sp, r7
 80098fa:	b004      	add	sp, #16
 80098fc:	bd80      	pop	{r7, pc}

080098fe <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80098fe:	b580      	push	{r7, lr}
 8009900:	b084      	sub	sp, #16
 8009902:	af00      	add	r7, sp, #0
 8009904:	60f8      	str	r0, [r7, #12]
 8009906:	60b9      	str	r1, [r7, #8]
 8009908:	1dbb      	adds	r3, r7, #6
 800990a:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800990c:	1dbb      	adds	r3, r7, #6
 800990e:	881b      	ldrh	r3, [r3, #0]
 8009910:	68ba      	ldr	r2, [r7, #8]
 8009912:	68f8      	ldr	r0, [r7, #12]
 8009914:	2100      	movs	r1, #0
 8009916:	f000 fc35 	bl	800a184 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800991a:	2300      	movs	r3, #0
}
 800991c:	0018      	movs	r0, r3
 800991e:	46bd      	mov	sp, r7
 8009920:	b004      	add	sp, #16
 8009922:	bd80      	pop	{r7, pc}

08009924 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b082      	sub	sp, #8
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800992c:	687a      	ldr	r2, [r7, #4]
 800992e:	23a5      	movs	r3, #165	; 0xa5
 8009930:	009b      	lsls	r3, r3, #2
 8009932:	2104      	movs	r1, #4
 8009934:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	2300      	movs	r3, #0
 800993a:	2200      	movs	r2, #0
 800993c:	2100      	movs	r1, #0
 800993e:	f000 fbea 	bl	800a116 <USBD_LL_Transmit>

  return USBD_OK;
 8009942:	2300      	movs	r3, #0
}
 8009944:	0018      	movs	r0, r3
 8009946:	46bd      	mov	sp, r7
 8009948:	b002      	add	sp, #8
 800994a:	bd80      	pop	{r7, pc}

0800994c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b082      	sub	sp, #8
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009954:	687a      	ldr	r2, [r7, #4]
 8009956:	23a5      	movs	r3, #165	; 0xa5
 8009958:	009b      	lsls	r3, r3, #2
 800995a:	2105      	movs	r1, #5
 800995c:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	2300      	movs	r3, #0
 8009962:	2200      	movs	r2, #0
 8009964:	2100      	movs	r1, #0
 8009966:	f000 fc0d 	bl	800a184 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800996a:	2300      	movs	r3, #0
}
 800996c:	0018      	movs	r0, r3
 800996e:	46bd      	mov	sp, r7
 8009970:	b002      	add	sp, #8
 8009972:	bd80      	pop	{r7, pc}

08009974 <GetUSBHandle>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
 USBD_HandleTypeDef* GetUSBHandle()
 {
 8009974:	b580      	push	{r7, lr}
 8009976:	af00      	add	r7, sp, #0
 	return &hUsbDeviceFS;
 8009978:	4b01      	ldr	r3, [pc, #4]	; (8009980 <GetUSBHandle+0xc>)
 }
 800997a:	0018      	movs	r0, r3
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}
 8009980:	20000554 	.word	0x20000554

08009984 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009988:	490f      	ldr	r1, [pc, #60]	; (80099c8 <MX_USB_DEVICE_Init+0x44>)
 800998a:	4b10      	ldr	r3, [pc, #64]	; (80099cc <MX_USB_DEVICE_Init+0x48>)
 800998c:	2200      	movs	r2, #0
 800998e:	0018      	movs	r0, r3
 8009990:	f7fe fde6 	bl	8008560 <USBD_Init>
 8009994:	1e03      	subs	r3, r0, #0
 8009996:	d001      	beq.n	800999c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009998:	f7f7 fc36 	bl	8001208 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800999c:	4a0c      	ldr	r2, [pc, #48]	; (80099d0 <MX_USB_DEVICE_Init+0x4c>)
 800999e:	4b0b      	ldr	r3, [pc, #44]	; (80099cc <MX_USB_DEVICE_Init+0x48>)
 80099a0:	0011      	movs	r1, r2
 80099a2:	0018      	movs	r0, r3
 80099a4:	f7fe fe1c 	bl	80085e0 <USBD_RegisterClass>
 80099a8:	1e03      	subs	r3, r0, #0
 80099aa:	d001      	beq.n	80099b0 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 80099ac:	f7f7 fc2c 	bl	8001208 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80099b0:	4b06      	ldr	r3, [pc, #24]	; (80099cc <MX_USB_DEVICE_Init+0x48>)
 80099b2:	0018      	movs	r0, r3
 80099b4:	f7fe fe44 	bl	8008640 <USBD_Start>
 80099b8:	1e03      	subs	r3, r0, #0
 80099ba:	d001      	beq.n	80099c0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80099bc:	f7f7 fc24 	bl	8001208 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80099c0:	46c0      	nop			; (mov r8, r8)
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}
 80099c6:	46c0      	nop			; (mov r8, r8)
 80099c8:	20000114 	.word	0x20000114
 80099cc:	20000554 	.word	0x20000554
 80099d0:	2000000c 	.word	0x2000000c

080099d4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b082      	sub	sp, #8
 80099d8:	af00      	add	r7, sp, #0
 80099da:	0002      	movs	r2, r0
 80099dc:	6039      	str	r1, [r7, #0]
 80099de:	1dfb      	adds	r3, r7, #7
 80099e0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	2212      	movs	r2, #18
 80099e6:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80099e8:	4b02      	ldr	r3, [pc, #8]	; (80099f4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80099ea:	0018      	movs	r0, r3
 80099ec:	46bd      	mov	sp, r7
 80099ee:	b002      	add	sp, #8
 80099f0:	bd80      	pop	{r7, pc}
 80099f2:	46c0      	nop			; (mov r8, r8)
 80099f4:	20000130 	.word	0x20000130

080099f8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	0002      	movs	r2, r0
 8009a00:	6039      	str	r1, [r7, #0]
 8009a02:	1dfb      	adds	r3, r7, #7
 8009a04:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	2204      	movs	r2, #4
 8009a0a:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009a0c:	4b02      	ldr	r3, [pc, #8]	; (8009a18 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009a0e:	0018      	movs	r0, r3
 8009a10:	46bd      	mov	sp, r7
 8009a12:	b002      	add	sp, #8
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	46c0      	nop			; (mov r8, r8)
 8009a18:	20000144 	.word	0x20000144

08009a1c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b082      	sub	sp, #8
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	0002      	movs	r2, r0
 8009a24:	6039      	str	r1, [r7, #0]
 8009a26:	1dfb      	adds	r3, r7, #7
 8009a28:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8009a2a:	1dfb      	adds	r3, r7, #7
 8009a2c:	781b      	ldrb	r3, [r3, #0]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d106      	bne.n	8009a40 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009a32:	683a      	ldr	r2, [r7, #0]
 8009a34:	4908      	ldr	r1, [pc, #32]	; (8009a58 <USBD_FS_ProductStrDescriptor+0x3c>)
 8009a36:	4b09      	ldr	r3, [pc, #36]	; (8009a5c <USBD_FS_ProductStrDescriptor+0x40>)
 8009a38:	0018      	movs	r0, r3
 8009a3a:	f7ff fec2 	bl	80097c2 <USBD_GetString>
 8009a3e:	e005      	b.n	8009a4c <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009a40:	683a      	ldr	r2, [r7, #0]
 8009a42:	4905      	ldr	r1, [pc, #20]	; (8009a58 <USBD_FS_ProductStrDescriptor+0x3c>)
 8009a44:	4b05      	ldr	r3, [pc, #20]	; (8009a5c <USBD_FS_ProductStrDescriptor+0x40>)
 8009a46:	0018      	movs	r0, r3
 8009a48:	f7ff febb 	bl	80097c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a4c:	4b02      	ldr	r3, [pc, #8]	; (8009a58 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8009a4e:	0018      	movs	r0, r3
 8009a50:	46bd      	mov	sp, r7
 8009a52:	b002      	add	sp, #8
 8009a54:	bd80      	pop	{r7, pc}
 8009a56:	46c0      	nop			; (mov r8, r8)
 8009a58:	20000818 	.word	0x20000818
 8009a5c:	0800b23c 	.word	0x0800b23c

08009a60 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b082      	sub	sp, #8
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	0002      	movs	r2, r0
 8009a68:	6039      	str	r1, [r7, #0]
 8009a6a:	1dfb      	adds	r3, r7, #7
 8009a6c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009a6e:	683a      	ldr	r2, [r7, #0]
 8009a70:	4904      	ldr	r1, [pc, #16]	; (8009a84 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009a72:	4b05      	ldr	r3, [pc, #20]	; (8009a88 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8009a74:	0018      	movs	r0, r3
 8009a76:	f7ff fea4 	bl	80097c2 <USBD_GetString>
  return USBD_StrDesc;
 8009a7a:	4b02      	ldr	r3, [pc, #8]	; (8009a84 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8009a7c:	0018      	movs	r0, r3
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	b002      	add	sp, #8
 8009a82:	bd80      	pop	{r7, pc}
 8009a84:	20000818 	.word	0x20000818
 8009a88:	0800b258 	.word	0x0800b258

08009a8c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b082      	sub	sp, #8
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	0002      	movs	r2, r0
 8009a94:	6039      	str	r1, [r7, #0]
 8009a96:	1dfb      	adds	r3, r7, #7
 8009a98:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	221a      	movs	r2, #26
 8009a9e:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009aa0:	f000 f84c 	bl	8009b3c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009aa4:	4b02      	ldr	r3, [pc, #8]	; (8009ab0 <USBD_FS_SerialStrDescriptor+0x24>)
}
 8009aa6:	0018      	movs	r0, r3
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	b002      	add	sp, #8
 8009aac:	bd80      	pop	{r7, pc}
 8009aae:	46c0      	nop			; (mov r8, r8)
 8009ab0:	20000148 	.word	0x20000148

08009ab4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b082      	sub	sp, #8
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	0002      	movs	r2, r0
 8009abc:	6039      	str	r1, [r7, #0]
 8009abe:	1dfb      	adds	r3, r7, #7
 8009ac0:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8009ac2:	1dfb      	adds	r3, r7, #7
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d106      	bne.n	8009ad8 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009aca:	683a      	ldr	r2, [r7, #0]
 8009acc:	4908      	ldr	r1, [pc, #32]	; (8009af0 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8009ace:	4b09      	ldr	r3, [pc, #36]	; (8009af4 <USBD_FS_ConfigStrDescriptor+0x40>)
 8009ad0:	0018      	movs	r0, r3
 8009ad2:	f7ff fe76 	bl	80097c2 <USBD_GetString>
 8009ad6:	e005      	b.n	8009ae4 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009ad8:	683a      	ldr	r2, [r7, #0]
 8009ada:	4905      	ldr	r1, [pc, #20]	; (8009af0 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8009adc:	4b05      	ldr	r3, [pc, #20]	; (8009af4 <USBD_FS_ConfigStrDescriptor+0x40>)
 8009ade:	0018      	movs	r0, r3
 8009ae0:	f7ff fe6f 	bl	80097c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ae4:	4b02      	ldr	r3, [pc, #8]	; (8009af0 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8009ae6:	0018      	movs	r0, r3
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	b002      	add	sp, #8
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	46c0      	nop			; (mov r8, r8)
 8009af0:	20000818 	.word	0x20000818
 8009af4:	0800b268 	.word	0x0800b268

08009af8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b082      	sub	sp, #8
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	0002      	movs	r2, r0
 8009b00:	6039      	str	r1, [r7, #0]
 8009b02:	1dfb      	adds	r3, r7, #7
 8009b04:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8009b06:	1dfb      	adds	r3, r7, #7
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d106      	bne.n	8009b1c <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009b0e:	683a      	ldr	r2, [r7, #0]
 8009b10:	4908      	ldr	r1, [pc, #32]	; (8009b34 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8009b12:	4b09      	ldr	r3, [pc, #36]	; (8009b38 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8009b14:	0018      	movs	r0, r3
 8009b16:	f7ff fe54 	bl	80097c2 <USBD_GetString>
 8009b1a:	e005      	b.n	8009b28 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009b1c:	683a      	ldr	r2, [r7, #0]
 8009b1e:	4905      	ldr	r1, [pc, #20]	; (8009b34 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8009b20:	4b05      	ldr	r3, [pc, #20]	; (8009b38 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8009b22:	0018      	movs	r0, r3
 8009b24:	f7ff fe4d 	bl	80097c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b28:	4b02      	ldr	r3, [pc, #8]	; (8009b34 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8009b2a:	0018      	movs	r0, r3
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	b002      	add	sp, #8
 8009b30:	bd80      	pop	{r7, pc}
 8009b32:	46c0      	nop			; (mov r8, r8)
 8009b34:	20000818 	.word	0x20000818
 8009b38:	0800b274 	.word	0x0800b274

08009b3c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b084      	sub	sp, #16
 8009b40:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009b42:	4b10      	ldr	r3, [pc, #64]	; (8009b84 <Get_SerialNum+0x48>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009b48:	4b0f      	ldr	r3, [pc, #60]	; (8009b88 <Get_SerialNum+0x4c>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009b4e:	4b0f      	ldr	r3, [pc, #60]	; (8009b8c <Get_SerialNum+0x50>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009b54:	68fa      	ldr	r2, [r7, #12]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	18d3      	adds	r3, r2, r3
 8009b5a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d00b      	beq.n	8009b7a <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009b62:	490b      	ldr	r1, [pc, #44]	; (8009b90 <Get_SerialNum+0x54>)
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2208      	movs	r2, #8
 8009b68:	0018      	movs	r0, r3
 8009b6a:	f000 f815 	bl	8009b98 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009b6e:	4909      	ldr	r1, [pc, #36]	; (8009b94 <Get_SerialNum+0x58>)
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	2204      	movs	r2, #4
 8009b74:	0018      	movs	r0, r3
 8009b76:	f000 f80f 	bl	8009b98 <IntToUnicode>
  }
}
 8009b7a:	46c0      	nop			; (mov r8, r8)
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	b004      	add	sp, #16
 8009b80:	bd80      	pop	{r7, pc}
 8009b82:	46c0      	nop			; (mov r8, r8)
 8009b84:	1ffff7ac 	.word	0x1ffff7ac
 8009b88:	1ffff7b0 	.word	0x1ffff7b0
 8009b8c:	1ffff7b4 	.word	0x1ffff7b4
 8009b90:	2000014a 	.word	0x2000014a
 8009b94:	2000015a 	.word	0x2000015a

08009b98 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b086      	sub	sp, #24
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	60f8      	str	r0, [r7, #12]
 8009ba0:	60b9      	str	r1, [r7, #8]
 8009ba2:	1dfb      	adds	r3, r7, #7
 8009ba4:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8009ba6:	2117      	movs	r1, #23
 8009ba8:	187b      	adds	r3, r7, r1
 8009baa:	2200      	movs	r2, #0
 8009bac:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8009bae:	187b      	adds	r3, r7, r1
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	701a      	strb	r2, [r3, #0]
 8009bb4:	e02f      	b.n	8009c16 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	0f1b      	lsrs	r3, r3, #28
 8009bba:	2b09      	cmp	r3, #9
 8009bbc:	d80d      	bhi.n	8009bda <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	0f1b      	lsrs	r3, r3, #28
 8009bc2:	b2da      	uxtb	r2, r3
 8009bc4:	2317      	movs	r3, #23
 8009bc6:	18fb      	adds	r3, r7, r3
 8009bc8:	781b      	ldrb	r3, [r3, #0]
 8009bca:	005b      	lsls	r3, r3, #1
 8009bcc:	0019      	movs	r1, r3
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	185b      	adds	r3, r3, r1
 8009bd2:	3230      	adds	r2, #48	; 0x30
 8009bd4:	b2d2      	uxtb	r2, r2
 8009bd6:	701a      	strb	r2, [r3, #0]
 8009bd8:	e00c      	b.n	8009bf4 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	0f1b      	lsrs	r3, r3, #28
 8009bde:	b2da      	uxtb	r2, r3
 8009be0:	2317      	movs	r3, #23
 8009be2:	18fb      	adds	r3, r7, r3
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	005b      	lsls	r3, r3, #1
 8009be8:	0019      	movs	r1, r3
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	185b      	adds	r3, r3, r1
 8009bee:	3237      	adds	r2, #55	; 0x37
 8009bf0:	b2d2      	uxtb	r2, r2
 8009bf2:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	011b      	lsls	r3, r3, #4
 8009bf8:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009bfa:	2117      	movs	r1, #23
 8009bfc:	187b      	adds	r3, r7, r1
 8009bfe:	781b      	ldrb	r3, [r3, #0]
 8009c00:	005b      	lsls	r3, r3, #1
 8009c02:	3301      	adds	r3, #1
 8009c04:	68ba      	ldr	r2, [r7, #8]
 8009c06:	18d3      	adds	r3, r2, r3
 8009c08:	2200      	movs	r2, #0
 8009c0a:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009c0c:	187b      	adds	r3, r7, r1
 8009c0e:	781a      	ldrb	r2, [r3, #0]
 8009c10:	187b      	adds	r3, r7, r1
 8009c12:	3201      	adds	r2, #1
 8009c14:	701a      	strb	r2, [r3, #0]
 8009c16:	2317      	movs	r3, #23
 8009c18:	18fa      	adds	r2, r7, r3
 8009c1a:	1dfb      	adds	r3, r7, #7
 8009c1c:	7812      	ldrb	r2, [r2, #0]
 8009c1e:	781b      	ldrb	r3, [r3, #0]
 8009c20:	429a      	cmp	r2, r3
 8009c22:	d3c8      	bcc.n	8009bb6 <IntToUnicode+0x1e>
  }
}
 8009c24:	46c0      	nop			; (mov r8, r8)
 8009c26:	46c0      	nop			; (mov r8, r8)
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	b006      	add	sp, #24
 8009c2c:	bd80      	pop	{r7, pc}
	...

08009c30 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b084      	sub	sp, #16
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4a0e      	ldr	r2, [pc, #56]	; (8009c78 <HAL_PCD_MspInit+0x48>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d115      	bne.n	8009c6e <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009c42:	4b0e      	ldr	r3, [pc, #56]	; (8009c7c <HAL_PCD_MspInit+0x4c>)
 8009c44:	69da      	ldr	r2, [r3, #28]
 8009c46:	4b0d      	ldr	r3, [pc, #52]	; (8009c7c <HAL_PCD_MspInit+0x4c>)
 8009c48:	2180      	movs	r1, #128	; 0x80
 8009c4a:	0409      	lsls	r1, r1, #16
 8009c4c:	430a      	orrs	r2, r1
 8009c4e:	61da      	str	r2, [r3, #28]
 8009c50:	4b0a      	ldr	r3, [pc, #40]	; (8009c7c <HAL_PCD_MspInit+0x4c>)
 8009c52:	69da      	ldr	r2, [r3, #28]
 8009c54:	2380      	movs	r3, #128	; 0x80
 8009c56:	041b      	lsls	r3, r3, #16
 8009c58:	4013      	ands	r3, r2
 8009c5a:	60fb      	str	r3, [r7, #12]
 8009c5c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8009c5e:	2200      	movs	r2, #0
 8009c60:	2100      	movs	r1, #0
 8009c62:	201f      	movs	r0, #31
 8009c64:	f7f8 f8f8 	bl	8001e58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8009c68:	201f      	movs	r0, #31
 8009c6a:	f7f8 f90a 	bl	8001e82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009c6e:	46c0      	nop			; (mov r8, r8)
 8009c70:	46bd      	mov	sp, r7
 8009c72:	b004      	add	sp, #16
 8009c74:	bd80      	pop	{r7, pc}
 8009c76:	46c0      	nop			; (mov r8, r8)
 8009c78:	40005c00 	.word	0x40005c00
 8009c7c:	40021000 	.word	0x40021000

08009c80 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b082      	sub	sp, #8
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009c88:	687a      	ldr	r2, [r7, #4]
 8009c8a:	23bc      	movs	r3, #188	; 0xbc
 8009c8c:	009b      	lsls	r3, r3, #2
 8009c8e:	58d2      	ldr	r2, [r2, r3]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	21ac      	movs	r1, #172	; 0xac
 8009c94:	0089      	lsls	r1, r1, #2
 8009c96:	468c      	mov	ip, r1
 8009c98:	4463      	add	r3, ip
 8009c9a:	0019      	movs	r1, r3
 8009c9c:	0010      	movs	r0, r2
 8009c9e:	f7fe fd23 	bl	80086e8 <USBD_LL_SetupStage>
}
 8009ca2:	46c0      	nop			; (mov r8, r8)
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	b002      	add	sp, #8
 8009ca8:	bd80      	pop	{r7, pc}

08009caa <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009caa:	b590      	push	{r4, r7, lr}
 8009cac:	b083      	sub	sp, #12
 8009cae:	af00      	add	r7, sp, #0
 8009cb0:	6078      	str	r0, [r7, #4]
 8009cb2:	000a      	movs	r2, r1
 8009cb4:	1cfb      	adds	r3, r7, #3
 8009cb6:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009cb8:	687a      	ldr	r2, [r7, #4]
 8009cba:	23bc      	movs	r3, #188	; 0xbc
 8009cbc:	009b      	lsls	r3, r3, #2
 8009cbe:	58d4      	ldr	r4, [r2, r3]
 8009cc0:	1cfb      	adds	r3, r7, #3
 8009cc2:	781a      	ldrb	r2, [r3, #0]
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	23be      	movs	r3, #190	; 0xbe
 8009cc8:	0059      	lsls	r1, r3, #1
 8009cca:	0013      	movs	r3, r2
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	189b      	adds	r3, r3, r2
 8009cd0:	00db      	lsls	r3, r3, #3
 8009cd2:	18c3      	adds	r3, r0, r3
 8009cd4:	185b      	adds	r3, r3, r1
 8009cd6:	681a      	ldr	r2, [r3, #0]
 8009cd8:	1cfb      	adds	r3, r7, #3
 8009cda:	781b      	ldrb	r3, [r3, #0]
 8009cdc:	0019      	movs	r1, r3
 8009cde:	0020      	movs	r0, r4
 8009ce0:	f7fe fd60 	bl	80087a4 <USBD_LL_DataOutStage>
}
 8009ce4:	46c0      	nop			; (mov r8, r8)
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	b003      	add	sp, #12
 8009cea:	bd90      	pop	{r4, r7, pc}

08009cec <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b082      	sub	sp, #8
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	000a      	movs	r2, r1
 8009cf6:	1cfb      	adds	r3, r7, #3
 8009cf8:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009cfa:	687a      	ldr	r2, [r7, #4]
 8009cfc:	23bc      	movs	r3, #188	; 0xbc
 8009cfe:	009b      	lsls	r3, r3, #2
 8009d00:	58d0      	ldr	r0, [r2, r3]
 8009d02:	1cfb      	adds	r3, r7, #3
 8009d04:	781a      	ldrb	r2, [r3, #0]
 8009d06:	6879      	ldr	r1, [r7, #4]
 8009d08:	0013      	movs	r3, r2
 8009d0a:	009b      	lsls	r3, r3, #2
 8009d0c:	189b      	adds	r3, r3, r2
 8009d0e:	00db      	lsls	r3, r3, #3
 8009d10:	18cb      	adds	r3, r1, r3
 8009d12:	333c      	adds	r3, #60	; 0x3c
 8009d14:	681a      	ldr	r2, [r3, #0]
 8009d16:	1cfb      	adds	r3, r7, #3
 8009d18:	781b      	ldrb	r3, [r3, #0]
 8009d1a:	0019      	movs	r1, r3
 8009d1c:	f7fe fdc4 	bl	80088a8 <USBD_LL_DataInStage>
}
 8009d20:	46c0      	nop			; (mov r8, r8)
 8009d22:	46bd      	mov	sp, r7
 8009d24:	b002      	add	sp, #8
 8009d26:	bd80      	pop	{r7, pc}

08009d28 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b082      	sub	sp, #8
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009d30:	687a      	ldr	r2, [r7, #4]
 8009d32:	23bc      	movs	r3, #188	; 0xbc
 8009d34:	009b      	lsls	r3, r3, #2
 8009d36:	58d3      	ldr	r3, [r2, r3]
 8009d38:	0018      	movs	r0, r3
 8009d3a:	f7fe fefb 	bl	8008b34 <USBD_LL_SOF>
}
 8009d3e:	46c0      	nop			; (mov r8, r8)
 8009d40:	46bd      	mov	sp, r7
 8009d42:	b002      	add	sp, #8
 8009d44:	bd80      	pop	{r7, pc}

08009d46 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d46:	b580      	push	{r7, lr}
 8009d48:	b084      	sub	sp, #16
 8009d4a:	af00      	add	r7, sp, #0
 8009d4c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009d4e:	230f      	movs	r3, #15
 8009d50:	18fb      	adds	r3, r7, r3
 8009d52:	2201      	movs	r2, #1
 8009d54:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	689b      	ldr	r3, [r3, #8]
 8009d5a:	2b02      	cmp	r3, #2
 8009d5c:	d001      	beq.n	8009d62 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8009d5e:	f7f7 fa53 	bl	8001208 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009d62:	687a      	ldr	r2, [r7, #4]
 8009d64:	23bc      	movs	r3, #188	; 0xbc
 8009d66:	009b      	lsls	r3, r3, #2
 8009d68:	58d2      	ldr	r2, [r2, r3]
 8009d6a:	230f      	movs	r3, #15
 8009d6c:	18fb      	adds	r3, r7, r3
 8009d6e:	781b      	ldrb	r3, [r3, #0]
 8009d70:	0019      	movs	r1, r3
 8009d72:	0010      	movs	r0, r2
 8009d74:	f7fe fe9d 	bl	8008ab2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009d78:	687a      	ldr	r2, [r7, #4]
 8009d7a:	23bc      	movs	r3, #188	; 0xbc
 8009d7c:	009b      	lsls	r3, r3, #2
 8009d7e:	58d3      	ldr	r3, [r2, r3]
 8009d80:	0018      	movs	r0, r3
 8009d82:	f7fe fe4e 	bl	8008a22 <USBD_LL_Reset>
}
 8009d86:	46c0      	nop			; (mov r8, r8)
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	b004      	add	sp, #16
 8009d8c:	bd80      	pop	{r7, pc}
	...

08009d90 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b082      	sub	sp, #8
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009d98:	687a      	ldr	r2, [r7, #4]
 8009d9a:	23bc      	movs	r3, #188	; 0xbc
 8009d9c:	009b      	lsls	r3, r3, #2
 8009d9e:	58d3      	ldr	r3, [r2, r3]
 8009da0:	0018      	movs	r0, r3
 8009da2:	f7fe fe97 	bl	8008ad4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	699b      	ldr	r3, [r3, #24]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d005      	beq.n	8009dba <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009dae:	4b05      	ldr	r3, [pc, #20]	; (8009dc4 <HAL_PCD_SuspendCallback+0x34>)
 8009db0:	691a      	ldr	r2, [r3, #16]
 8009db2:	4b04      	ldr	r3, [pc, #16]	; (8009dc4 <HAL_PCD_SuspendCallback+0x34>)
 8009db4:	2106      	movs	r1, #6
 8009db6:	430a      	orrs	r2, r1
 8009db8:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8009dba:	46c0      	nop			; (mov r8, r8)
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	b002      	add	sp, #8
 8009dc0:	bd80      	pop	{r7, pc}
 8009dc2:	46c0      	nop			; (mov r8, r8)
 8009dc4:	e000ed00 	.word	0xe000ed00

08009dc8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	699b      	ldr	r3, [r3, #24]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d007      	beq.n	8009de8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009dd8:	4b09      	ldr	r3, [pc, #36]	; (8009e00 <HAL_PCD_ResumeCallback+0x38>)
 8009dda:	691a      	ldr	r2, [r3, #16]
 8009ddc:	4b08      	ldr	r3, [pc, #32]	; (8009e00 <HAL_PCD_ResumeCallback+0x38>)
 8009dde:	2106      	movs	r1, #6
 8009de0:	438a      	bics	r2, r1
 8009de2:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8009de4:	f000 fa1a 	bl	800a21c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009de8:	687a      	ldr	r2, [r7, #4]
 8009dea:	23bc      	movs	r3, #188	; 0xbc
 8009dec:	009b      	lsls	r3, r3, #2
 8009dee:	58d3      	ldr	r3, [r2, r3]
 8009df0:	0018      	movs	r0, r3
 8009df2:	f7fe fe87 	bl	8008b04 <USBD_LL_Resume>
}
 8009df6:	46c0      	nop			; (mov r8, r8)
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	b002      	add	sp, #8
 8009dfc:	bd80      	pop	{r7, pc}
 8009dfe:	46c0      	nop			; (mov r8, r8)
 8009e00:	e000ed00 	.word	0xe000ed00

08009e04 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b082      	sub	sp, #8
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009e0c:	4a23      	ldr	r2, [pc, #140]	; (8009e9c <USBD_LL_Init+0x98>)
 8009e0e:	23bc      	movs	r3, #188	; 0xbc
 8009e10:	009b      	lsls	r3, r3, #2
 8009e12:	6879      	ldr	r1, [r7, #4]
 8009e14:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8009e16:	687a      	ldr	r2, [r7, #4]
 8009e18:	23b0      	movs	r3, #176	; 0xb0
 8009e1a:	009b      	lsls	r3, r3, #2
 8009e1c:	491f      	ldr	r1, [pc, #124]	; (8009e9c <USBD_LL_Init+0x98>)
 8009e1e:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8009e20:	4b1e      	ldr	r3, [pc, #120]	; (8009e9c <USBD_LL_Init+0x98>)
 8009e22:	4a1f      	ldr	r2, [pc, #124]	; (8009ea0 <USBD_LL_Init+0x9c>)
 8009e24:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009e26:	4b1d      	ldr	r3, [pc, #116]	; (8009e9c <USBD_LL_Init+0x98>)
 8009e28:	2208      	movs	r2, #8
 8009e2a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009e2c:	4b1b      	ldr	r3, [pc, #108]	; (8009e9c <USBD_LL_Init+0x98>)
 8009e2e:	2202      	movs	r2, #2
 8009e30:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009e32:	4b1a      	ldr	r3, [pc, #104]	; (8009e9c <USBD_LL_Init+0x98>)
 8009e34:	2202      	movs	r2, #2
 8009e36:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009e38:	4b18      	ldr	r3, [pc, #96]	; (8009e9c <USBD_LL_Init+0x98>)
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009e3e:	4b17      	ldr	r3, [pc, #92]	; (8009e9c <USBD_LL_Init+0x98>)
 8009e40:	2200      	movs	r2, #0
 8009e42:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009e44:	4b15      	ldr	r3, [pc, #84]	; (8009e9c <USBD_LL_Init+0x98>)
 8009e46:	2200      	movs	r2, #0
 8009e48:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009e4a:	4b14      	ldr	r3, [pc, #80]	; (8009e9c <USBD_LL_Init+0x98>)
 8009e4c:	0018      	movs	r0, r3
 8009e4e:	f7f8 fae5 	bl	800241c <HAL_PCD_Init>
 8009e52:	1e03      	subs	r3, r0, #0
 8009e54:	d001      	beq.n	8009e5a <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8009e56:	f7f7 f9d7 	bl	8001208 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009e5a:	687a      	ldr	r2, [r7, #4]
 8009e5c:	23b0      	movs	r3, #176	; 0xb0
 8009e5e:	009b      	lsls	r3, r3, #2
 8009e60:	58d0      	ldr	r0, [r2, r3]
 8009e62:	2318      	movs	r3, #24
 8009e64:	2200      	movs	r2, #0
 8009e66:	2100      	movs	r1, #0
 8009e68:	f7fa f88c 	bl	8003f84 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	23b0      	movs	r3, #176	; 0xb0
 8009e70:	009b      	lsls	r3, r3, #2
 8009e72:	58d0      	ldr	r0, [r2, r3]
 8009e74:	2358      	movs	r3, #88	; 0x58
 8009e76:	2200      	movs	r2, #0
 8009e78:	2180      	movs	r1, #128	; 0x80
 8009e7a:	f7fa f883 	bl	8003f84 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8009e7e:	687a      	ldr	r2, [r7, #4]
 8009e80:	23b0      	movs	r3, #176	; 0xb0
 8009e82:	009b      	lsls	r3, r3, #2
 8009e84:	58d0      	ldr	r0, [r2, r3]
 8009e86:	2380      	movs	r3, #128	; 0x80
 8009e88:	005b      	lsls	r3, r3, #1
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	2181      	movs	r1, #129	; 0x81
 8009e8e:	f7fa f879 	bl	8003f84 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8009e92:	2300      	movs	r3, #0
}
 8009e94:	0018      	movs	r0, r3
 8009e96:	46bd      	mov	sp, r7
 8009e98:	b002      	add	sp, #8
 8009e9a:	bd80      	pop	{r7, pc}
 8009e9c:	20000a18 	.word	0x20000a18
 8009ea0:	40005c00 	.word	0x40005c00

08009ea4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ea6:	b085      	sub	sp, #20
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009eac:	210f      	movs	r1, #15
 8009eae:	187b      	adds	r3, r7, r1
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009eb4:	260e      	movs	r6, #14
 8009eb6:	19bb      	adds	r3, r7, r6
 8009eb8:	2200      	movs	r2, #0
 8009eba:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009ebc:	687a      	ldr	r2, [r7, #4]
 8009ebe:	23b0      	movs	r3, #176	; 0xb0
 8009ec0:	009b      	lsls	r3, r3, #2
 8009ec2:	58d3      	ldr	r3, [r2, r3]
 8009ec4:	000d      	movs	r5, r1
 8009ec6:	187c      	adds	r4, r7, r1
 8009ec8:	0018      	movs	r0, r3
 8009eca:	f7f8 fba7 	bl	800261c <HAL_PCD_Start>
 8009ece:	0003      	movs	r3, r0
 8009ed0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ed2:	19bc      	adds	r4, r7, r6
 8009ed4:	197b      	adds	r3, r7, r5
 8009ed6:	781b      	ldrb	r3, [r3, #0]
 8009ed8:	0018      	movs	r0, r3
 8009eda:	f000 f9a6 	bl	800a22a <USBD_Get_USB_Status>
 8009ede:	0003      	movs	r3, r0
 8009ee0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009ee2:	19bb      	adds	r3, r7, r6
 8009ee4:	781b      	ldrb	r3, [r3, #0]
}
 8009ee6:	0018      	movs	r0, r3
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	b005      	add	sp, #20
 8009eec:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009eee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009eee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ef0:	b085      	sub	sp, #20
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	6078      	str	r0, [r7, #4]
 8009ef6:	000c      	movs	r4, r1
 8009ef8:	0010      	movs	r0, r2
 8009efa:	0019      	movs	r1, r3
 8009efc:	1cfb      	adds	r3, r7, #3
 8009efe:	1c22      	adds	r2, r4, #0
 8009f00:	701a      	strb	r2, [r3, #0]
 8009f02:	1cbb      	adds	r3, r7, #2
 8009f04:	1c02      	adds	r2, r0, #0
 8009f06:	701a      	strb	r2, [r3, #0]
 8009f08:	003b      	movs	r3, r7
 8009f0a:	1c0a      	adds	r2, r1, #0
 8009f0c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f0e:	260f      	movs	r6, #15
 8009f10:	19bb      	adds	r3, r7, r6
 8009f12:	2200      	movs	r2, #0
 8009f14:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f16:	250e      	movs	r5, #14
 8009f18:	197b      	adds	r3, r7, r5
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009f1e:	687a      	ldr	r2, [r7, #4]
 8009f20:	23b0      	movs	r3, #176	; 0xb0
 8009f22:	009b      	lsls	r3, r3, #2
 8009f24:	58d0      	ldr	r0, [r2, r3]
 8009f26:	19bc      	adds	r4, r7, r6
 8009f28:	1cbb      	adds	r3, r7, #2
 8009f2a:	781d      	ldrb	r5, [r3, #0]
 8009f2c:	003b      	movs	r3, r7
 8009f2e:	881a      	ldrh	r2, [r3, #0]
 8009f30:	1cfb      	adds	r3, r7, #3
 8009f32:	7819      	ldrb	r1, [r3, #0]
 8009f34:	002b      	movs	r3, r5
 8009f36:	f7f8 fd06 	bl	8002946 <HAL_PCD_EP_Open>
 8009f3a:	0003      	movs	r3, r0
 8009f3c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f3e:	250e      	movs	r5, #14
 8009f40:	197c      	adds	r4, r7, r5
 8009f42:	19bb      	adds	r3, r7, r6
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	0018      	movs	r0, r3
 8009f48:	f000 f96f 	bl	800a22a <USBD_Get_USB_Status>
 8009f4c:	0003      	movs	r3, r0
 8009f4e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009f50:	197b      	adds	r3, r7, r5
 8009f52:	781b      	ldrb	r3, [r3, #0]
}
 8009f54:	0018      	movs	r0, r3
 8009f56:	46bd      	mov	sp, r7
 8009f58:	b005      	add	sp, #20
 8009f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009f5c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f5e:	b085      	sub	sp, #20
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	000a      	movs	r2, r1
 8009f66:	1cfb      	adds	r3, r7, #3
 8009f68:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f6a:	210f      	movs	r1, #15
 8009f6c:	187b      	adds	r3, r7, r1
 8009f6e:	2200      	movs	r2, #0
 8009f70:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f72:	260e      	movs	r6, #14
 8009f74:	19bb      	adds	r3, r7, r6
 8009f76:	2200      	movs	r2, #0
 8009f78:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009f7a:	687a      	ldr	r2, [r7, #4]
 8009f7c:	23b0      	movs	r3, #176	; 0xb0
 8009f7e:	009b      	lsls	r3, r3, #2
 8009f80:	58d2      	ldr	r2, [r2, r3]
 8009f82:	000d      	movs	r5, r1
 8009f84:	187c      	adds	r4, r7, r1
 8009f86:	1cfb      	adds	r3, r7, #3
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	0019      	movs	r1, r3
 8009f8c:	0010      	movs	r0, r2
 8009f8e:	f7f8 fd49 	bl	8002a24 <HAL_PCD_EP_Close>
 8009f92:	0003      	movs	r3, r0
 8009f94:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f96:	19bc      	adds	r4, r7, r6
 8009f98:	197b      	adds	r3, r7, r5
 8009f9a:	781b      	ldrb	r3, [r3, #0]
 8009f9c:	0018      	movs	r0, r3
 8009f9e:	f000 f944 	bl	800a22a <USBD_Get_USB_Status>
 8009fa2:	0003      	movs	r3, r0
 8009fa4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009fa6:	19bb      	adds	r3, r7, r6
 8009fa8:	781b      	ldrb	r3, [r3, #0]
}
 8009faa:	0018      	movs	r0, r3
 8009fac:	46bd      	mov	sp, r7
 8009fae:	b005      	add	sp, #20
 8009fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009fb2 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009fb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fb4:	b085      	sub	sp, #20
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	6078      	str	r0, [r7, #4]
 8009fba:	000a      	movs	r2, r1
 8009fbc:	1cfb      	adds	r3, r7, #3
 8009fbe:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fc0:	210f      	movs	r1, #15
 8009fc2:	187b      	adds	r3, r7, r1
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fc8:	260e      	movs	r6, #14
 8009fca:	19bb      	adds	r3, r7, r6
 8009fcc:	2200      	movs	r2, #0
 8009fce:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009fd0:	687a      	ldr	r2, [r7, #4]
 8009fd2:	23b0      	movs	r3, #176	; 0xb0
 8009fd4:	009b      	lsls	r3, r3, #2
 8009fd6:	58d2      	ldr	r2, [r2, r3]
 8009fd8:	000d      	movs	r5, r1
 8009fda:	187c      	adds	r4, r7, r1
 8009fdc:	1cfb      	adds	r3, r7, #3
 8009fde:	781b      	ldrb	r3, [r3, #0]
 8009fe0:	0019      	movs	r1, r3
 8009fe2:	0010      	movs	r0, r2
 8009fe4:	f7f8 fde2 	bl	8002bac <HAL_PCD_EP_SetStall>
 8009fe8:	0003      	movs	r3, r0
 8009fea:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fec:	19bc      	adds	r4, r7, r6
 8009fee:	197b      	adds	r3, r7, r5
 8009ff0:	781b      	ldrb	r3, [r3, #0]
 8009ff2:	0018      	movs	r0, r3
 8009ff4:	f000 f919 	bl	800a22a <USBD_Get_USB_Status>
 8009ff8:	0003      	movs	r3, r0
 8009ffa:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009ffc:	19bb      	adds	r3, r7, r6
 8009ffe:	781b      	ldrb	r3, [r3, #0]
}
 800a000:	0018      	movs	r0, r3
 800a002:	46bd      	mov	sp, r7
 800a004:	b005      	add	sp, #20
 800a006:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a008 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a00a:	b085      	sub	sp, #20
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
 800a010:	000a      	movs	r2, r1
 800a012:	1cfb      	adds	r3, r7, #3
 800a014:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a016:	210f      	movs	r1, #15
 800a018:	187b      	adds	r3, r7, r1
 800a01a:	2200      	movs	r2, #0
 800a01c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a01e:	260e      	movs	r6, #14
 800a020:	19bb      	adds	r3, r7, r6
 800a022:	2200      	movs	r2, #0
 800a024:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a026:	687a      	ldr	r2, [r7, #4]
 800a028:	23b0      	movs	r3, #176	; 0xb0
 800a02a:	009b      	lsls	r3, r3, #2
 800a02c:	58d2      	ldr	r2, [r2, r3]
 800a02e:	000d      	movs	r5, r1
 800a030:	187c      	adds	r4, r7, r1
 800a032:	1cfb      	adds	r3, r7, #3
 800a034:	781b      	ldrb	r3, [r3, #0]
 800a036:	0019      	movs	r1, r3
 800a038:	0010      	movs	r0, r2
 800a03a:	f7f8 fe13 	bl	8002c64 <HAL_PCD_EP_ClrStall>
 800a03e:	0003      	movs	r3, r0
 800a040:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a042:	19bc      	adds	r4, r7, r6
 800a044:	197b      	adds	r3, r7, r5
 800a046:	781b      	ldrb	r3, [r3, #0]
 800a048:	0018      	movs	r0, r3
 800a04a:	f000 f8ee 	bl	800a22a <USBD_Get_USB_Status>
 800a04e:	0003      	movs	r3, r0
 800a050:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800a052:	19bb      	adds	r3, r7, r6
 800a054:	781b      	ldrb	r3, [r3, #0]
}
 800a056:	0018      	movs	r0, r3
 800a058:	46bd      	mov	sp, r7
 800a05a:	b005      	add	sp, #20
 800a05c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a05e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a05e:	b580      	push	{r7, lr}
 800a060:	b084      	sub	sp, #16
 800a062:	af00      	add	r7, sp, #0
 800a064:	6078      	str	r0, [r7, #4]
 800a066:	000a      	movs	r2, r1
 800a068:	1cfb      	adds	r3, r7, #3
 800a06a:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a06c:	687a      	ldr	r2, [r7, #4]
 800a06e:	23b0      	movs	r3, #176	; 0xb0
 800a070:	009b      	lsls	r3, r3, #2
 800a072:	58d3      	ldr	r3, [r2, r3]
 800a074:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a076:	1cfb      	adds	r3, r7, #3
 800a078:	781b      	ldrb	r3, [r3, #0]
 800a07a:	b25b      	sxtb	r3, r3
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	da0d      	bge.n	800a09c <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a080:	1cfb      	adds	r3, r7, #3
 800a082:	781b      	ldrb	r3, [r3, #0]
 800a084:	227f      	movs	r2, #127	; 0x7f
 800a086:	4013      	ands	r3, r2
 800a088:	68f9      	ldr	r1, [r7, #12]
 800a08a:	1c5a      	adds	r2, r3, #1
 800a08c:	0013      	movs	r3, r2
 800a08e:	009b      	lsls	r3, r3, #2
 800a090:	189b      	adds	r3, r3, r2
 800a092:	00db      	lsls	r3, r3, #3
 800a094:	18cb      	adds	r3, r1, r3
 800a096:	3302      	adds	r3, #2
 800a098:	781b      	ldrb	r3, [r3, #0]
 800a09a:	e00d      	b.n	800a0b8 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a09c:	1cfb      	adds	r3, r7, #3
 800a09e:	781b      	ldrb	r3, [r3, #0]
 800a0a0:	227f      	movs	r2, #127	; 0x7f
 800a0a2:	401a      	ands	r2, r3
 800a0a4:	68f8      	ldr	r0, [r7, #12]
 800a0a6:	23b5      	movs	r3, #181	; 0xb5
 800a0a8:	0059      	lsls	r1, r3, #1
 800a0aa:	0013      	movs	r3, r2
 800a0ac:	009b      	lsls	r3, r3, #2
 800a0ae:	189b      	adds	r3, r3, r2
 800a0b0:	00db      	lsls	r3, r3, #3
 800a0b2:	18c3      	adds	r3, r0, r3
 800a0b4:	185b      	adds	r3, r3, r1
 800a0b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a0b8:	0018      	movs	r0, r3
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	b004      	add	sp, #16
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a0c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0c2:	b085      	sub	sp, #20
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	000a      	movs	r2, r1
 800a0ca:	1cfb      	adds	r3, r7, #3
 800a0cc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0ce:	210f      	movs	r1, #15
 800a0d0:	187b      	adds	r3, r7, r1
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0d6:	260e      	movs	r6, #14
 800a0d8:	19bb      	adds	r3, r7, r6
 800a0da:	2200      	movs	r2, #0
 800a0dc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a0de:	687a      	ldr	r2, [r7, #4]
 800a0e0:	23b0      	movs	r3, #176	; 0xb0
 800a0e2:	009b      	lsls	r3, r3, #2
 800a0e4:	58d2      	ldr	r2, [r2, r3]
 800a0e6:	000d      	movs	r5, r1
 800a0e8:	187c      	adds	r4, r7, r1
 800a0ea:	1cfb      	adds	r3, r7, #3
 800a0ec:	781b      	ldrb	r3, [r3, #0]
 800a0ee:	0019      	movs	r1, r3
 800a0f0:	0010      	movs	r0, r2
 800a0f2:	f7f8 fbfd 	bl	80028f0 <HAL_PCD_SetAddress>
 800a0f6:	0003      	movs	r3, r0
 800a0f8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0fa:	19bc      	adds	r4, r7, r6
 800a0fc:	197b      	adds	r3, r7, r5
 800a0fe:	781b      	ldrb	r3, [r3, #0]
 800a100:	0018      	movs	r0, r3
 800a102:	f000 f892 	bl	800a22a <USBD_Get_USB_Status>
 800a106:	0003      	movs	r3, r0
 800a108:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800a10a:	19bb      	adds	r3, r7, r6
 800a10c:	781b      	ldrb	r3, [r3, #0]
}
 800a10e:	0018      	movs	r0, r3
 800a110:	46bd      	mov	sp, r7
 800a112:	b005      	add	sp, #20
 800a114:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a116 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a116:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a118:	b087      	sub	sp, #28
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	60f8      	str	r0, [r7, #12]
 800a11e:	0008      	movs	r0, r1
 800a120:	607a      	str	r2, [r7, #4]
 800a122:	0019      	movs	r1, r3
 800a124:	230b      	movs	r3, #11
 800a126:	18fb      	adds	r3, r7, r3
 800a128:	1c02      	adds	r2, r0, #0
 800a12a:	701a      	strb	r2, [r3, #0]
 800a12c:	2408      	movs	r4, #8
 800a12e:	193b      	adds	r3, r7, r4
 800a130:	1c0a      	adds	r2, r1, #0
 800a132:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a134:	2117      	movs	r1, #23
 800a136:	187b      	adds	r3, r7, r1
 800a138:	2200      	movs	r2, #0
 800a13a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a13c:	2516      	movs	r5, #22
 800a13e:	197b      	adds	r3, r7, r5
 800a140:	2200      	movs	r2, #0
 800a142:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a144:	68fa      	ldr	r2, [r7, #12]
 800a146:	23b0      	movs	r3, #176	; 0xb0
 800a148:	009b      	lsls	r3, r3, #2
 800a14a:	58d0      	ldr	r0, [r2, r3]
 800a14c:	193b      	adds	r3, r7, r4
 800a14e:	881d      	ldrh	r5, [r3, #0]
 800a150:	000e      	movs	r6, r1
 800a152:	187c      	adds	r4, r7, r1
 800a154:	687a      	ldr	r2, [r7, #4]
 800a156:	230b      	movs	r3, #11
 800a158:	18fb      	adds	r3, r7, r3
 800a15a:	7819      	ldrb	r1, [r3, #0]
 800a15c:	002b      	movs	r3, r5
 800a15e:	f7f8 fce9 	bl	8002b34 <HAL_PCD_EP_Transmit>
 800a162:	0003      	movs	r3, r0
 800a164:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a166:	2516      	movs	r5, #22
 800a168:	197c      	adds	r4, r7, r5
 800a16a:	19bb      	adds	r3, r7, r6
 800a16c:	781b      	ldrb	r3, [r3, #0]
 800a16e:	0018      	movs	r0, r3
 800a170:	f000 f85b 	bl	800a22a <USBD_Get_USB_Status>
 800a174:	0003      	movs	r3, r0
 800a176:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800a178:	197b      	adds	r3, r7, r5
 800a17a:	781b      	ldrb	r3, [r3, #0]
}
 800a17c:	0018      	movs	r0, r3
 800a17e:	46bd      	mov	sp, r7
 800a180:	b007      	add	sp, #28
 800a182:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a184 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a184:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a186:	b087      	sub	sp, #28
 800a188:	af00      	add	r7, sp, #0
 800a18a:	60f8      	str	r0, [r7, #12]
 800a18c:	0008      	movs	r0, r1
 800a18e:	607a      	str	r2, [r7, #4]
 800a190:	0019      	movs	r1, r3
 800a192:	230b      	movs	r3, #11
 800a194:	18fb      	adds	r3, r7, r3
 800a196:	1c02      	adds	r2, r0, #0
 800a198:	701a      	strb	r2, [r3, #0]
 800a19a:	2408      	movs	r4, #8
 800a19c:	193b      	adds	r3, r7, r4
 800a19e:	1c0a      	adds	r2, r1, #0
 800a1a0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1a2:	2117      	movs	r1, #23
 800a1a4:	187b      	adds	r3, r7, r1
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1aa:	2516      	movs	r5, #22
 800a1ac:	197b      	adds	r3, r7, r5
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a1b2:	68fa      	ldr	r2, [r7, #12]
 800a1b4:	23b0      	movs	r3, #176	; 0xb0
 800a1b6:	009b      	lsls	r3, r3, #2
 800a1b8:	58d0      	ldr	r0, [r2, r3]
 800a1ba:	193b      	adds	r3, r7, r4
 800a1bc:	881d      	ldrh	r5, [r3, #0]
 800a1be:	000e      	movs	r6, r1
 800a1c0:	187c      	adds	r4, r7, r1
 800a1c2:	687a      	ldr	r2, [r7, #4]
 800a1c4:	230b      	movs	r3, #11
 800a1c6:	18fb      	adds	r3, r7, r3
 800a1c8:	7819      	ldrb	r1, [r3, #0]
 800a1ca:	002b      	movs	r3, r5
 800a1cc:	f7f8 fc7b 	bl	8002ac6 <HAL_PCD_EP_Receive>
 800a1d0:	0003      	movs	r3, r0
 800a1d2:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1d4:	2516      	movs	r5, #22
 800a1d6:	197c      	adds	r4, r7, r5
 800a1d8:	19bb      	adds	r3, r7, r6
 800a1da:	781b      	ldrb	r3, [r3, #0]
 800a1dc:	0018      	movs	r0, r3
 800a1de:	f000 f824 	bl	800a22a <USBD_Get_USB_Status>
 800a1e2:	0003      	movs	r3, r0
 800a1e4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800a1e6:	197b      	adds	r3, r7, r5
 800a1e8:	781b      	ldrb	r3, [r3, #0]
}
 800a1ea:	0018      	movs	r0, r3
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	b007      	add	sp, #28
 800a1f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800a1f4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b082      	sub	sp, #8
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a1fc:	4b02      	ldr	r3, [pc, #8]	; (800a208 <USBD_static_malloc+0x14>)
}
 800a1fe:	0018      	movs	r0, r3
 800a200:	46bd      	mov	sp, r7
 800a202:	b002      	add	sp, #8
 800a204:	bd80      	pop	{r7, pc}
 800a206:	46c0      	nop			; (mov r8, r8)
 800a208:	20000d0c 	.word	0x20000d0c

0800a20c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b082      	sub	sp, #8
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]

}
 800a214:	46c0      	nop			; (mov r8, r8)
 800a216:	46bd      	mov	sp, r7
 800a218:	b002      	add	sp, #8
 800a21a:	bd80      	pop	{r7, pc}

0800a21c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a220:	f7f6 fcc0 	bl	8000ba4 <SystemClock_Config>
}
 800a224:	46c0      	nop			; (mov r8, r8)
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}

0800a22a <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a22a:	b580      	push	{r7, lr}
 800a22c:	b084      	sub	sp, #16
 800a22e:	af00      	add	r7, sp, #0
 800a230:	0002      	movs	r2, r0
 800a232:	1dfb      	adds	r3, r7, #7
 800a234:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a236:	230f      	movs	r3, #15
 800a238:	18fb      	adds	r3, r7, r3
 800a23a:	2200      	movs	r2, #0
 800a23c:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800a23e:	1dfb      	adds	r3, r7, #7
 800a240:	781b      	ldrb	r3, [r3, #0]
 800a242:	2b03      	cmp	r3, #3
 800a244:	d017      	beq.n	800a276 <USBD_Get_USB_Status+0x4c>
 800a246:	dc1b      	bgt.n	800a280 <USBD_Get_USB_Status+0x56>
 800a248:	2b02      	cmp	r3, #2
 800a24a:	d00f      	beq.n	800a26c <USBD_Get_USB_Status+0x42>
 800a24c:	dc18      	bgt.n	800a280 <USBD_Get_USB_Status+0x56>
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d002      	beq.n	800a258 <USBD_Get_USB_Status+0x2e>
 800a252:	2b01      	cmp	r3, #1
 800a254:	d005      	beq.n	800a262 <USBD_Get_USB_Status+0x38>
 800a256:	e013      	b.n	800a280 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a258:	230f      	movs	r3, #15
 800a25a:	18fb      	adds	r3, r7, r3
 800a25c:	2200      	movs	r2, #0
 800a25e:	701a      	strb	r2, [r3, #0]
    break;
 800a260:	e013      	b.n	800a28a <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a262:	230f      	movs	r3, #15
 800a264:	18fb      	adds	r3, r7, r3
 800a266:	2202      	movs	r2, #2
 800a268:	701a      	strb	r2, [r3, #0]
    break;
 800a26a:	e00e      	b.n	800a28a <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a26c:	230f      	movs	r3, #15
 800a26e:	18fb      	adds	r3, r7, r3
 800a270:	2201      	movs	r2, #1
 800a272:	701a      	strb	r2, [r3, #0]
    break;
 800a274:	e009      	b.n	800a28a <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a276:	230f      	movs	r3, #15
 800a278:	18fb      	adds	r3, r7, r3
 800a27a:	2202      	movs	r2, #2
 800a27c:	701a      	strb	r2, [r3, #0]
    break;
 800a27e:	e004      	b.n	800a28a <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800a280:	230f      	movs	r3, #15
 800a282:	18fb      	adds	r3, r7, r3
 800a284:	2202      	movs	r2, #2
 800a286:	701a      	strb	r2, [r3, #0]
    break;
 800a288:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 800a28a:	230f      	movs	r3, #15
 800a28c:	18fb      	adds	r3, r7, r3
 800a28e:	781b      	ldrb	r3, [r3, #0]
}
 800a290:	0018      	movs	r0, r3
 800a292:	46bd      	mov	sp, r7
 800a294:	b004      	add	sp, #16
 800a296:	bd80      	pop	{r7, pc}

0800a298 <std>:
 800a298:	2300      	movs	r3, #0
 800a29a:	b510      	push	{r4, lr}
 800a29c:	0004      	movs	r4, r0
 800a29e:	6003      	str	r3, [r0, #0]
 800a2a0:	6043      	str	r3, [r0, #4]
 800a2a2:	6083      	str	r3, [r0, #8]
 800a2a4:	8181      	strh	r1, [r0, #12]
 800a2a6:	6643      	str	r3, [r0, #100]	; 0x64
 800a2a8:	81c2      	strh	r2, [r0, #14]
 800a2aa:	6103      	str	r3, [r0, #16]
 800a2ac:	6143      	str	r3, [r0, #20]
 800a2ae:	6183      	str	r3, [r0, #24]
 800a2b0:	0019      	movs	r1, r3
 800a2b2:	2208      	movs	r2, #8
 800a2b4:	305c      	adds	r0, #92	; 0x5c
 800a2b6:	f000 f919 	bl	800a4ec <memset>
 800a2ba:	4b0b      	ldr	r3, [pc, #44]	; (800a2e8 <std+0x50>)
 800a2bc:	6224      	str	r4, [r4, #32]
 800a2be:	6263      	str	r3, [r4, #36]	; 0x24
 800a2c0:	4b0a      	ldr	r3, [pc, #40]	; (800a2ec <std+0x54>)
 800a2c2:	62a3      	str	r3, [r4, #40]	; 0x28
 800a2c4:	4b0a      	ldr	r3, [pc, #40]	; (800a2f0 <std+0x58>)
 800a2c6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a2c8:	4b0a      	ldr	r3, [pc, #40]	; (800a2f4 <std+0x5c>)
 800a2ca:	6323      	str	r3, [r4, #48]	; 0x30
 800a2cc:	4b0a      	ldr	r3, [pc, #40]	; (800a2f8 <std+0x60>)
 800a2ce:	429c      	cmp	r4, r3
 800a2d0:	d005      	beq.n	800a2de <std+0x46>
 800a2d2:	4b0a      	ldr	r3, [pc, #40]	; (800a2fc <std+0x64>)
 800a2d4:	429c      	cmp	r4, r3
 800a2d6:	d002      	beq.n	800a2de <std+0x46>
 800a2d8:	4b09      	ldr	r3, [pc, #36]	; (800a300 <std+0x68>)
 800a2da:	429c      	cmp	r4, r3
 800a2dc:	d103      	bne.n	800a2e6 <std+0x4e>
 800a2de:	0020      	movs	r0, r4
 800a2e0:	3058      	adds	r0, #88	; 0x58
 800a2e2:	f000 f983 	bl	800a5ec <__retarget_lock_init_recursive>
 800a2e6:	bd10      	pop	{r4, pc}
 800a2e8:	0800a455 	.word	0x0800a455
 800a2ec:	0800a47d 	.word	0x0800a47d
 800a2f0:	0800a4b5 	.word	0x0800a4b5
 800a2f4:	0800a4e1 	.word	0x0800a4e1
 800a2f8:	20000d20 	.word	0x20000d20
 800a2fc:	20000d88 	.word	0x20000d88
 800a300:	20000df0 	.word	0x20000df0

0800a304 <stdio_exit_handler>:
 800a304:	b510      	push	{r4, lr}
 800a306:	4a03      	ldr	r2, [pc, #12]	; (800a314 <stdio_exit_handler+0x10>)
 800a308:	4903      	ldr	r1, [pc, #12]	; (800a318 <stdio_exit_handler+0x14>)
 800a30a:	4804      	ldr	r0, [pc, #16]	; (800a31c <stdio_exit_handler+0x18>)
 800a30c:	f000 f86c 	bl	800a3e8 <_fwalk_sglue>
 800a310:	bd10      	pop	{r4, pc}
 800a312:	46c0      	nop			; (mov r8, r8)
 800a314:	20000164 	.word	0x20000164
 800a318:	0800ae8d 	.word	0x0800ae8d
 800a31c:	20000170 	.word	0x20000170

0800a320 <cleanup_stdio>:
 800a320:	6841      	ldr	r1, [r0, #4]
 800a322:	4b0b      	ldr	r3, [pc, #44]	; (800a350 <cleanup_stdio+0x30>)
 800a324:	b510      	push	{r4, lr}
 800a326:	0004      	movs	r4, r0
 800a328:	4299      	cmp	r1, r3
 800a32a:	d001      	beq.n	800a330 <cleanup_stdio+0x10>
 800a32c:	f000 fdae 	bl	800ae8c <_fflush_r>
 800a330:	68a1      	ldr	r1, [r4, #8]
 800a332:	4b08      	ldr	r3, [pc, #32]	; (800a354 <cleanup_stdio+0x34>)
 800a334:	4299      	cmp	r1, r3
 800a336:	d002      	beq.n	800a33e <cleanup_stdio+0x1e>
 800a338:	0020      	movs	r0, r4
 800a33a:	f000 fda7 	bl	800ae8c <_fflush_r>
 800a33e:	68e1      	ldr	r1, [r4, #12]
 800a340:	4b05      	ldr	r3, [pc, #20]	; (800a358 <cleanup_stdio+0x38>)
 800a342:	4299      	cmp	r1, r3
 800a344:	d002      	beq.n	800a34c <cleanup_stdio+0x2c>
 800a346:	0020      	movs	r0, r4
 800a348:	f000 fda0 	bl	800ae8c <_fflush_r>
 800a34c:	bd10      	pop	{r4, pc}
 800a34e:	46c0      	nop			; (mov r8, r8)
 800a350:	20000d20 	.word	0x20000d20
 800a354:	20000d88 	.word	0x20000d88
 800a358:	20000df0 	.word	0x20000df0

0800a35c <global_stdio_init.part.0>:
 800a35c:	b510      	push	{r4, lr}
 800a35e:	4b09      	ldr	r3, [pc, #36]	; (800a384 <global_stdio_init.part.0+0x28>)
 800a360:	4a09      	ldr	r2, [pc, #36]	; (800a388 <global_stdio_init.part.0+0x2c>)
 800a362:	2104      	movs	r1, #4
 800a364:	601a      	str	r2, [r3, #0]
 800a366:	4809      	ldr	r0, [pc, #36]	; (800a38c <global_stdio_init.part.0+0x30>)
 800a368:	2200      	movs	r2, #0
 800a36a:	f7ff ff95 	bl	800a298 <std>
 800a36e:	2201      	movs	r2, #1
 800a370:	2109      	movs	r1, #9
 800a372:	4807      	ldr	r0, [pc, #28]	; (800a390 <global_stdio_init.part.0+0x34>)
 800a374:	f7ff ff90 	bl	800a298 <std>
 800a378:	2202      	movs	r2, #2
 800a37a:	2112      	movs	r1, #18
 800a37c:	4805      	ldr	r0, [pc, #20]	; (800a394 <global_stdio_init.part.0+0x38>)
 800a37e:	f7ff ff8b 	bl	800a298 <std>
 800a382:	bd10      	pop	{r4, pc}
 800a384:	20000e58 	.word	0x20000e58
 800a388:	0800a305 	.word	0x0800a305
 800a38c:	20000d20 	.word	0x20000d20
 800a390:	20000d88 	.word	0x20000d88
 800a394:	20000df0 	.word	0x20000df0

0800a398 <__sfp_lock_acquire>:
 800a398:	b510      	push	{r4, lr}
 800a39a:	4802      	ldr	r0, [pc, #8]	; (800a3a4 <__sfp_lock_acquire+0xc>)
 800a39c:	f000 f927 	bl	800a5ee <__retarget_lock_acquire_recursive>
 800a3a0:	bd10      	pop	{r4, pc}
 800a3a2:	46c0      	nop			; (mov r8, r8)
 800a3a4:	20000e61 	.word	0x20000e61

0800a3a8 <__sfp_lock_release>:
 800a3a8:	b510      	push	{r4, lr}
 800a3aa:	4802      	ldr	r0, [pc, #8]	; (800a3b4 <__sfp_lock_release+0xc>)
 800a3ac:	f000 f920 	bl	800a5f0 <__retarget_lock_release_recursive>
 800a3b0:	bd10      	pop	{r4, pc}
 800a3b2:	46c0      	nop			; (mov r8, r8)
 800a3b4:	20000e61 	.word	0x20000e61

0800a3b8 <__sinit>:
 800a3b8:	b510      	push	{r4, lr}
 800a3ba:	0004      	movs	r4, r0
 800a3bc:	f7ff ffec 	bl	800a398 <__sfp_lock_acquire>
 800a3c0:	6a23      	ldr	r3, [r4, #32]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d002      	beq.n	800a3cc <__sinit+0x14>
 800a3c6:	f7ff ffef 	bl	800a3a8 <__sfp_lock_release>
 800a3ca:	bd10      	pop	{r4, pc}
 800a3cc:	4b04      	ldr	r3, [pc, #16]	; (800a3e0 <__sinit+0x28>)
 800a3ce:	6223      	str	r3, [r4, #32]
 800a3d0:	4b04      	ldr	r3, [pc, #16]	; (800a3e4 <__sinit+0x2c>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d1f6      	bne.n	800a3c6 <__sinit+0xe>
 800a3d8:	f7ff ffc0 	bl	800a35c <global_stdio_init.part.0>
 800a3dc:	e7f3      	b.n	800a3c6 <__sinit+0xe>
 800a3de:	46c0      	nop			; (mov r8, r8)
 800a3e0:	0800a321 	.word	0x0800a321
 800a3e4:	20000e58 	.word	0x20000e58

0800a3e8 <_fwalk_sglue>:
 800a3e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a3ea:	0014      	movs	r4, r2
 800a3ec:	2600      	movs	r6, #0
 800a3ee:	9000      	str	r0, [sp, #0]
 800a3f0:	9101      	str	r1, [sp, #4]
 800a3f2:	68a5      	ldr	r5, [r4, #8]
 800a3f4:	6867      	ldr	r7, [r4, #4]
 800a3f6:	3f01      	subs	r7, #1
 800a3f8:	d504      	bpl.n	800a404 <_fwalk_sglue+0x1c>
 800a3fa:	6824      	ldr	r4, [r4, #0]
 800a3fc:	2c00      	cmp	r4, #0
 800a3fe:	d1f8      	bne.n	800a3f2 <_fwalk_sglue+0xa>
 800a400:	0030      	movs	r0, r6
 800a402:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a404:	89ab      	ldrh	r3, [r5, #12]
 800a406:	2b01      	cmp	r3, #1
 800a408:	d908      	bls.n	800a41c <_fwalk_sglue+0x34>
 800a40a:	220e      	movs	r2, #14
 800a40c:	5eab      	ldrsh	r3, [r5, r2]
 800a40e:	3301      	adds	r3, #1
 800a410:	d004      	beq.n	800a41c <_fwalk_sglue+0x34>
 800a412:	0029      	movs	r1, r5
 800a414:	9800      	ldr	r0, [sp, #0]
 800a416:	9b01      	ldr	r3, [sp, #4]
 800a418:	4798      	blx	r3
 800a41a:	4306      	orrs	r6, r0
 800a41c:	3568      	adds	r5, #104	; 0x68
 800a41e:	e7ea      	b.n	800a3f6 <_fwalk_sglue+0xe>

0800a420 <iprintf>:
 800a420:	b40f      	push	{r0, r1, r2, r3}
 800a422:	b507      	push	{r0, r1, r2, lr}
 800a424:	4905      	ldr	r1, [pc, #20]	; (800a43c <iprintf+0x1c>)
 800a426:	ab04      	add	r3, sp, #16
 800a428:	6808      	ldr	r0, [r1, #0]
 800a42a:	cb04      	ldmia	r3!, {r2}
 800a42c:	6881      	ldr	r1, [r0, #8]
 800a42e:	9301      	str	r3, [sp, #4]
 800a430:	f000 fa06 	bl	800a840 <_vfiprintf_r>
 800a434:	b003      	add	sp, #12
 800a436:	bc08      	pop	{r3}
 800a438:	b004      	add	sp, #16
 800a43a:	4718      	bx	r3
 800a43c:	200001bc 	.word	0x200001bc

0800a440 <putchar>:
 800a440:	b510      	push	{r4, lr}
 800a442:	4b03      	ldr	r3, [pc, #12]	; (800a450 <putchar+0x10>)
 800a444:	0001      	movs	r1, r0
 800a446:	6818      	ldr	r0, [r3, #0]
 800a448:	6882      	ldr	r2, [r0, #8]
 800a44a:	f000 fd4a 	bl	800aee2 <_putc_r>
 800a44e:	bd10      	pop	{r4, pc}
 800a450:	200001bc 	.word	0x200001bc

0800a454 <__sread>:
 800a454:	b570      	push	{r4, r5, r6, lr}
 800a456:	000c      	movs	r4, r1
 800a458:	250e      	movs	r5, #14
 800a45a:	5f49      	ldrsh	r1, [r1, r5]
 800a45c:	f000 f874 	bl	800a548 <_read_r>
 800a460:	2800      	cmp	r0, #0
 800a462:	db03      	blt.n	800a46c <__sread+0x18>
 800a464:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a466:	181b      	adds	r3, r3, r0
 800a468:	6563      	str	r3, [r4, #84]	; 0x54
 800a46a:	bd70      	pop	{r4, r5, r6, pc}
 800a46c:	89a3      	ldrh	r3, [r4, #12]
 800a46e:	4a02      	ldr	r2, [pc, #8]	; (800a478 <__sread+0x24>)
 800a470:	4013      	ands	r3, r2
 800a472:	81a3      	strh	r3, [r4, #12]
 800a474:	e7f9      	b.n	800a46a <__sread+0x16>
 800a476:	46c0      	nop			; (mov r8, r8)
 800a478:	ffffefff 	.word	0xffffefff

0800a47c <__swrite>:
 800a47c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a47e:	001f      	movs	r7, r3
 800a480:	898b      	ldrh	r3, [r1, #12]
 800a482:	0005      	movs	r5, r0
 800a484:	000c      	movs	r4, r1
 800a486:	0016      	movs	r6, r2
 800a488:	05db      	lsls	r3, r3, #23
 800a48a:	d505      	bpl.n	800a498 <__swrite+0x1c>
 800a48c:	230e      	movs	r3, #14
 800a48e:	5ec9      	ldrsh	r1, [r1, r3]
 800a490:	2200      	movs	r2, #0
 800a492:	2302      	movs	r3, #2
 800a494:	f000 f844 	bl	800a520 <_lseek_r>
 800a498:	89a3      	ldrh	r3, [r4, #12]
 800a49a:	4a05      	ldr	r2, [pc, #20]	; (800a4b0 <__swrite+0x34>)
 800a49c:	0028      	movs	r0, r5
 800a49e:	4013      	ands	r3, r2
 800a4a0:	81a3      	strh	r3, [r4, #12]
 800a4a2:	0032      	movs	r2, r6
 800a4a4:	230e      	movs	r3, #14
 800a4a6:	5ee1      	ldrsh	r1, [r4, r3]
 800a4a8:	003b      	movs	r3, r7
 800a4aa:	f000 f861 	bl	800a570 <_write_r>
 800a4ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4b0:	ffffefff 	.word	0xffffefff

0800a4b4 <__sseek>:
 800a4b4:	b570      	push	{r4, r5, r6, lr}
 800a4b6:	000c      	movs	r4, r1
 800a4b8:	250e      	movs	r5, #14
 800a4ba:	5f49      	ldrsh	r1, [r1, r5]
 800a4bc:	f000 f830 	bl	800a520 <_lseek_r>
 800a4c0:	89a3      	ldrh	r3, [r4, #12]
 800a4c2:	1c42      	adds	r2, r0, #1
 800a4c4:	d103      	bne.n	800a4ce <__sseek+0x1a>
 800a4c6:	4a05      	ldr	r2, [pc, #20]	; (800a4dc <__sseek+0x28>)
 800a4c8:	4013      	ands	r3, r2
 800a4ca:	81a3      	strh	r3, [r4, #12]
 800a4cc:	bd70      	pop	{r4, r5, r6, pc}
 800a4ce:	2280      	movs	r2, #128	; 0x80
 800a4d0:	0152      	lsls	r2, r2, #5
 800a4d2:	4313      	orrs	r3, r2
 800a4d4:	81a3      	strh	r3, [r4, #12]
 800a4d6:	6560      	str	r0, [r4, #84]	; 0x54
 800a4d8:	e7f8      	b.n	800a4cc <__sseek+0x18>
 800a4da:	46c0      	nop			; (mov r8, r8)
 800a4dc:	ffffefff 	.word	0xffffefff

0800a4e0 <__sclose>:
 800a4e0:	b510      	push	{r4, lr}
 800a4e2:	230e      	movs	r3, #14
 800a4e4:	5ec9      	ldrsh	r1, [r1, r3]
 800a4e6:	f000 f809 	bl	800a4fc <_close_r>
 800a4ea:	bd10      	pop	{r4, pc}

0800a4ec <memset>:
 800a4ec:	0003      	movs	r3, r0
 800a4ee:	1882      	adds	r2, r0, r2
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	d100      	bne.n	800a4f6 <memset+0xa>
 800a4f4:	4770      	bx	lr
 800a4f6:	7019      	strb	r1, [r3, #0]
 800a4f8:	3301      	adds	r3, #1
 800a4fa:	e7f9      	b.n	800a4f0 <memset+0x4>

0800a4fc <_close_r>:
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	b570      	push	{r4, r5, r6, lr}
 800a500:	4d06      	ldr	r5, [pc, #24]	; (800a51c <_close_r+0x20>)
 800a502:	0004      	movs	r4, r0
 800a504:	0008      	movs	r0, r1
 800a506:	602b      	str	r3, [r5, #0]
 800a508:	f7f7 f8a9 	bl	800165e <_close>
 800a50c:	1c43      	adds	r3, r0, #1
 800a50e:	d103      	bne.n	800a518 <_close_r+0x1c>
 800a510:	682b      	ldr	r3, [r5, #0]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d000      	beq.n	800a518 <_close_r+0x1c>
 800a516:	6023      	str	r3, [r4, #0]
 800a518:	bd70      	pop	{r4, r5, r6, pc}
 800a51a:	46c0      	nop			; (mov r8, r8)
 800a51c:	20000e5c 	.word	0x20000e5c

0800a520 <_lseek_r>:
 800a520:	b570      	push	{r4, r5, r6, lr}
 800a522:	0004      	movs	r4, r0
 800a524:	0008      	movs	r0, r1
 800a526:	0011      	movs	r1, r2
 800a528:	001a      	movs	r2, r3
 800a52a:	2300      	movs	r3, #0
 800a52c:	4d05      	ldr	r5, [pc, #20]	; (800a544 <_lseek_r+0x24>)
 800a52e:	602b      	str	r3, [r5, #0]
 800a530:	f7f7 f8b6 	bl	80016a0 <_lseek>
 800a534:	1c43      	adds	r3, r0, #1
 800a536:	d103      	bne.n	800a540 <_lseek_r+0x20>
 800a538:	682b      	ldr	r3, [r5, #0]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d000      	beq.n	800a540 <_lseek_r+0x20>
 800a53e:	6023      	str	r3, [r4, #0]
 800a540:	bd70      	pop	{r4, r5, r6, pc}
 800a542:	46c0      	nop			; (mov r8, r8)
 800a544:	20000e5c 	.word	0x20000e5c

0800a548 <_read_r>:
 800a548:	b570      	push	{r4, r5, r6, lr}
 800a54a:	0004      	movs	r4, r0
 800a54c:	0008      	movs	r0, r1
 800a54e:	0011      	movs	r1, r2
 800a550:	001a      	movs	r2, r3
 800a552:	2300      	movs	r3, #0
 800a554:	4d05      	ldr	r5, [pc, #20]	; (800a56c <_read_r+0x24>)
 800a556:	602b      	str	r3, [r5, #0]
 800a558:	f7f7 f848 	bl	80015ec <_read>
 800a55c:	1c43      	adds	r3, r0, #1
 800a55e:	d103      	bne.n	800a568 <_read_r+0x20>
 800a560:	682b      	ldr	r3, [r5, #0]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d000      	beq.n	800a568 <_read_r+0x20>
 800a566:	6023      	str	r3, [r4, #0]
 800a568:	bd70      	pop	{r4, r5, r6, pc}
 800a56a:	46c0      	nop			; (mov r8, r8)
 800a56c:	20000e5c 	.word	0x20000e5c

0800a570 <_write_r>:
 800a570:	b570      	push	{r4, r5, r6, lr}
 800a572:	0004      	movs	r4, r0
 800a574:	0008      	movs	r0, r1
 800a576:	0011      	movs	r1, r2
 800a578:	001a      	movs	r2, r3
 800a57a:	2300      	movs	r3, #0
 800a57c:	4d05      	ldr	r5, [pc, #20]	; (800a594 <_write_r+0x24>)
 800a57e:	602b      	str	r3, [r5, #0]
 800a580:	f7f7 f851 	bl	8001626 <_write>
 800a584:	1c43      	adds	r3, r0, #1
 800a586:	d103      	bne.n	800a590 <_write_r+0x20>
 800a588:	682b      	ldr	r3, [r5, #0]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d000      	beq.n	800a590 <_write_r+0x20>
 800a58e:	6023      	str	r3, [r4, #0]
 800a590:	bd70      	pop	{r4, r5, r6, pc}
 800a592:	46c0      	nop			; (mov r8, r8)
 800a594:	20000e5c 	.word	0x20000e5c

0800a598 <__errno>:
 800a598:	4b01      	ldr	r3, [pc, #4]	; (800a5a0 <__errno+0x8>)
 800a59a:	6818      	ldr	r0, [r3, #0]
 800a59c:	4770      	bx	lr
 800a59e:	46c0      	nop			; (mov r8, r8)
 800a5a0:	200001bc 	.word	0x200001bc

0800a5a4 <__libc_init_array>:
 800a5a4:	b570      	push	{r4, r5, r6, lr}
 800a5a6:	2600      	movs	r6, #0
 800a5a8:	4c0c      	ldr	r4, [pc, #48]	; (800a5dc <__libc_init_array+0x38>)
 800a5aa:	4d0d      	ldr	r5, [pc, #52]	; (800a5e0 <__libc_init_array+0x3c>)
 800a5ac:	1b64      	subs	r4, r4, r5
 800a5ae:	10a4      	asrs	r4, r4, #2
 800a5b0:	42a6      	cmp	r6, r4
 800a5b2:	d109      	bne.n	800a5c8 <__libc_init_array+0x24>
 800a5b4:	2600      	movs	r6, #0
 800a5b6:	f000 fe19 	bl	800b1ec <_init>
 800a5ba:	4c0a      	ldr	r4, [pc, #40]	; (800a5e4 <__libc_init_array+0x40>)
 800a5bc:	4d0a      	ldr	r5, [pc, #40]	; (800a5e8 <__libc_init_array+0x44>)
 800a5be:	1b64      	subs	r4, r4, r5
 800a5c0:	10a4      	asrs	r4, r4, #2
 800a5c2:	42a6      	cmp	r6, r4
 800a5c4:	d105      	bne.n	800a5d2 <__libc_init_array+0x2e>
 800a5c6:	bd70      	pop	{r4, r5, r6, pc}
 800a5c8:	00b3      	lsls	r3, r6, #2
 800a5ca:	58eb      	ldr	r3, [r5, r3]
 800a5cc:	4798      	blx	r3
 800a5ce:	3601      	adds	r6, #1
 800a5d0:	e7ee      	b.n	800a5b0 <__libc_init_array+0xc>
 800a5d2:	00b3      	lsls	r3, r6, #2
 800a5d4:	58eb      	ldr	r3, [r5, r3]
 800a5d6:	4798      	blx	r3
 800a5d8:	3601      	adds	r6, #1
 800a5da:	e7f2      	b.n	800a5c2 <__libc_init_array+0x1e>
 800a5dc:	0800b350 	.word	0x0800b350
 800a5e0:	0800b350 	.word	0x0800b350
 800a5e4:	0800b358 	.word	0x0800b358
 800a5e8:	0800b350 	.word	0x0800b350

0800a5ec <__retarget_lock_init_recursive>:
 800a5ec:	4770      	bx	lr

0800a5ee <__retarget_lock_acquire_recursive>:
 800a5ee:	4770      	bx	lr

0800a5f0 <__retarget_lock_release_recursive>:
 800a5f0:	4770      	bx	lr
	...

0800a5f4 <_free_r>:
 800a5f4:	b570      	push	{r4, r5, r6, lr}
 800a5f6:	0005      	movs	r5, r0
 800a5f8:	2900      	cmp	r1, #0
 800a5fa:	d010      	beq.n	800a61e <_free_r+0x2a>
 800a5fc:	1f0c      	subs	r4, r1, #4
 800a5fe:	6823      	ldr	r3, [r4, #0]
 800a600:	2b00      	cmp	r3, #0
 800a602:	da00      	bge.n	800a606 <_free_r+0x12>
 800a604:	18e4      	adds	r4, r4, r3
 800a606:	0028      	movs	r0, r5
 800a608:	f000 f8e2 	bl	800a7d0 <__malloc_lock>
 800a60c:	4a1d      	ldr	r2, [pc, #116]	; (800a684 <_free_r+0x90>)
 800a60e:	6813      	ldr	r3, [r2, #0]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d105      	bne.n	800a620 <_free_r+0x2c>
 800a614:	6063      	str	r3, [r4, #4]
 800a616:	6014      	str	r4, [r2, #0]
 800a618:	0028      	movs	r0, r5
 800a61a:	f000 f8e1 	bl	800a7e0 <__malloc_unlock>
 800a61e:	bd70      	pop	{r4, r5, r6, pc}
 800a620:	42a3      	cmp	r3, r4
 800a622:	d908      	bls.n	800a636 <_free_r+0x42>
 800a624:	6820      	ldr	r0, [r4, #0]
 800a626:	1821      	adds	r1, r4, r0
 800a628:	428b      	cmp	r3, r1
 800a62a:	d1f3      	bne.n	800a614 <_free_r+0x20>
 800a62c:	6819      	ldr	r1, [r3, #0]
 800a62e:	685b      	ldr	r3, [r3, #4]
 800a630:	1809      	adds	r1, r1, r0
 800a632:	6021      	str	r1, [r4, #0]
 800a634:	e7ee      	b.n	800a614 <_free_r+0x20>
 800a636:	001a      	movs	r2, r3
 800a638:	685b      	ldr	r3, [r3, #4]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d001      	beq.n	800a642 <_free_r+0x4e>
 800a63e:	42a3      	cmp	r3, r4
 800a640:	d9f9      	bls.n	800a636 <_free_r+0x42>
 800a642:	6811      	ldr	r1, [r2, #0]
 800a644:	1850      	adds	r0, r2, r1
 800a646:	42a0      	cmp	r0, r4
 800a648:	d10b      	bne.n	800a662 <_free_r+0x6e>
 800a64a:	6820      	ldr	r0, [r4, #0]
 800a64c:	1809      	adds	r1, r1, r0
 800a64e:	1850      	adds	r0, r2, r1
 800a650:	6011      	str	r1, [r2, #0]
 800a652:	4283      	cmp	r3, r0
 800a654:	d1e0      	bne.n	800a618 <_free_r+0x24>
 800a656:	6818      	ldr	r0, [r3, #0]
 800a658:	685b      	ldr	r3, [r3, #4]
 800a65a:	1841      	adds	r1, r0, r1
 800a65c:	6011      	str	r1, [r2, #0]
 800a65e:	6053      	str	r3, [r2, #4]
 800a660:	e7da      	b.n	800a618 <_free_r+0x24>
 800a662:	42a0      	cmp	r0, r4
 800a664:	d902      	bls.n	800a66c <_free_r+0x78>
 800a666:	230c      	movs	r3, #12
 800a668:	602b      	str	r3, [r5, #0]
 800a66a:	e7d5      	b.n	800a618 <_free_r+0x24>
 800a66c:	6820      	ldr	r0, [r4, #0]
 800a66e:	1821      	adds	r1, r4, r0
 800a670:	428b      	cmp	r3, r1
 800a672:	d103      	bne.n	800a67c <_free_r+0x88>
 800a674:	6819      	ldr	r1, [r3, #0]
 800a676:	685b      	ldr	r3, [r3, #4]
 800a678:	1809      	adds	r1, r1, r0
 800a67a:	6021      	str	r1, [r4, #0]
 800a67c:	6063      	str	r3, [r4, #4]
 800a67e:	6054      	str	r4, [r2, #4]
 800a680:	e7ca      	b.n	800a618 <_free_r+0x24>
 800a682:	46c0      	nop			; (mov r8, r8)
 800a684:	20000e64 	.word	0x20000e64

0800a688 <sbrk_aligned>:
 800a688:	b570      	push	{r4, r5, r6, lr}
 800a68a:	4e0f      	ldr	r6, [pc, #60]	; (800a6c8 <sbrk_aligned+0x40>)
 800a68c:	000d      	movs	r5, r1
 800a68e:	6831      	ldr	r1, [r6, #0]
 800a690:	0004      	movs	r4, r0
 800a692:	2900      	cmp	r1, #0
 800a694:	d102      	bne.n	800a69c <sbrk_aligned+0x14>
 800a696:	f000 fd01 	bl	800b09c <_sbrk_r>
 800a69a:	6030      	str	r0, [r6, #0]
 800a69c:	0029      	movs	r1, r5
 800a69e:	0020      	movs	r0, r4
 800a6a0:	f000 fcfc 	bl	800b09c <_sbrk_r>
 800a6a4:	1c43      	adds	r3, r0, #1
 800a6a6:	d00a      	beq.n	800a6be <sbrk_aligned+0x36>
 800a6a8:	2303      	movs	r3, #3
 800a6aa:	1cc5      	adds	r5, r0, #3
 800a6ac:	439d      	bics	r5, r3
 800a6ae:	42a8      	cmp	r0, r5
 800a6b0:	d007      	beq.n	800a6c2 <sbrk_aligned+0x3a>
 800a6b2:	1a29      	subs	r1, r5, r0
 800a6b4:	0020      	movs	r0, r4
 800a6b6:	f000 fcf1 	bl	800b09c <_sbrk_r>
 800a6ba:	3001      	adds	r0, #1
 800a6bc:	d101      	bne.n	800a6c2 <sbrk_aligned+0x3a>
 800a6be:	2501      	movs	r5, #1
 800a6c0:	426d      	negs	r5, r5
 800a6c2:	0028      	movs	r0, r5
 800a6c4:	bd70      	pop	{r4, r5, r6, pc}
 800a6c6:	46c0      	nop			; (mov r8, r8)
 800a6c8:	20000e68 	.word	0x20000e68

0800a6cc <_malloc_r>:
 800a6cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a6ce:	2203      	movs	r2, #3
 800a6d0:	1ccb      	adds	r3, r1, #3
 800a6d2:	4393      	bics	r3, r2
 800a6d4:	3308      	adds	r3, #8
 800a6d6:	0006      	movs	r6, r0
 800a6d8:	001f      	movs	r7, r3
 800a6da:	2b0c      	cmp	r3, #12
 800a6dc:	d238      	bcs.n	800a750 <_malloc_r+0x84>
 800a6de:	270c      	movs	r7, #12
 800a6e0:	42b9      	cmp	r1, r7
 800a6e2:	d837      	bhi.n	800a754 <_malloc_r+0x88>
 800a6e4:	0030      	movs	r0, r6
 800a6e6:	f000 f873 	bl	800a7d0 <__malloc_lock>
 800a6ea:	4b38      	ldr	r3, [pc, #224]	; (800a7cc <_malloc_r+0x100>)
 800a6ec:	9300      	str	r3, [sp, #0]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	001c      	movs	r4, r3
 800a6f2:	2c00      	cmp	r4, #0
 800a6f4:	d133      	bne.n	800a75e <_malloc_r+0x92>
 800a6f6:	0039      	movs	r1, r7
 800a6f8:	0030      	movs	r0, r6
 800a6fa:	f7ff ffc5 	bl	800a688 <sbrk_aligned>
 800a6fe:	0004      	movs	r4, r0
 800a700:	1c43      	adds	r3, r0, #1
 800a702:	d15e      	bne.n	800a7c2 <_malloc_r+0xf6>
 800a704:	9b00      	ldr	r3, [sp, #0]
 800a706:	681c      	ldr	r4, [r3, #0]
 800a708:	0025      	movs	r5, r4
 800a70a:	2d00      	cmp	r5, #0
 800a70c:	d14e      	bne.n	800a7ac <_malloc_r+0xe0>
 800a70e:	2c00      	cmp	r4, #0
 800a710:	d051      	beq.n	800a7b6 <_malloc_r+0xea>
 800a712:	6823      	ldr	r3, [r4, #0]
 800a714:	0029      	movs	r1, r5
 800a716:	18e3      	adds	r3, r4, r3
 800a718:	0030      	movs	r0, r6
 800a71a:	9301      	str	r3, [sp, #4]
 800a71c:	f000 fcbe 	bl	800b09c <_sbrk_r>
 800a720:	9b01      	ldr	r3, [sp, #4]
 800a722:	4283      	cmp	r3, r0
 800a724:	d147      	bne.n	800a7b6 <_malloc_r+0xea>
 800a726:	6823      	ldr	r3, [r4, #0]
 800a728:	0030      	movs	r0, r6
 800a72a:	1aff      	subs	r7, r7, r3
 800a72c:	0039      	movs	r1, r7
 800a72e:	f7ff ffab 	bl	800a688 <sbrk_aligned>
 800a732:	3001      	adds	r0, #1
 800a734:	d03f      	beq.n	800a7b6 <_malloc_r+0xea>
 800a736:	6823      	ldr	r3, [r4, #0]
 800a738:	19db      	adds	r3, r3, r7
 800a73a:	6023      	str	r3, [r4, #0]
 800a73c:	9b00      	ldr	r3, [sp, #0]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d040      	beq.n	800a7c6 <_malloc_r+0xfa>
 800a744:	685a      	ldr	r2, [r3, #4]
 800a746:	42a2      	cmp	r2, r4
 800a748:	d133      	bne.n	800a7b2 <_malloc_r+0xe6>
 800a74a:	2200      	movs	r2, #0
 800a74c:	605a      	str	r2, [r3, #4]
 800a74e:	e014      	b.n	800a77a <_malloc_r+0xae>
 800a750:	2b00      	cmp	r3, #0
 800a752:	dac5      	bge.n	800a6e0 <_malloc_r+0x14>
 800a754:	230c      	movs	r3, #12
 800a756:	2500      	movs	r5, #0
 800a758:	6033      	str	r3, [r6, #0]
 800a75a:	0028      	movs	r0, r5
 800a75c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a75e:	6821      	ldr	r1, [r4, #0]
 800a760:	1bc9      	subs	r1, r1, r7
 800a762:	d420      	bmi.n	800a7a6 <_malloc_r+0xda>
 800a764:	290b      	cmp	r1, #11
 800a766:	d918      	bls.n	800a79a <_malloc_r+0xce>
 800a768:	19e2      	adds	r2, r4, r7
 800a76a:	6027      	str	r7, [r4, #0]
 800a76c:	42a3      	cmp	r3, r4
 800a76e:	d112      	bne.n	800a796 <_malloc_r+0xca>
 800a770:	9b00      	ldr	r3, [sp, #0]
 800a772:	601a      	str	r2, [r3, #0]
 800a774:	6863      	ldr	r3, [r4, #4]
 800a776:	6011      	str	r1, [r2, #0]
 800a778:	6053      	str	r3, [r2, #4]
 800a77a:	0030      	movs	r0, r6
 800a77c:	0025      	movs	r5, r4
 800a77e:	f000 f82f 	bl	800a7e0 <__malloc_unlock>
 800a782:	2207      	movs	r2, #7
 800a784:	350b      	adds	r5, #11
 800a786:	1d23      	adds	r3, r4, #4
 800a788:	4395      	bics	r5, r2
 800a78a:	1aea      	subs	r2, r5, r3
 800a78c:	429d      	cmp	r5, r3
 800a78e:	d0e4      	beq.n	800a75a <_malloc_r+0x8e>
 800a790:	1b5b      	subs	r3, r3, r5
 800a792:	50a3      	str	r3, [r4, r2]
 800a794:	e7e1      	b.n	800a75a <_malloc_r+0x8e>
 800a796:	605a      	str	r2, [r3, #4]
 800a798:	e7ec      	b.n	800a774 <_malloc_r+0xa8>
 800a79a:	6862      	ldr	r2, [r4, #4]
 800a79c:	42a3      	cmp	r3, r4
 800a79e:	d1d5      	bne.n	800a74c <_malloc_r+0x80>
 800a7a0:	9b00      	ldr	r3, [sp, #0]
 800a7a2:	601a      	str	r2, [r3, #0]
 800a7a4:	e7e9      	b.n	800a77a <_malloc_r+0xae>
 800a7a6:	0023      	movs	r3, r4
 800a7a8:	6864      	ldr	r4, [r4, #4]
 800a7aa:	e7a2      	b.n	800a6f2 <_malloc_r+0x26>
 800a7ac:	002c      	movs	r4, r5
 800a7ae:	686d      	ldr	r5, [r5, #4]
 800a7b0:	e7ab      	b.n	800a70a <_malloc_r+0x3e>
 800a7b2:	0013      	movs	r3, r2
 800a7b4:	e7c4      	b.n	800a740 <_malloc_r+0x74>
 800a7b6:	230c      	movs	r3, #12
 800a7b8:	0030      	movs	r0, r6
 800a7ba:	6033      	str	r3, [r6, #0]
 800a7bc:	f000 f810 	bl	800a7e0 <__malloc_unlock>
 800a7c0:	e7cb      	b.n	800a75a <_malloc_r+0x8e>
 800a7c2:	6027      	str	r7, [r4, #0]
 800a7c4:	e7d9      	b.n	800a77a <_malloc_r+0xae>
 800a7c6:	605b      	str	r3, [r3, #4]
 800a7c8:	deff      	udf	#255	; 0xff
 800a7ca:	46c0      	nop			; (mov r8, r8)
 800a7cc:	20000e64 	.word	0x20000e64

0800a7d0 <__malloc_lock>:
 800a7d0:	b510      	push	{r4, lr}
 800a7d2:	4802      	ldr	r0, [pc, #8]	; (800a7dc <__malloc_lock+0xc>)
 800a7d4:	f7ff ff0b 	bl	800a5ee <__retarget_lock_acquire_recursive>
 800a7d8:	bd10      	pop	{r4, pc}
 800a7da:	46c0      	nop			; (mov r8, r8)
 800a7dc:	20000e60 	.word	0x20000e60

0800a7e0 <__malloc_unlock>:
 800a7e0:	b510      	push	{r4, lr}
 800a7e2:	4802      	ldr	r0, [pc, #8]	; (800a7ec <__malloc_unlock+0xc>)
 800a7e4:	f7ff ff04 	bl	800a5f0 <__retarget_lock_release_recursive>
 800a7e8:	bd10      	pop	{r4, pc}
 800a7ea:	46c0      	nop			; (mov r8, r8)
 800a7ec:	20000e60 	.word	0x20000e60

0800a7f0 <__sfputc_r>:
 800a7f0:	6893      	ldr	r3, [r2, #8]
 800a7f2:	b510      	push	{r4, lr}
 800a7f4:	3b01      	subs	r3, #1
 800a7f6:	6093      	str	r3, [r2, #8]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	da04      	bge.n	800a806 <__sfputc_r+0x16>
 800a7fc:	6994      	ldr	r4, [r2, #24]
 800a7fe:	42a3      	cmp	r3, r4
 800a800:	db07      	blt.n	800a812 <__sfputc_r+0x22>
 800a802:	290a      	cmp	r1, #10
 800a804:	d005      	beq.n	800a812 <__sfputc_r+0x22>
 800a806:	6813      	ldr	r3, [r2, #0]
 800a808:	1c58      	adds	r0, r3, #1
 800a80a:	6010      	str	r0, [r2, #0]
 800a80c:	7019      	strb	r1, [r3, #0]
 800a80e:	0008      	movs	r0, r1
 800a810:	bd10      	pop	{r4, pc}
 800a812:	f000 fb9c 	bl	800af4e <__swbuf_r>
 800a816:	0001      	movs	r1, r0
 800a818:	e7f9      	b.n	800a80e <__sfputc_r+0x1e>

0800a81a <__sfputs_r>:
 800a81a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a81c:	0006      	movs	r6, r0
 800a81e:	000f      	movs	r7, r1
 800a820:	0014      	movs	r4, r2
 800a822:	18d5      	adds	r5, r2, r3
 800a824:	42ac      	cmp	r4, r5
 800a826:	d101      	bne.n	800a82c <__sfputs_r+0x12>
 800a828:	2000      	movs	r0, #0
 800a82a:	e007      	b.n	800a83c <__sfputs_r+0x22>
 800a82c:	7821      	ldrb	r1, [r4, #0]
 800a82e:	003a      	movs	r2, r7
 800a830:	0030      	movs	r0, r6
 800a832:	f7ff ffdd 	bl	800a7f0 <__sfputc_r>
 800a836:	3401      	adds	r4, #1
 800a838:	1c43      	adds	r3, r0, #1
 800a83a:	d1f3      	bne.n	800a824 <__sfputs_r+0xa>
 800a83c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a840 <_vfiprintf_r>:
 800a840:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a842:	b0a1      	sub	sp, #132	; 0x84
 800a844:	000f      	movs	r7, r1
 800a846:	0015      	movs	r5, r2
 800a848:	001e      	movs	r6, r3
 800a84a:	9003      	str	r0, [sp, #12]
 800a84c:	2800      	cmp	r0, #0
 800a84e:	d004      	beq.n	800a85a <_vfiprintf_r+0x1a>
 800a850:	6a03      	ldr	r3, [r0, #32]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d101      	bne.n	800a85a <_vfiprintf_r+0x1a>
 800a856:	f7ff fdaf 	bl	800a3b8 <__sinit>
 800a85a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a85c:	07db      	lsls	r3, r3, #31
 800a85e:	d405      	bmi.n	800a86c <_vfiprintf_r+0x2c>
 800a860:	89bb      	ldrh	r3, [r7, #12]
 800a862:	059b      	lsls	r3, r3, #22
 800a864:	d402      	bmi.n	800a86c <_vfiprintf_r+0x2c>
 800a866:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a868:	f7ff fec1 	bl	800a5ee <__retarget_lock_acquire_recursive>
 800a86c:	89bb      	ldrh	r3, [r7, #12]
 800a86e:	071b      	lsls	r3, r3, #28
 800a870:	d502      	bpl.n	800a878 <_vfiprintf_r+0x38>
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d113      	bne.n	800a8a0 <_vfiprintf_r+0x60>
 800a878:	0039      	movs	r1, r7
 800a87a:	9803      	ldr	r0, [sp, #12]
 800a87c:	f000 fbaa 	bl	800afd4 <__swsetup_r>
 800a880:	2800      	cmp	r0, #0
 800a882:	d00d      	beq.n	800a8a0 <_vfiprintf_r+0x60>
 800a884:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a886:	07db      	lsls	r3, r3, #31
 800a888:	d503      	bpl.n	800a892 <_vfiprintf_r+0x52>
 800a88a:	2001      	movs	r0, #1
 800a88c:	4240      	negs	r0, r0
 800a88e:	b021      	add	sp, #132	; 0x84
 800a890:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a892:	89bb      	ldrh	r3, [r7, #12]
 800a894:	059b      	lsls	r3, r3, #22
 800a896:	d4f8      	bmi.n	800a88a <_vfiprintf_r+0x4a>
 800a898:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a89a:	f7ff fea9 	bl	800a5f0 <__retarget_lock_release_recursive>
 800a89e:	e7f4      	b.n	800a88a <_vfiprintf_r+0x4a>
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	ac08      	add	r4, sp, #32
 800a8a4:	6163      	str	r3, [r4, #20]
 800a8a6:	3320      	adds	r3, #32
 800a8a8:	7663      	strb	r3, [r4, #25]
 800a8aa:	3310      	adds	r3, #16
 800a8ac:	76a3      	strb	r3, [r4, #26]
 800a8ae:	9607      	str	r6, [sp, #28]
 800a8b0:	002e      	movs	r6, r5
 800a8b2:	7833      	ldrb	r3, [r6, #0]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d001      	beq.n	800a8bc <_vfiprintf_r+0x7c>
 800a8b8:	2b25      	cmp	r3, #37	; 0x25
 800a8ba:	d148      	bne.n	800a94e <_vfiprintf_r+0x10e>
 800a8bc:	1b73      	subs	r3, r6, r5
 800a8be:	9305      	str	r3, [sp, #20]
 800a8c0:	42ae      	cmp	r6, r5
 800a8c2:	d00b      	beq.n	800a8dc <_vfiprintf_r+0x9c>
 800a8c4:	002a      	movs	r2, r5
 800a8c6:	0039      	movs	r1, r7
 800a8c8:	9803      	ldr	r0, [sp, #12]
 800a8ca:	f7ff ffa6 	bl	800a81a <__sfputs_r>
 800a8ce:	3001      	adds	r0, #1
 800a8d0:	d100      	bne.n	800a8d4 <_vfiprintf_r+0x94>
 800a8d2:	e0af      	b.n	800aa34 <_vfiprintf_r+0x1f4>
 800a8d4:	6963      	ldr	r3, [r4, #20]
 800a8d6:	9a05      	ldr	r2, [sp, #20]
 800a8d8:	189b      	adds	r3, r3, r2
 800a8da:	6163      	str	r3, [r4, #20]
 800a8dc:	7833      	ldrb	r3, [r6, #0]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d100      	bne.n	800a8e4 <_vfiprintf_r+0xa4>
 800a8e2:	e0a7      	b.n	800aa34 <_vfiprintf_r+0x1f4>
 800a8e4:	2201      	movs	r2, #1
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	4252      	negs	r2, r2
 800a8ea:	6062      	str	r2, [r4, #4]
 800a8ec:	a904      	add	r1, sp, #16
 800a8ee:	3254      	adds	r2, #84	; 0x54
 800a8f0:	1852      	adds	r2, r2, r1
 800a8f2:	1c75      	adds	r5, r6, #1
 800a8f4:	6023      	str	r3, [r4, #0]
 800a8f6:	60e3      	str	r3, [r4, #12]
 800a8f8:	60a3      	str	r3, [r4, #8]
 800a8fa:	7013      	strb	r3, [r2, #0]
 800a8fc:	65a3      	str	r3, [r4, #88]	; 0x58
 800a8fe:	4b59      	ldr	r3, [pc, #356]	; (800aa64 <_vfiprintf_r+0x224>)
 800a900:	2205      	movs	r2, #5
 800a902:	0018      	movs	r0, r3
 800a904:	7829      	ldrb	r1, [r5, #0]
 800a906:	9305      	str	r3, [sp, #20]
 800a908:	f000 fbda 	bl	800b0c0 <memchr>
 800a90c:	1c6e      	adds	r6, r5, #1
 800a90e:	2800      	cmp	r0, #0
 800a910:	d11f      	bne.n	800a952 <_vfiprintf_r+0x112>
 800a912:	6822      	ldr	r2, [r4, #0]
 800a914:	06d3      	lsls	r3, r2, #27
 800a916:	d504      	bpl.n	800a922 <_vfiprintf_r+0xe2>
 800a918:	2353      	movs	r3, #83	; 0x53
 800a91a:	a904      	add	r1, sp, #16
 800a91c:	185b      	adds	r3, r3, r1
 800a91e:	2120      	movs	r1, #32
 800a920:	7019      	strb	r1, [r3, #0]
 800a922:	0713      	lsls	r3, r2, #28
 800a924:	d504      	bpl.n	800a930 <_vfiprintf_r+0xf0>
 800a926:	2353      	movs	r3, #83	; 0x53
 800a928:	a904      	add	r1, sp, #16
 800a92a:	185b      	adds	r3, r3, r1
 800a92c:	212b      	movs	r1, #43	; 0x2b
 800a92e:	7019      	strb	r1, [r3, #0]
 800a930:	782b      	ldrb	r3, [r5, #0]
 800a932:	2b2a      	cmp	r3, #42	; 0x2a
 800a934:	d016      	beq.n	800a964 <_vfiprintf_r+0x124>
 800a936:	002e      	movs	r6, r5
 800a938:	2100      	movs	r1, #0
 800a93a:	200a      	movs	r0, #10
 800a93c:	68e3      	ldr	r3, [r4, #12]
 800a93e:	7832      	ldrb	r2, [r6, #0]
 800a940:	1c75      	adds	r5, r6, #1
 800a942:	3a30      	subs	r2, #48	; 0x30
 800a944:	2a09      	cmp	r2, #9
 800a946:	d94e      	bls.n	800a9e6 <_vfiprintf_r+0x1a6>
 800a948:	2900      	cmp	r1, #0
 800a94a:	d111      	bne.n	800a970 <_vfiprintf_r+0x130>
 800a94c:	e017      	b.n	800a97e <_vfiprintf_r+0x13e>
 800a94e:	3601      	adds	r6, #1
 800a950:	e7af      	b.n	800a8b2 <_vfiprintf_r+0x72>
 800a952:	9b05      	ldr	r3, [sp, #20]
 800a954:	6822      	ldr	r2, [r4, #0]
 800a956:	1ac0      	subs	r0, r0, r3
 800a958:	2301      	movs	r3, #1
 800a95a:	4083      	lsls	r3, r0
 800a95c:	4313      	orrs	r3, r2
 800a95e:	0035      	movs	r5, r6
 800a960:	6023      	str	r3, [r4, #0]
 800a962:	e7cc      	b.n	800a8fe <_vfiprintf_r+0xbe>
 800a964:	9b07      	ldr	r3, [sp, #28]
 800a966:	1d19      	adds	r1, r3, #4
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	9107      	str	r1, [sp, #28]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	db01      	blt.n	800a974 <_vfiprintf_r+0x134>
 800a970:	930b      	str	r3, [sp, #44]	; 0x2c
 800a972:	e004      	b.n	800a97e <_vfiprintf_r+0x13e>
 800a974:	425b      	negs	r3, r3
 800a976:	60e3      	str	r3, [r4, #12]
 800a978:	2302      	movs	r3, #2
 800a97a:	4313      	orrs	r3, r2
 800a97c:	6023      	str	r3, [r4, #0]
 800a97e:	7833      	ldrb	r3, [r6, #0]
 800a980:	2b2e      	cmp	r3, #46	; 0x2e
 800a982:	d10a      	bne.n	800a99a <_vfiprintf_r+0x15a>
 800a984:	7873      	ldrb	r3, [r6, #1]
 800a986:	2b2a      	cmp	r3, #42	; 0x2a
 800a988:	d135      	bne.n	800a9f6 <_vfiprintf_r+0x1b6>
 800a98a:	9b07      	ldr	r3, [sp, #28]
 800a98c:	3602      	adds	r6, #2
 800a98e:	1d1a      	adds	r2, r3, #4
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	9207      	str	r2, [sp, #28]
 800a994:	2b00      	cmp	r3, #0
 800a996:	db2b      	blt.n	800a9f0 <_vfiprintf_r+0x1b0>
 800a998:	9309      	str	r3, [sp, #36]	; 0x24
 800a99a:	4d33      	ldr	r5, [pc, #204]	; (800aa68 <_vfiprintf_r+0x228>)
 800a99c:	2203      	movs	r2, #3
 800a99e:	0028      	movs	r0, r5
 800a9a0:	7831      	ldrb	r1, [r6, #0]
 800a9a2:	f000 fb8d 	bl	800b0c0 <memchr>
 800a9a6:	2800      	cmp	r0, #0
 800a9a8:	d006      	beq.n	800a9b8 <_vfiprintf_r+0x178>
 800a9aa:	2340      	movs	r3, #64	; 0x40
 800a9ac:	1b40      	subs	r0, r0, r5
 800a9ae:	4083      	lsls	r3, r0
 800a9b0:	6822      	ldr	r2, [r4, #0]
 800a9b2:	3601      	adds	r6, #1
 800a9b4:	4313      	orrs	r3, r2
 800a9b6:	6023      	str	r3, [r4, #0]
 800a9b8:	7831      	ldrb	r1, [r6, #0]
 800a9ba:	2206      	movs	r2, #6
 800a9bc:	482b      	ldr	r0, [pc, #172]	; (800aa6c <_vfiprintf_r+0x22c>)
 800a9be:	1c75      	adds	r5, r6, #1
 800a9c0:	7621      	strb	r1, [r4, #24]
 800a9c2:	f000 fb7d 	bl	800b0c0 <memchr>
 800a9c6:	2800      	cmp	r0, #0
 800a9c8:	d043      	beq.n	800aa52 <_vfiprintf_r+0x212>
 800a9ca:	4b29      	ldr	r3, [pc, #164]	; (800aa70 <_vfiprintf_r+0x230>)
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d125      	bne.n	800aa1c <_vfiprintf_r+0x1dc>
 800a9d0:	2207      	movs	r2, #7
 800a9d2:	9b07      	ldr	r3, [sp, #28]
 800a9d4:	3307      	adds	r3, #7
 800a9d6:	4393      	bics	r3, r2
 800a9d8:	3308      	adds	r3, #8
 800a9da:	9307      	str	r3, [sp, #28]
 800a9dc:	6963      	ldr	r3, [r4, #20]
 800a9de:	9a04      	ldr	r2, [sp, #16]
 800a9e0:	189b      	adds	r3, r3, r2
 800a9e2:	6163      	str	r3, [r4, #20]
 800a9e4:	e764      	b.n	800a8b0 <_vfiprintf_r+0x70>
 800a9e6:	4343      	muls	r3, r0
 800a9e8:	002e      	movs	r6, r5
 800a9ea:	2101      	movs	r1, #1
 800a9ec:	189b      	adds	r3, r3, r2
 800a9ee:	e7a6      	b.n	800a93e <_vfiprintf_r+0xfe>
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	425b      	negs	r3, r3
 800a9f4:	e7d0      	b.n	800a998 <_vfiprintf_r+0x158>
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	200a      	movs	r0, #10
 800a9fa:	001a      	movs	r2, r3
 800a9fc:	3601      	adds	r6, #1
 800a9fe:	6063      	str	r3, [r4, #4]
 800aa00:	7831      	ldrb	r1, [r6, #0]
 800aa02:	1c75      	adds	r5, r6, #1
 800aa04:	3930      	subs	r1, #48	; 0x30
 800aa06:	2909      	cmp	r1, #9
 800aa08:	d903      	bls.n	800aa12 <_vfiprintf_r+0x1d2>
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d0c5      	beq.n	800a99a <_vfiprintf_r+0x15a>
 800aa0e:	9209      	str	r2, [sp, #36]	; 0x24
 800aa10:	e7c3      	b.n	800a99a <_vfiprintf_r+0x15a>
 800aa12:	4342      	muls	r2, r0
 800aa14:	002e      	movs	r6, r5
 800aa16:	2301      	movs	r3, #1
 800aa18:	1852      	adds	r2, r2, r1
 800aa1a:	e7f1      	b.n	800aa00 <_vfiprintf_r+0x1c0>
 800aa1c:	aa07      	add	r2, sp, #28
 800aa1e:	9200      	str	r2, [sp, #0]
 800aa20:	0021      	movs	r1, r4
 800aa22:	003a      	movs	r2, r7
 800aa24:	4b13      	ldr	r3, [pc, #76]	; (800aa74 <_vfiprintf_r+0x234>)
 800aa26:	9803      	ldr	r0, [sp, #12]
 800aa28:	e000      	b.n	800aa2c <_vfiprintf_r+0x1ec>
 800aa2a:	bf00      	nop
 800aa2c:	9004      	str	r0, [sp, #16]
 800aa2e:	9b04      	ldr	r3, [sp, #16]
 800aa30:	3301      	adds	r3, #1
 800aa32:	d1d3      	bne.n	800a9dc <_vfiprintf_r+0x19c>
 800aa34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa36:	07db      	lsls	r3, r3, #31
 800aa38:	d405      	bmi.n	800aa46 <_vfiprintf_r+0x206>
 800aa3a:	89bb      	ldrh	r3, [r7, #12]
 800aa3c:	059b      	lsls	r3, r3, #22
 800aa3e:	d402      	bmi.n	800aa46 <_vfiprintf_r+0x206>
 800aa40:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800aa42:	f7ff fdd5 	bl	800a5f0 <__retarget_lock_release_recursive>
 800aa46:	89bb      	ldrh	r3, [r7, #12]
 800aa48:	065b      	lsls	r3, r3, #25
 800aa4a:	d500      	bpl.n	800aa4e <_vfiprintf_r+0x20e>
 800aa4c:	e71d      	b.n	800a88a <_vfiprintf_r+0x4a>
 800aa4e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800aa50:	e71d      	b.n	800a88e <_vfiprintf_r+0x4e>
 800aa52:	aa07      	add	r2, sp, #28
 800aa54:	9200      	str	r2, [sp, #0]
 800aa56:	0021      	movs	r1, r4
 800aa58:	003a      	movs	r2, r7
 800aa5a:	4b06      	ldr	r3, [pc, #24]	; (800aa74 <_vfiprintf_r+0x234>)
 800aa5c:	9803      	ldr	r0, [sp, #12]
 800aa5e:	f000 f87b 	bl	800ab58 <_printf_i>
 800aa62:	e7e3      	b.n	800aa2c <_vfiprintf_r+0x1ec>
 800aa64:	0800b31c 	.word	0x0800b31c
 800aa68:	0800b322 	.word	0x0800b322
 800aa6c:	0800b326 	.word	0x0800b326
 800aa70:	00000000 	.word	0x00000000
 800aa74:	0800a81b 	.word	0x0800a81b

0800aa78 <_printf_common>:
 800aa78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa7a:	0016      	movs	r6, r2
 800aa7c:	9301      	str	r3, [sp, #4]
 800aa7e:	688a      	ldr	r2, [r1, #8]
 800aa80:	690b      	ldr	r3, [r1, #16]
 800aa82:	000c      	movs	r4, r1
 800aa84:	9000      	str	r0, [sp, #0]
 800aa86:	4293      	cmp	r3, r2
 800aa88:	da00      	bge.n	800aa8c <_printf_common+0x14>
 800aa8a:	0013      	movs	r3, r2
 800aa8c:	0022      	movs	r2, r4
 800aa8e:	6033      	str	r3, [r6, #0]
 800aa90:	3243      	adds	r2, #67	; 0x43
 800aa92:	7812      	ldrb	r2, [r2, #0]
 800aa94:	2a00      	cmp	r2, #0
 800aa96:	d001      	beq.n	800aa9c <_printf_common+0x24>
 800aa98:	3301      	adds	r3, #1
 800aa9a:	6033      	str	r3, [r6, #0]
 800aa9c:	6823      	ldr	r3, [r4, #0]
 800aa9e:	069b      	lsls	r3, r3, #26
 800aaa0:	d502      	bpl.n	800aaa8 <_printf_common+0x30>
 800aaa2:	6833      	ldr	r3, [r6, #0]
 800aaa4:	3302      	adds	r3, #2
 800aaa6:	6033      	str	r3, [r6, #0]
 800aaa8:	6822      	ldr	r2, [r4, #0]
 800aaaa:	2306      	movs	r3, #6
 800aaac:	0015      	movs	r5, r2
 800aaae:	401d      	ands	r5, r3
 800aab0:	421a      	tst	r2, r3
 800aab2:	d027      	beq.n	800ab04 <_printf_common+0x8c>
 800aab4:	0023      	movs	r3, r4
 800aab6:	3343      	adds	r3, #67	; 0x43
 800aab8:	781b      	ldrb	r3, [r3, #0]
 800aaba:	1e5a      	subs	r2, r3, #1
 800aabc:	4193      	sbcs	r3, r2
 800aabe:	6822      	ldr	r2, [r4, #0]
 800aac0:	0692      	lsls	r2, r2, #26
 800aac2:	d430      	bmi.n	800ab26 <_printf_common+0xae>
 800aac4:	0022      	movs	r2, r4
 800aac6:	9901      	ldr	r1, [sp, #4]
 800aac8:	9800      	ldr	r0, [sp, #0]
 800aaca:	9d08      	ldr	r5, [sp, #32]
 800aacc:	3243      	adds	r2, #67	; 0x43
 800aace:	47a8      	blx	r5
 800aad0:	3001      	adds	r0, #1
 800aad2:	d025      	beq.n	800ab20 <_printf_common+0xa8>
 800aad4:	2206      	movs	r2, #6
 800aad6:	6823      	ldr	r3, [r4, #0]
 800aad8:	2500      	movs	r5, #0
 800aada:	4013      	ands	r3, r2
 800aadc:	2b04      	cmp	r3, #4
 800aade:	d105      	bne.n	800aaec <_printf_common+0x74>
 800aae0:	6833      	ldr	r3, [r6, #0]
 800aae2:	68e5      	ldr	r5, [r4, #12]
 800aae4:	1aed      	subs	r5, r5, r3
 800aae6:	43eb      	mvns	r3, r5
 800aae8:	17db      	asrs	r3, r3, #31
 800aaea:	401d      	ands	r5, r3
 800aaec:	68a3      	ldr	r3, [r4, #8]
 800aaee:	6922      	ldr	r2, [r4, #16]
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	dd01      	ble.n	800aaf8 <_printf_common+0x80>
 800aaf4:	1a9b      	subs	r3, r3, r2
 800aaf6:	18ed      	adds	r5, r5, r3
 800aaf8:	2600      	movs	r6, #0
 800aafa:	42b5      	cmp	r5, r6
 800aafc:	d120      	bne.n	800ab40 <_printf_common+0xc8>
 800aafe:	2000      	movs	r0, #0
 800ab00:	e010      	b.n	800ab24 <_printf_common+0xac>
 800ab02:	3501      	adds	r5, #1
 800ab04:	68e3      	ldr	r3, [r4, #12]
 800ab06:	6832      	ldr	r2, [r6, #0]
 800ab08:	1a9b      	subs	r3, r3, r2
 800ab0a:	42ab      	cmp	r3, r5
 800ab0c:	ddd2      	ble.n	800aab4 <_printf_common+0x3c>
 800ab0e:	0022      	movs	r2, r4
 800ab10:	2301      	movs	r3, #1
 800ab12:	9901      	ldr	r1, [sp, #4]
 800ab14:	9800      	ldr	r0, [sp, #0]
 800ab16:	9f08      	ldr	r7, [sp, #32]
 800ab18:	3219      	adds	r2, #25
 800ab1a:	47b8      	blx	r7
 800ab1c:	3001      	adds	r0, #1
 800ab1e:	d1f0      	bne.n	800ab02 <_printf_common+0x8a>
 800ab20:	2001      	movs	r0, #1
 800ab22:	4240      	negs	r0, r0
 800ab24:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ab26:	2030      	movs	r0, #48	; 0x30
 800ab28:	18e1      	adds	r1, r4, r3
 800ab2a:	3143      	adds	r1, #67	; 0x43
 800ab2c:	7008      	strb	r0, [r1, #0]
 800ab2e:	0021      	movs	r1, r4
 800ab30:	1c5a      	adds	r2, r3, #1
 800ab32:	3145      	adds	r1, #69	; 0x45
 800ab34:	7809      	ldrb	r1, [r1, #0]
 800ab36:	18a2      	adds	r2, r4, r2
 800ab38:	3243      	adds	r2, #67	; 0x43
 800ab3a:	3302      	adds	r3, #2
 800ab3c:	7011      	strb	r1, [r2, #0]
 800ab3e:	e7c1      	b.n	800aac4 <_printf_common+0x4c>
 800ab40:	0022      	movs	r2, r4
 800ab42:	2301      	movs	r3, #1
 800ab44:	9901      	ldr	r1, [sp, #4]
 800ab46:	9800      	ldr	r0, [sp, #0]
 800ab48:	9f08      	ldr	r7, [sp, #32]
 800ab4a:	321a      	adds	r2, #26
 800ab4c:	47b8      	blx	r7
 800ab4e:	3001      	adds	r0, #1
 800ab50:	d0e6      	beq.n	800ab20 <_printf_common+0xa8>
 800ab52:	3601      	adds	r6, #1
 800ab54:	e7d1      	b.n	800aafa <_printf_common+0x82>
	...

0800ab58 <_printf_i>:
 800ab58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab5a:	b08b      	sub	sp, #44	; 0x2c
 800ab5c:	9206      	str	r2, [sp, #24]
 800ab5e:	000a      	movs	r2, r1
 800ab60:	3243      	adds	r2, #67	; 0x43
 800ab62:	9307      	str	r3, [sp, #28]
 800ab64:	9005      	str	r0, [sp, #20]
 800ab66:	9204      	str	r2, [sp, #16]
 800ab68:	7e0a      	ldrb	r2, [r1, #24]
 800ab6a:	000c      	movs	r4, r1
 800ab6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ab6e:	2a78      	cmp	r2, #120	; 0x78
 800ab70:	d809      	bhi.n	800ab86 <_printf_i+0x2e>
 800ab72:	2a62      	cmp	r2, #98	; 0x62
 800ab74:	d80b      	bhi.n	800ab8e <_printf_i+0x36>
 800ab76:	2a00      	cmp	r2, #0
 800ab78:	d100      	bne.n	800ab7c <_printf_i+0x24>
 800ab7a:	e0be      	b.n	800acfa <_printf_i+0x1a2>
 800ab7c:	497c      	ldr	r1, [pc, #496]	; (800ad70 <_printf_i+0x218>)
 800ab7e:	9103      	str	r1, [sp, #12]
 800ab80:	2a58      	cmp	r2, #88	; 0x58
 800ab82:	d100      	bne.n	800ab86 <_printf_i+0x2e>
 800ab84:	e093      	b.n	800acae <_printf_i+0x156>
 800ab86:	0026      	movs	r6, r4
 800ab88:	3642      	adds	r6, #66	; 0x42
 800ab8a:	7032      	strb	r2, [r6, #0]
 800ab8c:	e022      	b.n	800abd4 <_printf_i+0x7c>
 800ab8e:	0010      	movs	r0, r2
 800ab90:	3863      	subs	r0, #99	; 0x63
 800ab92:	2815      	cmp	r0, #21
 800ab94:	d8f7      	bhi.n	800ab86 <_printf_i+0x2e>
 800ab96:	f7f5 fab7 	bl	8000108 <__gnu_thumb1_case_shi>
 800ab9a:	0016      	.short	0x0016
 800ab9c:	fff6001f 	.word	0xfff6001f
 800aba0:	fff6fff6 	.word	0xfff6fff6
 800aba4:	001ffff6 	.word	0x001ffff6
 800aba8:	fff6fff6 	.word	0xfff6fff6
 800abac:	fff6fff6 	.word	0xfff6fff6
 800abb0:	003600a3 	.word	0x003600a3
 800abb4:	fff60083 	.word	0xfff60083
 800abb8:	00b4fff6 	.word	0x00b4fff6
 800abbc:	0036fff6 	.word	0x0036fff6
 800abc0:	fff6fff6 	.word	0xfff6fff6
 800abc4:	0087      	.short	0x0087
 800abc6:	0026      	movs	r6, r4
 800abc8:	681a      	ldr	r2, [r3, #0]
 800abca:	3642      	adds	r6, #66	; 0x42
 800abcc:	1d11      	adds	r1, r2, #4
 800abce:	6019      	str	r1, [r3, #0]
 800abd0:	6813      	ldr	r3, [r2, #0]
 800abd2:	7033      	strb	r3, [r6, #0]
 800abd4:	2301      	movs	r3, #1
 800abd6:	e0a2      	b.n	800ad1e <_printf_i+0x1c6>
 800abd8:	6818      	ldr	r0, [r3, #0]
 800abda:	6809      	ldr	r1, [r1, #0]
 800abdc:	1d02      	adds	r2, r0, #4
 800abde:	060d      	lsls	r5, r1, #24
 800abe0:	d50b      	bpl.n	800abfa <_printf_i+0xa2>
 800abe2:	6805      	ldr	r5, [r0, #0]
 800abe4:	601a      	str	r2, [r3, #0]
 800abe6:	2d00      	cmp	r5, #0
 800abe8:	da03      	bge.n	800abf2 <_printf_i+0x9a>
 800abea:	232d      	movs	r3, #45	; 0x2d
 800abec:	9a04      	ldr	r2, [sp, #16]
 800abee:	426d      	negs	r5, r5
 800abf0:	7013      	strb	r3, [r2, #0]
 800abf2:	4b5f      	ldr	r3, [pc, #380]	; (800ad70 <_printf_i+0x218>)
 800abf4:	270a      	movs	r7, #10
 800abf6:	9303      	str	r3, [sp, #12]
 800abf8:	e01b      	b.n	800ac32 <_printf_i+0xda>
 800abfa:	6805      	ldr	r5, [r0, #0]
 800abfc:	601a      	str	r2, [r3, #0]
 800abfe:	0649      	lsls	r1, r1, #25
 800ac00:	d5f1      	bpl.n	800abe6 <_printf_i+0x8e>
 800ac02:	b22d      	sxth	r5, r5
 800ac04:	e7ef      	b.n	800abe6 <_printf_i+0x8e>
 800ac06:	680d      	ldr	r5, [r1, #0]
 800ac08:	6819      	ldr	r1, [r3, #0]
 800ac0a:	1d08      	adds	r0, r1, #4
 800ac0c:	6018      	str	r0, [r3, #0]
 800ac0e:	062e      	lsls	r6, r5, #24
 800ac10:	d501      	bpl.n	800ac16 <_printf_i+0xbe>
 800ac12:	680d      	ldr	r5, [r1, #0]
 800ac14:	e003      	b.n	800ac1e <_printf_i+0xc6>
 800ac16:	066d      	lsls	r5, r5, #25
 800ac18:	d5fb      	bpl.n	800ac12 <_printf_i+0xba>
 800ac1a:	680d      	ldr	r5, [r1, #0]
 800ac1c:	b2ad      	uxth	r5, r5
 800ac1e:	4b54      	ldr	r3, [pc, #336]	; (800ad70 <_printf_i+0x218>)
 800ac20:	2708      	movs	r7, #8
 800ac22:	9303      	str	r3, [sp, #12]
 800ac24:	2a6f      	cmp	r2, #111	; 0x6f
 800ac26:	d000      	beq.n	800ac2a <_printf_i+0xd2>
 800ac28:	3702      	adds	r7, #2
 800ac2a:	0023      	movs	r3, r4
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	3343      	adds	r3, #67	; 0x43
 800ac30:	701a      	strb	r2, [r3, #0]
 800ac32:	6863      	ldr	r3, [r4, #4]
 800ac34:	60a3      	str	r3, [r4, #8]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	db03      	blt.n	800ac42 <_printf_i+0xea>
 800ac3a:	2104      	movs	r1, #4
 800ac3c:	6822      	ldr	r2, [r4, #0]
 800ac3e:	438a      	bics	r2, r1
 800ac40:	6022      	str	r2, [r4, #0]
 800ac42:	2d00      	cmp	r5, #0
 800ac44:	d102      	bne.n	800ac4c <_printf_i+0xf4>
 800ac46:	9e04      	ldr	r6, [sp, #16]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d00c      	beq.n	800ac66 <_printf_i+0x10e>
 800ac4c:	9e04      	ldr	r6, [sp, #16]
 800ac4e:	0028      	movs	r0, r5
 800ac50:	0039      	movs	r1, r7
 800ac52:	f7f5 fae9 	bl	8000228 <__aeabi_uidivmod>
 800ac56:	9b03      	ldr	r3, [sp, #12]
 800ac58:	3e01      	subs	r6, #1
 800ac5a:	5c5b      	ldrb	r3, [r3, r1]
 800ac5c:	7033      	strb	r3, [r6, #0]
 800ac5e:	002b      	movs	r3, r5
 800ac60:	0005      	movs	r5, r0
 800ac62:	429f      	cmp	r7, r3
 800ac64:	d9f3      	bls.n	800ac4e <_printf_i+0xf6>
 800ac66:	2f08      	cmp	r7, #8
 800ac68:	d109      	bne.n	800ac7e <_printf_i+0x126>
 800ac6a:	6823      	ldr	r3, [r4, #0]
 800ac6c:	07db      	lsls	r3, r3, #31
 800ac6e:	d506      	bpl.n	800ac7e <_printf_i+0x126>
 800ac70:	6862      	ldr	r2, [r4, #4]
 800ac72:	6923      	ldr	r3, [r4, #16]
 800ac74:	429a      	cmp	r2, r3
 800ac76:	dc02      	bgt.n	800ac7e <_printf_i+0x126>
 800ac78:	2330      	movs	r3, #48	; 0x30
 800ac7a:	3e01      	subs	r6, #1
 800ac7c:	7033      	strb	r3, [r6, #0]
 800ac7e:	9b04      	ldr	r3, [sp, #16]
 800ac80:	1b9b      	subs	r3, r3, r6
 800ac82:	6123      	str	r3, [r4, #16]
 800ac84:	9b07      	ldr	r3, [sp, #28]
 800ac86:	0021      	movs	r1, r4
 800ac88:	9300      	str	r3, [sp, #0]
 800ac8a:	9805      	ldr	r0, [sp, #20]
 800ac8c:	9b06      	ldr	r3, [sp, #24]
 800ac8e:	aa09      	add	r2, sp, #36	; 0x24
 800ac90:	f7ff fef2 	bl	800aa78 <_printf_common>
 800ac94:	3001      	adds	r0, #1
 800ac96:	d147      	bne.n	800ad28 <_printf_i+0x1d0>
 800ac98:	2001      	movs	r0, #1
 800ac9a:	4240      	negs	r0, r0
 800ac9c:	b00b      	add	sp, #44	; 0x2c
 800ac9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aca0:	2220      	movs	r2, #32
 800aca2:	6809      	ldr	r1, [r1, #0]
 800aca4:	430a      	orrs	r2, r1
 800aca6:	6022      	str	r2, [r4, #0]
 800aca8:	2278      	movs	r2, #120	; 0x78
 800acaa:	4932      	ldr	r1, [pc, #200]	; (800ad74 <_printf_i+0x21c>)
 800acac:	9103      	str	r1, [sp, #12]
 800acae:	0021      	movs	r1, r4
 800acb0:	3145      	adds	r1, #69	; 0x45
 800acb2:	700a      	strb	r2, [r1, #0]
 800acb4:	6819      	ldr	r1, [r3, #0]
 800acb6:	6822      	ldr	r2, [r4, #0]
 800acb8:	c920      	ldmia	r1!, {r5}
 800acba:	0610      	lsls	r0, r2, #24
 800acbc:	d402      	bmi.n	800acc4 <_printf_i+0x16c>
 800acbe:	0650      	lsls	r0, r2, #25
 800acc0:	d500      	bpl.n	800acc4 <_printf_i+0x16c>
 800acc2:	b2ad      	uxth	r5, r5
 800acc4:	6019      	str	r1, [r3, #0]
 800acc6:	07d3      	lsls	r3, r2, #31
 800acc8:	d502      	bpl.n	800acd0 <_printf_i+0x178>
 800acca:	2320      	movs	r3, #32
 800accc:	4313      	orrs	r3, r2
 800acce:	6023      	str	r3, [r4, #0]
 800acd0:	2710      	movs	r7, #16
 800acd2:	2d00      	cmp	r5, #0
 800acd4:	d1a9      	bne.n	800ac2a <_printf_i+0xd2>
 800acd6:	2220      	movs	r2, #32
 800acd8:	6823      	ldr	r3, [r4, #0]
 800acda:	4393      	bics	r3, r2
 800acdc:	6023      	str	r3, [r4, #0]
 800acde:	e7a4      	b.n	800ac2a <_printf_i+0xd2>
 800ace0:	681a      	ldr	r2, [r3, #0]
 800ace2:	680d      	ldr	r5, [r1, #0]
 800ace4:	1d10      	adds	r0, r2, #4
 800ace6:	6949      	ldr	r1, [r1, #20]
 800ace8:	6018      	str	r0, [r3, #0]
 800acea:	6813      	ldr	r3, [r2, #0]
 800acec:	062e      	lsls	r6, r5, #24
 800acee:	d501      	bpl.n	800acf4 <_printf_i+0x19c>
 800acf0:	6019      	str	r1, [r3, #0]
 800acf2:	e002      	b.n	800acfa <_printf_i+0x1a2>
 800acf4:	066d      	lsls	r5, r5, #25
 800acf6:	d5fb      	bpl.n	800acf0 <_printf_i+0x198>
 800acf8:	8019      	strh	r1, [r3, #0]
 800acfa:	2300      	movs	r3, #0
 800acfc:	9e04      	ldr	r6, [sp, #16]
 800acfe:	6123      	str	r3, [r4, #16]
 800ad00:	e7c0      	b.n	800ac84 <_printf_i+0x12c>
 800ad02:	681a      	ldr	r2, [r3, #0]
 800ad04:	1d11      	adds	r1, r2, #4
 800ad06:	6019      	str	r1, [r3, #0]
 800ad08:	6816      	ldr	r6, [r2, #0]
 800ad0a:	2100      	movs	r1, #0
 800ad0c:	0030      	movs	r0, r6
 800ad0e:	6862      	ldr	r2, [r4, #4]
 800ad10:	f000 f9d6 	bl	800b0c0 <memchr>
 800ad14:	2800      	cmp	r0, #0
 800ad16:	d001      	beq.n	800ad1c <_printf_i+0x1c4>
 800ad18:	1b80      	subs	r0, r0, r6
 800ad1a:	6060      	str	r0, [r4, #4]
 800ad1c:	6863      	ldr	r3, [r4, #4]
 800ad1e:	6123      	str	r3, [r4, #16]
 800ad20:	2300      	movs	r3, #0
 800ad22:	9a04      	ldr	r2, [sp, #16]
 800ad24:	7013      	strb	r3, [r2, #0]
 800ad26:	e7ad      	b.n	800ac84 <_printf_i+0x12c>
 800ad28:	0032      	movs	r2, r6
 800ad2a:	6923      	ldr	r3, [r4, #16]
 800ad2c:	9906      	ldr	r1, [sp, #24]
 800ad2e:	9805      	ldr	r0, [sp, #20]
 800ad30:	9d07      	ldr	r5, [sp, #28]
 800ad32:	47a8      	blx	r5
 800ad34:	3001      	adds	r0, #1
 800ad36:	d0af      	beq.n	800ac98 <_printf_i+0x140>
 800ad38:	6823      	ldr	r3, [r4, #0]
 800ad3a:	079b      	lsls	r3, r3, #30
 800ad3c:	d415      	bmi.n	800ad6a <_printf_i+0x212>
 800ad3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad40:	68e0      	ldr	r0, [r4, #12]
 800ad42:	4298      	cmp	r0, r3
 800ad44:	daaa      	bge.n	800ac9c <_printf_i+0x144>
 800ad46:	0018      	movs	r0, r3
 800ad48:	e7a8      	b.n	800ac9c <_printf_i+0x144>
 800ad4a:	0022      	movs	r2, r4
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	9906      	ldr	r1, [sp, #24]
 800ad50:	9805      	ldr	r0, [sp, #20]
 800ad52:	9e07      	ldr	r6, [sp, #28]
 800ad54:	3219      	adds	r2, #25
 800ad56:	47b0      	blx	r6
 800ad58:	3001      	adds	r0, #1
 800ad5a:	d09d      	beq.n	800ac98 <_printf_i+0x140>
 800ad5c:	3501      	adds	r5, #1
 800ad5e:	68e3      	ldr	r3, [r4, #12]
 800ad60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad62:	1a9b      	subs	r3, r3, r2
 800ad64:	42ab      	cmp	r3, r5
 800ad66:	dcf0      	bgt.n	800ad4a <_printf_i+0x1f2>
 800ad68:	e7e9      	b.n	800ad3e <_printf_i+0x1e6>
 800ad6a:	2500      	movs	r5, #0
 800ad6c:	e7f7      	b.n	800ad5e <_printf_i+0x206>
 800ad6e:	46c0      	nop			; (mov r8, r8)
 800ad70:	0800b32d 	.word	0x0800b32d
 800ad74:	0800b33e 	.word	0x0800b33e

0800ad78 <__sflush_r>:
 800ad78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad7a:	898b      	ldrh	r3, [r1, #12]
 800ad7c:	0005      	movs	r5, r0
 800ad7e:	000c      	movs	r4, r1
 800ad80:	071a      	lsls	r2, r3, #28
 800ad82:	d45c      	bmi.n	800ae3e <__sflush_r+0xc6>
 800ad84:	684a      	ldr	r2, [r1, #4]
 800ad86:	2a00      	cmp	r2, #0
 800ad88:	dc04      	bgt.n	800ad94 <__sflush_r+0x1c>
 800ad8a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800ad8c:	2a00      	cmp	r2, #0
 800ad8e:	dc01      	bgt.n	800ad94 <__sflush_r+0x1c>
 800ad90:	2000      	movs	r0, #0
 800ad92:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ad94:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800ad96:	2f00      	cmp	r7, #0
 800ad98:	d0fa      	beq.n	800ad90 <__sflush_r+0x18>
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	2080      	movs	r0, #128	; 0x80
 800ad9e:	682e      	ldr	r6, [r5, #0]
 800ada0:	602a      	str	r2, [r5, #0]
 800ada2:	001a      	movs	r2, r3
 800ada4:	0140      	lsls	r0, r0, #5
 800ada6:	6a21      	ldr	r1, [r4, #32]
 800ada8:	4002      	ands	r2, r0
 800adaa:	4203      	tst	r3, r0
 800adac:	d034      	beq.n	800ae18 <__sflush_r+0xa0>
 800adae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800adb0:	89a3      	ldrh	r3, [r4, #12]
 800adb2:	075b      	lsls	r3, r3, #29
 800adb4:	d506      	bpl.n	800adc4 <__sflush_r+0x4c>
 800adb6:	6863      	ldr	r3, [r4, #4]
 800adb8:	1ac0      	subs	r0, r0, r3
 800adba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d001      	beq.n	800adc4 <__sflush_r+0x4c>
 800adc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800adc2:	1ac0      	subs	r0, r0, r3
 800adc4:	0002      	movs	r2, r0
 800adc6:	2300      	movs	r3, #0
 800adc8:	0028      	movs	r0, r5
 800adca:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800adcc:	6a21      	ldr	r1, [r4, #32]
 800adce:	47b8      	blx	r7
 800add0:	89a2      	ldrh	r2, [r4, #12]
 800add2:	1c43      	adds	r3, r0, #1
 800add4:	d106      	bne.n	800ade4 <__sflush_r+0x6c>
 800add6:	6829      	ldr	r1, [r5, #0]
 800add8:	291d      	cmp	r1, #29
 800adda:	d82c      	bhi.n	800ae36 <__sflush_r+0xbe>
 800addc:	4b2a      	ldr	r3, [pc, #168]	; (800ae88 <__sflush_r+0x110>)
 800adde:	410b      	asrs	r3, r1
 800ade0:	07db      	lsls	r3, r3, #31
 800ade2:	d428      	bmi.n	800ae36 <__sflush_r+0xbe>
 800ade4:	2300      	movs	r3, #0
 800ade6:	6063      	str	r3, [r4, #4]
 800ade8:	6923      	ldr	r3, [r4, #16]
 800adea:	6023      	str	r3, [r4, #0]
 800adec:	04d2      	lsls	r2, r2, #19
 800adee:	d505      	bpl.n	800adfc <__sflush_r+0x84>
 800adf0:	1c43      	adds	r3, r0, #1
 800adf2:	d102      	bne.n	800adfa <__sflush_r+0x82>
 800adf4:	682b      	ldr	r3, [r5, #0]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d100      	bne.n	800adfc <__sflush_r+0x84>
 800adfa:	6560      	str	r0, [r4, #84]	; 0x54
 800adfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800adfe:	602e      	str	r6, [r5, #0]
 800ae00:	2900      	cmp	r1, #0
 800ae02:	d0c5      	beq.n	800ad90 <__sflush_r+0x18>
 800ae04:	0023      	movs	r3, r4
 800ae06:	3344      	adds	r3, #68	; 0x44
 800ae08:	4299      	cmp	r1, r3
 800ae0a:	d002      	beq.n	800ae12 <__sflush_r+0x9a>
 800ae0c:	0028      	movs	r0, r5
 800ae0e:	f7ff fbf1 	bl	800a5f4 <_free_r>
 800ae12:	2000      	movs	r0, #0
 800ae14:	6360      	str	r0, [r4, #52]	; 0x34
 800ae16:	e7bc      	b.n	800ad92 <__sflush_r+0x1a>
 800ae18:	2301      	movs	r3, #1
 800ae1a:	0028      	movs	r0, r5
 800ae1c:	47b8      	blx	r7
 800ae1e:	1c43      	adds	r3, r0, #1
 800ae20:	d1c6      	bne.n	800adb0 <__sflush_r+0x38>
 800ae22:	682b      	ldr	r3, [r5, #0]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d0c3      	beq.n	800adb0 <__sflush_r+0x38>
 800ae28:	2b1d      	cmp	r3, #29
 800ae2a:	d001      	beq.n	800ae30 <__sflush_r+0xb8>
 800ae2c:	2b16      	cmp	r3, #22
 800ae2e:	d101      	bne.n	800ae34 <__sflush_r+0xbc>
 800ae30:	602e      	str	r6, [r5, #0]
 800ae32:	e7ad      	b.n	800ad90 <__sflush_r+0x18>
 800ae34:	89a2      	ldrh	r2, [r4, #12]
 800ae36:	2340      	movs	r3, #64	; 0x40
 800ae38:	4313      	orrs	r3, r2
 800ae3a:	81a3      	strh	r3, [r4, #12]
 800ae3c:	e7a9      	b.n	800ad92 <__sflush_r+0x1a>
 800ae3e:	690e      	ldr	r6, [r1, #16]
 800ae40:	2e00      	cmp	r6, #0
 800ae42:	d0a5      	beq.n	800ad90 <__sflush_r+0x18>
 800ae44:	680f      	ldr	r7, [r1, #0]
 800ae46:	600e      	str	r6, [r1, #0]
 800ae48:	1bba      	subs	r2, r7, r6
 800ae4a:	9201      	str	r2, [sp, #4]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	079b      	lsls	r3, r3, #30
 800ae50:	d100      	bne.n	800ae54 <__sflush_r+0xdc>
 800ae52:	694a      	ldr	r2, [r1, #20]
 800ae54:	60a2      	str	r2, [r4, #8]
 800ae56:	9b01      	ldr	r3, [sp, #4]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	dd99      	ble.n	800ad90 <__sflush_r+0x18>
 800ae5c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ae5e:	0032      	movs	r2, r6
 800ae60:	001f      	movs	r7, r3
 800ae62:	0028      	movs	r0, r5
 800ae64:	9b01      	ldr	r3, [sp, #4]
 800ae66:	6a21      	ldr	r1, [r4, #32]
 800ae68:	47b8      	blx	r7
 800ae6a:	2800      	cmp	r0, #0
 800ae6c:	dc06      	bgt.n	800ae7c <__sflush_r+0x104>
 800ae6e:	2340      	movs	r3, #64	; 0x40
 800ae70:	2001      	movs	r0, #1
 800ae72:	89a2      	ldrh	r2, [r4, #12]
 800ae74:	4240      	negs	r0, r0
 800ae76:	4313      	orrs	r3, r2
 800ae78:	81a3      	strh	r3, [r4, #12]
 800ae7a:	e78a      	b.n	800ad92 <__sflush_r+0x1a>
 800ae7c:	9b01      	ldr	r3, [sp, #4]
 800ae7e:	1836      	adds	r6, r6, r0
 800ae80:	1a1b      	subs	r3, r3, r0
 800ae82:	9301      	str	r3, [sp, #4]
 800ae84:	e7e7      	b.n	800ae56 <__sflush_r+0xde>
 800ae86:	46c0      	nop			; (mov r8, r8)
 800ae88:	dfbffffe 	.word	0xdfbffffe

0800ae8c <_fflush_r>:
 800ae8c:	690b      	ldr	r3, [r1, #16]
 800ae8e:	b570      	push	{r4, r5, r6, lr}
 800ae90:	0005      	movs	r5, r0
 800ae92:	000c      	movs	r4, r1
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d102      	bne.n	800ae9e <_fflush_r+0x12>
 800ae98:	2500      	movs	r5, #0
 800ae9a:	0028      	movs	r0, r5
 800ae9c:	bd70      	pop	{r4, r5, r6, pc}
 800ae9e:	2800      	cmp	r0, #0
 800aea0:	d004      	beq.n	800aeac <_fflush_r+0x20>
 800aea2:	6a03      	ldr	r3, [r0, #32]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d101      	bne.n	800aeac <_fflush_r+0x20>
 800aea8:	f7ff fa86 	bl	800a3b8 <__sinit>
 800aeac:	220c      	movs	r2, #12
 800aeae:	5ea3      	ldrsh	r3, [r4, r2]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d0f1      	beq.n	800ae98 <_fflush_r+0xc>
 800aeb4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aeb6:	07d2      	lsls	r2, r2, #31
 800aeb8:	d404      	bmi.n	800aec4 <_fflush_r+0x38>
 800aeba:	059b      	lsls	r3, r3, #22
 800aebc:	d402      	bmi.n	800aec4 <_fflush_r+0x38>
 800aebe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aec0:	f7ff fb95 	bl	800a5ee <__retarget_lock_acquire_recursive>
 800aec4:	0028      	movs	r0, r5
 800aec6:	0021      	movs	r1, r4
 800aec8:	f7ff ff56 	bl	800ad78 <__sflush_r>
 800aecc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aece:	0005      	movs	r5, r0
 800aed0:	07db      	lsls	r3, r3, #31
 800aed2:	d4e2      	bmi.n	800ae9a <_fflush_r+0xe>
 800aed4:	89a3      	ldrh	r3, [r4, #12]
 800aed6:	059b      	lsls	r3, r3, #22
 800aed8:	d4df      	bmi.n	800ae9a <_fflush_r+0xe>
 800aeda:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aedc:	f7ff fb88 	bl	800a5f0 <__retarget_lock_release_recursive>
 800aee0:	e7db      	b.n	800ae9a <_fflush_r+0xe>

0800aee2 <_putc_r>:
 800aee2:	b570      	push	{r4, r5, r6, lr}
 800aee4:	0006      	movs	r6, r0
 800aee6:	000d      	movs	r5, r1
 800aee8:	0014      	movs	r4, r2
 800aeea:	2800      	cmp	r0, #0
 800aeec:	d004      	beq.n	800aef8 <_putc_r+0x16>
 800aeee:	6a03      	ldr	r3, [r0, #32]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d101      	bne.n	800aef8 <_putc_r+0x16>
 800aef4:	f7ff fa60 	bl	800a3b8 <__sinit>
 800aef8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aefa:	07db      	lsls	r3, r3, #31
 800aefc:	d405      	bmi.n	800af0a <_putc_r+0x28>
 800aefe:	89a3      	ldrh	r3, [r4, #12]
 800af00:	059b      	lsls	r3, r3, #22
 800af02:	d402      	bmi.n	800af0a <_putc_r+0x28>
 800af04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af06:	f7ff fb72 	bl	800a5ee <__retarget_lock_acquire_recursive>
 800af0a:	68a3      	ldr	r3, [r4, #8]
 800af0c:	3b01      	subs	r3, #1
 800af0e:	60a3      	str	r3, [r4, #8]
 800af10:	2b00      	cmp	r3, #0
 800af12:	da05      	bge.n	800af20 <_putc_r+0x3e>
 800af14:	69a2      	ldr	r2, [r4, #24]
 800af16:	4293      	cmp	r3, r2
 800af18:	db12      	blt.n	800af40 <_putc_r+0x5e>
 800af1a:	b2eb      	uxtb	r3, r5
 800af1c:	2b0a      	cmp	r3, #10
 800af1e:	d00f      	beq.n	800af40 <_putc_r+0x5e>
 800af20:	6823      	ldr	r3, [r4, #0]
 800af22:	1c5a      	adds	r2, r3, #1
 800af24:	6022      	str	r2, [r4, #0]
 800af26:	701d      	strb	r5, [r3, #0]
 800af28:	b2ed      	uxtb	r5, r5
 800af2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af2c:	07db      	lsls	r3, r3, #31
 800af2e:	d405      	bmi.n	800af3c <_putc_r+0x5a>
 800af30:	89a3      	ldrh	r3, [r4, #12]
 800af32:	059b      	lsls	r3, r3, #22
 800af34:	d402      	bmi.n	800af3c <_putc_r+0x5a>
 800af36:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af38:	f7ff fb5a 	bl	800a5f0 <__retarget_lock_release_recursive>
 800af3c:	0028      	movs	r0, r5
 800af3e:	bd70      	pop	{r4, r5, r6, pc}
 800af40:	0029      	movs	r1, r5
 800af42:	0022      	movs	r2, r4
 800af44:	0030      	movs	r0, r6
 800af46:	f000 f802 	bl	800af4e <__swbuf_r>
 800af4a:	0005      	movs	r5, r0
 800af4c:	e7ed      	b.n	800af2a <_putc_r+0x48>

0800af4e <__swbuf_r>:
 800af4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af50:	0006      	movs	r6, r0
 800af52:	000d      	movs	r5, r1
 800af54:	0014      	movs	r4, r2
 800af56:	2800      	cmp	r0, #0
 800af58:	d004      	beq.n	800af64 <__swbuf_r+0x16>
 800af5a:	6a03      	ldr	r3, [r0, #32]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d101      	bne.n	800af64 <__swbuf_r+0x16>
 800af60:	f7ff fa2a 	bl	800a3b8 <__sinit>
 800af64:	69a3      	ldr	r3, [r4, #24]
 800af66:	60a3      	str	r3, [r4, #8]
 800af68:	89a3      	ldrh	r3, [r4, #12]
 800af6a:	071b      	lsls	r3, r3, #28
 800af6c:	d528      	bpl.n	800afc0 <__swbuf_r+0x72>
 800af6e:	6923      	ldr	r3, [r4, #16]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d025      	beq.n	800afc0 <__swbuf_r+0x72>
 800af74:	6923      	ldr	r3, [r4, #16]
 800af76:	6820      	ldr	r0, [r4, #0]
 800af78:	b2ef      	uxtb	r7, r5
 800af7a:	1ac0      	subs	r0, r0, r3
 800af7c:	6963      	ldr	r3, [r4, #20]
 800af7e:	b2ed      	uxtb	r5, r5
 800af80:	4283      	cmp	r3, r0
 800af82:	dc05      	bgt.n	800af90 <__swbuf_r+0x42>
 800af84:	0021      	movs	r1, r4
 800af86:	0030      	movs	r0, r6
 800af88:	f7ff ff80 	bl	800ae8c <_fflush_r>
 800af8c:	2800      	cmp	r0, #0
 800af8e:	d11d      	bne.n	800afcc <__swbuf_r+0x7e>
 800af90:	68a3      	ldr	r3, [r4, #8]
 800af92:	3001      	adds	r0, #1
 800af94:	3b01      	subs	r3, #1
 800af96:	60a3      	str	r3, [r4, #8]
 800af98:	6823      	ldr	r3, [r4, #0]
 800af9a:	1c5a      	adds	r2, r3, #1
 800af9c:	6022      	str	r2, [r4, #0]
 800af9e:	701f      	strb	r7, [r3, #0]
 800afa0:	6963      	ldr	r3, [r4, #20]
 800afa2:	4283      	cmp	r3, r0
 800afa4:	d004      	beq.n	800afb0 <__swbuf_r+0x62>
 800afa6:	89a3      	ldrh	r3, [r4, #12]
 800afa8:	07db      	lsls	r3, r3, #31
 800afaa:	d507      	bpl.n	800afbc <__swbuf_r+0x6e>
 800afac:	2d0a      	cmp	r5, #10
 800afae:	d105      	bne.n	800afbc <__swbuf_r+0x6e>
 800afb0:	0021      	movs	r1, r4
 800afb2:	0030      	movs	r0, r6
 800afb4:	f7ff ff6a 	bl	800ae8c <_fflush_r>
 800afb8:	2800      	cmp	r0, #0
 800afba:	d107      	bne.n	800afcc <__swbuf_r+0x7e>
 800afbc:	0028      	movs	r0, r5
 800afbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afc0:	0021      	movs	r1, r4
 800afc2:	0030      	movs	r0, r6
 800afc4:	f000 f806 	bl	800afd4 <__swsetup_r>
 800afc8:	2800      	cmp	r0, #0
 800afca:	d0d3      	beq.n	800af74 <__swbuf_r+0x26>
 800afcc:	2501      	movs	r5, #1
 800afce:	426d      	negs	r5, r5
 800afd0:	e7f4      	b.n	800afbc <__swbuf_r+0x6e>
	...

0800afd4 <__swsetup_r>:
 800afd4:	4b30      	ldr	r3, [pc, #192]	; (800b098 <__swsetup_r+0xc4>)
 800afd6:	b570      	push	{r4, r5, r6, lr}
 800afd8:	0005      	movs	r5, r0
 800afda:	6818      	ldr	r0, [r3, #0]
 800afdc:	000c      	movs	r4, r1
 800afde:	2800      	cmp	r0, #0
 800afe0:	d004      	beq.n	800afec <__swsetup_r+0x18>
 800afe2:	6a03      	ldr	r3, [r0, #32]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d101      	bne.n	800afec <__swsetup_r+0x18>
 800afe8:	f7ff f9e6 	bl	800a3b8 <__sinit>
 800afec:	230c      	movs	r3, #12
 800afee:	5ee2      	ldrsh	r2, [r4, r3]
 800aff0:	b293      	uxth	r3, r2
 800aff2:	0711      	lsls	r1, r2, #28
 800aff4:	d423      	bmi.n	800b03e <__swsetup_r+0x6a>
 800aff6:	06d9      	lsls	r1, r3, #27
 800aff8:	d407      	bmi.n	800b00a <__swsetup_r+0x36>
 800affa:	2309      	movs	r3, #9
 800affc:	2001      	movs	r0, #1
 800affe:	602b      	str	r3, [r5, #0]
 800b000:	3337      	adds	r3, #55	; 0x37
 800b002:	4313      	orrs	r3, r2
 800b004:	81a3      	strh	r3, [r4, #12]
 800b006:	4240      	negs	r0, r0
 800b008:	bd70      	pop	{r4, r5, r6, pc}
 800b00a:	075b      	lsls	r3, r3, #29
 800b00c:	d513      	bpl.n	800b036 <__swsetup_r+0x62>
 800b00e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b010:	2900      	cmp	r1, #0
 800b012:	d008      	beq.n	800b026 <__swsetup_r+0x52>
 800b014:	0023      	movs	r3, r4
 800b016:	3344      	adds	r3, #68	; 0x44
 800b018:	4299      	cmp	r1, r3
 800b01a:	d002      	beq.n	800b022 <__swsetup_r+0x4e>
 800b01c:	0028      	movs	r0, r5
 800b01e:	f7ff fae9 	bl	800a5f4 <_free_r>
 800b022:	2300      	movs	r3, #0
 800b024:	6363      	str	r3, [r4, #52]	; 0x34
 800b026:	2224      	movs	r2, #36	; 0x24
 800b028:	89a3      	ldrh	r3, [r4, #12]
 800b02a:	4393      	bics	r3, r2
 800b02c:	81a3      	strh	r3, [r4, #12]
 800b02e:	2300      	movs	r3, #0
 800b030:	6063      	str	r3, [r4, #4]
 800b032:	6923      	ldr	r3, [r4, #16]
 800b034:	6023      	str	r3, [r4, #0]
 800b036:	2308      	movs	r3, #8
 800b038:	89a2      	ldrh	r2, [r4, #12]
 800b03a:	4313      	orrs	r3, r2
 800b03c:	81a3      	strh	r3, [r4, #12]
 800b03e:	6923      	ldr	r3, [r4, #16]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d10b      	bne.n	800b05c <__swsetup_r+0x88>
 800b044:	21a0      	movs	r1, #160	; 0xa0
 800b046:	2280      	movs	r2, #128	; 0x80
 800b048:	89a3      	ldrh	r3, [r4, #12]
 800b04a:	0089      	lsls	r1, r1, #2
 800b04c:	0092      	lsls	r2, r2, #2
 800b04e:	400b      	ands	r3, r1
 800b050:	4293      	cmp	r3, r2
 800b052:	d003      	beq.n	800b05c <__swsetup_r+0x88>
 800b054:	0021      	movs	r1, r4
 800b056:	0028      	movs	r0, r5
 800b058:	f000 f866 	bl	800b128 <__smakebuf_r>
 800b05c:	220c      	movs	r2, #12
 800b05e:	5ea3      	ldrsh	r3, [r4, r2]
 800b060:	2001      	movs	r0, #1
 800b062:	001a      	movs	r2, r3
 800b064:	b299      	uxth	r1, r3
 800b066:	4002      	ands	r2, r0
 800b068:	4203      	tst	r3, r0
 800b06a:	d00f      	beq.n	800b08c <__swsetup_r+0xb8>
 800b06c:	2200      	movs	r2, #0
 800b06e:	60a2      	str	r2, [r4, #8]
 800b070:	6962      	ldr	r2, [r4, #20]
 800b072:	4252      	negs	r2, r2
 800b074:	61a2      	str	r2, [r4, #24]
 800b076:	2000      	movs	r0, #0
 800b078:	6922      	ldr	r2, [r4, #16]
 800b07a:	4282      	cmp	r2, r0
 800b07c:	d1c4      	bne.n	800b008 <__swsetup_r+0x34>
 800b07e:	0609      	lsls	r1, r1, #24
 800b080:	d5c2      	bpl.n	800b008 <__swsetup_r+0x34>
 800b082:	2240      	movs	r2, #64	; 0x40
 800b084:	4313      	orrs	r3, r2
 800b086:	81a3      	strh	r3, [r4, #12]
 800b088:	3801      	subs	r0, #1
 800b08a:	e7bd      	b.n	800b008 <__swsetup_r+0x34>
 800b08c:	0788      	lsls	r0, r1, #30
 800b08e:	d400      	bmi.n	800b092 <__swsetup_r+0xbe>
 800b090:	6962      	ldr	r2, [r4, #20]
 800b092:	60a2      	str	r2, [r4, #8]
 800b094:	e7ef      	b.n	800b076 <__swsetup_r+0xa2>
 800b096:	46c0      	nop			; (mov r8, r8)
 800b098:	200001bc 	.word	0x200001bc

0800b09c <_sbrk_r>:
 800b09c:	2300      	movs	r3, #0
 800b09e:	b570      	push	{r4, r5, r6, lr}
 800b0a0:	4d06      	ldr	r5, [pc, #24]	; (800b0bc <_sbrk_r+0x20>)
 800b0a2:	0004      	movs	r4, r0
 800b0a4:	0008      	movs	r0, r1
 800b0a6:	602b      	str	r3, [r5, #0]
 800b0a8:	f7f6 fb06 	bl	80016b8 <_sbrk>
 800b0ac:	1c43      	adds	r3, r0, #1
 800b0ae:	d103      	bne.n	800b0b8 <_sbrk_r+0x1c>
 800b0b0:	682b      	ldr	r3, [r5, #0]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d000      	beq.n	800b0b8 <_sbrk_r+0x1c>
 800b0b6:	6023      	str	r3, [r4, #0]
 800b0b8:	bd70      	pop	{r4, r5, r6, pc}
 800b0ba:	46c0      	nop			; (mov r8, r8)
 800b0bc:	20000e5c 	.word	0x20000e5c

0800b0c0 <memchr>:
 800b0c0:	b2c9      	uxtb	r1, r1
 800b0c2:	1882      	adds	r2, r0, r2
 800b0c4:	4290      	cmp	r0, r2
 800b0c6:	d101      	bne.n	800b0cc <memchr+0xc>
 800b0c8:	2000      	movs	r0, #0
 800b0ca:	4770      	bx	lr
 800b0cc:	7803      	ldrb	r3, [r0, #0]
 800b0ce:	428b      	cmp	r3, r1
 800b0d0:	d0fb      	beq.n	800b0ca <memchr+0xa>
 800b0d2:	3001      	adds	r0, #1
 800b0d4:	e7f6      	b.n	800b0c4 <memchr+0x4>
	...

0800b0d8 <__swhatbuf_r>:
 800b0d8:	b570      	push	{r4, r5, r6, lr}
 800b0da:	000e      	movs	r6, r1
 800b0dc:	001d      	movs	r5, r3
 800b0de:	230e      	movs	r3, #14
 800b0e0:	5ec9      	ldrsh	r1, [r1, r3]
 800b0e2:	0014      	movs	r4, r2
 800b0e4:	b096      	sub	sp, #88	; 0x58
 800b0e6:	2900      	cmp	r1, #0
 800b0e8:	da0c      	bge.n	800b104 <__swhatbuf_r+0x2c>
 800b0ea:	89b2      	ldrh	r2, [r6, #12]
 800b0ec:	2380      	movs	r3, #128	; 0x80
 800b0ee:	0011      	movs	r1, r2
 800b0f0:	4019      	ands	r1, r3
 800b0f2:	421a      	tst	r2, r3
 800b0f4:	d013      	beq.n	800b11e <__swhatbuf_r+0x46>
 800b0f6:	2100      	movs	r1, #0
 800b0f8:	3b40      	subs	r3, #64	; 0x40
 800b0fa:	2000      	movs	r0, #0
 800b0fc:	6029      	str	r1, [r5, #0]
 800b0fe:	6023      	str	r3, [r4, #0]
 800b100:	b016      	add	sp, #88	; 0x58
 800b102:	bd70      	pop	{r4, r5, r6, pc}
 800b104:	466a      	mov	r2, sp
 800b106:	f000 f84d 	bl	800b1a4 <_fstat_r>
 800b10a:	2800      	cmp	r0, #0
 800b10c:	dbed      	blt.n	800b0ea <__swhatbuf_r+0x12>
 800b10e:	23f0      	movs	r3, #240	; 0xf0
 800b110:	9901      	ldr	r1, [sp, #4]
 800b112:	021b      	lsls	r3, r3, #8
 800b114:	4019      	ands	r1, r3
 800b116:	4b03      	ldr	r3, [pc, #12]	; (800b124 <__swhatbuf_r+0x4c>)
 800b118:	18c9      	adds	r1, r1, r3
 800b11a:	424b      	negs	r3, r1
 800b11c:	4159      	adcs	r1, r3
 800b11e:	2380      	movs	r3, #128	; 0x80
 800b120:	00db      	lsls	r3, r3, #3
 800b122:	e7ea      	b.n	800b0fa <__swhatbuf_r+0x22>
 800b124:	ffffe000 	.word	0xffffe000

0800b128 <__smakebuf_r>:
 800b128:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b12a:	2602      	movs	r6, #2
 800b12c:	898b      	ldrh	r3, [r1, #12]
 800b12e:	0005      	movs	r5, r0
 800b130:	000c      	movs	r4, r1
 800b132:	4233      	tst	r3, r6
 800b134:	d006      	beq.n	800b144 <__smakebuf_r+0x1c>
 800b136:	0023      	movs	r3, r4
 800b138:	3347      	adds	r3, #71	; 0x47
 800b13a:	6023      	str	r3, [r4, #0]
 800b13c:	6123      	str	r3, [r4, #16]
 800b13e:	2301      	movs	r3, #1
 800b140:	6163      	str	r3, [r4, #20]
 800b142:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800b144:	466a      	mov	r2, sp
 800b146:	ab01      	add	r3, sp, #4
 800b148:	f7ff ffc6 	bl	800b0d8 <__swhatbuf_r>
 800b14c:	9900      	ldr	r1, [sp, #0]
 800b14e:	0007      	movs	r7, r0
 800b150:	0028      	movs	r0, r5
 800b152:	f7ff fabb 	bl	800a6cc <_malloc_r>
 800b156:	2800      	cmp	r0, #0
 800b158:	d108      	bne.n	800b16c <__smakebuf_r+0x44>
 800b15a:	220c      	movs	r2, #12
 800b15c:	5ea3      	ldrsh	r3, [r4, r2]
 800b15e:	059a      	lsls	r2, r3, #22
 800b160:	d4ef      	bmi.n	800b142 <__smakebuf_r+0x1a>
 800b162:	2203      	movs	r2, #3
 800b164:	4393      	bics	r3, r2
 800b166:	431e      	orrs	r6, r3
 800b168:	81a6      	strh	r6, [r4, #12]
 800b16a:	e7e4      	b.n	800b136 <__smakebuf_r+0xe>
 800b16c:	2380      	movs	r3, #128	; 0x80
 800b16e:	89a2      	ldrh	r2, [r4, #12]
 800b170:	6020      	str	r0, [r4, #0]
 800b172:	4313      	orrs	r3, r2
 800b174:	81a3      	strh	r3, [r4, #12]
 800b176:	9b00      	ldr	r3, [sp, #0]
 800b178:	6120      	str	r0, [r4, #16]
 800b17a:	6163      	str	r3, [r4, #20]
 800b17c:	9b01      	ldr	r3, [sp, #4]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d00c      	beq.n	800b19c <__smakebuf_r+0x74>
 800b182:	0028      	movs	r0, r5
 800b184:	230e      	movs	r3, #14
 800b186:	5ee1      	ldrsh	r1, [r4, r3]
 800b188:	f000 f81e 	bl	800b1c8 <_isatty_r>
 800b18c:	2800      	cmp	r0, #0
 800b18e:	d005      	beq.n	800b19c <__smakebuf_r+0x74>
 800b190:	2303      	movs	r3, #3
 800b192:	89a2      	ldrh	r2, [r4, #12]
 800b194:	439a      	bics	r2, r3
 800b196:	3b02      	subs	r3, #2
 800b198:	4313      	orrs	r3, r2
 800b19a:	81a3      	strh	r3, [r4, #12]
 800b19c:	89a3      	ldrh	r3, [r4, #12]
 800b19e:	433b      	orrs	r3, r7
 800b1a0:	81a3      	strh	r3, [r4, #12]
 800b1a2:	e7ce      	b.n	800b142 <__smakebuf_r+0x1a>

0800b1a4 <_fstat_r>:
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	b570      	push	{r4, r5, r6, lr}
 800b1a8:	4d06      	ldr	r5, [pc, #24]	; (800b1c4 <_fstat_r+0x20>)
 800b1aa:	0004      	movs	r4, r0
 800b1ac:	0008      	movs	r0, r1
 800b1ae:	0011      	movs	r1, r2
 800b1b0:	602b      	str	r3, [r5, #0]
 800b1b2:	f7f6 fa5e 	bl	8001672 <_fstat>
 800b1b6:	1c43      	adds	r3, r0, #1
 800b1b8:	d103      	bne.n	800b1c2 <_fstat_r+0x1e>
 800b1ba:	682b      	ldr	r3, [r5, #0]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d000      	beq.n	800b1c2 <_fstat_r+0x1e>
 800b1c0:	6023      	str	r3, [r4, #0]
 800b1c2:	bd70      	pop	{r4, r5, r6, pc}
 800b1c4:	20000e5c 	.word	0x20000e5c

0800b1c8 <_isatty_r>:
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	b570      	push	{r4, r5, r6, lr}
 800b1cc:	4d06      	ldr	r5, [pc, #24]	; (800b1e8 <_isatty_r+0x20>)
 800b1ce:	0004      	movs	r4, r0
 800b1d0:	0008      	movs	r0, r1
 800b1d2:	602b      	str	r3, [r5, #0]
 800b1d4:	f7f6 fa5b 	bl	800168e <_isatty>
 800b1d8:	1c43      	adds	r3, r0, #1
 800b1da:	d103      	bne.n	800b1e4 <_isatty_r+0x1c>
 800b1dc:	682b      	ldr	r3, [r5, #0]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d000      	beq.n	800b1e4 <_isatty_r+0x1c>
 800b1e2:	6023      	str	r3, [r4, #0]
 800b1e4:	bd70      	pop	{r4, r5, r6, pc}
 800b1e6:	46c0      	nop			; (mov r8, r8)
 800b1e8:	20000e5c 	.word	0x20000e5c

0800b1ec <_init>:
 800b1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ee:	46c0      	nop			; (mov r8, r8)
 800b1f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1f2:	bc08      	pop	{r3}
 800b1f4:	469e      	mov	lr, r3
 800b1f6:	4770      	bx	lr

0800b1f8 <_fini>:
 800b1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1fa:	46c0      	nop			; (mov r8, r8)
 800b1fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1fe:	bc08      	pop	{r3}
 800b200:	469e      	mov	lr, r3
 800b202:	4770      	bx	lr
