
GarminAutopilotREV3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd60  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  0800de20  0800de20  0000ee20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e054  0800e054  000101cc  2**0
                  CONTENTS
  4 .ARM          00000000  0800e054  0800e054  000101cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e054  0800e054  000101cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800e054  0800e054  0000f054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800e05c  0800e05c  0000f05c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  0800e064  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a98  200001d0  0800e230  000101d0  2**3
                  ALLOC
 10 ._user_heap_stack 00001800  20001c68  0800e230  00010c68  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000101cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022730  00000000  00000000  000101f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005c21  00000000  00000000  00032924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ae8  00000000  00000000  00038548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000149d  00000000  00000000  0003a030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019175  00000000  00000000  0003b4cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022e93  00000000  00000000  00054642  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00079adc  00000000  00000000  000774d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f0fb1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065c0  00000000  00000000  000f0ff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000f75b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d0 	.word	0x200001d0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800de08 	.word	0x0800de08

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001d4 	.word	0x200001d4
 8000104:	0800de08 	.word	0x0800de08

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <_ZN3PinC1Ev>:
#if __cplusplus

struct Pin
{
	// Defaults to output pin
	Pin() {};
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2201      	movs	r2, #1
 800022c:	721a      	strb	r2, [r3, #8]
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	2201      	movs	r2, #1
 8000232:	725a      	strb	r2, [r3, #9]
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	0018      	movs	r0, r3
 8000238:	46bd      	mov	sp, r7
 800023a:	b002      	add	sp, #8
 800023c:	bd80      	pop	{r7, pc}

0800023e <_ZN3Pin4ReadEv>:
		}
	};
	void Write(bool state) {
		this->Write((GPIO_PinState)state);
	};
	GPIO_PinState Read() {
 800023e:	b580      	push	{r7, lr}
 8000240:	b082      	sub	sp, #8
 8000242:	af00      	add	r7, sp, #0
 8000244:	6078      	str	r0, [r7, #4]
		if (this->enable && !this->isOutput)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	7a5b      	ldrb	r3, [r3, #9]
 800024a:	2b00      	cmp	r3, #0
 800024c:	d016      	beq.n	800027c <_ZN3Pin4ReadEv+0x3e>
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	7a1b      	ldrb	r3, [r3, #8]
 8000252:	2201      	movs	r2, #1
 8000254:	4053      	eors	r3, r2
 8000256:	b2db      	uxtb	r3, r3
 8000258:	2b00      	cmp	r3, #0
 800025a:	d00f      	beq.n	800027c <_ZN3Pin4ReadEv+0x3e>
		{
			this->state = (GPIO_PinState)(HAL_GPIO_ReadPin(this->port, this->pin) ^ this->defaultState);
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	681a      	ldr	r2, [r3, #0]
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	889b      	ldrh	r3, [r3, #4]
 8000264:	0019      	movs	r1, r3
 8000266:	0010      	movs	r0, r2
 8000268:	f004 f93e 	bl	80044e8 <HAL_GPIO_ReadPin>
 800026c:	0003      	movs	r3, r0
 800026e:	001a      	movs	r2, r3
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	799b      	ldrb	r3, [r3, #6]
 8000274:	4053      	eors	r3, r2
 8000276:	b2da      	uxtb	r2, r3
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	71da      	strb	r2, [r3, #7]
		}
		return this->state;
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	79db      	ldrb	r3, [r3, #7]
	};
 8000280:	0018      	movs	r0, r3
 8000282:	46bd      	mov	sp, r7
 8000284:	b002      	add	sp, #8
 8000286:	bd80      	pop	{r7, pc}

08000288 <_ZN3Pin4ReadEOi>:
	bool Read(int &&_)
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
 8000290:	6039      	str	r1, [r7, #0]
	{
		if (this->enable && !this->isOutput)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	7a5b      	ldrb	r3, [r3, #9]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d00f      	beq.n	80002ba <_ZN3Pin4ReadEOi+0x32>
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	7a1b      	ldrb	r3, [r3, #8]
 800029e:	2201      	movs	r2, #1
 80002a0:	4053      	eors	r3, r2
 80002a2:	b2db      	uxtb	r3, r3
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d008      	beq.n	80002ba <_ZN3Pin4ReadEOi+0x32>
		{
			return (bool)(this->Read());
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	0018      	movs	r0, r3
 80002ac:	f7ff ffc7 	bl	800023e <_ZN3Pin4ReadEv>
 80002b0:	0003      	movs	r3, r0
 80002b2:	1e5a      	subs	r2, r3, #1
 80002b4:	4193      	sbcs	r3, r2
 80002b6:	b2db      	uxtb	r3, r3
 80002b8:	e004      	b.n	80002c4 <_ZN3Pin4ReadEOi+0x3c>
		}
		return (bool)this->state;
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	79db      	ldrb	r3, [r3, #7]
 80002be:	1e5a      	subs	r2, r3, #1
 80002c0:	4193      	sbcs	r3, r2
 80002c2:	b2db      	uxtb	r3, r3
	};
 80002c4:	0018      	movs	r0, r3
 80002c6:	46bd      	mov	sp, r7
 80002c8:	b002      	add	sp, #8
 80002ca:	bd80      	pop	{r7, pc}

080002cc <_ZN10ButtonPinsC1Ev>:
	Pin spd;
	Pin crs1_enc;
	Pin crs2_enc;
	Pin hdg_enc;
	Pin alt_enc;
} ButtonPins;
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	0018      	movs	r0, r3
 80002d8:	f7ff ffa2 	bl	8000220 <_ZN3PinC1Ev>
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	330c      	adds	r3, #12
 80002e0:	0018      	movs	r0, r3
 80002e2:	f7ff ff9d 	bl	8000220 <_ZN3PinC1Ev>
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	3318      	adds	r3, #24
 80002ea:	0018      	movs	r0, r3
 80002ec:	f7ff ff98 	bl	8000220 <_ZN3PinC1Ev>
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	3324      	adds	r3, #36	@ 0x24
 80002f4:	0018      	movs	r0, r3
 80002f6:	f7ff ff93 	bl	8000220 <_ZN3PinC1Ev>
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	3330      	adds	r3, #48	@ 0x30
 80002fe:	0018      	movs	r0, r3
 8000300:	f7ff ff8e 	bl	8000220 <_ZN3PinC1Ev>
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	333c      	adds	r3, #60	@ 0x3c
 8000308:	0018      	movs	r0, r3
 800030a:	f7ff ff89 	bl	8000220 <_ZN3PinC1Ev>
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	3348      	adds	r3, #72	@ 0x48
 8000312:	0018      	movs	r0, r3
 8000314:	f7ff ff84 	bl	8000220 <_ZN3PinC1Ev>
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	3354      	adds	r3, #84	@ 0x54
 800031c:	0018      	movs	r0, r3
 800031e:	f7ff ff7f 	bl	8000220 <_ZN3PinC1Ev>
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	3360      	adds	r3, #96	@ 0x60
 8000326:	0018      	movs	r0, r3
 8000328:	f7ff ff7a 	bl	8000220 <_ZN3PinC1Ev>
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	336c      	adds	r3, #108	@ 0x6c
 8000330:	0018      	movs	r0, r3
 8000332:	f7ff ff75 	bl	8000220 <_ZN3PinC1Ev>
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	3378      	adds	r3, #120	@ 0x78
 800033a:	0018      	movs	r0, r3
 800033c:	f7ff ff70 	bl	8000220 <_ZN3PinC1Ev>
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	3384      	adds	r3, #132	@ 0x84
 8000344:	0018      	movs	r0, r3
 8000346:	f7ff ff6b 	bl	8000220 <_ZN3PinC1Ev>
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	3390      	adds	r3, #144	@ 0x90
 800034e:	0018      	movs	r0, r3
 8000350:	f7ff ff66 	bl	8000220 <_ZN3PinC1Ev>
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	339c      	adds	r3, #156	@ 0x9c
 8000358:	0018      	movs	r0, r3
 800035a:	f7ff ff61 	bl	8000220 <_ZN3PinC1Ev>
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	33a8      	adds	r3, #168	@ 0xa8
 8000362:	0018      	movs	r0, r3
 8000364:	f7ff ff5c 	bl	8000220 <_ZN3PinC1Ev>
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	33b4      	adds	r3, #180	@ 0xb4
 800036c:	0018      	movs	r0, r3
 800036e:	f7ff ff57 	bl	8000220 <_ZN3PinC1Ev>
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	33c0      	adds	r3, #192	@ 0xc0
 8000376:	0018      	movs	r0, r3
 8000378:	f7ff ff52 	bl	8000220 <_ZN3PinC1Ev>
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	33cc      	adds	r3, #204	@ 0xcc
 8000380:	0018      	movs	r0, r3
 8000382:	f7ff ff4d 	bl	8000220 <_ZN3PinC1Ev>
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	0018      	movs	r0, r3
 800038a:	46bd      	mov	sp, r7
 800038c:	b002      	add	sp, #8
 800038e:	bd80      	pop	{r7, pc}

08000390 <_ZN13ButtonManagerC1E10ButtonPins>:
 *      Author: Daxxn
 */

#include "ButtonManager.h"

ButtonManager::ButtonManager(ButtonPins pins)
 8000390:	b084      	sub	sp, #16
 8000392:	b5b0      	push	{r4, r5, r7, lr}
 8000394:	b082      	sub	sp, #8
 8000396:	af00      	add	r7, sp, #0
 8000398:	6078      	str	r0, [r7, #4]
 800039a:	2004      	movs	r0, #4
 800039c:	2410      	movs	r4, #16
 800039e:	1900      	adds	r0, r0, r4
 80003a0:	2508      	movs	r5, #8
 80003a2:	46ac      	mov	ip, r5
 80003a4:	44bc      	add	ip, r7
 80003a6:	4460      	add	r0, ip
 80003a8:	6001      	str	r1, [r0, #0]
 80003aa:	6042      	str	r2, [r0, #4]
 80003ac:	6083      	str	r3, [r0, #8]
 80003ae:	4a14      	ldr	r2, [pc, #80]	@ (8000400 <_ZN13ButtonManagerC1E10ButtonPins+0x70>)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	601a      	str	r2, [r3, #0]
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	3304      	adds	r3, #4
 80003b8:	0018      	movs	r0, r3
 80003ba:	f7ff ff87 	bl	80002cc <_ZN10ButtonPinsC1Ev>
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	22e4      	movs	r2, #228	@ 0xe4
 80003c2:	2100      	movs	r1, #0
 80003c4:	5099      	str	r1, [r3, r2]
{
	this->pins = pins;
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	2204      	movs	r2, #4
 80003ca:	1912      	adds	r2, r2, r4
 80003cc:	2108      	movs	r1, #8
 80003ce:	468c      	mov	ip, r1
 80003d0:	44bc      	add	ip, r7
 80003d2:	4462      	add	r2, ip
 80003d4:	3304      	adds	r3, #4
 80003d6:	0011      	movs	r1, r2
 80003d8:	22d8      	movs	r2, #216	@ 0xd8
 80003da:	0018      	movs	r0, r3
 80003dc:	f00d fcc0 	bl	800dd60 <memcpy>
	this->states = (uint32_t)0;
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	22dc      	movs	r2, #220	@ 0xdc
 80003e4:	2100      	movs	r1, #0
 80003e6:	5099      	str	r1, [r3, r2]
//	this->states = new bool[BUTTON_COUNT]();
	this->temp.integer = (uint32_t)0;
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	22e8      	movs	r2, #232	@ 0xe8
 80003ec:	2100      	movs	r1, #0
 80003ee:	5099      	str	r1, [r3, r2]
}
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	0018      	movs	r0, r3
 80003f4:	46bd      	mov	sp, r7
 80003f6:	b002      	add	sp, #8
 80003f8:	bcb0      	pop	{r4, r5, r7}
 80003fa:	bc08      	pop	{r3}
 80003fc:	b004      	add	sp, #16
 80003fe:	4718      	bx	r3
 8000400:	0800de68 	.word	0x0800de68

08000404 <_ZN13ButtonManagerD1Ev>:

ButtonManager::~ButtonManager()
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	4a03      	ldr	r2, [pc, #12]	@ (800041c <_ZN13ButtonManagerD1Ev+0x18>)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	601a      	str	r2, [r3, #0]
{
//	delete[] this->states;
}
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	0018      	movs	r0, r3
 8000416:	46bd      	mov	sp, r7
 8000418:	b002      	add	sp, #8
 800041a:	bd80      	pop	{r7, pc}
 800041c:	0800de68 	.word	0x0800de68

08000420 <_ZN13ButtonManagerD0Ev>:
ButtonManager::~ButtonManager()
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
}
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	0018      	movs	r0, r3
 800042c:	f7ff ffea 	bl	8000404 <_ZN13ButtonManagerD1Ev>
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	21ec      	movs	r1, #236	@ 0xec
 8000434:	0018      	movs	r0, r3
 8000436:	f00d fb0d 	bl	800da54 <_ZdlPvj>
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	0018      	movs	r0, r3
 800043e:	46bd      	mov	sp, r7
 8000440:	b002      	add	sp, #8
 8000442:	bd80      	pop	{r7, pc}

08000444 <_ZN13ButtonManager10GetButtonsEPh>:

void ButtonManager::GetButtons(uint8_t *data)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
 800044c:	6039      	str	r1, [r7, #0]
//	this->temp.integer = 0;
//	for (i = 0; i < BUTTON_COUNT; ++i) {
//		this->temp.integer |= this->states[i] << i;
//	}
	this->temp.integer = this->states;
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	22dc      	movs	r2, #220	@ 0xdc
 8000452:	589a      	ldr	r2, [r3, r2]
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	21e8      	movs	r1, #232	@ 0xe8
 8000458:	505a      	str	r2, [r3, r1]
	data[0] = this->temp.bytes[0];
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	22e8      	movs	r2, #232	@ 0xe8
 800045e:	5c9a      	ldrb	r2, [r3, r2]
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	701a      	strb	r2, [r3, #0]
	data[1] = this->temp.bytes[1];
 8000464:	683b      	ldr	r3, [r7, #0]
 8000466:	3301      	adds	r3, #1
 8000468:	687a      	ldr	r2, [r7, #4]
 800046a:	21e9      	movs	r1, #233	@ 0xe9
 800046c:	5c52      	ldrb	r2, [r2, r1]
 800046e:	701a      	strb	r2, [r3, #0]
	data[2] = this->temp.bytes[2];
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	3302      	adds	r3, #2
 8000474:	687a      	ldr	r2, [r7, #4]
 8000476:	21ea      	movs	r1, #234	@ 0xea
 8000478:	5c52      	ldrb	r2, [r2, r1]
 800047a:	701a      	strb	r2, [r3, #0]
//	data[0] = this->states.bytes[0];
//	data[1] = this->states.bytes[1];
//	data[2] = this->states.bytes[2];

	this->previousState = this->temp.integer;
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	22e8      	movs	r2, #232	@ 0xe8
 8000480:	589a      	ldr	r2, [r3, r2]
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	21e4      	movs	r1, #228	@ 0xe4
 8000486:	505a      	str	r2, [r3, r1]
//			if (!((8 * i + j) < BUTTON_COUNT)) {
//				return;
//			}
//		}
//	}
}
 8000488:	46c0      	nop			@ (mov r8, r8)
 800048a:	46bd      	mov	sp, r7
 800048c:	b002      	add	sp, #8
 800048e:	bd80      	pop	{r7, pc}

08000490 <_ZN13ButtonManager15GetStateChangedEv>:

bool ButtonManager::GetStateChanged()
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
//	this->temp.integer = 0;
//	for (i = 0; i < BUTTON_COUNT; ++i) {
//		this->temp.integer |= this->states[i] << i;
//	}
//	return this->temp.integer != this->previousState;
	return this->states != this->previousState;
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	22dc      	movs	r2, #220	@ 0xdc
 800049c:	589a      	ldr	r2, [r3, r2]
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	21e4      	movs	r1, #228	@ 0xe4
 80004a2:	585b      	ldr	r3, [r3, r1]
 80004a4:	1ad3      	subs	r3, r2, r3
 80004a6:	1e5a      	subs	r2, r3, #1
 80004a8:	4193      	sbcs	r3, r2
 80004aa:	b2db      	uxtb	r3, r3
}
 80004ac:	0018      	movs	r0, r3
 80004ae:	46bd      	mov	sp, r7
 80004b0:	b002      	add	sp, #8
 80004b2:	bd80      	pop	{r7, pc}

080004b4 <_ZN13ButtonManager6UpdateEv>:

void ButtonManager::Update()
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b094      	sub	sp, #80	@ 0x50
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
	// The boring way then...
	this->SetButton(HDG_BTN,      this->pins.hdg.Read(0));
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	3304      	adds	r3, #4
 80004c0:	2200      	movs	r2, #0
 80004c2:	60ba      	str	r2, [r7, #8]
 80004c4:	2208      	movs	r2, #8
 80004c6:	18ba      	adds	r2, r7, r2
 80004c8:	0011      	movs	r1, r2
 80004ca:	0018      	movs	r0, r3
 80004cc:	f7ff fedc 	bl	8000288 <_ZN3Pin4ReadEOi>
 80004d0:	0003      	movs	r3, r0
 80004d2:	001a      	movs	r2, r3
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	2100      	movs	r1, #0
 80004d8:	0018      	movs	r0, r3
 80004da:	f000 f925 	bl	8000728 <_ZN13ButtonManager9SetButtonE11PanelButtonb>
	this->SetButton(APR_BTN,      this->pins.apr.Read(0));
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	3310      	adds	r3, #16
 80004e2:	2200      	movs	r2, #0
 80004e4:	60fa      	str	r2, [r7, #12]
 80004e6:	220c      	movs	r2, #12
 80004e8:	18ba      	adds	r2, r7, r2
 80004ea:	0011      	movs	r1, r2
 80004ec:	0018      	movs	r0, r3
 80004ee:	f7ff fecb 	bl	8000288 <_ZN3Pin4ReadEOi>
 80004f2:	0003      	movs	r3, r0
 80004f4:	001a      	movs	r2, r3
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	2101      	movs	r1, #1
 80004fa:	0018      	movs	r0, r3
 80004fc:	f000 f914 	bl	8000728 <_ZN13ButtonManager9SetButtonE11PanelButtonb>
	this->SetButton(BC_BTN,       this->pins.bc.Read(0));
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	331c      	adds	r3, #28
 8000504:	2200      	movs	r2, #0
 8000506:	613a      	str	r2, [r7, #16]
 8000508:	2210      	movs	r2, #16
 800050a:	18ba      	adds	r2, r7, r2
 800050c:	0011      	movs	r1, r2
 800050e:	0018      	movs	r0, r3
 8000510:	f7ff feba 	bl	8000288 <_ZN3Pin4ReadEOi>
 8000514:	0003      	movs	r3, r0
 8000516:	001a      	movs	r2, r3
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2102      	movs	r1, #2
 800051c:	0018      	movs	r0, r3
 800051e:	f000 f903 	bl	8000728 <_ZN13ButtonManager9SetButtonE11PanelButtonb>
	this->SetButton(NAV_BTN,      this->pins.nav.Read(0));
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	3328      	adds	r3, #40	@ 0x28
 8000526:	2200      	movs	r2, #0
 8000528:	617a      	str	r2, [r7, #20]
 800052a:	2214      	movs	r2, #20
 800052c:	18ba      	adds	r2, r7, r2
 800052e:	0011      	movs	r1, r2
 8000530:	0018      	movs	r0, r3
 8000532:	f7ff fea9 	bl	8000288 <_ZN3Pin4ReadEOi>
 8000536:	0003      	movs	r3, r0
 8000538:	001a      	movs	r2, r3
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2103      	movs	r1, #3
 800053e:	0018      	movs	r0, r3
 8000540:	f000 f8f2 	bl	8000728 <_ZN13ButtonManager9SetButtonE11PanelButtonb>
	this->SetButton(FD_BTN,       this->pins.fd.Read(0));
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	3334      	adds	r3, #52	@ 0x34
 8000548:	2200      	movs	r2, #0
 800054a:	61ba      	str	r2, [r7, #24]
 800054c:	2218      	movs	r2, #24
 800054e:	18ba      	adds	r2, r7, r2
 8000550:	0011      	movs	r1, r2
 8000552:	0018      	movs	r0, r3
 8000554:	f7ff fe98 	bl	8000288 <_ZN3Pin4ReadEOi>
 8000558:	0003      	movs	r3, r0
 800055a:	001a      	movs	r2, r3
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	2104      	movs	r1, #4
 8000560:	0018      	movs	r0, r3
 8000562:	f000 f8e1 	bl	8000728 <_ZN13ButtonManager9SetButtonE11PanelButtonb>
	this->SetButton(BANK_BTN,     this->pins.bank.Read(0));
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	3340      	adds	r3, #64	@ 0x40
 800056a:	2200      	movs	r2, #0
 800056c:	61fa      	str	r2, [r7, #28]
 800056e:	221c      	movs	r2, #28
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	0011      	movs	r1, r2
 8000574:	0018      	movs	r0, r3
 8000576:	f7ff fe87 	bl	8000288 <_ZN3Pin4ReadEOi>
 800057a:	0003      	movs	r3, r0
 800057c:	001a      	movs	r2, r3
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	2105      	movs	r1, #5
 8000582:	0018      	movs	r0, r3
 8000584:	f000 f8d0 	bl	8000728 <_ZN13ButtonManager9SetButtonE11PanelButtonb>
	this->SetButton(AP_BTN,       this->pins.ap.Read(0));
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	334c      	adds	r3, #76	@ 0x4c
 800058c:	2200      	movs	r2, #0
 800058e:	623a      	str	r2, [r7, #32]
 8000590:	2220      	movs	r2, #32
 8000592:	18ba      	adds	r2, r7, r2
 8000594:	0011      	movs	r1, r2
 8000596:	0018      	movs	r0, r3
 8000598:	f7ff fe76 	bl	8000288 <_ZN3Pin4ReadEOi>
 800059c:	0003      	movs	r3, r0
 800059e:	001a      	movs	r2, r3
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2106      	movs	r1, #6
 80005a4:	0018      	movs	r0, r3
 80005a6:	f000 f8bf 	bl	8000728 <_ZN13ButtonManager9SetButtonE11PanelButtonb>
	this->SetButton(XFR_BTN,      this->pins.xfr.Read(0));
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	3358      	adds	r3, #88	@ 0x58
 80005ae:	2200      	movs	r2, #0
 80005b0:	627a      	str	r2, [r7, #36]	@ 0x24
 80005b2:	2224      	movs	r2, #36	@ 0x24
 80005b4:	18ba      	adds	r2, r7, r2
 80005b6:	0011      	movs	r1, r2
 80005b8:	0018      	movs	r0, r3
 80005ba:	f7ff fe65 	bl	8000288 <_ZN3Pin4ReadEOi>
 80005be:	0003      	movs	r3, r0
 80005c0:	001a      	movs	r2, r3
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2107      	movs	r1, #7
 80005c6:	0018      	movs	r0, r3
 80005c8:	f000 f8ae 	bl	8000728 <_ZN13ButtonManager9SetButtonE11PanelButtonb>
	this->SetButton(YD_BTN,       this->pins.yd.Read(0));
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	3364      	adds	r3, #100	@ 0x64
 80005d0:	2200      	movs	r2, #0
 80005d2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80005d4:	2228      	movs	r2, #40	@ 0x28
 80005d6:	18ba      	adds	r2, r7, r2
 80005d8:	0011      	movs	r1, r2
 80005da:	0018      	movs	r0, r3
 80005dc:	f7ff fe54 	bl	8000288 <_ZN3Pin4ReadEOi>
 80005e0:	0003      	movs	r3, r0
 80005e2:	001a      	movs	r2, r3
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2108      	movs	r1, #8
 80005e8:	0018      	movs	r0, r3
 80005ea:	f000 f89d 	bl	8000728 <_ZN13ButtonManager9SetButtonE11PanelButtonb>
	this->SetButton(ALT_BTN,      this->pins.alt.Read(0));
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	3370      	adds	r3, #112	@ 0x70
 80005f2:	2200      	movs	r2, #0
 80005f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80005f6:	222c      	movs	r2, #44	@ 0x2c
 80005f8:	18ba      	adds	r2, r7, r2
 80005fa:	0011      	movs	r1, r2
 80005fc:	0018      	movs	r0, r3
 80005fe:	f7ff fe43 	bl	8000288 <_ZN3Pin4ReadEOi>
 8000602:	0003      	movs	r3, r0
 8000604:	001a      	movs	r2, r3
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	2109      	movs	r1, #9
 800060a:	0018      	movs	r0, r3
 800060c:	f000 f88c 	bl	8000728 <_ZN13ButtonManager9SetButtonE11PanelButtonb>
	this->SetButton(VS_BTN,       this->pins.vs.Read(0));
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	337c      	adds	r3, #124	@ 0x7c
 8000614:	2200      	movs	r2, #0
 8000616:	633a      	str	r2, [r7, #48]	@ 0x30
 8000618:	2230      	movs	r2, #48	@ 0x30
 800061a:	18ba      	adds	r2, r7, r2
 800061c:	0011      	movs	r1, r2
 800061e:	0018      	movs	r0, r3
 8000620:	f7ff fe32 	bl	8000288 <_ZN3Pin4ReadEOi>
 8000624:	0003      	movs	r3, r0
 8000626:	001a      	movs	r2, r3
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	210a      	movs	r1, #10
 800062c:	0018      	movs	r0, r3
 800062e:	f000 f87b 	bl	8000728 <_ZN13ButtonManager9SetButtonE11PanelButtonb>
	this->SetButton(VNV_BTN,      this->pins.vnv.Read(0));
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	3388      	adds	r3, #136	@ 0x88
 8000636:	2200      	movs	r2, #0
 8000638:	637a      	str	r2, [r7, #52]	@ 0x34
 800063a:	2234      	movs	r2, #52	@ 0x34
 800063c:	18ba      	adds	r2, r7, r2
 800063e:	0011      	movs	r1, r2
 8000640:	0018      	movs	r0, r3
 8000642:	f7ff fe21 	bl	8000288 <_ZN3Pin4ReadEOi>
 8000646:	0003      	movs	r3, r0
 8000648:	001a      	movs	r2, r3
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	210b      	movs	r1, #11
 800064e:	0018      	movs	r0, r3
 8000650:	f000 f86a 	bl	8000728 <_ZN13ButtonManager9SetButtonE11PanelButtonb>
	this->SetButton(FLC_BTN,      this->pins.flc.Read(0));
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	3394      	adds	r3, #148	@ 0x94
 8000658:	2200      	movs	r2, #0
 800065a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800065c:	2238      	movs	r2, #56	@ 0x38
 800065e:	18ba      	adds	r2, r7, r2
 8000660:	0011      	movs	r1, r2
 8000662:	0018      	movs	r0, r3
 8000664:	f7ff fe10 	bl	8000288 <_ZN3Pin4ReadEOi>
 8000668:	0003      	movs	r3, r0
 800066a:	001a      	movs	r2, r3
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	210c      	movs	r1, #12
 8000670:	0018      	movs	r0, r3
 8000672:	f000 f859 	bl	8000728 <_ZN13ButtonManager9SetButtonE11PanelButtonb>
	this->SetButton(SPD_BTN,      this->pins.spd.Read(0));
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	33a0      	adds	r3, #160	@ 0xa0
 800067a:	2200      	movs	r2, #0
 800067c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800067e:	223c      	movs	r2, #60	@ 0x3c
 8000680:	18ba      	adds	r2, r7, r2
 8000682:	0011      	movs	r1, r2
 8000684:	0018      	movs	r0, r3
 8000686:	f7ff fdff 	bl	8000288 <_ZN3Pin4ReadEOi>
 800068a:	0003      	movs	r3, r0
 800068c:	001a      	movs	r2, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	210d      	movs	r1, #13
 8000692:	0018      	movs	r0, r3
 8000694:	f000 f848 	bl	8000728 <_ZN13ButtonManager9SetButtonE11PanelButtonb>
	this->SetButton(CRS1_ENC_BTN, this->pins.crs1_enc.Read(0));
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	33ac      	adds	r3, #172	@ 0xac
 800069c:	2200      	movs	r2, #0
 800069e:	643a      	str	r2, [r7, #64]	@ 0x40
 80006a0:	2240      	movs	r2, #64	@ 0x40
 80006a2:	18ba      	adds	r2, r7, r2
 80006a4:	0011      	movs	r1, r2
 80006a6:	0018      	movs	r0, r3
 80006a8:	f7ff fdee 	bl	8000288 <_ZN3Pin4ReadEOi>
 80006ac:	0003      	movs	r3, r0
 80006ae:	001a      	movs	r2, r3
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	210e      	movs	r1, #14
 80006b4:	0018      	movs	r0, r3
 80006b6:	f000 f837 	bl	8000728 <_ZN13ButtonManager9SetButtonE11PanelButtonb>
	this->SetButton(CRS2_ENC_BTN, this->pins.crs2_enc.Read(0));
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	33b8      	adds	r3, #184	@ 0xb8
 80006be:	2200      	movs	r2, #0
 80006c0:	647a      	str	r2, [r7, #68]	@ 0x44
 80006c2:	2244      	movs	r2, #68	@ 0x44
 80006c4:	18ba      	adds	r2, r7, r2
 80006c6:	0011      	movs	r1, r2
 80006c8:	0018      	movs	r0, r3
 80006ca:	f7ff fddd 	bl	8000288 <_ZN3Pin4ReadEOi>
 80006ce:	0003      	movs	r3, r0
 80006d0:	001a      	movs	r2, r3
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	210f      	movs	r1, #15
 80006d6:	0018      	movs	r0, r3
 80006d8:	f000 f826 	bl	8000728 <_ZN13ButtonManager9SetButtonE11PanelButtonb>
	this->SetButton(HDG_ENC_BTN,  this->pins.hdg_enc.Read(0));
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	33c4      	adds	r3, #196	@ 0xc4
 80006e0:	2200      	movs	r2, #0
 80006e2:	64ba      	str	r2, [r7, #72]	@ 0x48
 80006e4:	2248      	movs	r2, #72	@ 0x48
 80006e6:	18ba      	adds	r2, r7, r2
 80006e8:	0011      	movs	r1, r2
 80006ea:	0018      	movs	r0, r3
 80006ec:	f7ff fdcc 	bl	8000288 <_ZN3Pin4ReadEOi>
 80006f0:	0003      	movs	r3, r0
 80006f2:	001a      	movs	r2, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2110      	movs	r1, #16
 80006f8:	0018      	movs	r0, r3
 80006fa:	f000 f815 	bl	8000728 <_ZN13ButtonManager9SetButtonE11PanelButtonb>
	this->SetButton(ALT_ENC_BTN,  this->pins.alt_enc.Read(0));
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	33d0      	adds	r3, #208	@ 0xd0
 8000702:	2200      	movs	r2, #0
 8000704:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8000706:	224c      	movs	r2, #76	@ 0x4c
 8000708:	18ba      	adds	r2, r7, r2
 800070a:	0011      	movs	r1, r2
 800070c:	0018      	movs	r0, r3
 800070e:	f7ff fdbb 	bl	8000288 <_ZN3Pin4ReadEOi>
 8000712:	0003      	movs	r3, r0
 8000714:	001a      	movs	r2, r3
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	2111      	movs	r1, #17
 800071a:	0018      	movs	r0, r3
 800071c:	f000 f804 	bl	8000728 <_ZN13ButtonManager9SetButtonE11PanelButtonb>
}
 8000720:	46c0      	nop			@ (mov r8, r8)
 8000722:	46bd      	mov	sp, r7
 8000724:	b014      	add	sp, #80	@ 0x50
 8000726:	bd80      	pop	{r7, pc}

08000728 <_ZN13ButtonManager9SetButtonE11PanelButtonb>:

void ButtonManager::SetButton(PanelButton btn, bool value)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	0008      	movs	r0, r1
 8000732:	0011      	movs	r1, r2
 8000734:	1cfb      	adds	r3, r7, #3
 8000736:	1c02      	adds	r2, r0, #0
 8000738:	701a      	strb	r2, [r3, #0]
 800073a:	1cbb      	adds	r3, r7, #2
 800073c:	1c0a      	adds	r2, r1, #0
 800073e:	701a      	strb	r2, [r3, #0]
	if (value) {
 8000740:	1cbb      	adds	r3, r7, #2
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d00c      	beq.n	8000762 <_ZN13ButtonManager9SetButtonE11PanelButtonb+0x3a>
		this->states |= (1 << (uint8_t)btn);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	22dc      	movs	r2, #220	@ 0xdc
 800074c:	589b      	ldr	r3, [r3, r2]
 800074e:	1cfa      	adds	r2, r7, #3
 8000750:	7812      	ldrb	r2, [r2, #0]
 8000752:	2101      	movs	r1, #1
 8000754:	4091      	lsls	r1, r2
 8000756:	000a      	movs	r2, r1
 8000758:	431a      	orrs	r2, r3
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	21dc      	movs	r1, #220	@ 0xdc
 800075e:	505a      	str	r2, [r3, r1]
	}
	else {
		this->states &= ~(1 << (uint8_t)btn);
	}
}
 8000760:	e00c      	b.n	800077c <_ZN13ButtonManager9SetButtonE11PanelButtonb+0x54>
		this->states &= ~(1 << (uint8_t)btn);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	22dc      	movs	r2, #220	@ 0xdc
 8000766:	589b      	ldr	r3, [r3, r2]
 8000768:	1cfa      	adds	r2, r7, #3
 800076a:	7812      	ldrb	r2, [r2, #0]
 800076c:	2101      	movs	r1, #1
 800076e:	4091      	lsls	r1, r2
 8000770:	000a      	movs	r2, r1
 8000772:	43d2      	mvns	r2, r2
 8000774:	401a      	ands	r2, r3
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	21dc      	movs	r1, #220	@ 0xdc
 800077a:	505a      	str	r2, [r3, r1]
}
 800077c:	46c0      	nop			@ (mov r8, r8)
 800077e:	46bd      	mov	sp, r7
 8000780:	b002      	add	sp, #8
 8000782:	bd80      	pop	{r7, pc}

08000784 <_ZN13RotaryEncoder15GetStateChangedEv>:

	void OnInterrupt();

	EncoderDirection GetDirection();
	int8_t GetPosition();
	bool GetStateChanged() { return this->stateChanged; };
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	7c1b      	ldrb	r3, [r3, #16]
 8000790:	0018      	movs	r0, r3
 8000792:	46bd      	mov	sp, r7
 8000794:	b002      	add	sp, #8
 8000796:	bd80      	pop	{r7, pc}

08000798 <_ZN13RotaryEncoder8ResetDirEv>:

	void ResetDir() { this->dir = ENC_STILL; }
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2201      	movs	r2, #1
 80007a4:	735a      	strb	r2, [r3, #13]
 80007a6:	46c0      	nop			@ (mov r8, r8)
 80007a8:	46bd      	mov	sp, r7
 80007aa:	b002      	add	sp, #8
 80007ac:	bd80      	pop	{r7, pc}
	...

080007b0 <_ZN14EncoderManagerC1EP13RotaryEncoderS1_S1_S1_S1_>:
 *      Author: Daxxn
 */

#include <EncoderManager.h>

EncoderManager::EncoderManager(RotaryEncoder *hdgEnc, RotaryEncoder *altEnc, RotaryEncoder *whlEnc, RotaryEncoder *crs1Enc, RotaryEncoder *crs2Enc)
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	60b9      	str	r1, [r7, #8]
 80007ba:	607a      	str	r2, [r7, #4]
 80007bc:	603b      	str	r3, [r7, #0]
 80007be:	4a0e      	ldr	r2, [pc, #56]	@ (80007f8 <_ZN14EncoderManagerC1EP13RotaryEncoderS1_S1_S1_S1_+0x48>)
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	2200      	movs	r2, #0
 80007c8:	761a      	strb	r2, [r3, #24]
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	2200      	movs	r2, #0
 80007ce:	765a      	strb	r2, [r3, #25]
{
	this->hdgEnc = hdgEnc;
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	68ba      	ldr	r2, [r7, #8]
 80007d4:	605a      	str	r2, [r3, #4]
	this->altEnc = altEnc;
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	609a      	str	r2, [r3, #8]
	this->whlEnc = whlEnc;
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	683a      	ldr	r2, [r7, #0]
 80007e0:	60da      	str	r2, [r3, #12]
	this->crs1Enc = crs1Enc;
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	69ba      	ldr	r2, [r7, #24]
 80007e6:	611a      	str	r2, [r3, #16]
	this->crs2Enc = crs2Enc;
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	69fa      	ldr	r2, [r7, #28]
 80007ec:	615a      	str	r2, [r3, #20]
}
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	0018      	movs	r0, r3
 80007f2:	46bd      	mov	sp, r7
 80007f4:	b004      	add	sp, #16
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	0800de78 	.word	0x0800de78

080007fc <_ZN14EncoderManagerD1Ev>:

EncoderManager::~EncoderManager()
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	4a0b      	ldr	r2, [pc, #44]	@ (8000834 <_ZN14EncoderManagerD1Ev+0x38>)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	601a      	str	r2, [r3, #0]
{
	this->hdgEnc = NULL;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	2200      	movs	r2, #0
 800080e:	605a      	str	r2, [r3, #4]
	this->altEnc = NULL;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
	this->whlEnc = NULL;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	2200      	movs	r2, #0
 800081a:	60da      	str	r2, [r3, #12]
	this->crs1Enc = NULL;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2200      	movs	r2, #0
 8000820:	611a      	str	r2, [r3, #16]
	this->crs2Enc = NULL;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	2200      	movs	r2, #0
 8000826:	615a      	str	r2, [r3, #20]
}
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	0018      	movs	r0, r3
 800082c:	46bd      	mov	sp, r7
 800082e:	b002      	add	sp, #8
 8000830:	bd80      	pop	{r7, pc}
 8000832:	46c0      	nop			@ (mov r8, r8)
 8000834:	0800de78 	.word	0x0800de78

08000838 <_ZN14EncoderManagerD0Ev>:
EncoderManager::~EncoderManager()
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
}
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	0018      	movs	r0, r3
 8000844:	f7ff ffda 	bl	80007fc <_ZN14EncoderManagerD1Ev>
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	211c      	movs	r1, #28
 800084c:	0018      	movs	r0, r3
 800084e:	f00d f901 	bl	800da54 <_ZdlPvj>
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	0018      	movs	r0, r3
 8000856:	46bd      	mov	sp, r7
 8000858:	b002      	add	sp, #8
 800085a:	bd80      	pop	{r7, pc}

0800085c <_ZN14EncoderManager15GetStateChangedEv>:

bool EncoderManager::GetStateChanged()
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
	if (this->hdgEnc->GetStateChanged()) {
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	0018      	movs	r0, r3
 800086a:	f7ff ff8b 	bl	8000784 <_ZN13RotaryEncoder15GetStateChangedEv>
 800086e:	1e03      	subs	r3, r0, #0
 8000870:	d004      	beq.n	800087c <_ZN14EncoderManager15GetStateChangedEv+0x20>
		this->stateChanged = true;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2201      	movs	r2, #1
 8000876:	765a      	strb	r2, [r3, #25]
		return true;
 8000878:	2301      	movs	r3, #1
 800087a:	e030      	b.n	80008de <_ZN14EncoderManager15GetStateChangedEv+0x82>
	}
	if (this->altEnc->GetStateChanged()) {
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	689b      	ldr	r3, [r3, #8]
 8000880:	0018      	movs	r0, r3
 8000882:	f7ff ff7f 	bl	8000784 <_ZN13RotaryEncoder15GetStateChangedEv>
 8000886:	1e03      	subs	r3, r0, #0
 8000888:	d004      	beq.n	8000894 <_ZN14EncoderManager15GetStateChangedEv+0x38>
		this->stateChanged = true;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2201      	movs	r2, #1
 800088e:	765a      	strb	r2, [r3, #25]
		return true;
 8000890:	2301      	movs	r3, #1
 8000892:	e024      	b.n	80008de <_ZN14EncoderManager15GetStateChangedEv+0x82>
	}
	if (this->whlEnc->GetStateChanged()) {
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	0018      	movs	r0, r3
 800089a:	f7ff ff73 	bl	8000784 <_ZN13RotaryEncoder15GetStateChangedEv>
 800089e:	1e03      	subs	r3, r0, #0
 80008a0:	d004      	beq.n	80008ac <_ZN14EncoderManager15GetStateChangedEv+0x50>
		this->stateChanged = true;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	2201      	movs	r2, #1
 80008a6:	765a      	strb	r2, [r3, #25]
		return true;
 80008a8:	2301      	movs	r3, #1
 80008aa:	e018      	b.n	80008de <_ZN14EncoderManager15GetStateChangedEv+0x82>
	}
	if (this->crs1Enc->GetStateChanged()) {
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	691b      	ldr	r3, [r3, #16]
 80008b0:	0018      	movs	r0, r3
 80008b2:	f7ff ff67 	bl	8000784 <_ZN13RotaryEncoder15GetStateChangedEv>
 80008b6:	1e03      	subs	r3, r0, #0
 80008b8:	d004      	beq.n	80008c4 <_ZN14EncoderManager15GetStateChangedEv+0x68>
		this->stateChanged = true;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	2201      	movs	r2, #1
 80008be:	765a      	strb	r2, [r3, #25]
		return true;
 80008c0:	2301      	movs	r3, #1
 80008c2:	e00c      	b.n	80008de <_ZN14EncoderManager15GetStateChangedEv+0x82>
	}
	if (this->crs2Enc->GetStateChanged()) {
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	695b      	ldr	r3, [r3, #20]
 80008c8:	0018      	movs	r0, r3
 80008ca:	f7ff ff5b 	bl	8000784 <_ZN13RotaryEncoder15GetStateChangedEv>
 80008ce:	1e03      	subs	r3, r0, #0
 80008d0:	d004      	beq.n	80008dc <_ZN14EncoderManager15GetStateChangedEv+0x80>
		this->stateChanged = true;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2201      	movs	r2, #1
 80008d6:	765a      	strb	r2, [r3, #25]
		return true;
 80008d8:	2301      	movs	r3, #1
 80008da:	e000      	b.n	80008de <_ZN14EncoderManager15GetStateChangedEv+0x82>
	}
	return false;
 80008dc:	2300      	movs	r3, #0
}
 80008de:	0018      	movs	r0, r3
 80008e0:	46bd      	mov	sp, r7
 80008e2:	b002      	add	sp, #8
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <_ZN14EncoderManager12GetPositionsEPh>:

void EncoderManager::GetPositions(uint8_t *buffer)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b082      	sub	sp, #8
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
 80008ee:	6039      	str	r1, [r7, #0]
	buffer[0] = this->hdgEnc->GetPosition();
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	0018      	movs	r0, r3
 80008f6:	f001 fe10 	bl	800251a <_ZN13RotaryEncoder11GetPositionEv>
 80008fa:	0003      	movs	r3, r0
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	701a      	strb	r2, [r3, #0]
	buffer[1] = this->altEnc->GetPosition();
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	689b      	ldr	r3, [r3, #8]
 8000906:	0018      	movs	r0, r3
 8000908:	f001 fe07 	bl	800251a <_ZN13RotaryEncoder11GetPositionEv>
 800090c:	0003      	movs	r3, r0
 800090e:	001a      	movs	r2, r3
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	3301      	adds	r3, #1
 8000914:	b2d2      	uxtb	r2, r2
 8000916:	701a      	strb	r2, [r3, #0]
	buffer[2] = this->whlEnc->GetPosition();
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	68db      	ldr	r3, [r3, #12]
 800091c:	0018      	movs	r0, r3
 800091e:	f001 fdfc 	bl	800251a <_ZN13RotaryEncoder11GetPositionEv>
 8000922:	0003      	movs	r3, r0
 8000924:	001a      	movs	r2, r3
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	3302      	adds	r3, #2
 800092a:	b2d2      	uxtb	r2, r2
 800092c:	701a      	strb	r2, [r3, #0]
	buffer[3] = this->crs1Enc->GetPosition();
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	691b      	ldr	r3, [r3, #16]
 8000932:	0018      	movs	r0, r3
 8000934:	f001 fdf1 	bl	800251a <_ZN13RotaryEncoder11GetPositionEv>
 8000938:	0003      	movs	r3, r0
 800093a:	001a      	movs	r2, r3
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	3303      	adds	r3, #3
 8000940:	b2d2      	uxtb	r2, r2
 8000942:	701a      	strb	r2, [r3, #0]
	buffer[4] = this->crs2Enc->GetPosition();
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	695b      	ldr	r3, [r3, #20]
 8000948:	0018      	movs	r0, r3
 800094a:	f001 fde6 	bl	800251a <_ZN13RotaryEncoder11GetPositionEv>
 800094e:	0003      	movs	r3, r0
 8000950:	001a      	movs	r2, r3
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	3304      	adds	r3, #4
 8000956:	b2d2      	uxtb	r2, r2
 8000958:	701a      	strb	r2, [r3, #0]
}
 800095a:	46c0      	nop			@ (mov r8, r8)
 800095c:	46bd      	mov	sp, r7
 800095e:	b002      	add	sp, #8
 8000960:	bd80      	pop	{r7, pc}

08000962 <_ZN14EncoderManager13GetDirectionsEPh>:

void EncoderManager::GetDirections(uint8_t *buffer)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b082      	sub	sp, #8
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
 800096a:	6039      	str	r1, [r7, #0]
//	EncoderDirection altDir = this->altEnc->GetDirection();
//	EncoderDirection whlDir = this->whlEnc->GetDirection();
//	EncoderDirection crs1Dir = this->crs1Enc->GetDirection();
//	EncoderDirection crs2Dir = this->crs2Enc->GetDirection();

	buffer[0]  = (uint8_t)this->hdgEnc->GetDirection();
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	0018      	movs	r0, r3
 8000972:	f001 fdc4 	bl	80024fe <_ZN13RotaryEncoder12GetDirectionEv>
 8000976:	0003      	movs	r3, r0
 8000978:	b2da      	uxtb	r2, r3
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	701a      	strb	r2, [r3, #0]
	buffer[0] |= (uint8_t)this->altEnc->GetDirection() << 2;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	689b      	ldr	r3, [r3, #8]
 8000982:	0018      	movs	r0, r3
 8000984:	f001 fdbb 	bl	80024fe <_ZN13RotaryEncoder12GetDirectionEv>
 8000988:	0003      	movs	r3, r0
 800098a:	b2db      	uxtb	r3, r3
 800098c:	0099      	lsls	r1, r3, #2
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	b25a      	sxtb	r2, r3
 8000994:	b24b      	sxtb	r3, r1
 8000996:	4313      	orrs	r3, r2
 8000998:	b25b      	sxtb	r3, r3
 800099a:	b2da      	uxtb	r2, r3
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	701a      	strb	r2, [r3, #0]
	buffer[0] |= (uint8_t)this->whlEnc->GetDirection() << 4;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	0018      	movs	r0, r3
 80009a6:	f001 fdaa 	bl	80024fe <_ZN13RotaryEncoder12GetDirectionEv>
 80009aa:	0003      	movs	r3, r0
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	0119      	lsls	r1, r3, #4
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	b25a      	sxtb	r2, r3
 80009b6:	b24b      	sxtb	r3, r1
 80009b8:	4313      	orrs	r3, r2
 80009ba:	b25b      	sxtb	r3, r3
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	701a      	strb	r2, [r3, #0]
	buffer[0] |= (uint8_t)this->crs1Enc->GetDirection() << 6;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	691b      	ldr	r3, [r3, #16]
 80009c6:	0018      	movs	r0, r3
 80009c8:	f001 fd99 	bl	80024fe <_ZN13RotaryEncoder12GetDirectionEv>
 80009cc:	0003      	movs	r3, r0
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	0199      	lsls	r1, r3, #6
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	b25a      	sxtb	r2, r3
 80009d8:	b24b      	sxtb	r3, r1
 80009da:	4313      	orrs	r3, r2
 80009dc:	b25b      	sxtb	r3, r3
 80009de:	b2da      	uxtb	r2, r3
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	701a      	strb	r2, [r3, #0]
	buffer[1]  = (uint8_t)this->crs2Enc->GetDirection();
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	695b      	ldr	r3, [r3, #20]
 80009e8:	0018      	movs	r0, r3
 80009ea:	f001 fd88 	bl	80024fe <_ZN13RotaryEncoder12GetDirectionEv>
 80009ee:	0003      	movs	r3, r0
 80009f0:	001a      	movs	r2, r3
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	3301      	adds	r3, #1
 80009f6:	b2d2      	uxtb	r2, r2
 80009f8:	701a      	strb	r2, [r3, #0]

	this->hdgEnc->ResetDir();
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	0018      	movs	r0, r3
 8000a00:	f7ff feca 	bl	8000798 <_ZN13RotaryEncoder8ResetDirEv>
	this->altEnc->ResetDir();
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	689b      	ldr	r3, [r3, #8]
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f7ff fec5 	bl	8000798 <_ZN13RotaryEncoder8ResetDirEv>
	this->whlEnc->ResetDir();
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	68db      	ldr	r3, [r3, #12]
 8000a12:	0018      	movs	r0, r3
 8000a14:	f7ff fec0 	bl	8000798 <_ZN13RotaryEncoder8ResetDirEv>
	this->crs1Enc->ResetDir();
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	691b      	ldr	r3, [r3, #16]
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f7ff febb 	bl	8000798 <_ZN13RotaryEncoder8ResetDirEv>
	this->crs2Enc->ResetDir();
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	695b      	ldr	r3, [r3, #20]
 8000a26:	0018      	movs	r0, r3
 8000a28:	f7ff feb6 	bl	8000798 <_ZN13RotaryEncoder8ResetDirEv>
}
 8000a2c:	46c0      	nop			@ (mov r8, r8)
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	b002      	add	sp, #8
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <_ZN6PWMPin3SetEt>:
		return HAL_TIM_PWM_Start(this->htim, this->ch);
	}
	HAL_StatusTypeDef Deinit() {
		return HAL_TIM_PWM_Stop(this->htim, this->ch);
	}
	void Set(uint16_t pwm) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	000a      	movs	r2, r1
 8000a3e:	1cbb      	adds	r3, r7, #2
 8000a40:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(this->htim, this->ch, pwm);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d106      	bne.n	8000a58 <_ZN6PWMPin3SetEt+0x24>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	1cba      	adds	r2, r7, #2
 8000a52:	8812      	ldrh	r2, [r2, #0]
 8000a54:	635a      	str	r2, [r3, #52]	@ 0x34
	}
 8000a56:	e01b      	b.n	8000a90 <_ZN6PWMPin3SetEt+0x5c>
		__HAL_TIM_SET_COMPARE(this->htim, this->ch, pwm);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	2b04      	cmp	r3, #4
 8000a5e:	d106      	bne.n	8000a6e <_ZN6PWMPin3SetEt+0x3a>
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	1cba      	adds	r2, r7, #2
 8000a68:	8812      	ldrh	r2, [r2, #0]
 8000a6a:	639a      	str	r2, [r3, #56]	@ 0x38
	}
 8000a6c:	e010      	b.n	8000a90 <_ZN6PWMPin3SetEt+0x5c>
		__HAL_TIM_SET_COMPARE(this->htim, this->ch, pwm);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	2b08      	cmp	r3, #8
 8000a74:	d106      	bne.n	8000a84 <_ZN6PWMPin3SetEt+0x50>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	1cba      	adds	r2, r7, #2
 8000a7e:	8812      	ldrh	r2, [r2, #0]
 8000a80:	63da      	str	r2, [r3, #60]	@ 0x3c
	}
 8000a82:	e005      	b.n	8000a90 <_ZN6PWMPin3SetEt+0x5c>
		__HAL_TIM_SET_COMPARE(this->htim, this->ch, pwm);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	1cba      	adds	r2, r7, #2
 8000a8c:	8812      	ldrh	r2, [r2, #0]
 8000a8e:	641a      	str	r2, [r3, #64]	@ 0x40
	}
 8000a90:	46c0      	nop			@ (mov r8, r8)
 8000a92:	46bd      	mov	sp, r7
 8000a94:	b002      	add	sp, #8
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <_ZN16IndicatorManagerC1EP12STPLEDDriverP6PWMPin>:
 *      Author: Daxxn
 */

#include <IndicatorManager.h>

IndicatorManager::IndicatorManager(STPLEDDriver *driver, PWMPin *backlight)
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	607a      	str	r2, [r7, #4]
 8000aa4:	4a08      	ldr	r2, [pc, #32]	@ (8000ac8 <_ZN16IndicatorManagerC1EP12STPLEDDriverP6PWMPin+0x30>)
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	4a07      	ldr	r2, [pc, #28]	@ (8000acc <_ZN16IndicatorManagerC1EP12STPLEDDriverP6PWMPin+0x34>)
 8000aae:	825a      	strh	r2, [r3, #18]
{
	this->driver    = driver;
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	68ba      	ldr	r2, [r7, #8]
 8000ab4:	605a      	str	r2, [r3, #4]
	this->backlightPWM = backlight;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	687a      	ldr	r2, [r7, #4]
 8000aba:	609a      	str	r2, [r3, #8]
}
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	0018      	movs	r0, r3
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	b004      	add	sp, #16
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	46c0      	nop			@ (mov r8, r8)
 8000ac8:	0800de88 	.word	0x0800de88
 8000acc:	00007fff 	.word	0x00007fff

08000ad0 <_ZN16IndicatorManagerD1Ev>:

IndicatorManager::~IndicatorManager()
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	4a06      	ldr	r2, [pc, #24]	@ (8000af4 <_ZN16IndicatorManagerD1Ev+0x24>)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	601a      	str	r2, [r3, #0]
{
	this->driver       = NULL;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	605a      	str	r2, [r3, #4]
	this->backlightPWM = NULL;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
}
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	0018      	movs	r0, r3
 8000aee:	46bd      	mov	sp, r7
 8000af0:	b002      	add	sp, #8
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	0800de88 	.word	0x0800de88

08000af8 <_ZN16IndicatorManagerD0Ev>:
IndicatorManager::~IndicatorManager()
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
}
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	0018      	movs	r0, r3
 8000b04:	f7ff ffe4 	bl	8000ad0 <_ZN16IndicatorManagerD1Ev>
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2114      	movs	r1, #20
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f00c ffa1 	bl	800da54 <_ZdlPvj>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	0018      	movs	r0, r3
 8000b16:	46bd      	mov	sp, r7
 8000b18:	b002      	add	sp, #8
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <_ZN16IndicatorManager15ParseIndicatorsEPh>:

void IndicatorManager::ParseIndicators(uint8_t *data)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	6039      	str	r1, [r7, #0]
	this->temp.bytes[0] = data[0];
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	781a      	ldrb	r2, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	739a      	strb	r2, [r3, #14]
	this->temp.bytes[1] = data[1];
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	785a      	ldrb	r2, [r3, #1]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	73da      	strb	r2, [r3, #15]
	this->driver->SetAllIndicators(this->temp.integer);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	685a      	ldr	r2, [r3, #4]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	89db      	ldrh	r3, [r3, #14]
 8000b3e:	0019      	movs	r1, r3
 8000b40:	0010      	movs	r0, r2
 8000b42:	f001 fd97 	bl	8002674 <_ZN12STPLEDDriver16SetAllIndicatorsEt>
}
 8000b46:	46c0      	nop			@ (mov r8, r8)
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	b002      	add	sp, #8
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <_ZN16IndicatorManager12SetBacklightEt>:
{
	this->driver->SetIndicator(ind, state);
}

void IndicatorManager::SetBacklight(uint16_t brightness)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b082      	sub	sp, #8
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
 8000b56:	000a      	movs	r2, r1
 8000b58:	1cbb      	adds	r3, r7, #2
 8000b5a:	801a      	strh	r2, [r3, #0]
	this->backlightPWM->Set(brightness);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	689a      	ldr	r2, [r3, #8]
 8000b60:	1cbb      	adds	r3, r7, #2
 8000b62:	881b      	ldrh	r3, [r3, #0]
 8000b64:	0019      	movs	r1, r3
 8000b66:	0010      	movs	r0, r2
 8000b68:	f7ff ff64 	bl	8000a34 <_ZN6PWMPin3SetEt>
}
 8000b6c:	46c0      	nop			@ (mov r8, r8)
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	b002      	add	sp, #8
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <_ZN16IndicatorManager16SetIndBrightnessEh>:

void IndicatorManager::SetIndBrightness(uint8_t brightness)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	000a      	movs	r2, r1
 8000b7e:	1cfb      	adds	r3, r7, #3
 8000b80:	701a      	strb	r2, [r3, #0]
	this->driver->SetBrightness(brightness);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	685a      	ldr	r2, [r3, #4]
 8000b86:	1cfb      	adds	r3, r7, #3
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	b29b      	uxth	r3, r3
 8000b8c:	0019      	movs	r1, r3
 8000b8e:	0010      	movs	r0, r2
 8000b90:	f001 fd96 	bl	80026c0 <_ZN12STPLEDDriver13SetBrightnessEt>
}
 8000b94:	46c0      	nop			@ (mov r8, r8)
 8000b96:	46bd      	mov	sp, r7
 8000b98:	b002      	add	sp, #8
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <_ZN16IndicatorManager19SetMaxIndBrightnessEh>:

void IndicatorManager::SetMaxIndBrightness(uint8_t brightness)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	000a      	movs	r2, r1
 8000ba6:	1cfb      	adds	r3, r7, #3
 8000ba8:	701a      	strb	r2, [r3, #0]
//	this->maxBrightness = (uint32_t)((float)(brightness / UINT8_MAX) * UINT16_MAX);
	this->driver->SetMaxBrightness(brightness);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	685a      	ldr	r2, [r3, #4]
 8000bae:	1cfb      	adds	r3, r7, #3
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	0019      	movs	r1, r3
 8000bb4:	0010      	movs	r0, r2
 8000bb6:	f001 fd70 	bl	800269a <_ZN12STPLEDDriver16SetMaxBrightnessEh>
}
 8000bba:	46c0      	nop			@ (mov r8, r8)
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	b002      	add	sp, #8
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <_ZN3Pin5WriteE13GPIO_PinState>:
	void Write(GPIO_PinState state) {
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b082      	sub	sp, #8
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
 8000bca:	000a      	movs	r2, r1
 8000bcc:	1cfb      	adds	r3, r7, #3
 8000bce:	701a      	strb	r2, [r3, #0]
		if (this->enable && this->isOutput)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	7a5b      	ldrb	r3, [r3, #9]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d014      	beq.n	8000c02 <_ZN3Pin5WriteE13GPIO_PinState+0x40>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	7a1b      	ldrb	r3, [r3, #8]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d010      	beq.n	8000c02 <_ZN3Pin5WriteE13GPIO_PinState+0x40>
			this->state = state;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	1cfa      	adds	r2, r7, #3
 8000be4:	7812      	ldrb	r2, [r2, #0]
 8000be6:	71da      	strb	r2, [r3, #7]
			HAL_GPIO_WritePin(this->port, this->pin, (GPIO_PinState)(state ^ this->defaultState));
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6818      	ldr	r0, [r3, #0]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	8899      	ldrh	r1, [r3, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	799a      	ldrb	r2, [r3, #6]
 8000bf4:	1cfb      	adds	r3, r7, #3
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	4053      	eors	r3, r2
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	001a      	movs	r2, r3
 8000bfe:	f003 fc90 	bl	8004522 <HAL_GPIO_WritePin>
	};
 8000c02:	46c0      	nop			@ (mov r8, r8)
 8000c04:	46bd      	mov	sp, r7
 8000c06:	b002      	add	sp, #8
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <_ZN3Pin5WriteEb>:
	void Write(bool state) {
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b082      	sub	sp, #8
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
 8000c12:	000a      	movs	r2, r1
 8000c14:	1cfb      	adds	r3, r7, #3
 8000c16:	701a      	strb	r2, [r3, #0]
		this->Write((GPIO_PinState)state);
 8000c18:	1cfb      	adds	r3, r7, #3
 8000c1a:	781a      	ldrb	r2, [r3, #0]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	0011      	movs	r1, r2
 8000c20:	0018      	movs	r0, r3
 8000c22:	f7ff ffce 	bl	8000bc2 <_ZN3Pin5WriteE13GPIO_PinState>
	};
 8000c26:	46c0      	nop			@ (mov r8, r8)
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	b002      	add	sp, #8
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <_ZN13MCP4023DriverC1E3PinS0_18MCP4023_Resistance>:

#include <MCP4023Driver.h>

using namespace MCP4023_Consts;

MCP4023Driver::MCP4023Driver(Pin udPin, Pin csPin, MCP4023_Resistance res)
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	0038      	movs	r0, r7
 8000c3a:	6001      	str	r1, [r0, #0]
 8000c3c:	6042      	str	r2, [r0, #4]
 8000c3e:	6083      	str	r3, [r0, #8]
 8000c40:	4a1c      	ldr	r2, [pc, #112]	@ (8000cb4 <_ZN13MCP4023DriverC1E3PinS0_18MCP4023_Resistance+0x84>)
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	68f9      	ldr	r1, [r7, #12]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	608a      	str	r2, [r1, #8]
 8000c4e:	60cb      	str	r3, [r1, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	221f      	movs	r2, #31
 8000c54:	741a      	strb	r2, [r3, #16]
 8000c56:	4a18      	ldr	r2, [pc, #96]	@ (8000cb8 <_ZN13MCP4023DriverC1E3PinS0_18MCP4023_Resistance+0x88>)
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	615a      	str	r2, [r3, #20]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	221f      	movs	r2, #31
 8000c60:	761a      	strb	r2, [r3, #24]
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	331c      	adds	r3, #28
 8000c66:	0018      	movs	r0, r3
 8000c68:	f7ff fada 	bl	8000220 <_ZN3PinC1Ev>
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	3328      	adds	r3, #40	@ 0x28
 8000c70:	0018      	movs	r0, r3
 8000c72:	f7ff fad5 	bl	8000220 <_ZN3PinC1Ev>
{
	this->udPin = udPin;
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	003a      	movs	r2, r7
 8000c7a:	331c      	adds	r3, #28
 8000c7c:	0011      	movs	r1, r2
 8000c7e:	220a      	movs	r2, #10
 8000c80:	0018      	movs	r0, r3
 8000c82:	f00d f86d 	bl	800dd60 <memcpy>
	this->csPin = csPin;
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	2218      	movs	r2, #24
 8000c8a:	18ba      	adds	r2, r7, r2
 8000c8c:	3328      	adds	r3, #40	@ 0x28
 8000c8e:	0011      	movs	r1, r2
 8000c90:	220a      	movs	r2, #10
 8000c92:	0018      	movs	r0, r3
 8000c94:	f00d f864 	bl	800dd60 <memcpy>
	this->kOhms = MCP4023_Consts::ResistanceValues[res];
 8000c98:	2324      	movs	r3, #36	@ 0x24
 8000c9a:	18fb      	adds	r3, r7, r3
 8000c9c:	781a      	ldrb	r2, [r3, #0]
 8000c9e:	4b07      	ldr	r3, [pc, #28]	@ (8000cbc <_ZN13MCP4023DriverC1E3PinS0_18MCP4023_Resistance+0x8c>)
 8000ca0:	0092      	lsls	r2, r2, #2
 8000ca2:	58d2      	ldr	r2, [r2, r3]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	615a      	str	r2, [r3, #20]
}
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	0018      	movs	r0, r3
 8000cac:	46bd      	mov	sp, r7
 8000cae:	b004      	add	sp, #16
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	46c0      	nop			@ (mov r8, r8)
 8000cb4:	0800dea8 	.word	0x0800dea8
 8000cb8:	41200000 	.word	0x41200000
 8000cbc:	0800de90 	.word	0x0800de90

08000cc0 <_ZN13MCP4023DriverD1Ev>:
	this->csPin = csPin;
	this->kOhms = MCP4023_Consts::ResistanceValues[res];
	this->defaultStep = defaultStep;
}

MCP4023Driver::~MCP4023Driver()
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	4a03      	ldr	r2, [pc, #12]	@ (8000cd8 <_ZN13MCP4023DriverD1Ev+0x18>)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	601a      	str	r2, [r3, #0]
{
}
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	b002      	add	sp, #8
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	0800dea8 	.word	0x0800dea8

08000cdc <_ZN13MCP4023DriverD0Ev>:
MCP4023Driver::~MCP4023Driver()
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
}
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	f7ff ffea 	bl	8000cc0 <_ZN13MCP4023DriverD1Ev>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2138      	movs	r1, #56	@ 0x38
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f00c feaf 	bl	800da54 <_ZdlPvj>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	b002      	add	sp, #8
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <_ZN13MCP4023Driver4InitEv>:

HAL_StatusTypeDef MCP4023Driver::Init()
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
	if (this->defaultStep != DefaultStep)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	7e1b      	ldrb	r3, [r3, #24]
 8000d0c:	2b1f      	cmp	r3, #31
 8000d0e:	d006      	beq.n	8000d1e <_ZN13MCP4023Driver4InitEv+0x1e>
	{
		this->UpdateStep(defaultStep);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	7e1a      	ldrb	r2, [r3, #24]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	0011      	movs	r1, r2
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f000 f817 	bl	8000d4c <_ZN13MCP4023Driver10UpdateStepEh>
	}
	return HAL_OK;
 8000d1e:	2300      	movs	r3, #0
}
 8000d20:	0018      	movs	r0, r3
 8000d22:	46bd      	mov	sp, r7
 8000d24:	b002      	add	sp, #8
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <_ZN13MCP4023Driver8SetWiperEh>:

void MCP4023Driver::SetWiper(uint8_t wiper)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	000a      	movs	r2, r1
 8000d32:	1cfb      	adds	r3, r7, #3
 8000d34:	701a      	strb	r2, [r3, #0]
	assert_param(wiper >= 0 && wiper < StepCount);
	this->UpdateStep(wiper);
 8000d36:	1cfb      	adds	r3, r7, #3
 8000d38:	781a      	ldrb	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	0011      	movs	r1, r2
 8000d3e:	0018      	movs	r0, r3
 8000d40:	f000 f804 	bl	8000d4c <_ZN13MCP4023Driver10UpdateStepEh>
}
 8000d44:	46c0      	nop			@ (mov r8, r8)
 8000d46:	46bd      	mov	sp, r7
 8000d48:	b002      	add	sp, #8
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <_ZN13MCP4023Driver10UpdateStepEh>:
		UpdateStep(((resKOhms / this->kOhms) * 1000) * StepCount);
	}
}

void MCP4023Driver::UpdateStep(uint8_t step)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	000a      	movs	r2, r1
 8000d56:	1cfb      	adds	r3, r7, #3
 8000d58:	701a      	strb	r2, [r3, #0]
	if (step < this->step)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	7c1b      	ldrb	r3, [r3, #16]
 8000d5e:	1cfa      	adds	r2, r7, #3
 8000d60:	7812      	ldrb	r2, [r2, #0]
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d220      	bcs.n	8000da8 <_ZN13MCP4023Driver10UpdateStepEh+0x5c>
	{
		this->udPin.Write(false);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	331c      	adds	r3, #28
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f7ff ff4c 	bl	8000c0a <_ZN3Pin5WriteEb>
		HAL_Delay(1);
 8000d72:	2001      	movs	r0, #1
 8000d74:	f002 fe92 	bl	8003a9c <HAL_Delay>
		this->csPin.Write(true);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3328      	adds	r3, #40	@ 0x28
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	0018      	movs	r0, r3
 8000d80:	f7ff ff43 	bl	8000c0a <_ZN3Pin5WriteEb>
		while (this->step > step)
 8000d84:	e009      	b.n	8000d9a <_ZN13MCP4023Driver10UpdateStepEh+0x4e>
		{
			this->StepDown();
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	0018      	movs	r0, r3
 8000d8a:	f000 f858 	bl	8000e3e <_ZN13MCP4023Driver8StepDownEv>
			this->step--;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	7c1b      	ldrb	r3, [r3, #16]
 8000d92:	3b01      	subs	r3, #1
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	741a      	strb	r2, [r3, #16]
		while (this->step > step)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	7c1b      	ldrb	r3, [r3, #16]
 8000d9e:	1cfa      	adds	r2, r7, #3
 8000da0:	7812      	ldrb	r2, [r2, #0]
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d3ef      	bcc.n	8000d86 <_ZN13MCP4023Driver10UpdateStepEh+0x3a>
 8000da6:	e025      	b.n	8000df4 <_ZN13MCP4023Driver10UpdateStepEh+0xa8>
		}
	}
	else if (step > this->step)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	7c1b      	ldrb	r3, [r3, #16]
 8000dac:	1cfa      	adds	r2, r7, #3
 8000dae:	7812      	ldrb	r2, [r2, #0]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d926      	bls.n	8000e02 <_ZN13MCP4023Driver10UpdateStepEh+0xb6>
	{
		this->udPin.Write(true);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	331c      	adds	r3, #28
 8000db8:	2101      	movs	r1, #1
 8000dba:	0018      	movs	r0, r3
 8000dbc:	f7ff ff25 	bl	8000c0a <_ZN3Pin5WriteEb>
		HAL_Delay(1);
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	f002 fe6b 	bl	8003a9c <HAL_Delay>
		this->csPin.Write(true);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	3328      	adds	r3, #40	@ 0x28
 8000dca:	2101      	movs	r1, #1
 8000dcc:	0018      	movs	r0, r3
 8000dce:	f7ff ff1c 	bl	8000c0a <_ZN3Pin5WriteEb>
		while (this->step < step)
 8000dd2:	e009      	b.n	8000de8 <_ZN13MCP4023Driver10UpdateStepEh+0x9c>
		{
			this->StepUp();
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f000 f817 	bl	8000e0a <_ZN13MCP4023Driver6StepUpEv>
			this->step++;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	7c1b      	ldrb	r3, [r3, #16]
 8000de0:	3301      	adds	r3, #1
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	741a      	strb	r2, [r3, #16]
		while (this->step < step)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	7c1b      	ldrb	r3, [r3, #16]
 8000dec:	1cfa      	adds	r2, r7, #3
 8000dee:	7812      	ldrb	r2, [r2, #0]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d8ef      	bhi.n	8000dd4 <_ZN13MCP4023Driver10UpdateStepEh+0x88>
	}
	else
	{
		return;
	}
	this->csPin.Write(false);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3328      	adds	r3, #40	@ 0x28
 8000df8:	2100      	movs	r1, #0
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f7ff ff05 	bl	8000c0a <_ZN3Pin5WriteEb>
 8000e00:	e000      	b.n	8000e04 <_ZN13MCP4023Driver10UpdateStepEh+0xb8>
		return;
 8000e02:	46c0      	nop			@ (mov r8, r8)
}
 8000e04:	46bd      	mov	sp, r7
 8000e06:	b002      	add	sp, #8
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <_ZN13MCP4023Driver6StepUpEv>:

void MCP4023Driver::StepUp()
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b082      	sub	sp, #8
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
	this->udPin.Write(true);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	331c      	adds	r3, #28
 8000e16:	2101      	movs	r1, #1
 8000e18:	0018      	movs	r0, r3
 8000e1a:	f7ff fef6 	bl	8000c0a <_ZN3Pin5WriteEb>
	HAL_Delay(1);
 8000e1e:	2001      	movs	r0, #1
 8000e20:	f002 fe3c 	bl	8003a9c <HAL_Delay>
	this->udPin.Write(false);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	331c      	adds	r3, #28
 8000e28:	2100      	movs	r1, #0
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	f7ff feed 	bl	8000c0a <_ZN3Pin5WriteEb>
	HAL_Delay(1);
 8000e30:	2001      	movs	r0, #1
 8000e32:	f002 fe33 	bl	8003a9c <HAL_Delay>
}
 8000e36:	46c0      	nop			@ (mov r8, r8)
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	b002      	add	sp, #8
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <_ZN13MCP4023Driver8StepDownEv>:

void MCP4023Driver::StepDown()
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b082      	sub	sp, #8
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
	this->udPin.Write(false);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	331c      	adds	r3, #28
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f7ff fedc 	bl	8000c0a <_ZN3Pin5WriteEb>
	HAL_Delay(1);
 8000e52:	2001      	movs	r0, #1
 8000e54:	f002 fe22 	bl	8003a9c <HAL_Delay>
	this->udPin.Write(true);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	331c      	adds	r3, #28
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	0018      	movs	r0, r3
 8000e60:	f7ff fed3 	bl	8000c0a <_ZN3Pin5WriteEb>
	HAL_Delay(1);
 8000e64:	2001      	movs	r0, #1
 8000e66:	f002 fe19 	bl	8003a9c <HAL_Delay>
}
 8000e6a:	46c0      	nop			@ (mov r8, r8)
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	b002      	add	sp, #8
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <_ZN3PinC1EP12GPIO_TypeDeft>:
	Pin(GPIO_TypeDef* port, uint16_t pin)
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b084      	sub	sp, #16
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	60f8      	str	r0, [r7, #12]
 8000e7a:	60b9      	str	r1, [r7, #8]
 8000e7c:	1dbb      	adds	r3, r7, #6
 8000e7e:	801a      	strh	r2, [r3, #0]
	{
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	2201      	movs	r2, #1
 8000e84:	721a      	strb	r2, [r3, #8]
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	2201      	movs	r2, #1
 8000e8a:	725a      	strb	r2, [r3, #9]
		this->port = port;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	68ba      	ldr	r2, [r7, #8]
 8000e90:	601a      	str	r2, [r3, #0]
		this->pin = pin;
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	1dba      	adds	r2, r7, #6
 8000e96:	8812      	ldrh	r2, [r2, #0]
 8000e98:	809a      	strh	r2, [r3, #4]
		this->defaultState = ACTIVE_HIGH;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	719a      	strb	r2, [r3, #6]
	};
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	b004      	add	sp, #16
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <_ZN3PinC1EP12GPIO_TypeDeftb>:
	Pin(GPIO_TypeDef* port, uint16_t pin, bool isOutput)
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b084      	sub	sp, #16
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	60f8      	str	r0, [r7, #12]
 8000eb2:	60b9      	str	r1, [r7, #8]
 8000eb4:	0019      	movs	r1, r3
 8000eb6:	1dbb      	adds	r3, r7, #6
 8000eb8:	801a      	strh	r2, [r3, #0]
 8000eba:	1d7b      	adds	r3, r7, #5
 8000ebc:	1c0a      	adds	r2, r1, #0
 8000ebe:	701a      	strb	r2, [r3, #0]
	{
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	721a      	strb	r2, [r3, #8]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	2201      	movs	r2, #1
 8000eca:	725a      	strb	r2, [r3, #9]
		this->port = port;
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	68ba      	ldr	r2, [r7, #8]
 8000ed0:	601a      	str	r2, [r3, #0]
		this->pin = pin;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	1dba      	adds	r2, r7, #6
 8000ed6:	8812      	ldrh	r2, [r2, #0]
 8000ed8:	809a      	strh	r2, [r3, #4]
		this->defaultState = ACTIVE_LOW; // I usually use an active low switch setup.
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	2201      	movs	r2, #1
 8000ede:	719a      	strb	r2, [r3, #6]
		this->isOutput = isOutput;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	1d7a      	adds	r2, r7, #5
 8000ee4:	7812      	ldrb	r2, [r2, #0]
 8000ee6:	721a      	strb	r2, [r3, #8]
	};
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	0018      	movs	r0, r3
 8000eec:	46bd      	mov	sp, r7
 8000eee:	b004      	add	sp, #16
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_State>:
	Pin(GPIO_TypeDef* port, uint16_t pin, GPIO_Default_State defaultState)
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b084      	sub	sp, #16
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	60f8      	str	r0, [r7, #12]
 8000efa:	60b9      	str	r1, [r7, #8]
 8000efc:	0019      	movs	r1, r3
 8000efe:	1dbb      	adds	r3, r7, #6
 8000f00:	801a      	strh	r2, [r3, #0]
 8000f02:	1d7b      	adds	r3, r7, #5
 8000f04:	1c0a      	adds	r2, r1, #0
 8000f06:	701a      	strb	r2, [r3, #0]
	{
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	721a      	strb	r2, [r3, #8]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	2201      	movs	r2, #1
 8000f12:	725a      	strb	r2, [r3, #9]
		this->port = port;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	68ba      	ldr	r2, [r7, #8]
 8000f18:	601a      	str	r2, [r3, #0]
		this->pin = pin;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	1dba      	adds	r2, r7, #6
 8000f1e:	8812      	ldrh	r2, [r2, #0]
 8000f20:	809a      	strh	r2, [r3, #4]
		this->defaultState = defaultState;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	1d7a      	adds	r2, r7, #5
 8000f26:	7812      	ldrb	r2, [r2, #0]
 8000f28:	719a      	strb	r2, [r3, #6]
		this->isOutput = true;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	721a      	strb	r2, [r3, #8]
	};
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	0018      	movs	r0, r3
 8000f34:	46bd      	mov	sp, r7
 8000f36:	b004      	add	sp, #16
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_Stateb>:
	Pin(GPIO_TypeDef* port, uint16_t pin, GPIO_Default_State defaultState, bool isOutput)
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b084      	sub	sp, #16
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	60f8      	str	r0, [r7, #12]
 8000f42:	60b9      	str	r1, [r7, #8]
 8000f44:	0019      	movs	r1, r3
 8000f46:	1dbb      	adds	r3, r7, #6
 8000f48:	801a      	strh	r2, [r3, #0]
 8000f4a:	1d7b      	adds	r3, r7, #5
 8000f4c:	1c0a      	adds	r2, r1, #0
 8000f4e:	701a      	strb	r2, [r3, #0]
	{
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	2201      	movs	r2, #1
 8000f54:	721a      	strb	r2, [r3, #8]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	2201      	movs	r2, #1
 8000f5a:	725a      	strb	r2, [r3, #9]
		this->port = port;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	68ba      	ldr	r2, [r7, #8]
 8000f60:	601a      	str	r2, [r3, #0]
		this->pin = pin;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	1dba      	adds	r2, r7, #6
 8000f66:	8812      	ldrh	r2, [r2, #0]
 8000f68:	809a      	strh	r2, [r3, #4]
		this->defaultState = defaultState;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	1d7a      	adds	r2, r7, #5
 8000f6e:	7812      	ldrb	r2, [r2, #0]
 8000f70:	719a      	strb	r2, [r3, #6]
		this->isOutput = isOutput;
 8000f72:	68fa      	ldr	r2, [r7, #12]
 8000f74:	2318      	movs	r3, #24
 8000f76:	18fb      	adds	r3, r7, r3
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	7213      	strb	r3, [r2, #8]
	};
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	0018      	movs	r0, r3
 8000f80:	46bd      	mov	sp, r7
 8000f82:	b004      	add	sp, #16
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <_ZN3Pin6ToggleEv>:
	void Toggle() {
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
		if (this->enable && this->isOutput)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	7a5b      	ldrb	r3, [r3, #9]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d013      	beq.n	8000fbe <_ZN3Pin6ToggleEv+0x38>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	7a1b      	ldrb	r3, [r3, #8]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d00f      	beq.n	8000fbe <_ZN3Pin6ToggleEv+0x38>
			HAL_GPIO_TogglePin(this->port, this->pin);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	889b      	ldrh	r3, [r3, #4]
 8000fa6:	0019      	movs	r1, r3
 8000fa8:	0010      	movs	r0, r2
 8000faa:	f003 fad7 	bl	800455c <HAL_GPIO_TogglePin>
			this->state = (GPIO_PinState)!this->state;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	79db      	ldrb	r3, [r3, #7]
 8000fb2:	425a      	negs	r2, r3
 8000fb4:	4153      	adcs	r3, r2
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	001a      	movs	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	71da      	strb	r2, [r3, #7]
	};
 8000fbe:	46c0      	nop			@ (mov r8, r8)
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	b002      	add	sp, #8
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <_ZN3Pin6EnableEb>:
	void Enable(bool en) {
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
 8000fce:	000a      	movs	r2, r1
 8000fd0:	1cfb      	adds	r3, r7, #3
 8000fd2:	701a      	strb	r2, [r3, #0]
		this->enable = en;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	1cfa      	adds	r2, r7, #3
 8000fd8:	7812      	ldrb	r2, [r2, #0]
 8000fda:	725a      	strb	r2, [r3, #9]
	}
 8000fdc:	46c0      	nop			@ (mov r8, r8)
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	b002      	add	sp, #8
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <_ZN6PWMPinC1Ev>:
	PWMPin() {};
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	0018      	movs	r0, r3
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	b002      	add	sp, #8
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <_ZN6PWMPinC1EP17TIM_HandleTypeDefm>:
	PWMPin(TIM_HandleTypeDef *htim, uint32_t ch) {
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b084      	sub	sp, #16
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	60f8      	str	r0, [r7, #12]
 8000ffe:	60b9      	str	r1, [r7, #8]
 8001000:	607a      	str	r2, [r7, #4]
		this->htim = htim;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	68ba      	ldr	r2, [r7, #8]
 8001006:	601a      	str	r2, [r3, #0]
		this->ch = ch;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	605a      	str	r2, [r3, #4]
	}
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	0018      	movs	r0, r3
 8001012:	46bd      	mov	sp, r7
 8001014:	b004      	add	sp, #16
 8001016:	bd80      	pop	{r7, pc}

08001018 <_ZN6PWMPin4InitEv>:
	HAL_StatusTypeDef Init() {
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
		return HAL_TIM_PWM_Start(this->htim, this->ch);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	0019      	movs	r1, r3
 800102a:	0010      	movs	r0, r2
 800102c:	f006 fb14 	bl	8007658 <HAL_TIM_PWM_Start>
 8001030:	0003      	movs	r3, r0
	}
 8001032:	0018      	movs	r0, r3
 8001034:	46bd      	mov	sp, r7
 8001036:	b002      	add	sp, #8
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <_ZN13MCP4023DriverC1Ev>:
 *
 */
class MCP4023Driver
{
public:
	MCP4023Driver() { };
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	4a0f      	ldr	r2, [pc, #60]	@ (8001084 <_ZN13MCP4023DriverC1Ev+0x48>)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	2200      	movs	r2, #0
 800104e:	2300      	movs	r3, #0
 8001050:	608a      	str	r2, [r1, #8]
 8001052:	60cb      	str	r3, [r1, #12]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	221f      	movs	r2, #31
 8001058:	741a      	strb	r2, [r3, #16]
 800105a:	4a0b      	ldr	r2, [pc, #44]	@ (8001088 <_ZN13MCP4023DriverC1Ev+0x4c>)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	615a      	str	r2, [r3, #20]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	221f      	movs	r2, #31
 8001064:	761a      	strb	r2, [r3, #24]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	331c      	adds	r3, #28
 800106a:	0018      	movs	r0, r3
 800106c:	f7ff f8d8 	bl	8000220 <_ZN3PinC1Ev>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3328      	adds	r3, #40	@ 0x28
 8001074:	0018      	movs	r0, r3
 8001076:	f7ff f8d3 	bl	8000220 <_ZN3PinC1Ev>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	0018      	movs	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	b002      	add	sp, #8
 8001082:	bd80      	pop	{r7, pc}
 8001084:	0800dea8 	.word	0x0800dea8
 8001088:	41200000 	.word	0x41200000

0800108c <_ZN8STP_PinsC1Ev>:
} STP_PWM_Pin;

typedef struct {
	Pin lePin;
	STP_PWM_Pin oePin;
} STP_Pins;
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	0018      	movs	r0, r3
 8001098:	f7ff f8c2 	bl	8000220 <_ZN3PinC1Ev>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	0018      	movs	r0, r3
 80010a0:	46bd      	mov	sp, r7
 80010a2:	b002      	add	sp, #8
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <_ZN12STPLEDDriverC1Ev>:
 *
 */
class STPLEDDriver
{
public:
	STPLEDDriver() { };
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	4a07      	ldr	r2, [pc, #28]	@ (80010d0 <_ZN12STPLEDDriverC1Ev+0x28>)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a06      	ldr	r2, [pc, #24]	@ (80010d4 <_ZN12STPLEDDriverC1Ev+0x2c>)
 80010ba:	819a      	strh	r2, [r3, #12]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3310      	adds	r3, #16
 80010c0:	0018      	movs	r0, r3
 80010c2:	f7ff ffe3 	bl	800108c <_ZN8STP_PinsC1Ev>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	0018      	movs	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	b002      	add	sp, #8
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	0800dec8 	.word	0x0800dec8
 80010d4:	00007fff 	.word	0x00007fff

080010d8 <_ZN13ButtonManagerC1Ev>:
 *
 */
class ButtonManager
{
public:
	ButtonManager() { };
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	4a08      	ldr	r2, [pc, #32]	@ (8001104 <_ZN13ButtonManagerC1Ev+0x2c>)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	3304      	adds	r3, #4
 80010ea:	0018      	movs	r0, r3
 80010ec:	f7ff f8ee 	bl	80002cc <_ZN10ButtonPinsC1Ev>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	22e4      	movs	r2, #228	@ 0xe4
 80010f4:	2100      	movs	r1, #0
 80010f6:	5099      	str	r1, [r3, r2]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	0018      	movs	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	b002      	add	sp, #8
 8001100:	bd80      	pop	{r7, pc}
 8001102:	46c0      	nop			@ (mov r8, r8)
 8001104:	0800de68 	.word	0x0800de68

08001108 <_ZN16IndicatorManagerC1Ev>:
 *
 */
class IndicatorManager
{
public:
	IndicatorManager() { };
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	4a05      	ldr	r2, [pc, #20]	@ (8001128 <_ZN16IndicatorManagerC1Ev+0x20>)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a04      	ldr	r2, [pc, #16]	@ (800112c <_ZN16IndicatorManagerC1Ev+0x24>)
 800111a:	825a      	strh	r2, [r3, #18]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	0018      	movs	r0, r3
 8001120:	46bd      	mov	sp, r7
 8001122:	b002      	add	sp, #8
 8001124:	bd80      	pop	{r7, pc}
 8001126:	46c0      	nop			@ (mov r8, r8)
 8001128:	0800de88 	.word	0x0800de88
 800112c:	00007fff 	.word	0x00007fff

08001130 <_ZN13RotaryEncoderC1Ev>:
	RotaryEncoder() { };
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	4a09      	ldr	r2, [pc, #36]	@ (8001160 <_ZN13RotaryEncoderC1Ev+0x30>)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2201      	movs	r2, #1
 8001142:	735a      	strb	r2, [r3, #13]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2200      	movs	r2, #0
 8001148:	739a      	strb	r2, [r3, #14]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	73da      	strb	r2, [r3, #15]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	741a      	strb	r2, [r3, #16]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	0018      	movs	r0, r3
 800115a:	46bd      	mov	sp, r7
 800115c:	b002      	add	sp, #8
 800115e:	bd80      	pop	{r7, pc}
 8001160:	0800deb8 	.word	0x0800deb8

08001164 <_ZN14EncoderManagerC1Ev>:
 *
 */
class EncoderManager
{
public:
	EncoderManager() { };
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	4a06      	ldr	r2, [pc, #24]	@ (8001188 <_ZN14EncoderManagerC1Ev+0x24>)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2200      	movs	r2, #0
 8001176:	761a      	strb	r2, [r3, #24]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2200      	movs	r2, #0
 800117c:	765a      	strb	r2, [r3, #25]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	0018      	movs	r0, r3
 8001182:	46bd      	mov	sp, r7
 8001184:	b002      	add	sp, #8
 8001186:	bd80      	pop	{r7, pc}
 8001188:	0800de78 	.word	0x0800de78

0800118c <_ZN7OptionsC1Ev>:
	uint16_t byte;
} OptionStatesUnion;

struct Options {
public:
	Options() { };
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	0018      	movs	r0, r3
 8001198:	46bd      	mov	sp, r7
 800119a:	b002      	add	sp, #8
 800119c:	bd80      	pop	{r7, pc}

0800119e <_ZN7OptionsC1EP17OptionStatesUnion>:
	Options(OptionStatesUnion *states) { this->states = states;                 };
 800119e:	b580      	push	{r7, lr}
 80011a0:	b082      	sub	sp, #8
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
 80011a6:	6039      	str	r1, [r7, #0]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	683a      	ldr	r2, [r7, #0]
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	0018      	movs	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	b002      	add	sp, #8
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <_ZN10UsbManagerC1Ev>:
 *
 */
class UsbManager
{
public:
	UsbManager() { };
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	4a07      	ldr	r2, [pc, #28]	@ (80011e0 <_ZN10UsbManagerC1Ev+0x28>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2224      	movs	r2, #36	@ 0x24
 80011ca:	2100      	movs	r1, #0
 80011cc:	5499      	strb	r1, [r3, r2]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2225      	movs	r2, #37	@ 0x25
 80011d2:	2100      	movs	r1, #0
 80011d4:	5499      	strb	r1, [r3, r2]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	0018      	movs	r0, r3
 80011da:	46bd      	mov	sp, r7
 80011dc:	b002      	add	sp, #8
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	0800df24 	.word	0x0800df24

080011e4 <EncInterruptCallback>:
static void InitEncoders();
static void InitAuxIO();
static void HandleOptionsCallback(OptionStatesUnion *options);

void EncInterruptCallback(uint16_t pinNumber)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	0002      	movs	r2, r0
 80011ec:	1dbb      	adds	r3, r7, #6
 80011ee:	801a      	strh	r2, [r3, #0]
	switch (pinNumber) {
 80011f0:	1dbb      	adds	r3, r7, #6
 80011f2:	881b      	ldrh	r3, [r3, #0]
 80011f4:	2280      	movs	r2, #128	@ 0x80
 80011f6:	0212      	lsls	r2, r2, #8
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d018      	beq.n	800122e <EncInterruptCallback+0x4a>
 80011fc:	2280      	movs	r2, #128	@ 0x80
 80011fe:	0212      	lsls	r2, r2, #8
 8001200:	4293      	cmp	r3, r2
 8001202:	dc2d      	bgt.n	8001260 <EncInterruptCallback+0x7c>
 8001204:	2280      	movs	r2, #128	@ 0x80
 8001206:	01d2      	lsls	r2, r2, #7
 8001208:	4293      	cmp	r3, r2
 800120a:	d01f      	beq.n	800124c <EncInterruptCallback+0x68>
 800120c:	2280      	movs	r2, #128	@ 0x80
 800120e:	01d2      	lsls	r2, r2, #7
 8001210:	4293      	cmp	r3, r2
 8001212:	dc25      	bgt.n	8001260 <EncInterruptCallback+0x7c>
 8001214:	2280      	movs	r2, #128	@ 0x80
 8001216:	0112      	lsls	r2, r2, #4
 8001218:	4293      	cmp	r3, r2
 800121a:	d00d      	beq.n	8001238 <EncInterruptCallback+0x54>
 800121c:	2280      	movs	r2, #128	@ 0x80
 800121e:	0112      	lsls	r2, r2, #4
 8001220:	4293      	cmp	r3, r2
 8001222:	dc1d      	bgt.n	8001260 <EncInterruptCallback+0x7c>
 8001224:	2b04      	cmp	r3, #4
 8001226:	d016      	beq.n	8001256 <EncInterruptCallback+0x72>
 8001228:	2b40      	cmp	r3, #64	@ 0x40
 800122a:	d00a      	beq.n	8001242 <EncInterruptCallback+0x5e>
			break;
		case WHEEL_A_Pin:
			whlEncoder.OnInterrupt();
			break;
		default:
			break;
 800122c:	e018      	b.n	8001260 <EncInterruptCallback+0x7c>
			crs1Encoder.OnInterrupt();
 800122e:	4b0f      	ldr	r3, [pc, #60]	@ (800126c <EncInterruptCallback+0x88>)
 8001230:	0018      	movs	r0, r3
 8001232:	f001 f92f 	bl	8002494 <_ZN13RotaryEncoder11OnInterruptEv>
			break;
 8001236:	e014      	b.n	8001262 <EncInterruptCallback+0x7e>
			crs2Encoder.OnInterrupt();
 8001238:	4b0d      	ldr	r3, [pc, #52]	@ (8001270 <EncInterruptCallback+0x8c>)
 800123a:	0018      	movs	r0, r3
 800123c:	f001 f92a 	bl	8002494 <_ZN13RotaryEncoder11OnInterruptEv>
			break;
 8001240:	e00f      	b.n	8001262 <EncInterruptCallback+0x7e>
			hdgEncoder.OnInterrupt();
 8001242:	4b0c      	ldr	r3, [pc, #48]	@ (8001274 <EncInterruptCallback+0x90>)
 8001244:	0018      	movs	r0, r3
 8001246:	f001 f925 	bl	8002494 <_ZN13RotaryEncoder11OnInterruptEv>
			break;
 800124a:	e00a      	b.n	8001262 <EncInterruptCallback+0x7e>
			altEncoder.OnInterrupt();
 800124c:	4b0a      	ldr	r3, [pc, #40]	@ (8001278 <EncInterruptCallback+0x94>)
 800124e:	0018      	movs	r0, r3
 8001250:	f001 f920 	bl	8002494 <_ZN13RotaryEncoder11OnInterruptEv>
			break;
 8001254:	e005      	b.n	8001262 <EncInterruptCallback+0x7e>
			whlEncoder.OnInterrupt();
 8001256:	4b09      	ldr	r3, [pc, #36]	@ (800127c <EncInterruptCallback+0x98>)
 8001258:	0018      	movs	r0, r3
 800125a:	f001 f91b 	bl	8002494 <_ZN13RotaryEncoder11OnInterruptEv>
			break;
 800125e:	e000      	b.n	8001262 <EncInterruptCallback+0x7e>
			break;
 8001260:	46c0      	nop			@ (mov r8, r8)
	}
}
 8001262:	46c0      	nop			@ (mov r8, r8)
 8001264:	46bd      	mov	sp, r7
 8001266:	b002      	add	sp, #8
 8001268:	bd80      	pop	{r7, pc}
 800126a:	46c0      	nop			@ (mov r8, r8)
 800126c:	20000598 	.word	0x20000598
 8001270:	200005ac 	.word	0x200005ac
 8001274:	2000055c 	.word	0x2000055c
 8001278:	20000570 	.word	0x20000570
 800127c:	20000584 	.word	0x20000584

08001280 <_Z18UsbReceiveCallbackPhPm>:

void UsbReceiveCallback(uint8_t *buffer, uint32_t *len)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
	// Ive simplified like mad. Its all done through the basic virtual COM port.
	// In the future, i want to convert it over to either a HID device or some kind of
	// custom interface. Possibly with a custom driver.
	usbManager.UsbReceivedCallback(buffer, len);
 800128a:	683a      	ldr	r2, [r7, #0]
 800128c:	6879      	ldr	r1, [r7, #4]
 800128e:	4b04      	ldr	r3, [pc, #16]	@ (80012a0 <_Z18UsbReceiveCallbackPhPm+0x20>)
 8001290:	0018      	movs	r0, r3
 8001292:	f001 fb2f 	bl	80028f4 <_ZN10UsbManager19UsbReceivedCallbackEPhPm>
}
 8001296:	46c0      	nop			@ (mov r8, r8)
 8001298:	46bd      	mov	sp, r7
 800129a:	b002      	add	sp, #8
 800129c:	bd80      	pop	{r7, pc}
 800129e:	46c0      	nop			@ (mov r8, r8)
 80012a0:	20000204 	.word	0x20000204

080012a4 <TimerElapsedCallback>:

void TimerElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	if (htim == h_stream_tim) {
 80012ac:	4b06      	ldr	r3, [pc, #24]	@ (80012c8 <TimerElapsedCallback+0x24>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d103      	bne.n	80012be <TimerElapsedCallback+0x1a>
		usbManager.StreamDataCallback();
 80012b6:	4b05      	ldr	r3, [pc, #20]	@ (80012cc <TimerElapsedCallback+0x28>)
 80012b8:	0018      	movs	r0, r3
 80012ba:	f001 fb56 	bl	800296a <_ZN10UsbManager18StreamDataCallbackEv>
	}
}
 80012be:	46c0      	nop			@ (mov r8, r8)
 80012c0:	46bd      	mov	sp, r7
 80012c2:	b002      	add	sp, #8
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	46c0      	nop			@ (mov r8, r8)
 80012c8:	20000240 	.word	0x20000240
 80012cc:	20000204 	.word	0x20000204

080012d0 <_ZN10UsbManageraSERKS_>:
class UsbManager
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685a      	ldr	r2, [r3, #4]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	689a      	ldr	r2, [r3, #8]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	68da      	ldr	r2, [r3, #12]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	691a      	ldr	r2, [r3, #16]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	611a      	str	r2, [r3, #16]
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	7d1a      	ldrb	r2, [r3, #20]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	751a      	strb	r2, [r3, #20]
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	699a      	ldr	r2, [r3, #24]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	619a      	str	r2, [r3, #24]
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	69da      	ldr	r2, [r3, #28]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	61da      	str	r2, [r3, #28]
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	6a1a      	ldr	r2, [r3, #32]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	621a      	str	r2, [r3, #32]
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	2224      	movs	r2, #36	@ 0x24
 800131e:	5c99      	ldrb	r1, [r3, r2]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2224      	movs	r2, #36	@ 0x24
 8001324:	5499      	strb	r1, [r3, r2]
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	2225      	movs	r2, #37	@ 0x25
 800132a:	5c99      	ldrb	r1, [r3, r2]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2225      	movs	r2, #37	@ 0x25
 8001330:	5499      	strb	r1, [r3, r2]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	683a      	ldr	r2, [r7, #0]
 8001336:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 8001338:	84da      	strh	r2, [r3, #38]	@ 0x26
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	629a      	str	r2, [r3, #40]	@ 0x28
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	62da      	str	r2, [r3, #44]	@ 0x2c
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	0018      	movs	r0, r3
 800134e:	46bd      	mov	sp, r7
 8001350:	b002      	add	sp, #8
 8001352:	bd80      	pop	{r7, pc}

08001354 <Init>:
		SPI_HandleTypeDef  *hspi1,
		TIM_HandleTypeDef  *htim15,
		UART_HandleTypeDef *huart3,
		TIM_HandleTypeDef  *htim7
	)
{
 8001354:	b5b0      	push	{r4, r5, r7, lr}
 8001356:	b096      	sub	sp, #88	@ 0x58
 8001358:	af04      	add	r7, sp, #16
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
 8001360:	603b      	str	r3, [r7, #0]
	h_adc        = hadc;
 8001362:	4b31      	ldr	r3, [pc, #196]	@ (8001428 <Init+0xd4>)
 8001364:	68fa      	ldr	r2, [r7, #12]
 8001366:	601a      	str	r2, [r3, #0]
	h_spi        = hspi1;
 8001368:	4b30      	ldr	r3, [pc, #192]	@ (800142c <Init+0xd8>)
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	601a      	str	r2, [r3, #0]
	h_brgt_tim   = htim15;
 800136e:	4b30      	ldr	r3, [pc, #192]	@ (8001430 <Init+0xdc>)
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	601a      	str	r2, [r3, #0]
	h_serial     = huart3;
 8001374:	4b2f      	ldr	r3, [pc, #188]	@ (8001434 <Init+0xe0>)
 8001376:	683a      	ldr	r2, [r7, #0]
 8001378:	601a      	str	r2, [r3, #0]
	h_stream_tim = htim7;
 800137a:	4b2f      	ldr	r3, [pc, #188]	@ (8001438 <Init+0xe4>)
 800137c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800137e:	601a      	str	r2, [r3, #0]

	options = Options(&optionStates);
 8001380:	4a2e      	ldr	r2, [pc, #184]	@ (800143c <Init+0xe8>)
 8001382:	2314      	movs	r3, #20
 8001384:	18fb      	adds	r3, r7, r3
 8001386:	0011      	movs	r1, r2
 8001388:	0018      	movs	r0, r3
 800138a:	f7ff ff08 	bl	800119e <_ZN7OptionsC1EP17OptionStatesUnion>
 800138e:	4b2c      	ldr	r3, [pc, #176]	@ (8001440 <Init+0xec>)
 8001390:	697a      	ldr	r2, [r7, #20]
 8001392:	601a      	str	r2, [r3, #0]

	InitAuxIO();
 8001394:	f000 fe1e 	bl	8001fd4 <_ZL9InitAuxIOv>

	InitControlPins();
 8001398:	f000 fb28 	bl	80019ec <_ZL15InitControlPinsv>

	InitEncoders();
 800139c:	f000 fcd8 	bl	8001d50 <_ZL12InitEncodersv>

	InitButtons();
 80013a0:	f000 f8a6 	bl	80014f0 <_ZL11InitButtonsv>

	InitIndicators();
 80013a4:	f000 fbd0 	bl	8001b48 <_ZL14InitIndicatorsv>

	usbManager = UsbManager(
 80013a8:	4b23      	ldr	r3, [pc, #140]	@ (8001438 <Init+0xe4>)
 80013aa:	6819      	ldr	r1, [r3, #0]
 80013ac:	4c25      	ldr	r4, [pc, #148]	@ (8001444 <Init+0xf0>)
 80013ae:	4a26      	ldr	r2, [pc, #152]	@ (8001448 <Init+0xf4>)
 80013b0:	2518      	movs	r5, #24
 80013b2:	1978      	adds	r0, r7, r5
 80013b4:	4b25      	ldr	r3, [pc, #148]	@ (800144c <Init+0xf8>)
 80013b6:	9302      	str	r3, [sp, #8]
 80013b8:	4b25      	ldr	r3, [pc, #148]	@ (8001450 <Init+0xfc>)
 80013ba:	9301      	str	r3, [sp, #4]
 80013bc:	4b25      	ldr	r3, [pc, #148]	@ (8001454 <Init+0x100>)
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	0023      	movs	r3, r4
 80013c2:	f001 fa19 	bl	80027f8 <_ZN10UsbManagerC1EP17TIM_HandleTypeDefP11StatusUnionP13ButtonManagerP16IndicatorManagerP14EncoderManagerPFvP17OptionStatesUnionE>
			&status,
			&btnManager,
			&indManager,
			&encManager,
			HandleOptionsCallback
		);
 80013c6:	197a      	adds	r2, r7, r5
 80013c8:	4b23      	ldr	r3, [pc, #140]	@ (8001458 <Init+0x104>)
 80013ca:	0011      	movs	r1, r2
 80013cc:	0018      	movs	r0, r3
 80013ce:	f7ff ff7f 	bl	80012d0 <_ZN10UsbManageraSERKS_>
	usbManager = UsbManager(
 80013d2:	197b      	adds	r3, r7, r5
 80013d4:	0018      	movs	r0, r3
 80013d6:	f001 fa5b 	bl	8002890 <_ZN10UsbManagerD1Ev>

	RegisterUSBReceiveCallback(UsbReceiveCallback);
 80013da:	4b20      	ldr	r3, [pc, #128]	@ (800145c <Init+0x108>)
 80013dc:	0018      	movs	r0, r3
 80013de:	f00b fdbf 	bl	800cf60 <RegisterUSBReceiveCallback>

	if (indDriver.Init() != HAL_OK) {
 80013e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001460 <Init+0x10c>)
 80013e4:	0018      	movs	r0, r3
 80013e6:	f001 f91b 	bl	8002620 <_ZN12STPLEDDriver4InitEv>
 80013ea:	0003      	movs	r3, r0
 80013ec:	1e5a      	subs	r2, r3, #1
 80013ee:	4193      	sbcs	r3, r2
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <Init+0xa6>
		return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e011      	b.n	800141e <Init+0xca>
	}

	indDriver.SetBrightness(UINT16_MAX);
 80013fa:	4a1a      	ldr	r2, [pc, #104]	@ (8001464 <Init+0x110>)
 80013fc:	4b18      	ldr	r3, [pc, #96]	@ (8001460 <Init+0x10c>)
 80013fe:	0011      	movs	r1, r2
 8001400:	0018      	movs	r0, r3
 8001402:	f001 f95d 	bl	80026c0 <_ZN12STPLEDDriver13SetBrightnessEt>
	indManager.SetBacklight(0);
 8001406:	4b13      	ldr	r3, [pc, #76]	@ (8001454 <Init+0x100>)
 8001408:	2100      	movs	r1, #0
 800140a:	0018      	movs	r0, r3
 800140c:	f7ff fb9f 	bl	8000b4e <_ZN16IndicatorManager12SetBacklightEt>

	HandleOptionsCallback(&(status.obj.options));
 8001410:	4b15      	ldr	r3, [pc, #84]	@ (8001468 <Init+0x114>)
 8001412:	0018      	movs	r0, r3
 8001414:	f000 fdba 	bl	8001f8c <_ZL21HandleOptionsCallbackP17OptionStatesUnion>

	StartupTest();
 8001418:	f000 fe06 	bl	8002028 <_ZL11StartupTestv>

	return HAL_OK;
 800141c:	2300      	movs	r3, #0
}
 800141e:	0018      	movs	r0, r3
 8001420:	46bd      	mov	sp, r7
 8001422:	b012      	add	sp, #72	@ 0x48
 8001424:	bdb0      	pop	{r4, r5, r7, pc}
 8001426:	46c0      	nop			@ (mov r8, r8)
 8001428:	20000234 	.word	0x20000234
 800142c:	20000238 	.word	0x20000238
 8001430:	2000023c 	.word	0x2000023c
 8001434:	20000244 	.word	0x20000244
 8001438:	20000240 	.word	0x20000240
 800143c:	200001ec 	.word	0x200001ec
 8001440:	200001f4 	.word	0x200001f4
 8001444:	20000470 	.word	0x20000470
 8001448:	200001f8 	.word	0x200001f8
 800144c:	08001f8d 	.word	0x08001f8d
 8001450:	20000624 	.word	0x20000624
 8001454:	2000071c 	.word	0x2000071c
 8001458:	20000204 	.word	0x20000204
 800145c:	08001281 	.word	0x08001281
 8001460:	200006f8 	.word	0x200006f8
 8001464:	0000ffff 	.word	0x0000ffff
 8001468:	200001fa 	.word	0x200001fa

0800146c <Main>:

void Main()
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
	status_ind_pin.Toggle();
 8001470:	4b07      	ldr	r3, [pc, #28]	@ (8001490 <Main+0x24>)
 8001472:	0018      	movs	r0, r3
 8001474:	f7ff fd87 	bl	8000f86 <_ZN3Pin6ToggleEv>

	btnManager.Update();
 8001478:	4b06      	ldr	r3, [pc, #24]	@ (8001494 <Main+0x28>)
 800147a:	0018      	movs	r0, r3
 800147c:	f7ff f81a 	bl	80004b4 <_ZN13ButtonManager6UpdateEv>
	usbManager.Update();
 8001480:	4b05      	ldr	r3, [pc, #20]	@ (8001498 <Main+0x2c>)
 8001482:	0018      	movs	r0, r3
 8001484:	f001 fa5c 	bl	8002940 <_ZN10UsbManager6UpdateEv>
	// Not working right.
	// It doesnt ever change the position.
//	crs2Encoder.Update();

//	HAL_Delay(20);
}
 8001488:	46c0      	nop			@ (mov r8, r8)
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	46c0      	nop			@ (mov r8, r8)
 8001490:	20000640 	.word	0x20000640
 8001494:	20000470 	.word	0x20000470
 8001498:	20000204 	.word	0x20000204

0800149c <_ZN13ButtonManageraSERKS_>:
class ButtonManager
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	1d10      	adds	r0, r2, #4
 80014ac:	3304      	adds	r3, #4
 80014ae:	22d8      	movs	r2, #216	@ 0xd8
 80014b0:	0019      	movs	r1, r3
 80014b2:	f00c fc55 	bl	800dd60 <memcpy>
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	22dc      	movs	r2, #220	@ 0xdc
 80014ba:	589a      	ldr	r2, [r3, r2]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	21dc      	movs	r1, #220	@ 0xdc
 80014c0:	505a      	str	r2, [r3, r1]
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	22e0      	movs	r2, #224	@ 0xe0
 80014c6:	5c99      	ldrb	r1, [r3, r2]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	22e0      	movs	r2, #224	@ 0xe0
 80014cc:	5499      	strb	r1, [r3, r2]
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	22e4      	movs	r2, #228	@ 0xe4
 80014d2:	589a      	ldr	r2, [r3, r2]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	21e4      	movs	r1, #228	@ 0xe4
 80014d8:	505a      	str	r2, [r3, r1]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	21e8      	movs	r1, #232	@ 0xe8
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	20e8      	movs	r0, #232	@ 0xe8
 80014e2:	5812      	ldr	r2, [r2, r0]
 80014e4:	505a      	str	r2, [r3, r1]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	0018      	movs	r0, r3
 80014ea:	46bd      	mov	sp, r7
 80014ec:	b002      	add	sp, #8
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <_ZL11InitButtonsv>:

// Initialization Functions:
static void InitButtons()
{
 80014f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014f2:	4ced      	ldr	r4, [pc, #948]	@ (80018a8 <_ZL11InitButtonsv+0x3b8>)
 80014f4:	44a5      	add	sp, r4
 80014f6:	af34      	add	r7, sp, #208	@ 0xd0
	btnPins = ButtonPins();
 80014f8:	4bec      	ldr	r3, [pc, #944]	@ (80018ac <_ZL11InitButtonsv+0x3bc>)
 80014fa:	24a8      	movs	r4, #168	@ 0xa8
 80014fc:	00a4      	lsls	r4, r4, #2
 80014fe:	191b      	adds	r3, r3, r4
 8001500:	19db      	adds	r3, r3, r7
 8001502:	0018      	movs	r0, r3
 8001504:	23d8      	movs	r3, #216	@ 0xd8
 8001506:	001a      	movs	r2, r3
 8001508:	2100      	movs	r1, #0
 800150a:	f00c fb99 	bl	800dc40 <memset>
 800150e:	1d3b      	adds	r3, r7, #4
 8001510:	0018      	movs	r0, r3
 8001512:	f7fe fedb 	bl	80002cc <_ZN10ButtonPinsC1Ev>
 8001516:	4ae6      	ldr	r2, [pc, #920]	@ (80018b0 <_ZL11InitButtonsv+0x3c0>)
 8001518:	4be4      	ldr	r3, [pc, #912]	@ (80018ac <_ZL11InitButtonsv+0x3bc>)
 800151a:	191b      	adds	r3, r3, r4
 800151c:	19db      	adds	r3, r3, r7
 800151e:	0010      	movs	r0, r2
 8001520:	0019      	movs	r1, r3
 8001522:	23d8      	movs	r3, #216	@ 0xd8
 8001524:	001a      	movs	r2, r3
 8001526:	f00c fc1b 	bl	800dd60 <memcpy>
	// Rotary Encoder Push Buttons
	alt_sw_pin       = Pin(ALT_SW_GPIO_Port,  ALT_SW_Pin,  ACTIVE_LOW, false);
 800152a:	2380      	movs	r3, #128	@ 0x80
 800152c:	005a      	lsls	r2, r3, #1
 800152e:	49e1      	ldr	r1, [pc, #900]	@ (80018b4 <_ZL11InitButtonsv+0x3c4>)
 8001530:	23dc      	movs	r3, #220	@ 0xdc
 8001532:	18f8      	adds	r0, r7, r3
 8001534:	2300      	movs	r3, #0
 8001536:	9300      	str	r3, [sp, #0]
 8001538:	2301      	movs	r3, #1
 800153a:	f7ff fcfe 	bl	8000f3a <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_Stateb>
 800153e:	49de      	ldr	r1, [pc, #888]	@ (80018b8 <_ZL11InitButtonsv+0x3c8>)
 8001540:	4bde      	ldr	r3, [pc, #888]	@ (80018bc <_ZL11InitButtonsv+0x3cc>)
 8001542:	191b      	adds	r3, r3, r4
 8001544:	19da      	adds	r2, r3, r7
 8001546:	000b      	movs	r3, r1
 8001548:	ca03      	ldmia	r2!, {r0, r1}
 800154a:	c303      	stmia	r3!, {r0, r1}
 800154c:	8812      	ldrh	r2, [r2, #0]
 800154e:	801a      	strh	r2, [r3, #0]
	btnPins.alt_enc  = alt_sw_pin;
 8001550:	4bd7      	ldr	r3, [pc, #860]	@ (80018b0 <_ZL11InitButtonsv+0x3c0>)
 8001552:	22cc      	movs	r2, #204	@ 0xcc
 8001554:	49d8      	ldr	r1, [pc, #864]	@ (80018b8 <_ZL11InitButtonsv+0x3c8>)
 8001556:	189b      	adds	r3, r3, r2
 8001558:	000a      	movs	r2, r1
 800155a:	ca03      	ldmia	r2!, {r0, r1}
 800155c:	c303      	stmia	r3!, {r0, r1}
 800155e:	8812      	ldrh	r2, [r2, #0]
 8001560:	801a      	strh	r2, [r3, #0]
	crs1_sw_pin      = Pin(CRS1_SW_GPIO_Port, CRS1_SW_Pin, ACTIVE_LOW, false);
 8001562:	2380      	movs	r3, #128	@ 0x80
 8001564:	011a      	lsls	r2, r3, #4
 8001566:	49d3      	ldr	r1, [pc, #844]	@ (80018b4 <_ZL11InitButtonsv+0x3c4>)
 8001568:	23e8      	movs	r3, #232	@ 0xe8
 800156a:	18f8      	adds	r0, r7, r3
 800156c:	2300      	movs	r3, #0
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	2301      	movs	r3, #1
 8001572:	f7ff fce2 	bl	8000f3a <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_Stateb>
 8001576:	49d2      	ldr	r1, [pc, #840]	@ (80018c0 <_ZL11InitButtonsv+0x3d0>)
 8001578:	4bd2      	ldr	r3, [pc, #840]	@ (80018c4 <_ZL11InitButtonsv+0x3d4>)
 800157a:	191b      	adds	r3, r3, r4
 800157c:	19da      	adds	r2, r3, r7
 800157e:	000b      	movs	r3, r1
 8001580:	ca03      	ldmia	r2!, {r0, r1}
 8001582:	c303      	stmia	r3!, {r0, r1}
 8001584:	8812      	ldrh	r2, [r2, #0]
 8001586:	801a      	strh	r2, [r3, #0]
	btnPins.crs1_enc = crs1_sw_pin;
 8001588:	4bc9      	ldr	r3, [pc, #804]	@ (80018b0 <_ZL11InitButtonsv+0x3c0>)
 800158a:	22a8      	movs	r2, #168	@ 0xa8
 800158c:	49cc      	ldr	r1, [pc, #816]	@ (80018c0 <_ZL11InitButtonsv+0x3d0>)
 800158e:	189b      	adds	r3, r3, r2
 8001590:	000a      	movs	r2, r1
 8001592:	ca03      	ldmia	r2!, {r0, r1}
 8001594:	c303      	stmia	r3!, {r0, r1}
 8001596:	8812      	ldrh	r2, [r2, #0]
 8001598:	801a      	strh	r2, [r3, #0]
	crs2_sw_pin      = Pin(CRS2_SW_GPIO_Port, CRS2_SW_Pin, ACTIVE_LOW, false);
 800159a:	2380      	movs	r3, #128	@ 0x80
 800159c:	00da      	lsls	r2, r3, #3
 800159e:	49ca      	ldr	r1, [pc, #808]	@ (80018c8 <_ZL11InitButtonsv+0x3d8>)
 80015a0:	23f4      	movs	r3, #244	@ 0xf4
 80015a2:	18f8      	adds	r0, r7, r3
 80015a4:	2300      	movs	r3, #0
 80015a6:	9300      	str	r3, [sp, #0]
 80015a8:	2301      	movs	r3, #1
 80015aa:	f7ff fcc6 	bl	8000f3a <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_Stateb>
 80015ae:	49c7      	ldr	r1, [pc, #796]	@ (80018cc <_ZL11InitButtonsv+0x3dc>)
 80015b0:	4bc7      	ldr	r3, [pc, #796]	@ (80018d0 <_ZL11InitButtonsv+0x3e0>)
 80015b2:	191b      	adds	r3, r3, r4
 80015b4:	19da      	adds	r2, r3, r7
 80015b6:	000b      	movs	r3, r1
 80015b8:	ca03      	ldmia	r2!, {r0, r1}
 80015ba:	c303      	stmia	r3!, {r0, r1}
 80015bc:	8812      	ldrh	r2, [r2, #0]
 80015be:	801a      	strh	r2, [r3, #0]
	btnPins.crs2_enc = crs2_sw_pin;
 80015c0:	4bbb      	ldr	r3, [pc, #748]	@ (80018b0 <_ZL11InitButtonsv+0x3c0>)
 80015c2:	22b4      	movs	r2, #180	@ 0xb4
 80015c4:	49c1      	ldr	r1, [pc, #772]	@ (80018cc <_ZL11InitButtonsv+0x3dc>)
 80015c6:	189b      	adds	r3, r3, r2
 80015c8:	000a      	movs	r2, r1
 80015ca:	ca03      	ldmia	r2!, {r0, r1}
 80015cc:	c303      	stmia	r3!, {r0, r1}
 80015ce:	8812      	ldrh	r2, [r2, #0]
 80015d0:	801a      	strh	r2, [r3, #0]
	hdg_sw_pin       = Pin(HDG_SW_GPIO_Port,  HDG_SW_Pin,  ACTIVE_LOW, false);
 80015d2:	49c0      	ldr	r1, [pc, #768]	@ (80018d4 <_ZL11InitButtonsv+0x3e4>)
 80015d4:	1c78      	adds	r0, r7, #1
 80015d6:	30ff      	adds	r0, #255	@ 0xff
 80015d8:	2300      	movs	r3, #0
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	2301      	movs	r3, #1
 80015de:	2204      	movs	r2, #4
 80015e0:	f7ff fcab 	bl	8000f3a <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_Stateb>
 80015e4:	49bc      	ldr	r1, [pc, #752]	@ (80018d8 <_ZL11InitButtonsv+0x3e8>)
 80015e6:	4bbd      	ldr	r3, [pc, #756]	@ (80018dc <_ZL11InitButtonsv+0x3ec>)
 80015e8:	191b      	adds	r3, r3, r4
 80015ea:	19da      	adds	r2, r3, r7
 80015ec:	000b      	movs	r3, r1
 80015ee:	ca03      	ldmia	r2!, {r0, r1}
 80015f0:	c303      	stmia	r3!, {r0, r1}
 80015f2:	8812      	ldrh	r2, [r2, #0]
 80015f4:	801a      	strh	r2, [r3, #0]
	btnPins.hdg_enc  = hdg_sw_pin;
 80015f6:	4bae      	ldr	r3, [pc, #696]	@ (80018b0 <_ZL11InitButtonsv+0x3c0>)
 80015f8:	22c0      	movs	r2, #192	@ 0xc0
 80015fa:	49b7      	ldr	r1, [pc, #732]	@ (80018d8 <_ZL11InitButtonsv+0x3e8>)
 80015fc:	189b      	adds	r3, r3, r2
 80015fe:	000a      	movs	r2, r1
 8001600:	ca03      	ldmia	r2!, {r0, r1}
 8001602:	c303      	stmia	r3!, {r0, r1}
 8001604:	8812      	ldrh	r2, [r2, #0]
 8001606:	801a      	strh	r2, [r3, #0]

	// Front Panel Input Buttons
	alt_btn_pin  = Pin(ALT_BTN_GPIO_Port,  ALT_BTN_Pin,  ACTIVE_LOW, false);
 8001608:	2390      	movs	r3, #144	@ 0x90
 800160a:	05d9      	lsls	r1, r3, #23
 800160c:	2386      	movs	r3, #134	@ 0x86
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	18f8      	adds	r0, r7, r3
 8001612:	2300      	movs	r3, #0
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	2301      	movs	r3, #1
 8001618:	2208      	movs	r2, #8
 800161a:	f7ff fc8e 	bl	8000f3a <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_Stateb>
 800161e:	49b0      	ldr	r1, [pc, #704]	@ (80018e0 <_ZL11InitButtonsv+0x3f0>)
 8001620:	4bb0      	ldr	r3, [pc, #704]	@ (80018e4 <_ZL11InitButtonsv+0x3f4>)
 8001622:	191b      	adds	r3, r3, r4
 8001624:	19da      	adds	r2, r3, r7
 8001626:	000b      	movs	r3, r1
 8001628:	ca03      	ldmia	r2!, {r0, r1}
 800162a:	c303      	stmia	r3!, {r0, r1}
 800162c:	8812      	ldrh	r2, [r2, #0]
 800162e:	801a      	strh	r2, [r3, #0]
	btnPins.alt  = alt_btn_pin;
 8001630:	4b9f      	ldr	r3, [pc, #636]	@ (80018b0 <_ZL11InitButtonsv+0x3c0>)
 8001632:	4aab      	ldr	r2, [pc, #684]	@ (80018e0 <_ZL11InitButtonsv+0x3f0>)
 8001634:	336c      	adds	r3, #108	@ 0x6c
 8001636:	ca03      	ldmia	r2!, {r0, r1}
 8001638:	c303      	stmia	r3!, {r0, r1}
 800163a:	8812      	ldrh	r2, [r2, #0]
 800163c:	801a      	strh	r2, [r3, #0]
	apr_btn_pin  = Pin(APR_BTN_GPIO_Port,  APR_BTN_Pin,  ACTIVE_LOW, false);
 800163e:	49a2      	ldr	r1, [pc, #648]	@ (80018c8 <_ZL11InitButtonsv+0x3d8>)
 8001640:	238c      	movs	r3, #140	@ 0x8c
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	18f8      	adds	r0, r7, r3
 8001646:	2300      	movs	r3, #0
 8001648:	9300      	str	r3, [sp, #0]
 800164a:	2301      	movs	r3, #1
 800164c:	2210      	movs	r2, #16
 800164e:	f7ff fc74 	bl	8000f3a <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_Stateb>
 8001652:	49a5      	ldr	r1, [pc, #660]	@ (80018e8 <_ZL11InitButtonsv+0x3f8>)
 8001654:	4ba5      	ldr	r3, [pc, #660]	@ (80018ec <_ZL11InitButtonsv+0x3fc>)
 8001656:	191b      	adds	r3, r3, r4
 8001658:	19da      	adds	r2, r3, r7
 800165a:	000b      	movs	r3, r1
 800165c:	ca03      	ldmia	r2!, {r0, r1}
 800165e:	c303      	stmia	r3!, {r0, r1}
 8001660:	8812      	ldrh	r2, [r2, #0]
 8001662:	801a      	strh	r2, [r3, #0]
	btnPins.apr  = apr_btn_pin;
 8001664:	4b92      	ldr	r3, [pc, #584]	@ (80018b0 <_ZL11InitButtonsv+0x3c0>)
 8001666:	4aa0      	ldr	r2, [pc, #640]	@ (80018e8 <_ZL11InitButtonsv+0x3f8>)
 8001668:	330c      	adds	r3, #12
 800166a:	ca03      	ldmia	r2!, {r0, r1}
 800166c:	c303      	stmia	r3!, {r0, r1}
 800166e:	8812      	ldrh	r2, [r2, #0]
 8001670:	801a      	strh	r2, [r3, #0]
	bank_btn_pin = Pin(BANK_BTN_GPIO_Port, BANK_BTN_Pin, ACTIVE_LOW, false);
 8001672:	2380      	movs	r3, #128	@ 0x80
 8001674:	009a      	lsls	r2, r3, #2
 8001676:	498f      	ldr	r1, [pc, #572]	@ (80018b4 <_ZL11InitButtonsv+0x3c4>)
 8001678:	2392      	movs	r3, #146	@ 0x92
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	18f8      	adds	r0, r7, r3
 800167e:	2300      	movs	r3, #0
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	2301      	movs	r3, #1
 8001684:	f7ff fc59 	bl	8000f3a <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_Stateb>
 8001688:	4999      	ldr	r1, [pc, #612]	@ (80018f0 <_ZL11InitButtonsv+0x400>)
 800168a:	4b9a      	ldr	r3, [pc, #616]	@ (80018f4 <_ZL11InitButtonsv+0x404>)
 800168c:	191b      	adds	r3, r3, r4
 800168e:	19da      	adds	r2, r3, r7
 8001690:	000b      	movs	r3, r1
 8001692:	ca03      	ldmia	r2!, {r0, r1}
 8001694:	c303      	stmia	r3!, {r0, r1}
 8001696:	8812      	ldrh	r2, [r2, #0]
 8001698:	801a      	strh	r2, [r3, #0]
	btnPins.bank = bank_btn_pin;
 800169a:	4b85      	ldr	r3, [pc, #532]	@ (80018b0 <_ZL11InitButtonsv+0x3c0>)
 800169c:	4a94      	ldr	r2, [pc, #592]	@ (80018f0 <_ZL11InitButtonsv+0x400>)
 800169e:	333c      	adds	r3, #60	@ 0x3c
 80016a0:	ca03      	ldmia	r2!, {r0, r1}
 80016a2:	c303      	stmia	r3!, {r0, r1}
 80016a4:	8812      	ldrh	r2, [r2, #0]
 80016a6:	801a      	strh	r2, [r3, #0]
	bc_btn_pin   = Pin(BC_BTN_GPIO_Port,   BC_BTN_Pin,   ACTIVE_LOW, false);
 80016a8:	2380      	movs	r3, #128	@ 0x80
 80016aa:	015a      	lsls	r2, r3, #5
 80016ac:	4981      	ldr	r1, [pc, #516]	@ (80018b4 <_ZL11InitButtonsv+0x3c4>)
 80016ae:	2398      	movs	r3, #152	@ 0x98
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	18f8      	adds	r0, r7, r3
 80016b4:	2300      	movs	r3, #0
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	2301      	movs	r3, #1
 80016ba:	f7ff fc3e 	bl	8000f3a <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_Stateb>
 80016be:	498e      	ldr	r1, [pc, #568]	@ (80018f8 <_ZL11InitButtonsv+0x408>)
 80016c0:	4b8e      	ldr	r3, [pc, #568]	@ (80018fc <_ZL11InitButtonsv+0x40c>)
 80016c2:	191b      	adds	r3, r3, r4
 80016c4:	19da      	adds	r2, r3, r7
 80016c6:	000b      	movs	r3, r1
 80016c8:	ca03      	ldmia	r2!, {r0, r1}
 80016ca:	c303      	stmia	r3!, {r0, r1}
 80016cc:	8812      	ldrh	r2, [r2, #0]
 80016ce:	801a      	strh	r2, [r3, #0]
	btnPins.bc   = bc_btn_pin;
 80016d0:	4b77      	ldr	r3, [pc, #476]	@ (80018b0 <_ZL11InitButtonsv+0x3c0>)
 80016d2:	4a89      	ldr	r2, [pc, #548]	@ (80018f8 <_ZL11InitButtonsv+0x408>)
 80016d4:	3318      	adds	r3, #24
 80016d6:	ca03      	ldmia	r2!, {r0, r1}
 80016d8:	c303      	stmia	r3!, {r0, r1}
 80016da:	8812      	ldrh	r2, [r2, #0]
 80016dc:	801a      	strh	r2, [r3, #0]
	fd_btn_pin   = Pin(FD_BTN_GPIO_Port,   FD_BTN_Pin,   ACTIVE_LOW, false);
 80016de:	2380      	movs	r3, #128	@ 0x80
 80016e0:	005a      	lsls	r2, r3, #1
 80016e2:	2390      	movs	r3, #144	@ 0x90
 80016e4:	05d9      	lsls	r1, r3, #23
 80016e6:	239e      	movs	r3, #158	@ 0x9e
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	18f8      	adds	r0, r7, r3
 80016ec:	2300      	movs	r3, #0
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	2301      	movs	r3, #1
 80016f2:	f7ff fc22 	bl	8000f3a <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_Stateb>
 80016f6:	4982      	ldr	r1, [pc, #520]	@ (8001900 <_ZL11InitButtonsv+0x410>)
 80016f8:	4b82      	ldr	r3, [pc, #520]	@ (8001904 <_ZL11InitButtonsv+0x414>)
 80016fa:	191b      	adds	r3, r3, r4
 80016fc:	19da      	adds	r2, r3, r7
 80016fe:	000b      	movs	r3, r1
 8001700:	ca03      	ldmia	r2!, {r0, r1}
 8001702:	c303      	stmia	r3!, {r0, r1}
 8001704:	8812      	ldrh	r2, [r2, #0]
 8001706:	801a      	strh	r2, [r3, #0]
	btnPins.fd   = fd_btn_pin;
 8001708:	4b69      	ldr	r3, [pc, #420]	@ (80018b0 <_ZL11InitButtonsv+0x3c0>)
 800170a:	4a7d      	ldr	r2, [pc, #500]	@ (8001900 <_ZL11InitButtonsv+0x410>)
 800170c:	3330      	adds	r3, #48	@ 0x30
 800170e:	ca03      	ldmia	r2!, {r0, r1}
 8001710:	c303      	stmia	r3!, {r0, r1}
 8001712:	8812      	ldrh	r2, [r2, #0]
 8001714:	801a      	strh	r2, [r3, #0]
	flc_btn_pin  = Pin(FLC_BTN_GPIO_Port,  FLC_BTN_Pin,  ACTIVE_LOW, false);
 8001716:	496c      	ldr	r1, [pc, #432]	@ (80018c8 <_ZL11InitButtonsv+0x3d8>)
 8001718:	23a4      	movs	r3, #164	@ 0xa4
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	18f8      	adds	r0, r7, r3
 800171e:	2300      	movs	r3, #0
 8001720:	9300      	str	r3, [sp, #0]
 8001722:	2301      	movs	r3, #1
 8001724:	2201      	movs	r2, #1
 8001726:	f7ff fc08 	bl	8000f3a <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_Stateb>
 800172a:	4977      	ldr	r1, [pc, #476]	@ (8001908 <_ZL11InitButtonsv+0x418>)
 800172c:	4b77      	ldr	r3, [pc, #476]	@ (800190c <_ZL11InitButtonsv+0x41c>)
 800172e:	191b      	adds	r3, r3, r4
 8001730:	19da      	adds	r2, r3, r7
 8001732:	000b      	movs	r3, r1
 8001734:	ca03      	ldmia	r2!, {r0, r1}
 8001736:	c303      	stmia	r3!, {r0, r1}
 8001738:	8812      	ldrh	r2, [r2, #0]
 800173a:	801a      	strh	r2, [r3, #0]
	btnPins.flc  = flc_btn_pin;
 800173c:	4b5c      	ldr	r3, [pc, #368]	@ (80018b0 <_ZL11InitButtonsv+0x3c0>)
 800173e:	2290      	movs	r2, #144	@ 0x90
 8001740:	4971      	ldr	r1, [pc, #452]	@ (8001908 <_ZL11InitButtonsv+0x418>)
 8001742:	189b      	adds	r3, r3, r2
 8001744:	000a      	movs	r2, r1
 8001746:	ca03      	ldmia	r2!, {r0, r1}
 8001748:	c303      	stmia	r3!, {r0, r1}
 800174a:	8812      	ldrh	r2, [r2, #0]
 800174c:	801a      	strh	r2, [r3, #0]
	hdg_btn_pin  = Pin(HDG_BTN_GPIO_Port,  HDG_BTN_Pin,  ACTIVE_LOW, false);
 800174e:	495e      	ldr	r1, [pc, #376]	@ (80018c8 <_ZL11InitButtonsv+0x3d8>)
 8001750:	23aa      	movs	r3, #170	@ 0xaa
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	18f8      	adds	r0, r7, r3
 8001756:	2300      	movs	r3, #0
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	2301      	movs	r3, #1
 800175c:	2208      	movs	r2, #8
 800175e:	f7ff fbec 	bl	8000f3a <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_Stateb>
 8001762:	496b      	ldr	r1, [pc, #428]	@ (8001910 <_ZL11InitButtonsv+0x420>)
 8001764:	4b6b      	ldr	r3, [pc, #428]	@ (8001914 <_ZL11InitButtonsv+0x424>)
 8001766:	191b      	adds	r3, r3, r4
 8001768:	19da      	adds	r2, r3, r7
 800176a:	000b      	movs	r3, r1
 800176c:	ca03      	ldmia	r2!, {r0, r1}
 800176e:	c303      	stmia	r3!, {r0, r1}
 8001770:	8812      	ldrh	r2, [r2, #0]
 8001772:	801a      	strh	r2, [r3, #0]
	btnPins.hdg  = hdg_btn_pin;
 8001774:	4b4e      	ldr	r3, [pc, #312]	@ (80018b0 <_ZL11InitButtonsv+0x3c0>)
 8001776:	4a66      	ldr	r2, [pc, #408]	@ (8001910 <_ZL11InitButtonsv+0x420>)
 8001778:	ca03      	ldmia	r2!, {r0, r1}
 800177a:	c303      	stmia	r3!, {r0, r1}
 800177c:	8812      	ldrh	r2, [r2, #0]
 800177e:	801a      	strh	r2, [r3, #0]
	nav_btn_pin  = Pin(NAV_BTN_GPIO_Port,  NAV_BTN_Pin,  ACTIVE_LOW, false);
 8001780:	4951      	ldr	r1, [pc, #324]	@ (80018c8 <_ZL11InitButtonsv+0x3d8>)
 8001782:	23b0      	movs	r3, #176	@ 0xb0
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	18f8      	adds	r0, r7, r3
 8001788:	2300      	movs	r3, #0
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	2301      	movs	r3, #1
 800178e:	2220      	movs	r2, #32
 8001790:	f7ff fbd3 	bl	8000f3a <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_Stateb>
 8001794:	4960      	ldr	r1, [pc, #384]	@ (8001918 <_ZL11InitButtonsv+0x428>)
 8001796:	4b61      	ldr	r3, [pc, #388]	@ (800191c <_ZL11InitButtonsv+0x42c>)
 8001798:	191b      	adds	r3, r3, r4
 800179a:	19da      	adds	r2, r3, r7
 800179c:	000b      	movs	r3, r1
 800179e:	ca03      	ldmia	r2!, {r0, r1}
 80017a0:	c303      	stmia	r3!, {r0, r1}
 80017a2:	8812      	ldrh	r2, [r2, #0]
 80017a4:	801a      	strh	r2, [r3, #0]
	btnPins.nav  = nav_btn_pin;
 80017a6:	4b42      	ldr	r3, [pc, #264]	@ (80018b0 <_ZL11InitButtonsv+0x3c0>)
 80017a8:	4a5b      	ldr	r2, [pc, #364]	@ (8001918 <_ZL11InitButtonsv+0x428>)
 80017aa:	3324      	adds	r3, #36	@ 0x24
 80017ac:	ca03      	ldmia	r2!, {r0, r1}
 80017ae:	c303      	stmia	r3!, {r0, r1}
 80017b0:	8812      	ldrh	r2, [r2, #0]
 80017b2:	801a      	strh	r2, [r3, #0]
	ap_btn_pin   = Pin(AP_BTN_GPIO_Port,   AP_BTN_Pin,   ACTIVE_LOW, false);
 80017b4:	493f      	ldr	r1, [pc, #252]	@ (80018b4 <_ZL11InitButtonsv+0x3c4>)
 80017b6:	23b6      	movs	r3, #182	@ 0xb6
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	18f8      	adds	r0, r7, r3
 80017bc:	2300      	movs	r3, #0
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	2301      	movs	r3, #1
 80017c2:	2280      	movs	r2, #128	@ 0x80
 80017c4:	f7ff fbb9 	bl	8000f3a <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_Stateb>
 80017c8:	4955      	ldr	r1, [pc, #340]	@ (8001920 <_ZL11InitButtonsv+0x430>)
 80017ca:	4b56      	ldr	r3, [pc, #344]	@ (8001924 <_ZL11InitButtonsv+0x434>)
 80017cc:	191b      	adds	r3, r3, r4
 80017ce:	19da      	adds	r2, r3, r7
 80017d0:	000b      	movs	r3, r1
 80017d2:	ca03      	ldmia	r2!, {r0, r1}
 80017d4:	c303      	stmia	r3!, {r0, r1}
 80017d6:	8812      	ldrh	r2, [r2, #0]
 80017d8:	801a      	strh	r2, [r3, #0]
	btnPins.ap   = ap_btn_pin;
 80017da:	4b35      	ldr	r3, [pc, #212]	@ (80018b0 <_ZL11InitButtonsv+0x3c0>)
 80017dc:	4a50      	ldr	r2, [pc, #320]	@ (8001920 <_ZL11InitButtonsv+0x430>)
 80017de:	3348      	adds	r3, #72	@ 0x48
 80017e0:	ca03      	ldmia	r2!, {r0, r1}
 80017e2:	c303      	stmia	r3!, {r0, r1}
 80017e4:	8812      	ldrh	r2, [r2, #0]
 80017e6:	801a      	strh	r2, [r3, #0]
	spd_btn_pin  = Pin(SPD_BTN_GPIO_Port,  SPD_BTN_Pin,  ACTIVE_LOW, false);
 80017e8:	4937      	ldr	r1, [pc, #220]	@ (80018c8 <_ZL11InitButtonsv+0x3d8>)
 80017ea:	23bc      	movs	r3, #188	@ 0xbc
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	18f8      	adds	r0, r7, r3
 80017f0:	2300      	movs	r3, #0
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	2301      	movs	r3, #1
 80017f6:	2202      	movs	r2, #2
 80017f8:	f7ff fb9f 	bl	8000f3a <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_Stateb>
 80017fc:	494a      	ldr	r1, [pc, #296]	@ (8001928 <_ZL11InitButtonsv+0x438>)
 80017fe:	4b4b      	ldr	r3, [pc, #300]	@ (800192c <_ZL11InitButtonsv+0x43c>)
 8001800:	191b      	adds	r3, r3, r4
 8001802:	19da      	adds	r2, r3, r7
 8001804:	000b      	movs	r3, r1
 8001806:	ca03      	ldmia	r2!, {r0, r1}
 8001808:	c303      	stmia	r3!, {r0, r1}
 800180a:	8812      	ldrh	r2, [r2, #0]
 800180c:	801a      	strh	r2, [r3, #0]
	btnPins.spd  = spd_btn_pin;
 800180e:	4b28      	ldr	r3, [pc, #160]	@ (80018b0 <_ZL11InitButtonsv+0x3c0>)
 8001810:	229c      	movs	r2, #156	@ 0x9c
 8001812:	4945      	ldr	r1, [pc, #276]	@ (8001928 <_ZL11InitButtonsv+0x438>)
 8001814:	189b      	adds	r3, r3, r2
 8001816:	000a      	movs	r2, r1
 8001818:	ca03      	ldmia	r2!, {r0, r1}
 800181a:	c303      	stmia	r3!, {r0, r1}
 800181c:	8812      	ldrh	r2, [r2, #0]
 800181e:	801a      	strh	r2, [r3, #0]
	vnv_btn_pin  = Pin(VNV_BTN_GPIO_Port,  VNV_BTN_Pin,  ACTIVE_LOW, false);
 8001820:	4929      	ldr	r1, [pc, #164]	@ (80018c8 <_ZL11InitButtonsv+0x3d8>)
 8001822:	23c2      	movs	r3, #194	@ 0xc2
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	18f8      	adds	r0, r7, r3
 8001828:	2300      	movs	r3, #0
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	2301      	movs	r3, #1
 800182e:	2204      	movs	r2, #4
 8001830:	f7ff fb83 	bl	8000f3a <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_Stateb>
 8001834:	493e      	ldr	r1, [pc, #248]	@ (8001930 <_ZL11InitButtonsv+0x440>)
 8001836:	4b3f      	ldr	r3, [pc, #252]	@ (8001934 <_ZL11InitButtonsv+0x444>)
 8001838:	191b      	adds	r3, r3, r4
 800183a:	19da      	adds	r2, r3, r7
 800183c:	000b      	movs	r3, r1
 800183e:	ca03      	ldmia	r2!, {r0, r1}
 8001840:	c303      	stmia	r3!, {r0, r1}
 8001842:	8812      	ldrh	r2, [r2, #0]
 8001844:	801a      	strh	r2, [r3, #0]
	btnPins.vnv  = vnv_btn_pin;
 8001846:	4b1a      	ldr	r3, [pc, #104]	@ (80018b0 <_ZL11InitButtonsv+0x3c0>)
 8001848:	2284      	movs	r2, #132	@ 0x84
 800184a:	4939      	ldr	r1, [pc, #228]	@ (8001930 <_ZL11InitButtonsv+0x440>)
 800184c:	189b      	adds	r3, r3, r2
 800184e:	000a      	movs	r2, r1
 8001850:	ca03      	ldmia	r2!, {r0, r1}
 8001852:	c303      	stmia	r3!, {r0, r1}
 8001854:	8812      	ldrh	r2, [r2, #0]
 8001856:	801a      	strh	r2, [r3, #0]
	vs_btn_pin   = Pin(VS_BTN_GPIO_Port,   VS_BTN_Pin,   ACTIVE_LOW, false);
 8001858:	2390      	movs	r3, #144	@ 0x90
 800185a:	05d9      	lsls	r1, r3, #23
 800185c:	23c8      	movs	r3, #200	@ 0xc8
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	18f8      	adds	r0, r7, r3
 8001862:	2300      	movs	r3, #0
 8001864:	9300      	str	r3, [sp, #0]
 8001866:	2301      	movs	r3, #1
 8001868:	2210      	movs	r2, #16
 800186a:	f7ff fb66 	bl	8000f3a <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_Stateb>
 800186e:	4932      	ldr	r1, [pc, #200]	@ (8001938 <_ZL11InitButtonsv+0x448>)
 8001870:	4b32      	ldr	r3, [pc, #200]	@ (800193c <_ZL11InitButtonsv+0x44c>)
 8001872:	191b      	adds	r3, r3, r4
 8001874:	19da      	adds	r2, r3, r7
 8001876:	000b      	movs	r3, r1
 8001878:	ca03      	ldmia	r2!, {r0, r1}
 800187a:	c303      	stmia	r3!, {r0, r1}
 800187c:	8812      	ldrh	r2, [r2, #0]
 800187e:	801a      	strh	r2, [r3, #0]
	btnPins.vs   = vs_btn_pin;
 8001880:	4b0b      	ldr	r3, [pc, #44]	@ (80018b0 <_ZL11InitButtonsv+0x3c0>)
 8001882:	4a2d      	ldr	r2, [pc, #180]	@ (8001938 <_ZL11InitButtonsv+0x448>)
 8001884:	3378      	adds	r3, #120	@ 0x78
 8001886:	ca03      	ldmia	r2!, {r0, r1}
 8001888:	c303      	stmia	r3!, {r0, r1}
 800188a:	8812      	ldrh	r2, [r2, #0]
 800188c:	801a      	strh	r2, [r3, #0]
	xfr_btn_pin  = Pin(XFR_BTN_GPIO_Port,  XFR_BTN_Pin,  ACTIVE_LOW, false);
 800188e:	2380      	movs	r3, #128	@ 0x80
 8001890:	00da      	lsls	r2, r3, #3
 8001892:	2390      	movs	r3, #144	@ 0x90
 8001894:	05d9      	lsls	r1, r3, #23
 8001896:	23ce      	movs	r3, #206	@ 0xce
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	18f8      	adds	r0, r7, r3
 800189c:	2300      	movs	r3, #0
 800189e:	9300      	str	r3, [sp, #0]
 80018a0:	2301      	movs	r3, #1
 80018a2:	f7ff fb4a 	bl	8000f3a <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_Stateb>
 80018a6:	e04b      	b.n	8001940 <_ZL11InitButtonsv+0x450>
 80018a8:	fffffc8c 	.word	0xfffffc8c
 80018ac:	fffffd64 	.word	0xfffffd64
 80018b0:	20000398 	.word	0x20000398
 80018b4:	48000800 	.word	0x48000800
 80018b8:	200002c0 	.word	0x200002c0
 80018bc:	fffffe3c 	.word	0xfffffe3c
 80018c0:	200002cc 	.word	0x200002cc
 80018c4:	fffffe48 	.word	0xfffffe48
 80018c8:	48000400 	.word	0x48000400
 80018cc:	200002d8 	.word	0x200002d8
 80018d0:	fffffe54 	.word	0xfffffe54
 80018d4:	48000c00 	.word	0x48000c00
 80018d8:	200002e4 	.word	0x200002e4
 80018dc:	fffffe60 	.word	0xfffffe60
 80018e0:	200002f0 	.word	0x200002f0
 80018e4:	fffffe6c 	.word	0xfffffe6c
 80018e8:	200002fc 	.word	0x200002fc
 80018ec:	fffffe78 	.word	0xfffffe78
 80018f0:	20000308 	.word	0x20000308
 80018f4:	fffffe84 	.word	0xfffffe84
 80018f8:	20000314 	.word	0x20000314
 80018fc:	fffffe90 	.word	0xfffffe90
 8001900:	20000320 	.word	0x20000320
 8001904:	fffffe9c 	.word	0xfffffe9c
 8001908:	2000032c 	.word	0x2000032c
 800190c:	fffffea8 	.word	0xfffffea8
 8001910:	20000338 	.word	0x20000338
 8001914:	fffffeb4 	.word	0xfffffeb4
 8001918:	20000344 	.word	0x20000344
 800191c:	fffffec0 	.word	0xfffffec0
 8001920:	20000350 	.word	0x20000350
 8001924:	fffffecc 	.word	0xfffffecc
 8001928:	2000035c 	.word	0x2000035c
 800192c:	fffffed8 	.word	0xfffffed8
 8001930:	20000368 	.word	0x20000368
 8001934:	fffffee4 	.word	0xfffffee4
 8001938:	20000374 	.word	0x20000374
 800193c:	fffffef0 	.word	0xfffffef0
 8001940:	4925      	ldr	r1, [pc, #148]	@ (80019d8 <_ZL11InitButtonsv+0x4e8>)
 8001942:	4b26      	ldr	r3, [pc, #152]	@ (80019dc <_ZL11InitButtonsv+0x4ec>)
 8001944:	191b      	adds	r3, r3, r4
 8001946:	19da      	adds	r2, r3, r7
 8001948:	000b      	movs	r3, r1
 800194a:	ca03      	ldmia	r2!, {r0, r1}
 800194c:	c303      	stmia	r3!, {r0, r1}
 800194e:	8812      	ldrh	r2, [r2, #0]
 8001950:	801a      	strh	r2, [r3, #0]
	btnPins.xfr  = xfr_btn_pin;
 8001952:	4b23      	ldr	r3, [pc, #140]	@ (80019e0 <_ZL11InitButtonsv+0x4f0>)
 8001954:	4a20      	ldr	r2, [pc, #128]	@ (80019d8 <_ZL11InitButtonsv+0x4e8>)
 8001956:	3354      	adds	r3, #84	@ 0x54
 8001958:	ca03      	ldmia	r2!, {r0, r1}
 800195a:	c303      	stmia	r3!, {r0, r1}
 800195c:	8812      	ldrh	r2, [r2, #0]
 800195e:	801a      	strh	r2, [r3, #0]
	yd_btn_pin   = Pin(YD_BTN_GPIO_Port,   YD_BTN_Pin,   ACTIVE_LOW, false);
 8001960:	2380      	movs	r3, #128	@ 0x80
 8001962:	009a      	lsls	r2, r3, #2
 8001964:	2390      	movs	r3, #144	@ 0x90
 8001966:	05d9      	lsls	r1, r3, #23
 8001968:	24d4      	movs	r4, #212	@ 0xd4
 800196a:	0064      	lsls	r4, r4, #1
 800196c:	1938      	adds	r0, r7, r4
 800196e:	2300      	movs	r3, #0
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	2301      	movs	r3, #1
 8001974:	f7ff fae1 	bl	8000f3a <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_Stateb>
 8001978:	4b1a      	ldr	r3, [pc, #104]	@ (80019e4 <_ZL11InitButtonsv+0x4f4>)
 800197a:	193a      	adds	r2, r7, r4
 800197c:	ca03      	ldmia	r2!, {r0, r1}
 800197e:	c303      	stmia	r3!, {r0, r1}
 8001980:	8812      	ldrh	r2, [r2, #0]
 8001982:	801a      	strh	r2, [r3, #0]
	btnPins.yd   = yd_btn_pin;
 8001984:	4b16      	ldr	r3, [pc, #88]	@ (80019e0 <_ZL11InitButtonsv+0x4f0>)
 8001986:	4a17      	ldr	r2, [pc, #92]	@ (80019e4 <_ZL11InitButtonsv+0x4f4>)
 8001988:	3360      	adds	r3, #96	@ 0x60
 800198a:	ca03      	ldmia	r2!, {r0, r1}
 800198c:	c303      	stmia	r3!, {r0, r1}
 800198e:	8812      	ldrh	r2, [r2, #0]
 8001990:	801a      	strh	r2, [r3, #0]
	btnManager   = ButtonManager(btnPins);
 8001992:	4c13      	ldr	r4, [pc, #76]	@ (80019e0 <_ZL11InitButtonsv+0x4f0>)
 8001994:	26da      	movs	r6, #218	@ 0xda
 8001996:	0076      	lsls	r6, r6, #1
 8001998:	19bd      	adds	r5, r7, r6
 800199a:	466b      	mov	r3, sp
 800199c:	0018      	movs	r0, r3
 800199e:	0023      	movs	r3, r4
 80019a0:	330c      	adds	r3, #12
 80019a2:	22cc      	movs	r2, #204	@ 0xcc
 80019a4:	0019      	movs	r1, r3
 80019a6:	f00c f9db 	bl	800dd60 <memcpy>
 80019aa:	6821      	ldr	r1, [r4, #0]
 80019ac:	6862      	ldr	r2, [r4, #4]
 80019ae:	68a3      	ldr	r3, [r4, #8]
 80019b0:	0028      	movs	r0, r5
 80019b2:	f7fe fced 	bl	8000390 <_ZN13ButtonManagerC1E10ButtonPins>
 80019b6:	19ba      	adds	r2, r7, r6
 80019b8:	4b0b      	ldr	r3, [pc, #44]	@ (80019e8 <_ZL11InitButtonsv+0x4f8>)
 80019ba:	0011      	movs	r1, r2
 80019bc:	0018      	movs	r0, r3
 80019be:	f7ff fd6d 	bl	800149c <_ZN13ButtonManageraSERKS_>
 80019c2:	19bb      	adds	r3, r7, r6
 80019c4:	0018      	movs	r0, r3
 80019c6:	f7fe fd1d 	bl	8000404 <_ZN13ButtonManagerD1Ev>
}
 80019ca:	46c0      	nop			@ (mov r8, r8)
 80019cc:	46bd      	mov	sp, r7
 80019ce:	23a9      	movs	r3, #169	@ 0xa9
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	449d      	add	sp, r3
 80019d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019d6:	46c0      	nop			@ (mov r8, r8)
 80019d8:	20000380 	.word	0x20000380
 80019dc:	fffffefc 	.word	0xfffffefc
 80019e0:	20000398 	.word	0x20000398
 80019e4:	2000038c 	.word	0x2000038c
 80019e8:	20000470 	.word	0x20000470

080019ec <_ZL15InitControlPinsv>:

static void InitControlPins()
{
 80019ec:	b590      	push	{r4, r7, lr}
 80019ee:	b08d      	sub	sp, #52	@ 0x34
 80019f0:	af02      	add	r7, sp, #8
	status_ind_pin    = Pin(STATUS_IND_GPIO_Port, STATUS_IND_Pin);
 80019f2:	4917      	ldr	r1, [pc, #92]	@ (8001a50 <_ZL15InitControlPinsv+0x64>)
 80019f4:	1d3b      	adds	r3, r7, #4
 80019f6:	2201      	movs	r2, #1
 80019f8:	0018      	movs	r0, r3
 80019fa:	f7ff fa3a 	bl	8000e72 <_ZN3PinC1EP12GPIO_TypeDeft>
 80019fe:	4b15      	ldr	r3, [pc, #84]	@ (8001a54 <_ZL15InitControlPinsv+0x68>)
 8001a00:	1d3a      	adds	r2, r7, #4
 8001a02:	ca03      	ldmia	r2!, {r0, r1}
 8001a04:	c303      	stmia	r3!, {r0, r1}
 8001a06:	8812      	ldrh	r2, [r2, #0]
 8001a08:	801a      	strh	r2, [r3, #0]
	usart_inval_pin   = Pin(USART_INVALID_GPIO_Port, USART_INVALID_Pin, ACTIVE_LOW, false);
 8001a0a:	2380      	movs	r3, #128	@ 0x80
 8001a0c:	009a      	lsls	r2, r3, #2
 8001a0e:	4912      	ldr	r1, [pc, #72]	@ (8001a58 <_ZL15InitControlPinsv+0x6c>)
 8001a10:	2410      	movs	r4, #16
 8001a12:	1938      	adds	r0, r7, r4
 8001a14:	2300      	movs	r3, #0
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	2301      	movs	r3, #1
 8001a1a:	f7ff fa8e 	bl	8000f3a <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_Stateb>
 8001a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a5c <_ZL15InitControlPinsv+0x70>)
 8001a20:	193a      	adds	r2, r7, r4
 8001a22:	ca03      	ldmia	r2!, {r0, r1}
 8001a24:	c303      	stmia	r3!, {r0, r1}
 8001a26:	8812      	ldrh	r2, [r2, #0]
 8001a28:	801a      	strh	r2, [r3, #0]
	usb_usart_sel_pin = Pin(USB_SER_SEL_GPIO_Port, USB_SER_SEL_Pin, false);
 8001a2a:	2380      	movs	r3, #128	@ 0x80
 8001a2c:	005a      	lsls	r2, r3, #1
 8001a2e:	490a      	ldr	r1, [pc, #40]	@ (8001a58 <_ZL15InitControlPinsv+0x6c>)
 8001a30:	241c      	movs	r4, #28
 8001a32:	1938      	adds	r0, r7, r4
 8001a34:	2300      	movs	r3, #0
 8001a36:	f7ff fa38 	bl	8000eaa <_ZN3PinC1EP12GPIO_TypeDeftb>
 8001a3a:	4b09      	ldr	r3, [pc, #36]	@ (8001a60 <_ZL15InitControlPinsv+0x74>)
 8001a3c:	193a      	adds	r2, r7, r4
 8001a3e:	ca03      	ldmia	r2!, {r0, r1}
 8001a40:	c303      	stmia	r3!, {r0, r1}
 8001a42:	8812      	ldrh	r2, [r2, #0]
 8001a44:	801a      	strh	r2, [r3, #0]
}
 8001a46:	46c0      	nop			@ (mov r8, r8)
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	b00b      	add	sp, #44	@ 0x2c
 8001a4c:	bd90      	pop	{r4, r7, pc}
 8001a4e:	46c0      	nop			@ (mov r8, r8)
 8001a50:	48000800 	.word	0x48000800
 8001a54:	20000640 	.word	0x20000640
 8001a58:	48000400 	.word	0x48000400
 8001a5c:	2000064c 	.word	0x2000064c
 8001a60:	20000658 	.word	0x20000658

08001a64 <_ZN13MCP4023DriveraSERKS_>:
class MCP4023Driver
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	689a      	ldr	r2, [r3, #8]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	6879      	ldr	r1, [r7, #4]
 8001a76:	608a      	str	r2, [r1, #8]
 8001a78:	60cb      	str	r3, [r1, #12]
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	7c1a      	ldrb	r2, [r3, #16]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	741a      	strb	r2, [r3, #16]
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	695a      	ldr	r2, [r3, #20]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	615a      	str	r2, [r3, #20]
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	7e1a      	ldrb	r2, [r3, #24]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	761a      	strb	r2, [r3, #24]
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	321c      	adds	r2, #28
 8001a98:	0010      	movs	r0, r2
 8001a9a:	331c      	adds	r3, #28
 8001a9c:	220a      	movs	r2, #10
 8001a9e:	0019      	movs	r1, r3
 8001aa0:	f00c f95e 	bl	800dd60 <memcpy>
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	3228      	adds	r2, #40	@ 0x28
 8001aaa:	0010      	movs	r0, r2
 8001aac:	3328      	adds	r3, #40	@ 0x28
 8001aae:	220a      	movs	r2, #10
 8001ab0:	0019      	movs	r1, r3
 8001ab2:	f00c f955 	bl	800dd60 <memcpy>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	0018      	movs	r0, r3
 8001aba:	46bd      	mov	sp, r7
 8001abc:	b002      	add	sp, #8
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <_ZN12STPLEDDriveraSERKS_>:
class STPLEDDriver
 8001ac0:	b590      	push	{r4, r7, lr}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685a      	ldr	r2, [r3, #4]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	689a      	ldr	r2, [r3, #8]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	609a      	str	r2, [r3, #8]
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	899a      	ldrh	r2, [r3, #12]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	819a      	strh	r2, [r3, #12]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	89d2      	ldrh	r2, [r2, #14]
 8001ae8:	81da      	strh	r2, [r3, #14]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	3310      	adds	r3, #16
 8001af0:	3210      	adds	r2, #16
 8001af2:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001af4:	c313      	stmia	r3!, {r0, r1, r4}
 8001af6:	ca03      	ldmia	r2!, {r0, r1}
 8001af8:	c303      	stmia	r3!, {r0, r1}
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	0018      	movs	r0, r3
 8001afe:	46bd      	mov	sp, r7
 8001b00:	b003      	add	sp, #12
 8001b02:	bd90      	pop	{r4, r7, pc}

08001b04 <_ZN16IndicatorManageraSERKS_>:
class IndicatorManager
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685a      	ldr	r2, [r3, #4]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	689a      	ldr	r2, [r3, #8]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	609a      	str	r2, [r3, #8]
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	7b1a      	ldrb	r2, [r3, #12]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	731a      	strb	r2, [r3, #12]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	89d2      	ldrh	r2, [r2, #14]
 8001b2c:	81da      	strh	r2, [r3, #14]
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	8a1a      	ldrh	r2, [r3, #16]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	821a      	strh	r2, [r3, #16]
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	8a5a      	ldrh	r2, [r3, #18]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	825a      	strh	r2, [r3, #18]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	0018      	movs	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	b002      	add	sp, #8
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <_ZL14InitIndicatorsv>:

static void InitIndicators()
{
 8001b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b4a:	b0b3      	sub	sp, #204	@ 0xcc
 8001b4c:	af04      	add	r7, sp, #16
	backlight = PWMPin(h_brgt_tim, BACKLIGHT_PWM_CH);
 8001b4e:	4b4e      	ldr	r3, [pc, #312]	@ (8001c88 <_ZL14InitIndicatorsv+0x140>)
 8001b50:	6819      	ldr	r1, [r3, #0]
 8001b52:	241c      	movs	r4, #28
 8001b54:	193b      	adds	r3, r7, r4
 8001b56:	2204      	movs	r2, #4
 8001b58:	0018      	movs	r0, r3
 8001b5a:	f7ff fa4c 	bl	8000ff6 <_ZN6PWMPinC1EP17TIM_HandleTypeDefm>
 8001b5e:	4b4b      	ldr	r3, [pc, #300]	@ (8001c8c <_ZL14InitIndicatorsv+0x144>)
 8001b60:	193a      	adds	r2, r7, r4
 8001b62:	ca03      	ldmia	r2!, {r0, r1}
 8001b64:	c303      	stmia	r3!, {r0, r1}
	backlight.Init();
 8001b66:	4b49      	ldr	r3, [pc, #292]	@ (8001c8c <_ZL14InitIndicatorsv+0x144>)
 8001b68:	0018      	movs	r0, r3
 8001b6a:	f7ff fa55 	bl	8001018 <_ZN6PWMPin4InitEv>

	brgt_cs_pin = Pin(BRGT_CS_GPIO_Port, BRGT_CS_Pin, ACTIVE_LOW);
 8001b6e:	2380      	movs	r3, #128	@ 0x80
 8001b70:	01da      	lsls	r2, r3, #7
 8001b72:	4947      	ldr	r1, [pc, #284]	@ (8001c90 <_ZL14InitIndicatorsv+0x148>)
 8001b74:	2424      	movs	r4, #36	@ 0x24
 8001b76:	1938      	adds	r0, r7, r4
 8001b78:	2301      	movs	r3, #1
 8001b7a:	f7ff f9ba 	bl	8000ef2 <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_State>
 8001b7e:	4b45      	ldr	r3, [pc, #276]	@ (8001c94 <_ZL14InitIndicatorsv+0x14c>)
 8001b80:	193a      	adds	r2, r7, r4
 8001b82:	ca03      	ldmia	r2!, {r0, r1}
 8001b84:	c303      	stmia	r3!, {r0, r1}
 8001b86:	8812      	ldrh	r2, [r2, #0]
 8001b88:	801a      	strh	r2, [r3, #0]
	brgt_ud_pin = Pin(BRGT_UD_GPIO_Port, BRGT_UD_Pin);
 8001b8a:	2380      	movs	r3, #128	@ 0x80
 8001b8c:	021a      	lsls	r2, r3, #8
 8001b8e:	4940      	ldr	r1, [pc, #256]	@ (8001c90 <_ZL14InitIndicatorsv+0x148>)
 8001b90:	2430      	movs	r4, #48	@ 0x30
 8001b92:	193b      	adds	r3, r7, r4
 8001b94:	0018      	movs	r0, r3
 8001b96:	f7ff f96c 	bl	8000e72 <_ZN3PinC1EP12GPIO_TypeDeft>
 8001b9a:	4b3f      	ldr	r3, [pc, #252]	@ (8001c98 <_ZL14InitIndicatorsv+0x150>)
 8001b9c:	193a      	adds	r2, r7, r4
 8001b9e:	ca03      	ldmia	r2!, {r0, r1}
 8001ba0:	c303      	stmia	r3!, {r0, r1}
 8001ba2:	8812      	ldrh	r2, [r2, #0]
 8001ba4:	801a      	strh	r2, [r3, #0]

	ind_la_pin  = Pin(IND_LATCH_GPIO_Port, IND_LATCH_Pin);
 8001ba6:	2390      	movs	r3, #144	@ 0x90
 8001ba8:	05d9      	lsls	r1, r3, #23
 8001baa:	243c      	movs	r4, #60	@ 0x3c
 8001bac:	193b      	adds	r3, r7, r4
 8001bae:	2240      	movs	r2, #64	@ 0x40
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	f7ff f95e 	bl	8000e72 <_ZN3PinC1EP12GPIO_TypeDeft>
 8001bb6:	4b39      	ldr	r3, [pc, #228]	@ (8001c9c <_ZL14InitIndicatorsv+0x154>)
 8001bb8:	193a      	adds	r2, r7, r4
 8001bba:	ca03      	ldmia	r2!, {r0, r1}
 8001bbc:	c303      	stmia	r3!, {r0, r1}
 8001bbe:	8812      	ldrh	r2, [r2, #0]
 8001bc0:	801a      	strh	r2, [r3, #0]

	STP_PWM_Pin ind_oe_pin = { .htim  = h_brgt_tim, .ch = TIM_CHANNEL_1 };
 8001bc2:	2514      	movs	r5, #20
 8001bc4:	197b      	adds	r3, r7, r5
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	2308      	movs	r3, #8
 8001bca:	001a      	movs	r2, r3
 8001bcc:	2100      	movs	r1, #0
 8001bce:	f00c f837 	bl	800dc40 <memset>
 8001bd2:	4b2d      	ldr	r3, [pc, #180]	@ (8001c88 <_ZL14InitIndicatorsv+0x140>)
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	197b      	adds	r3, r7, r5
 8001bd8:	601a      	str	r2, [r3, #0]
	STP_Pins    stpPins    = { .lePin = ind_la_pin, .oePin = ind_oe_pin };
 8001bda:	003b      	movs	r3, r7
 8001bdc:	4a2f      	ldr	r2, [pc, #188]	@ (8001c9c <_ZL14InitIndicatorsv+0x154>)
 8001bde:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001be0:	c313      	stmia	r3!, {r0, r1, r4}
 8001be2:	003b      	movs	r3, r7
 8001be4:	197a      	adds	r2, r7, r5
 8001be6:	330c      	adds	r3, #12
 8001be8:	ca03      	ldmia	r2!, {r0, r1}
 8001bea:	c303      	stmia	r3!, {r0, r1}

	indBlDriver = MCP4023Driver(brgt_ud_pin, brgt_cs_pin, MCP4023_10K);
 8001bec:	4b2a      	ldr	r3, [pc, #168]	@ (8001c98 <_ZL14InitIndicatorsv+0x150>)
 8001bee:	2448      	movs	r4, #72	@ 0x48
 8001bf0:	1938      	adds	r0, r7, r4
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	9203      	str	r2, [sp, #12]
 8001bf6:	4927      	ldr	r1, [pc, #156]	@ (8001c94 <_ZL14InitIndicatorsv+0x14c>)
 8001bf8:	466a      	mov	r2, sp
 8001bfa:	c970      	ldmia	r1!, {r4, r5, r6}
 8001bfc:	c270      	stmia	r2!, {r4, r5, r6}
 8001bfe:	6819      	ldr	r1, [r3, #0]
 8001c00:	685a      	ldr	r2, [r3, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f7ff f814 	bl	8000c30 <_ZN13MCP4023DriverC1E3PinS0_18MCP4023_Resistance>
 8001c08:	2448      	movs	r4, #72	@ 0x48
 8001c0a:	193a      	adds	r2, r7, r4
 8001c0c:	4b24      	ldr	r3, [pc, #144]	@ (8001ca0 <_ZL14InitIndicatorsv+0x158>)
 8001c0e:	0011      	movs	r1, r2
 8001c10:	0018      	movs	r0, r3
 8001c12:	f7ff ff27 	bl	8001a64 <_ZN13MCP4023DriveraSERKS_>
 8001c16:	193b      	adds	r3, r7, r4
 8001c18:	0018      	movs	r0, r3
 8001c1a:	f7ff f851 	bl	8000cc0 <_ZN13MCP4023DriverD1Ev>
	indDriver   = STPLEDDriver(h_spi, stpPins, &indBlDriver);
 8001c1e:	4b21      	ldr	r3, [pc, #132]	@ (8001ca4 <_ZL14InitIndicatorsv+0x15c>)
 8001c20:	681c      	ldr	r4, [r3, #0]
 8001c22:	003b      	movs	r3, r7
 8001c24:	2280      	movs	r2, #128	@ 0x80
 8001c26:	4694      	mov	ip, r2
 8001c28:	44bc      	add	ip, r7
 8001c2a:	4a1d      	ldr	r2, [pc, #116]	@ (8001ca0 <_ZL14InitIndicatorsv+0x158>)
 8001c2c:	9203      	str	r2, [sp, #12]
 8001c2e:	466a      	mov	r2, sp
 8001c30:	0011      	movs	r1, r2
 8001c32:	001a      	movs	r2, r3
 8001c34:	3208      	adds	r2, #8
 8001c36:	ca61      	ldmia	r2!, {r0, r5, r6}
 8001c38:	c161      	stmia	r1!, {r0, r5, r6}
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	0021      	movs	r1, r4
 8001c40:	4660      	mov	r0, ip
 8001c42:	f000 fc81 	bl	8002548 <_ZN12STPLEDDriverC1EP19__SPI_HandleTypeDef8STP_PinsP13MCP4023Driver>
 8001c46:	2480      	movs	r4, #128	@ 0x80
 8001c48:	193a      	adds	r2, r7, r4
 8001c4a:	4b17      	ldr	r3, [pc, #92]	@ (8001ca8 <_ZL14InitIndicatorsv+0x160>)
 8001c4c:	0011      	movs	r1, r2
 8001c4e:	0018      	movs	r0, r3
 8001c50:	f7ff ff36 	bl	8001ac0 <_ZN12STPLEDDriveraSERKS_>
 8001c54:	193b      	adds	r3, r7, r4
 8001c56:	0018      	movs	r0, r3
 8001c58:	f000 fca8 	bl	80025ac <_ZN12STPLEDDriverD1Ev>
	indManager  = IndicatorManager(&indDriver, &backlight);
 8001c5c:	4a0b      	ldr	r2, [pc, #44]	@ (8001c8c <_ZL14InitIndicatorsv+0x144>)
 8001c5e:	4912      	ldr	r1, [pc, #72]	@ (8001ca8 <_ZL14InitIndicatorsv+0x160>)
 8001c60:	24a4      	movs	r4, #164	@ 0xa4
 8001c62:	193b      	adds	r3, r7, r4
 8001c64:	0018      	movs	r0, r3
 8001c66:	f7fe ff17 	bl	8000a98 <_ZN16IndicatorManagerC1EP12STPLEDDriverP6PWMPin>
 8001c6a:	193a      	adds	r2, r7, r4
 8001c6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001cac <_ZL14InitIndicatorsv+0x164>)
 8001c6e:	0011      	movs	r1, r2
 8001c70:	0018      	movs	r0, r3
 8001c72:	f7ff ff47 	bl	8001b04 <_ZN16IndicatorManageraSERKS_>
 8001c76:	193b      	adds	r3, r7, r4
 8001c78:	0018      	movs	r0, r3
 8001c7a:	f7fe ff29 	bl	8000ad0 <_ZN16IndicatorManagerD1Ev>
}
 8001c7e:	46c0      	nop			@ (mov r8, r8)
 8001c80:	46bd      	mov	sp, r7
 8001c82:	b02f      	add	sp, #188	@ 0xbc
 8001c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c86:	46c0      	nop			@ (mov r8, r8)
 8001c88:	2000023c 	.word	0x2000023c
 8001c8c:	20000688 	.word	0x20000688
 8001c90:	48000800 	.word	0x48000800
 8001c94:	20000664 	.word	0x20000664
 8001c98:	20000670 	.word	0x20000670
 8001c9c:	2000067c 	.word	0x2000067c
 8001ca0:	200006c0 	.word	0x200006c0
 8001ca4:	20000238 	.word	0x20000238
 8001ca8:	200006f8 	.word	0x200006f8
 8001cac:	2000071c 	.word	0x2000071c

08001cb0 <_ZN13RotaryEncoderaSERKS_>:
class RotaryEncoder
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	689a      	ldr	r2, [r3, #8]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	609a      	str	r2, [r3, #8]
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	7b1a      	ldrb	r2, [r3, #12]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	731a      	strb	r2, [r3, #12]
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	220d      	movs	r2, #13
 8001cd6:	569a      	ldrsb	r2, [r3, r2]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	735a      	strb	r2, [r3, #13]
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	220e      	movs	r2, #14
 8001ce0:	569a      	ldrsb	r2, [r3, r2]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	739a      	strb	r2, [r3, #14]
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	220f      	movs	r2, #15
 8001cea:	569a      	ldrsb	r2, [r3, r2]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	73da      	strb	r2, [r3, #15]
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	7c1a      	ldrb	r2, [r3, #16]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	741a      	strb	r2, [r3, #16]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	0018      	movs	r0, r3
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	b002      	add	sp, #8
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <_ZN14EncoderManageraSERKS_>:
class EncoderManager
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
 8001d0a:	6039      	str	r1, [r7, #0]
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685a      	ldr	r2, [r3, #4]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	605a      	str	r2, [r3, #4]
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	68da      	ldr	r2, [r3, #12]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	60da      	str	r2, [r3, #12]
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	691a      	ldr	r2, [r3, #16]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	611a      	str	r2, [r3, #16]
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	695a      	ldr	r2, [r3, #20]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	615a      	str	r2, [r3, #20]
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	7e1a      	ldrb	r2, [r3, #24]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	761a      	strb	r2, [r3, #24]
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	7e5a      	ldrb	r2, [r3, #25]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	765a      	strb	r2, [r3, #25]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	0018      	movs	r0, r3
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	b002      	add	sp, #8
 8001d4c:	bd80      	pop	{r7, pc}
	...

08001d50 <_ZL12InitEncodersv>:

static void InitEncoders()
{
 8001d50:	b5b0      	push	{r4, r5, r7, lr}
 8001d52:	b0c0      	sub	sp, #256	@ 0x100
 8001d54:	af02      	add	r7, sp, #8
	hdg_a_pin   = Pin(HDG_A_GPIO_Port, HDG_A_Pin, false);
 8001d56:	497b      	ldr	r1, [pc, #492]	@ (8001f44 <_ZL12InitEncodersv+0x1f4>)
 8001d58:	0038      	movs	r0, r7
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	2240      	movs	r2, #64	@ 0x40
 8001d5e:	f7ff f8a4 	bl	8000eaa <_ZN3PinC1EP12GPIO_TypeDeftb>
 8001d62:	4b79      	ldr	r3, [pc, #484]	@ (8001f48 <_ZL12InitEncodersv+0x1f8>)
 8001d64:	003a      	movs	r2, r7
 8001d66:	ca03      	ldmia	r2!, {r0, r1}
 8001d68:	c303      	stmia	r3!, {r0, r1}
 8001d6a:	8812      	ldrh	r2, [r2, #0]
 8001d6c:	801a      	strh	r2, [r3, #0]
	hdg_b_pin   = Pin(HDG_B_GPIO_Port, HDG_B_Pin, false);
 8001d6e:	4975      	ldr	r1, [pc, #468]	@ (8001f44 <_ZL12InitEncodersv+0x1f4>)
 8001d70:	240c      	movs	r4, #12
 8001d72:	1938      	adds	r0, r7, r4
 8001d74:	2300      	movs	r3, #0
 8001d76:	2280      	movs	r2, #128	@ 0x80
 8001d78:	f7ff f897 	bl	8000eaa <_ZN3PinC1EP12GPIO_TypeDeftb>
 8001d7c:	4b73      	ldr	r3, [pc, #460]	@ (8001f4c <_ZL12InitEncodersv+0x1fc>)
 8001d7e:	193a      	adds	r2, r7, r4
 8001d80:	ca03      	ldmia	r2!, {r0, r1}
 8001d82:	c303      	stmia	r3!, {r0, r1}
 8001d84:	8812      	ldrh	r2, [r2, #0]
 8001d86:	801a      	strh	r2, [r3, #0]
	hdgEncoder  = RotaryEncoder(&hdg_a_pin, &hdg_b_pin);
 8001d88:	4a70      	ldr	r2, [pc, #448]	@ (8001f4c <_ZL12InitEncodersv+0x1fc>)
 8001d8a:	496f      	ldr	r1, [pc, #444]	@ (8001f48 <_ZL12InitEncodersv+0x1f8>)
 8001d8c:	2418      	movs	r4, #24
 8001d8e:	193b      	adds	r3, r7, r4
 8001d90:	0018      	movs	r0, r3
 8001d92:	f000 fb37 	bl	8002404 <_ZN13RotaryEncoderC1EP3PinS1_>
 8001d96:	193a      	adds	r2, r7, r4
 8001d98:	4b6d      	ldr	r3, [pc, #436]	@ (8001f50 <_ZL12InitEncodersv+0x200>)
 8001d9a:	0011      	movs	r1, r2
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	f7ff ff87 	bl	8001cb0 <_ZN13RotaryEncoderaSERKS_>
 8001da2:	193b      	adds	r3, r7, r4
 8001da4:	0018      	movs	r0, r3
 8001da6:	f000 fb4f 	bl	8002448 <_ZN13RotaryEncoderD1Ev>
	alt_a_pin   = Pin(ALT_A_GPIO_Port, ALT_A_Pin, false);
 8001daa:	2380      	movs	r3, #128	@ 0x80
 8001dac:	01da      	lsls	r2, r3, #7
 8001dae:	4965      	ldr	r1, [pc, #404]	@ (8001f44 <_ZL12InitEncodersv+0x1f4>)
 8001db0:	242c      	movs	r4, #44	@ 0x2c
 8001db2:	1938      	adds	r0, r7, r4
 8001db4:	2300      	movs	r3, #0
 8001db6:	f7ff f878 	bl	8000eaa <_ZN3PinC1EP12GPIO_TypeDeftb>
 8001dba:	4b66      	ldr	r3, [pc, #408]	@ (8001f54 <_ZL12InitEncodersv+0x204>)
 8001dbc:	193a      	adds	r2, r7, r4
 8001dbe:	ca03      	ldmia	r2!, {r0, r1}
 8001dc0:	c303      	stmia	r3!, {r0, r1}
 8001dc2:	8812      	ldrh	r2, [r2, #0]
 8001dc4:	801a      	strh	r2, [r3, #0]
	alt_b_pin   = Pin(ALT_B_GPIO_Port, ALT_B_Pin, false);
 8001dc6:	4964      	ldr	r1, [pc, #400]	@ (8001f58 <_ZL12InitEncodersv+0x208>)
 8001dc8:	2438      	movs	r4, #56	@ 0x38
 8001dca:	1938      	adds	r0, r7, r4
 8001dcc:	2300      	movs	r3, #0
 8001dce:	2240      	movs	r2, #64	@ 0x40
 8001dd0:	f7ff f86b 	bl	8000eaa <_ZN3PinC1EP12GPIO_TypeDeftb>
 8001dd4:	4b61      	ldr	r3, [pc, #388]	@ (8001f5c <_ZL12InitEncodersv+0x20c>)
 8001dd6:	193a      	adds	r2, r7, r4
 8001dd8:	ca03      	ldmia	r2!, {r0, r1}
 8001dda:	c303      	stmia	r3!, {r0, r1}
 8001ddc:	8812      	ldrh	r2, [r2, #0]
 8001dde:	801a      	strh	r2, [r3, #0]
	altEncoder  = RotaryEncoder(&alt_a_pin, &alt_b_pin);
 8001de0:	4a5e      	ldr	r2, [pc, #376]	@ (8001f5c <_ZL12InitEncodersv+0x20c>)
 8001de2:	495c      	ldr	r1, [pc, #368]	@ (8001f54 <_ZL12InitEncodersv+0x204>)
 8001de4:	2444      	movs	r4, #68	@ 0x44
 8001de6:	193b      	adds	r3, r7, r4
 8001de8:	0018      	movs	r0, r3
 8001dea:	f000 fb0b 	bl	8002404 <_ZN13RotaryEncoderC1EP3PinS1_>
 8001dee:	193a      	adds	r2, r7, r4
 8001df0:	4b5b      	ldr	r3, [pc, #364]	@ (8001f60 <_ZL12InitEncodersv+0x210>)
 8001df2:	0011      	movs	r1, r2
 8001df4:	0018      	movs	r0, r3
 8001df6:	f7ff ff5b 	bl	8001cb0 <_ZN13RotaryEncoderaSERKS_>
 8001dfa:	193b      	adds	r3, r7, r4
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	f000 fb23 	bl	8002448 <_ZN13RotaryEncoderD1Ev>
	whl_a_pin   = Pin(WHEEL_A_GPIO_Port, WHEEL_A_Pin, false);
 8001e02:	4955      	ldr	r1, [pc, #340]	@ (8001f58 <_ZL12InitEncodersv+0x208>)
 8001e04:	2458      	movs	r4, #88	@ 0x58
 8001e06:	1938      	adds	r0, r7, r4
 8001e08:	2300      	movs	r3, #0
 8001e0a:	2204      	movs	r2, #4
 8001e0c:	f7ff f84d 	bl	8000eaa <_ZN3PinC1EP12GPIO_TypeDeftb>
 8001e10:	4b54      	ldr	r3, [pc, #336]	@ (8001f64 <_ZL12InitEncodersv+0x214>)
 8001e12:	193a      	adds	r2, r7, r4
 8001e14:	ca03      	ldmia	r2!, {r0, r1}
 8001e16:	c303      	stmia	r3!, {r0, r1}
 8001e18:	8812      	ldrh	r2, [r2, #0]
 8001e1a:	801a      	strh	r2, [r3, #0]
	whl_b_pin   = Pin(WHEEL_B_GPIO_Port, WHEEL_B_Pin, false);
 8001e1c:	494e      	ldr	r1, [pc, #312]	@ (8001f58 <_ZL12InitEncodersv+0x208>)
 8001e1e:	2464      	movs	r4, #100	@ 0x64
 8001e20:	1938      	adds	r0, r7, r4
 8001e22:	2300      	movs	r3, #0
 8001e24:	2208      	movs	r2, #8
 8001e26:	f7ff f840 	bl	8000eaa <_ZN3PinC1EP12GPIO_TypeDeftb>
 8001e2a:	4b4f      	ldr	r3, [pc, #316]	@ (8001f68 <_ZL12InitEncodersv+0x218>)
 8001e2c:	193a      	adds	r2, r7, r4
 8001e2e:	ca03      	ldmia	r2!, {r0, r1}
 8001e30:	c303      	stmia	r3!, {r0, r1}
 8001e32:	8812      	ldrh	r2, [r2, #0]
 8001e34:	801a      	strh	r2, [r3, #0]
	whlEncoder  = RotaryEncoder(&whl_a_pin, &whl_b_pin);
 8001e36:	4a4c      	ldr	r2, [pc, #304]	@ (8001f68 <_ZL12InitEncodersv+0x218>)
 8001e38:	494a      	ldr	r1, [pc, #296]	@ (8001f64 <_ZL12InitEncodersv+0x214>)
 8001e3a:	2470      	movs	r4, #112	@ 0x70
 8001e3c:	193b      	adds	r3, r7, r4
 8001e3e:	0018      	movs	r0, r3
 8001e40:	f000 fae0 	bl	8002404 <_ZN13RotaryEncoderC1EP3PinS1_>
 8001e44:	193a      	adds	r2, r7, r4
 8001e46:	4b49      	ldr	r3, [pc, #292]	@ (8001f6c <_ZL12InitEncodersv+0x21c>)
 8001e48:	0011      	movs	r1, r2
 8001e4a:	0018      	movs	r0, r3
 8001e4c:	f7ff ff30 	bl	8001cb0 <_ZN13RotaryEncoderaSERKS_>
 8001e50:	193b      	adds	r3, r7, r4
 8001e52:	0018      	movs	r0, r3
 8001e54:	f000 faf8 	bl	8002448 <_ZN13RotaryEncoderD1Ev>
	crs1_a_pin  = Pin(CRS1_A_GPIO_Port, CRS1_A_Pin, false);
 8001e58:	2380      	movs	r3, #128	@ 0x80
 8001e5a:	021a      	lsls	r2, r3, #8
 8001e5c:	2390      	movs	r3, #144	@ 0x90
 8001e5e:	05d9      	lsls	r1, r3, #23
 8001e60:	2484      	movs	r4, #132	@ 0x84
 8001e62:	1938      	adds	r0, r7, r4
 8001e64:	2300      	movs	r3, #0
 8001e66:	f7ff f820 	bl	8000eaa <_ZN3PinC1EP12GPIO_TypeDeftb>
 8001e6a:	4b41      	ldr	r3, [pc, #260]	@ (8001f70 <_ZL12InitEncodersv+0x220>)
 8001e6c:	193a      	adds	r2, r7, r4
 8001e6e:	ca03      	ldmia	r2!, {r0, r1}
 8001e70:	c303      	stmia	r3!, {r0, r1}
 8001e72:	8812      	ldrh	r2, [r2, #0]
 8001e74:	801a      	strh	r2, [r3, #0]
	crs1_b_pin  = Pin(CRS1_B_GPIO_Port, CRS1_B_Pin, false);
 8001e76:	2380      	movs	r3, #128	@ 0x80
 8001e78:	00da      	lsls	r2, r3, #3
 8001e7a:	4937      	ldr	r1, [pc, #220]	@ (8001f58 <_ZL12InitEncodersv+0x208>)
 8001e7c:	2490      	movs	r4, #144	@ 0x90
 8001e7e:	1938      	adds	r0, r7, r4
 8001e80:	2300      	movs	r3, #0
 8001e82:	f7ff f812 	bl	8000eaa <_ZN3PinC1EP12GPIO_TypeDeftb>
 8001e86:	4b3b      	ldr	r3, [pc, #236]	@ (8001f74 <_ZL12InitEncodersv+0x224>)
 8001e88:	193a      	adds	r2, r7, r4
 8001e8a:	ca03      	ldmia	r2!, {r0, r1}
 8001e8c:	c303      	stmia	r3!, {r0, r1}
 8001e8e:	8812      	ldrh	r2, [r2, #0]
 8001e90:	801a      	strh	r2, [r3, #0]
	crs1Encoder = RotaryEncoder(&crs1_a_pin, &crs1_b_pin);
 8001e92:	4a38      	ldr	r2, [pc, #224]	@ (8001f74 <_ZL12InitEncodersv+0x224>)
 8001e94:	4936      	ldr	r1, [pc, #216]	@ (8001f70 <_ZL12InitEncodersv+0x220>)
 8001e96:	249c      	movs	r4, #156	@ 0x9c
 8001e98:	193b      	adds	r3, r7, r4
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	f000 fab2 	bl	8002404 <_ZN13RotaryEncoderC1EP3PinS1_>
 8001ea0:	193a      	adds	r2, r7, r4
 8001ea2:	4b35      	ldr	r3, [pc, #212]	@ (8001f78 <_ZL12InitEncodersv+0x228>)
 8001ea4:	0011      	movs	r1, r2
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	f7ff ff02 	bl	8001cb0 <_ZN13RotaryEncoderaSERKS_>
 8001eac:	193b      	adds	r3, r7, r4
 8001eae:	0018      	movs	r0, r3
 8001eb0:	f000 faca 	bl	8002448 <_ZN13RotaryEncoderD1Ev>
	crs2_a_pin  = Pin(CRS2_A_GPIO_Port, CRS2_A_Pin, false);
 8001eb4:	2380      	movs	r3, #128	@ 0x80
 8001eb6:	011a      	lsls	r2, r3, #4
 8001eb8:	4922      	ldr	r1, [pc, #136]	@ (8001f44 <_ZL12InitEncodersv+0x1f4>)
 8001eba:	24b0      	movs	r4, #176	@ 0xb0
 8001ebc:	1938      	adds	r0, r7, r4
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	f7fe fff3 	bl	8000eaa <_ZN3PinC1EP12GPIO_TypeDeftb>
 8001ec4:	4b2d      	ldr	r3, [pc, #180]	@ (8001f7c <_ZL12InitEncodersv+0x22c>)
 8001ec6:	193a      	adds	r2, r7, r4
 8001ec8:	ca03      	ldmia	r2!, {r0, r1}
 8001eca:	c303      	stmia	r3!, {r0, r1}
 8001ecc:	8812      	ldrh	r2, [r2, #0]
 8001ece:	801a      	strh	r2, [r3, #0]
	crs2_b_pin  = Pin(CRS2_B_GPIO_Port, CRS2_B_Pin, false);
 8001ed0:	2380      	movs	r3, #128	@ 0x80
 8001ed2:	019a      	lsls	r2, r3, #6
 8001ed4:	491b      	ldr	r1, [pc, #108]	@ (8001f44 <_ZL12InitEncodersv+0x1f4>)
 8001ed6:	24bc      	movs	r4, #188	@ 0xbc
 8001ed8:	1938      	adds	r0, r7, r4
 8001eda:	2300      	movs	r3, #0
 8001edc:	f7fe ffe5 	bl	8000eaa <_ZN3PinC1EP12GPIO_TypeDeftb>
 8001ee0:	4b27      	ldr	r3, [pc, #156]	@ (8001f80 <_ZL12InitEncodersv+0x230>)
 8001ee2:	193a      	adds	r2, r7, r4
 8001ee4:	ca03      	ldmia	r2!, {r0, r1}
 8001ee6:	c303      	stmia	r3!, {r0, r1}
 8001ee8:	8812      	ldrh	r2, [r2, #0]
 8001eea:	801a      	strh	r2, [r3, #0]
	crs2Encoder = RotaryEncoder(&crs2_a_pin, &crs2_b_pin);
 8001eec:	4a24      	ldr	r2, [pc, #144]	@ (8001f80 <_ZL12InitEncodersv+0x230>)
 8001eee:	4923      	ldr	r1, [pc, #140]	@ (8001f7c <_ZL12InitEncodersv+0x22c>)
 8001ef0:	24c8      	movs	r4, #200	@ 0xc8
 8001ef2:	193b      	adds	r3, r7, r4
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	f000 fa85 	bl	8002404 <_ZN13RotaryEncoderC1EP3PinS1_>
 8001efa:	193a      	adds	r2, r7, r4
 8001efc:	4b21      	ldr	r3, [pc, #132]	@ (8001f84 <_ZL12InitEncodersv+0x234>)
 8001efe:	0011      	movs	r1, r2
 8001f00:	0018      	movs	r0, r3
 8001f02:	f7ff fed5 	bl	8001cb0 <_ZN13RotaryEncoderaSERKS_>
 8001f06:	193b      	adds	r3, r7, r4
 8001f08:	0018      	movs	r0, r3
 8001f0a:	f000 fa9d 	bl	8002448 <_ZN13RotaryEncoderD1Ev>
	encManager  = EncoderManager(&hdgEncoder, &altEncoder, &whlEncoder, &crs1Encoder, &crs2Encoder);
 8001f0e:	4c17      	ldr	r4, [pc, #92]	@ (8001f6c <_ZL12InitEncodersv+0x21c>)
 8001f10:	4a13      	ldr	r2, [pc, #76]	@ (8001f60 <_ZL12InitEncodersv+0x210>)
 8001f12:	490f      	ldr	r1, [pc, #60]	@ (8001f50 <_ZL12InitEncodersv+0x200>)
 8001f14:	25dc      	movs	r5, #220	@ 0xdc
 8001f16:	1978      	adds	r0, r7, r5
 8001f18:	4b1a      	ldr	r3, [pc, #104]	@ (8001f84 <_ZL12InitEncodersv+0x234>)
 8001f1a:	9301      	str	r3, [sp, #4]
 8001f1c:	4b16      	ldr	r3, [pc, #88]	@ (8001f78 <_ZL12InitEncodersv+0x228>)
 8001f1e:	9300      	str	r3, [sp, #0]
 8001f20:	0023      	movs	r3, r4
 8001f22:	f7fe fc45 	bl	80007b0 <_ZN14EncoderManagerC1EP13RotaryEncoderS1_S1_S1_S1_>
 8001f26:	197a      	adds	r2, r7, r5
 8001f28:	4b17      	ldr	r3, [pc, #92]	@ (8001f88 <_ZL12InitEncodersv+0x238>)
 8001f2a:	0011      	movs	r1, r2
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	f7ff fee8 	bl	8001d02 <_ZN14EncoderManageraSERKS_>
 8001f32:	197b      	adds	r3, r7, r5
 8001f34:	0018      	movs	r0, r3
 8001f36:	f7fe fc61 	bl	80007fc <_ZN14EncoderManagerD1Ev>
}
 8001f3a:	46c0      	nop			@ (mov r8, r8)
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	b03e      	add	sp, #248	@ 0xf8
 8001f40:	bdb0      	pop	{r4, r5, r7, pc}
 8001f42:	46c0      	nop			@ (mov r8, r8)
 8001f44:	48000400 	.word	0x48000400
 8001f48:	20000290 	.word	0x20000290
 8001f4c:	2000029c 	.word	0x2000029c
 8001f50:	2000055c 	.word	0x2000055c
 8001f54:	20000248 	.word	0x20000248
 8001f58:	48000800 	.word	0x48000800
 8001f5c:	20000254 	.word	0x20000254
 8001f60:	20000570 	.word	0x20000570
 8001f64:	200002a8 	.word	0x200002a8
 8001f68:	200002b4 	.word	0x200002b4
 8001f6c:	20000584 	.word	0x20000584
 8001f70:	20000260 	.word	0x20000260
 8001f74:	2000026c 	.word	0x2000026c
 8001f78:	20000598 	.word	0x20000598
 8001f7c:	20000278 	.word	0x20000278
 8001f80:	20000284 	.word	0x20000284
 8001f84:	200005ac 	.word	0x200005ac
 8001f88:	20000624 	.word	0x20000624

08001f8c <_ZL21HandleOptionsCallbackP17OptionStatesUnion>:

static void HandleOptionsCallback(OptionStatesUnion *options)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
	status_ind_pin.Enable(options->obj.enStatusInd);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	785a      	ldrb	r2, [r3, #1]
 8001f98:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc8 <_ZL21HandleOptionsCallbackP17OptionStatesUnion+0x3c>)
 8001f9a:	0011      	movs	r1, r2
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	f7ff f812 	bl	8000fc6 <_ZN3Pin6EnableEb>
	aux_in_pin.Enable(options->obj.enAuxIn);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	789a      	ldrb	r2, [r3, #2]
 8001fa6:	4b09      	ldr	r3, [pc, #36]	@ (8001fcc <_ZL21HandleOptionsCallbackP17OptionStatesUnion+0x40>)
 8001fa8:	0011      	movs	r1, r2
 8001faa:	0018      	movs	r0, r3
 8001fac:	f7ff f80b 	bl	8000fc6 <_ZN3Pin6EnableEb>
	aux_out_pin.Enable(options->obj.enAuxOut);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	78da      	ldrb	r2, [r3, #3]
 8001fb4:	4b06      	ldr	r3, [pc, #24]	@ (8001fd0 <_ZL21HandleOptionsCallbackP17OptionStatesUnion+0x44>)
 8001fb6:	0011      	movs	r1, r2
 8001fb8:	0018      	movs	r0, r3
 8001fba:	f7ff f804 	bl	8000fc6 <_ZN3Pin6EnableEb>
}
 8001fbe:	46c0      	nop			@ (mov r8, r8)
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	b002      	add	sp, #8
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	46c0      	nop			@ (mov r8, r8)
 8001fc8:	20000640 	.word	0x20000640
 8001fcc:	20000690 	.word	0x20000690
 8001fd0:	2000069c 	.word	0x2000069c

08001fd4 <_ZL9InitAuxIOv>:

static void InitAuxIO()
{
 8001fd4:	b590      	push	{r4, r7, lr}
 8001fd6:	b087      	sub	sp, #28
 8001fd8:	af00      	add	r7, sp, #0
	aux_in_pin  = Pin(GPIO_IN_GPIO_Port, GPIO_IN_Pin, false);
 8001fda:	2380      	movs	r3, #128	@ 0x80
 8001fdc:	015a      	lsls	r2, r3, #5
 8001fde:	490e      	ldr	r1, [pc, #56]	@ (8002018 <_ZL9InitAuxIOv+0x44>)
 8001fe0:	0038      	movs	r0, r7
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	f7fe ff61 	bl	8000eaa <_ZN3PinC1EP12GPIO_TypeDeftb>
 8001fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800201c <_ZL9InitAuxIOv+0x48>)
 8001fea:	003a      	movs	r2, r7
 8001fec:	ca03      	ldmia	r2!, {r0, r1}
 8001fee:	c303      	stmia	r3!, {r0, r1}
 8001ff0:	8812      	ldrh	r2, [r2, #0]
 8001ff2:	801a      	strh	r2, [r3, #0]
	aux_out_pin = Pin(GPIO_OUT_GPIO_Port, GPIO_OUT_Pin);
 8001ff4:	2380      	movs	r3, #128	@ 0x80
 8001ff6:	019a      	lsls	r2, r3, #6
 8001ff8:	4909      	ldr	r1, [pc, #36]	@ (8002020 <_ZL9InitAuxIOv+0x4c>)
 8001ffa:	240c      	movs	r4, #12
 8001ffc:	193b      	adds	r3, r7, r4
 8001ffe:	0018      	movs	r0, r3
 8002000:	f7fe ff37 	bl	8000e72 <_ZN3PinC1EP12GPIO_TypeDeft>
 8002004:	4b07      	ldr	r3, [pc, #28]	@ (8002024 <_ZL9InitAuxIOv+0x50>)
 8002006:	193a      	adds	r2, r7, r4
 8002008:	ca03      	ldmia	r2!, {r0, r1}
 800200a:	c303      	stmia	r3!, {r0, r1}
 800200c:	8812      	ldrh	r2, [r2, #0]
 800200e:	801a      	strh	r2, [r3, #0]
}
 8002010:	46c0      	nop			@ (mov r8, r8)
 8002012:	46bd      	mov	sp, r7
 8002014:	b007      	add	sp, #28
 8002016:	bd90      	pop	{r4, r7, pc}
 8002018:	48000400 	.word	0x48000400
 800201c:	20000690 	.word	0x20000690
 8002020:	48000800 	.word	0x48000800
 8002024:	2000069c 	.word	0x2000069c

08002028 <_ZL11StartupTestv>:

static void StartupTest()
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
	indDriver.SetAllIndicators(0xFFFF);
 800202c:	4a13      	ldr	r2, [pc, #76]	@ (800207c <_ZL11StartupTestv+0x54>)
 800202e:	4b14      	ldr	r3, [pc, #80]	@ (8002080 <_ZL11StartupTestv+0x58>)
 8002030:	0011      	movs	r1, r2
 8002032:	0018      	movs	r0, r3
 8002034:	f000 fb1e 	bl	8002674 <_ZN12STPLEDDriver16SetAllIndicatorsEt>
	HAL_Delay(500);
 8002038:	23fa      	movs	r3, #250	@ 0xfa
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	0018      	movs	r0, r3
 800203e:	f001 fd2d 	bl	8003a9c <HAL_Delay>
	indDriver.SetAllIndicators(0);
 8002042:	4b0f      	ldr	r3, [pc, #60]	@ (8002080 <_ZL11StartupTestv+0x58>)
 8002044:	2100      	movs	r1, #0
 8002046:	0018      	movs	r0, r3
 8002048:	f000 fb14 	bl	8002674 <_ZN12STPLEDDriver16SetAllIndicatorsEt>
	HAL_Delay(500);
 800204c:	23fa      	movs	r3, #250	@ 0xfa
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	0018      	movs	r0, r3
 8002052:	f001 fd23 	bl	8003a9c <HAL_Delay>
	backlight.Set(0xFFFF);
 8002056:	4a09      	ldr	r2, [pc, #36]	@ (800207c <_ZL11StartupTestv+0x54>)
 8002058:	4b0a      	ldr	r3, [pc, #40]	@ (8002084 <_ZL11StartupTestv+0x5c>)
 800205a:	0011      	movs	r1, r2
 800205c:	0018      	movs	r0, r3
 800205e:	f7fe fce9 	bl	8000a34 <_ZN6PWMPin3SetEt>
	HAL_Delay(500);
 8002062:	23fa      	movs	r3, #250	@ 0xfa
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	0018      	movs	r0, r3
 8002068:	f001 fd18 	bl	8003a9c <HAL_Delay>
	backlight.Set(0);
 800206c:	4b05      	ldr	r3, [pc, #20]	@ (8002084 <_ZL11StartupTestv+0x5c>)
 800206e:	2100      	movs	r1, #0
 8002070:	0018      	movs	r0, r3
 8002072:	f7fe fcdf 	bl	8000a34 <_ZN6PWMPin3SetEt>
}
 8002076:	46c0      	nop			@ (mov r8, r8)
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	0000ffff 	.word	0x0000ffff
 8002080:	200006f8 	.word	0x200006f8
 8002084:	20000688 	.word	0x20000688

08002088 <_Z41__static_initialization_and_destruction_0ii>:
 8002088:	b5b0      	push	{r4, r5, r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d000      	beq.n	800209a <_Z41__static_initialization_and_destruction_0ii+0x12>
 8002098:	e0df      	b.n	800225a <_Z41__static_initialization_and_destruction_0ii+0x1d2>
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	4a8f      	ldr	r2, [pc, #572]	@ (80022dc <_Z41__static_initialization_and_destruction_0ii+0x254>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d000      	beq.n	80020a4 <_Z41__static_initialization_and_destruction_0ii+0x1c>
 80020a2:	e0da      	b.n	800225a <_Z41__static_initialization_and_destruction_0ii+0x1d2>
Options options;
 80020a4:	4b8e      	ldr	r3, [pc, #568]	@ (80022e0 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 80020a6:	0018      	movs	r0, r3
 80020a8:	f7ff f870 	bl	800118c <_ZN7OptionsC1Ev>
UsbManager usbManager;
 80020ac:	4b8d      	ldr	r3, [pc, #564]	@ (80022e4 <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 80020ae:	0018      	movs	r0, r3
 80020b0:	f7ff f882 	bl	80011b8 <_ZN10UsbManagerC1Ev>
Pin alt_a_pin;
 80020b4:	4b8c      	ldr	r3, [pc, #560]	@ (80022e8 <_Z41__static_initialization_and_destruction_0ii+0x260>)
 80020b6:	0018      	movs	r0, r3
 80020b8:	f7fe f8b2 	bl	8000220 <_ZN3PinC1Ev>
Pin alt_b_pin;
 80020bc:	4b8b      	ldr	r3, [pc, #556]	@ (80022ec <_Z41__static_initialization_and_destruction_0ii+0x264>)
 80020be:	0018      	movs	r0, r3
 80020c0:	f7fe f8ae 	bl	8000220 <_ZN3PinC1Ev>
Pin crs1_a_pin;
 80020c4:	4b8a      	ldr	r3, [pc, #552]	@ (80022f0 <_Z41__static_initialization_and_destruction_0ii+0x268>)
 80020c6:	0018      	movs	r0, r3
 80020c8:	f7fe f8aa 	bl	8000220 <_ZN3PinC1Ev>
Pin crs1_b_pin;
 80020cc:	4b89      	ldr	r3, [pc, #548]	@ (80022f4 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 80020ce:	0018      	movs	r0, r3
 80020d0:	f7fe f8a6 	bl	8000220 <_ZN3PinC1Ev>
Pin crs2_a_pin;
 80020d4:	4b88      	ldr	r3, [pc, #544]	@ (80022f8 <_Z41__static_initialization_and_destruction_0ii+0x270>)
 80020d6:	0018      	movs	r0, r3
 80020d8:	f7fe f8a2 	bl	8000220 <_ZN3PinC1Ev>
Pin crs2_b_pin;
 80020dc:	4b87      	ldr	r3, [pc, #540]	@ (80022fc <_Z41__static_initialization_and_destruction_0ii+0x274>)
 80020de:	0018      	movs	r0, r3
 80020e0:	f7fe f89e 	bl	8000220 <_ZN3PinC1Ev>
Pin hdg_a_pin;
 80020e4:	4b86      	ldr	r3, [pc, #536]	@ (8002300 <_Z41__static_initialization_and_destruction_0ii+0x278>)
 80020e6:	0018      	movs	r0, r3
 80020e8:	f7fe f89a 	bl	8000220 <_ZN3PinC1Ev>
Pin hdg_b_pin;
 80020ec:	4b85      	ldr	r3, [pc, #532]	@ (8002304 <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 80020ee:	0018      	movs	r0, r3
 80020f0:	f7fe f896 	bl	8000220 <_ZN3PinC1Ev>
Pin whl_a_pin;
 80020f4:	4b84      	ldr	r3, [pc, #528]	@ (8002308 <_Z41__static_initialization_and_destruction_0ii+0x280>)
 80020f6:	0018      	movs	r0, r3
 80020f8:	f7fe f892 	bl	8000220 <_ZN3PinC1Ev>
Pin whl_b_pin;
 80020fc:	4b83      	ldr	r3, [pc, #524]	@ (800230c <_Z41__static_initialization_and_destruction_0ii+0x284>)
 80020fe:	0018      	movs	r0, r3
 8002100:	f7fe f88e 	bl	8000220 <_ZN3PinC1Ev>
Pin alt_sw_pin;
 8002104:	4b82      	ldr	r3, [pc, #520]	@ (8002310 <_Z41__static_initialization_and_destruction_0ii+0x288>)
 8002106:	0018      	movs	r0, r3
 8002108:	f7fe f88a 	bl	8000220 <_ZN3PinC1Ev>
Pin crs1_sw_pin;
 800210c:	4b81      	ldr	r3, [pc, #516]	@ (8002314 <_Z41__static_initialization_and_destruction_0ii+0x28c>)
 800210e:	0018      	movs	r0, r3
 8002110:	f7fe f886 	bl	8000220 <_ZN3PinC1Ev>
Pin crs2_sw_pin;
 8002114:	4b80      	ldr	r3, [pc, #512]	@ (8002318 <_Z41__static_initialization_and_destruction_0ii+0x290>)
 8002116:	0018      	movs	r0, r3
 8002118:	f7fe f882 	bl	8000220 <_ZN3PinC1Ev>
Pin hdg_sw_pin;
 800211c:	4b7f      	ldr	r3, [pc, #508]	@ (800231c <_Z41__static_initialization_and_destruction_0ii+0x294>)
 800211e:	0018      	movs	r0, r3
 8002120:	f7fe f87e 	bl	8000220 <_ZN3PinC1Ev>
Pin alt_btn_pin;
 8002124:	4b7e      	ldr	r3, [pc, #504]	@ (8002320 <_Z41__static_initialization_and_destruction_0ii+0x298>)
 8002126:	0018      	movs	r0, r3
 8002128:	f7fe f87a 	bl	8000220 <_ZN3PinC1Ev>
Pin apr_btn_pin;
 800212c:	4b7d      	ldr	r3, [pc, #500]	@ (8002324 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 800212e:	0018      	movs	r0, r3
 8002130:	f7fe f876 	bl	8000220 <_ZN3PinC1Ev>
Pin bank_btn_pin;
 8002134:	4b7c      	ldr	r3, [pc, #496]	@ (8002328 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8002136:	0018      	movs	r0, r3
 8002138:	f7fe f872 	bl	8000220 <_ZN3PinC1Ev>
Pin bc_btn_pin;
 800213c:	4b7b      	ldr	r3, [pc, #492]	@ (800232c <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 800213e:	0018      	movs	r0, r3
 8002140:	f7fe f86e 	bl	8000220 <_ZN3PinC1Ev>
Pin fd_btn_pin;
 8002144:	4b7a      	ldr	r3, [pc, #488]	@ (8002330 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8002146:	0018      	movs	r0, r3
 8002148:	f7fe f86a 	bl	8000220 <_ZN3PinC1Ev>
Pin flc_btn_pin;
 800214c:	4b79      	ldr	r3, [pc, #484]	@ (8002334 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 800214e:	0018      	movs	r0, r3
 8002150:	f7fe f866 	bl	8000220 <_ZN3PinC1Ev>
Pin hdg_btn_pin;
 8002154:	4b78      	ldr	r3, [pc, #480]	@ (8002338 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8002156:	0018      	movs	r0, r3
 8002158:	f7fe f862 	bl	8000220 <_ZN3PinC1Ev>
Pin nav_btn_pin;
 800215c:	4b77      	ldr	r3, [pc, #476]	@ (800233c <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 800215e:	0018      	movs	r0, r3
 8002160:	f7fe f85e 	bl	8000220 <_ZN3PinC1Ev>
Pin ap_btn_pin;
 8002164:	4b76      	ldr	r3, [pc, #472]	@ (8002340 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8002166:	0018      	movs	r0, r3
 8002168:	f7fe f85a 	bl	8000220 <_ZN3PinC1Ev>
Pin spd_btn_pin;
 800216c:	4b75      	ldr	r3, [pc, #468]	@ (8002344 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 800216e:	0018      	movs	r0, r3
 8002170:	f7fe f856 	bl	8000220 <_ZN3PinC1Ev>
Pin vnv_btn_pin;
 8002174:	4b74      	ldr	r3, [pc, #464]	@ (8002348 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 8002176:	0018      	movs	r0, r3
 8002178:	f7fe f852 	bl	8000220 <_ZN3PinC1Ev>
Pin vs_btn_pin;
 800217c:	4b73      	ldr	r3, [pc, #460]	@ (800234c <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 800217e:	0018      	movs	r0, r3
 8002180:	f7fe f84e 	bl	8000220 <_ZN3PinC1Ev>
Pin xfr_btn_pin;
 8002184:	4b72      	ldr	r3, [pc, #456]	@ (8002350 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8002186:	0018      	movs	r0, r3
 8002188:	f7fe f84a 	bl	8000220 <_ZN3PinC1Ev>
Pin yd_btn_pin;
 800218c:	4b71      	ldr	r3, [pc, #452]	@ (8002354 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 800218e:	0018      	movs	r0, r3
 8002190:	f7fe f846 	bl	8000220 <_ZN3PinC1Ev>
ButtonPins btnPins;
 8002194:	4b70      	ldr	r3, [pc, #448]	@ (8002358 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 8002196:	0018      	movs	r0, r3
 8002198:	f7fe f898 	bl	80002cc <_ZN10ButtonPinsC1Ev>
ButtonManager btnManager;
 800219c:	4b6f      	ldr	r3, [pc, #444]	@ (800235c <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 800219e:	0018      	movs	r0, r3
 80021a0:	f7fe ff9a 	bl	80010d8 <_ZN13ButtonManagerC1Ev>
RotaryEncoder hdgEncoder;
 80021a4:	4b6e      	ldr	r3, [pc, #440]	@ (8002360 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 80021a6:	0018      	movs	r0, r3
 80021a8:	f7fe ffc2 	bl	8001130 <_ZN13RotaryEncoderC1Ev>
RotaryEncoder altEncoder;
 80021ac:	4b6d      	ldr	r3, [pc, #436]	@ (8002364 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 80021ae:	0018      	movs	r0, r3
 80021b0:	f7fe ffbe 	bl	8001130 <_ZN13RotaryEncoderC1Ev>
RotaryEncoder whlEncoder;
 80021b4:	4b6c      	ldr	r3, [pc, #432]	@ (8002368 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 80021b6:	0018      	movs	r0, r3
 80021b8:	f7fe ffba 	bl	8001130 <_ZN13RotaryEncoderC1Ev>
RotaryEncoder crs1Encoder;
 80021bc:	4b6b      	ldr	r3, [pc, #428]	@ (800236c <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 80021be:	0018      	movs	r0, r3
 80021c0:	f7fe ffb6 	bl	8001130 <_ZN13RotaryEncoderC1Ev>
RotaryEncoder crs2Encoder;
 80021c4:	4b6a      	ldr	r3, [pc, #424]	@ (8002370 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 80021c6:	0018      	movs	r0, r3
 80021c8:	f7fe ffb2 	bl	8001130 <_ZN13RotaryEncoderC1Ev>
RotaryEncoder encoders[ENCODER_COUNT];
 80021cc:	4b69      	ldr	r3, [pc, #420]	@ (8002374 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 80021ce:	2404      	movs	r4, #4
 80021d0:	001d      	movs	r5, r3
 80021d2:	e004      	b.n	80021de <_Z41__static_initialization_and_destruction_0ii+0x156>
 80021d4:	0028      	movs	r0, r5
 80021d6:	f7fe ffab 	bl	8001130 <_ZN13RotaryEncoderC1Ev>
 80021da:	3c01      	subs	r4, #1
 80021dc:	3514      	adds	r5, #20
 80021de:	2c00      	cmp	r4, #0
 80021e0:	daf8      	bge.n	80021d4 <_Z41__static_initialization_and_destruction_0ii+0x14c>
EncoderManager encManager;
 80021e2:	4b65      	ldr	r3, [pc, #404]	@ (8002378 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 80021e4:	0018      	movs	r0, r3
 80021e6:	f7fe ffbd 	bl	8001164 <_ZN14EncoderManagerC1Ev>
Pin status_ind_pin;
 80021ea:	4b64      	ldr	r3, [pc, #400]	@ (800237c <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 80021ec:	0018      	movs	r0, r3
 80021ee:	f7fe f817 	bl	8000220 <_ZN3PinC1Ev>
Pin usart_inval_pin;
 80021f2:	4b63      	ldr	r3, [pc, #396]	@ (8002380 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 80021f4:	0018      	movs	r0, r3
 80021f6:	f7fe f813 	bl	8000220 <_ZN3PinC1Ev>
Pin usb_usart_sel_pin;
 80021fa:	4b62      	ldr	r3, [pc, #392]	@ (8002384 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 80021fc:	0018      	movs	r0, r3
 80021fe:	f7fe f80f 	bl	8000220 <_ZN3PinC1Ev>
Pin brgt_cs_pin;
 8002202:	4b61      	ldr	r3, [pc, #388]	@ (8002388 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 8002204:	0018      	movs	r0, r3
 8002206:	f7fe f80b 	bl	8000220 <_ZN3PinC1Ev>
Pin brgt_ud_pin;
 800220a:	4b60      	ldr	r3, [pc, #384]	@ (800238c <_Z41__static_initialization_and_destruction_0ii+0x304>)
 800220c:	0018      	movs	r0, r3
 800220e:	f7fe f807 	bl	8000220 <_ZN3PinC1Ev>
Pin ind_la_pin;
 8002212:	4b5f      	ldr	r3, [pc, #380]	@ (8002390 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 8002214:	0018      	movs	r0, r3
 8002216:	f7fe f803 	bl	8000220 <_ZN3PinC1Ev>
PWMPin backlight;
 800221a:	4b5e      	ldr	r3, [pc, #376]	@ (8002394 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800221c:	0018      	movs	r0, r3
 800221e:	f7fe fee1 	bl	8000fe4 <_ZN6PWMPinC1Ev>
Pin aux_in_pin;
 8002222:	4b5d      	ldr	r3, [pc, #372]	@ (8002398 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 8002224:	0018      	movs	r0, r3
 8002226:	f7fd fffb 	bl	8000220 <_ZN3PinC1Ev>
Pin aux_out_pin;
 800222a:	4b5c      	ldr	r3, [pc, #368]	@ (800239c <_Z41__static_initialization_and_destruction_0ii+0x314>)
 800222c:	0018      	movs	r0, r3
 800222e:	f7fd fff7 	bl	8000220 <_ZN3PinC1Ev>
Pin bklgt_in_pin;
 8002232:	4b5b      	ldr	r3, [pc, #364]	@ (80023a0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8002234:	0018      	movs	r0, r3
 8002236:	f7fd fff3 	bl	8000220 <_ZN3PinC1Ev>
Pin bklgt_out_pin;
 800223a:	4b5a      	ldr	r3, [pc, #360]	@ (80023a4 <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 800223c:	0018      	movs	r0, r3
 800223e:	f7fd ffef 	bl	8000220 <_ZN3PinC1Ev>
MCP4023Driver indBlDriver;
 8002242:	4b59      	ldr	r3, [pc, #356]	@ (80023a8 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8002244:	0018      	movs	r0, r3
 8002246:	f7fe fef9 	bl	800103c <_ZN13MCP4023DriverC1Ev>
STPLEDDriver indDriver;
 800224a:	4b58      	ldr	r3, [pc, #352]	@ (80023ac <_Z41__static_initialization_and_destruction_0ii+0x324>)
 800224c:	0018      	movs	r0, r3
 800224e:	f7fe ff2b 	bl	80010a8 <_ZN12STPLEDDriverC1Ev>
IndicatorManager indManager;
 8002252:	4b57      	ldr	r3, [pc, #348]	@ (80023b0 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 8002254:	0018      	movs	r0, r3
 8002256:	f7fe ff57 	bl	8001108 <_ZN16IndicatorManagerC1Ev>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d139      	bne.n	80022d4 <_Z41__static_initialization_and_destruction_0ii+0x24c>
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	4a1e      	ldr	r2, [pc, #120]	@ (80022dc <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d135      	bne.n	80022d4 <_Z41__static_initialization_and_destruction_0ii+0x24c>
 8002268:	4b51      	ldr	r3, [pc, #324]	@ (80023b0 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 800226a:	0018      	movs	r0, r3
 800226c:	f7fe fc30 	bl	8000ad0 <_ZN16IndicatorManagerD1Ev>
STPLEDDriver indDriver;
 8002270:	4b4e      	ldr	r3, [pc, #312]	@ (80023ac <_Z41__static_initialization_and_destruction_0ii+0x324>)
 8002272:	0018      	movs	r0, r3
 8002274:	f000 f99a 	bl	80025ac <_ZN12STPLEDDriverD1Ev>
MCP4023Driver indBlDriver;
 8002278:	4b4b      	ldr	r3, [pc, #300]	@ (80023a8 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 800227a:	0018      	movs	r0, r3
 800227c:	f7fe fd20 	bl	8000cc0 <_ZN13MCP4023DriverD1Ev>
EncoderManager encManager;
 8002280:	4b3d      	ldr	r3, [pc, #244]	@ (8002378 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8002282:	0018      	movs	r0, r3
 8002284:	f7fe faba 	bl	80007fc <_ZN14EncoderManagerD1Ev>
RotaryEncoder encoders[ENCODER_COUNT];
 8002288:	4c4a      	ldr	r4, [pc, #296]	@ (80023b4 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800228a:	4b3a      	ldr	r3, [pc, #232]	@ (8002374 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 800228c:	429c      	cmp	r4, r3
 800228e:	d005      	beq.n	800229c <_Z41__static_initialization_and_destruction_0ii+0x214>
 8002290:	3c14      	subs	r4, #20
 8002292:	6823      	ldr	r3, [r4, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	0020      	movs	r0, r4
 8002298:	4798      	blx	r3
 800229a:	e7f6      	b.n	800228a <_Z41__static_initialization_and_destruction_0ii+0x202>
RotaryEncoder crs2Encoder;
 800229c:	4b34      	ldr	r3, [pc, #208]	@ (8002370 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 800229e:	0018      	movs	r0, r3
 80022a0:	f000 f8d2 	bl	8002448 <_ZN13RotaryEncoderD1Ev>
RotaryEncoder crs1Encoder;
 80022a4:	4b31      	ldr	r3, [pc, #196]	@ (800236c <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 80022a6:	0018      	movs	r0, r3
 80022a8:	f000 f8ce 	bl	8002448 <_ZN13RotaryEncoderD1Ev>
RotaryEncoder whlEncoder;
 80022ac:	4b2e      	ldr	r3, [pc, #184]	@ (8002368 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 80022ae:	0018      	movs	r0, r3
 80022b0:	f000 f8ca 	bl	8002448 <_ZN13RotaryEncoderD1Ev>
RotaryEncoder altEncoder;
 80022b4:	4b2b      	ldr	r3, [pc, #172]	@ (8002364 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 80022b6:	0018      	movs	r0, r3
 80022b8:	f000 f8c6 	bl	8002448 <_ZN13RotaryEncoderD1Ev>
RotaryEncoder hdgEncoder;
 80022bc:	4b28      	ldr	r3, [pc, #160]	@ (8002360 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 80022be:	0018      	movs	r0, r3
 80022c0:	f000 f8c2 	bl	8002448 <_ZN13RotaryEncoderD1Ev>
ButtonManager btnManager;
 80022c4:	4b25      	ldr	r3, [pc, #148]	@ (800235c <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 80022c6:	0018      	movs	r0, r3
 80022c8:	f7fe f89c 	bl	8000404 <_ZN13ButtonManagerD1Ev>
UsbManager usbManager;
 80022cc:	4b05      	ldr	r3, [pc, #20]	@ (80022e4 <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 80022ce:	0018      	movs	r0, r3
 80022d0:	f000 fade 	bl	8002890 <_ZN10UsbManagerD1Ev>
}
 80022d4:	46c0      	nop			@ (mov r8, r8)
 80022d6:	46bd      	mov	sp, r7
 80022d8:	b002      	add	sp, #8
 80022da:	bdb0      	pop	{r4, r5, r7, pc}
 80022dc:	0000ffff 	.word	0x0000ffff
 80022e0:	200001f4 	.word	0x200001f4
 80022e4:	20000204 	.word	0x20000204
 80022e8:	20000248 	.word	0x20000248
 80022ec:	20000254 	.word	0x20000254
 80022f0:	20000260 	.word	0x20000260
 80022f4:	2000026c 	.word	0x2000026c
 80022f8:	20000278 	.word	0x20000278
 80022fc:	20000284 	.word	0x20000284
 8002300:	20000290 	.word	0x20000290
 8002304:	2000029c 	.word	0x2000029c
 8002308:	200002a8 	.word	0x200002a8
 800230c:	200002b4 	.word	0x200002b4
 8002310:	200002c0 	.word	0x200002c0
 8002314:	200002cc 	.word	0x200002cc
 8002318:	200002d8 	.word	0x200002d8
 800231c:	200002e4 	.word	0x200002e4
 8002320:	200002f0 	.word	0x200002f0
 8002324:	200002fc 	.word	0x200002fc
 8002328:	20000308 	.word	0x20000308
 800232c:	20000314 	.word	0x20000314
 8002330:	20000320 	.word	0x20000320
 8002334:	2000032c 	.word	0x2000032c
 8002338:	20000338 	.word	0x20000338
 800233c:	20000344 	.word	0x20000344
 8002340:	20000350 	.word	0x20000350
 8002344:	2000035c 	.word	0x2000035c
 8002348:	20000368 	.word	0x20000368
 800234c:	20000374 	.word	0x20000374
 8002350:	20000380 	.word	0x20000380
 8002354:	2000038c 	.word	0x2000038c
 8002358:	20000398 	.word	0x20000398
 800235c:	20000470 	.word	0x20000470
 8002360:	2000055c 	.word	0x2000055c
 8002364:	20000570 	.word	0x20000570
 8002368:	20000584 	.word	0x20000584
 800236c:	20000598 	.word	0x20000598
 8002370:	200005ac 	.word	0x200005ac
 8002374:	200005c0 	.word	0x200005c0
 8002378:	20000624 	.word	0x20000624
 800237c:	20000640 	.word	0x20000640
 8002380:	2000064c 	.word	0x2000064c
 8002384:	20000658 	.word	0x20000658
 8002388:	20000664 	.word	0x20000664
 800238c:	20000670 	.word	0x20000670
 8002390:	2000067c 	.word	0x2000067c
 8002394:	20000688 	.word	0x20000688
 8002398:	20000690 	.word	0x20000690
 800239c:	2000069c 	.word	0x2000069c
 80023a0:	200006a8 	.word	0x200006a8
 80023a4:	200006b4 	.word	0x200006b4
 80023a8:	200006c0 	.word	0x200006c0
 80023ac:	200006f8 	.word	0x200006f8
 80023b0:	2000071c 	.word	0x2000071c
 80023b4:	20000624 	.word	0x20000624

080023b8 <_GLOBAL__sub_I_optionStates>:
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	4b03      	ldr	r3, [pc, #12]	@ (80023cc <_GLOBAL__sub_I_optionStates+0x14>)
 80023be:	0019      	movs	r1, r3
 80023c0:	2001      	movs	r0, #1
 80023c2:	f7ff fe61 	bl	8002088 <_Z41__static_initialization_and_destruction_0ii>
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	46c0      	nop			@ (mov r8, r8)
 80023cc:	0000ffff 	.word	0x0000ffff

080023d0 <_GLOBAL__sub_D_optionStates>:
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	4b03      	ldr	r3, [pc, #12]	@ (80023e4 <_GLOBAL__sub_D_optionStates+0x14>)
 80023d6:	0019      	movs	r1, r3
 80023d8:	2000      	movs	r0, #0
 80023da:	f7ff fe55 	bl	8002088 <_Z41__static_initialization_and_destruction_0ii>
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	46c0      	nop			@ (mov r8, r8)
 80023e4:	0000ffff 	.word	0x0000ffff

080023e8 <_ZN3Pin8GetStateEOi>:
	bool GetState(int &&_) {
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
		return (bool)this->state;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	79db      	ldrb	r3, [r3, #7]
 80023f6:	1e5a      	subs	r2, r3, #1
 80023f8:	4193      	sbcs	r3, r2
 80023fa:	b2db      	uxtb	r3, r3
	};
 80023fc:	0018      	movs	r0, r3
 80023fe:	46bd      	mov	sp, r7
 8002400:	b002      	add	sp, #8
 8002402:	bd80      	pop	{r7, pc}

08002404 <_ZN13RotaryEncoderC1EP3PinS1_>:
 *      Author: Daxxn
 */

#include <RotaryEncoder.h>

RotaryEncoder::RotaryEncoder(Pin *a, Pin *b)
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
 8002410:	4a0c      	ldr	r2, [pc, #48]	@ (8002444 <_ZN13RotaryEncoderC1EP3PinS1_+0x40>)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2201      	movs	r2, #1
 800241a:	735a      	strb	r2, [r3, #13]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2200      	movs	r2, #0
 8002420:	739a      	strb	r2, [r3, #14]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2200      	movs	r2, #0
 8002426:	73da      	strb	r2, [r3, #15]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	741a      	strb	r2, [r3, #16]
{
	this->a = a;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	68ba      	ldr	r2, [r7, #8]
 8002432:	605a      	str	r2, [r3, #4]
	this->b = b;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	609a      	str	r2, [r3, #8]
}
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	0018      	movs	r0, r3
 800243e:	46bd      	mov	sp, r7
 8002440:	b004      	add	sp, #16
 8002442:	bd80      	pop	{r7, pc}
 8002444:	0800deb8 	.word	0x0800deb8

08002448 <_ZN13RotaryEncoderD1Ev>:

RotaryEncoder::~RotaryEncoder()
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	4a06      	ldr	r2, [pc, #24]	@ (800246c <_ZN13RotaryEncoderD1Ev+0x24>)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	601a      	str	r2, [r3, #0]
{
	this->a = NULL;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	605a      	str	r2, [r3, #4]
	this->b = NULL;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	609a      	str	r2, [r3, #8]
}
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	0018      	movs	r0, r3
 8002466:	46bd      	mov	sp, r7
 8002468:	b002      	add	sp, #8
 800246a:	bd80      	pop	{r7, pc}
 800246c:	0800deb8 	.word	0x0800deb8

08002470 <_ZN13RotaryEncoderD0Ev>:
RotaryEncoder::~RotaryEncoder()
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
}
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	0018      	movs	r0, r3
 800247c:	f7ff ffe4 	bl	8002448 <_ZN13RotaryEncoderD1Ev>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2114      	movs	r1, #20
 8002484:	0018      	movs	r0, r3
 8002486:	f00b fae5 	bl	800da54 <_ZdlPvj>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	0018      	movs	r0, r3
 800248e:	46bd      	mov	sp, r7
 8002490:	b002      	add	sp, #8
 8002492:	bd80      	pop	{r7, pc}

08002494 <_ZN13RotaryEncoder11OnInterruptEv>:

void RotaryEncoder::OnInterrupt()
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
	this->b->Read();
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	0018      	movs	r0, r3
 80024a2:	f7fd fecc 	bl	800023e <_ZN3Pin4ReadEv>
	if (this->b->GetState(0)) {
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	2200      	movs	r2, #0
 80024ac:	60fa      	str	r2, [r7, #12]
 80024ae:	220c      	movs	r2, #12
 80024b0:	18ba      	adds	r2, r7, r2
 80024b2:	0011      	movs	r1, r2
 80024b4:	0018      	movs	r0, r3
 80024b6:	f7ff ff97 	bl	80023e8 <_ZN3Pin8GetStateEOi>
 80024ba:	1e03      	subs	r3, r0, #0
 80024bc:	d00c      	beq.n	80024d8 <_ZN13RotaryEncoder11OnInterruptEv+0x44>
		this->dir = ENC_CW;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2202      	movs	r2, #2
 80024c2:	735a      	strb	r2, [r3, #13]
		this->count += 1;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	7b9b      	ldrb	r3, [r3, #14]
 80024c8:	b25b      	sxtb	r3, r3
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	3301      	adds	r3, #1
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	b25a      	sxtb	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	739a      	strb	r2, [r3, #14]
 80024d6:	e00b      	b.n	80024f0 <_ZN13RotaryEncoder11OnInterruptEv+0x5c>
	}
	else {
		this->dir = ENC_CCW;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	735a      	strb	r2, [r3, #13]
		this->count -= 1;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	7b9b      	ldrb	r3, [r3, #14]
 80024e2:	b25b      	sxtb	r3, r3
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	3b01      	subs	r3, #1
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	b25a      	sxtb	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	739a      	strb	r2, [r3, #14]
	}
	this->stateChanged = true;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	741a      	strb	r2, [r3, #16]
}
 80024f6:	46c0      	nop			@ (mov r8, r8)
 80024f8:	46bd      	mov	sp, r7
 80024fa:	b004      	add	sp, #16
 80024fc:	bd80      	pop	{r7, pc}

080024fe <_ZN13RotaryEncoder12GetDirectionEv>:
	}
	this->stateChanged = true;
}

EncoderDirection RotaryEncoder::GetDirection()
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b082      	sub	sp, #8
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
	this->stateChanged = false;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	741a      	strb	r2, [r3, #16]
	return this->dir;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	7b5b      	ldrb	r3, [r3, #13]
 8002510:	b25b      	sxtb	r3, r3
}
 8002512:	0018      	movs	r0, r3
 8002514:	46bd      	mov	sp, r7
 8002516:	b002      	add	sp, #8
 8002518:	bd80      	pop	{r7, pc}

0800251a <_ZN13RotaryEncoder11GetPositionEv>:

int8_t RotaryEncoder::GetPosition()
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b084      	sub	sp, #16
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
	int8_t pos = this->count;
 8002522:	210f      	movs	r1, #15
 8002524:	187b      	adds	r3, r7, r1
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	7b92      	ldrb	r2, [r2, #14]
 800252a:	701a      	strb	r2, [r3, #0]
	this->stateChanged = false;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	741a      	strb	r2, [r3, #16]
	this->count = 0;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	739a      	strb	r2, [r3, #14]
	return pos;
 8002538:	187b      	adds	r3, r7, r1
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	b25b      	sxtb	r3, r3
}
 800253e:	0018      	movs	r0, r3
 8002540:	46bd      	mov	sp, r7
 8002542:	b004      	add	sp, #16
 8002544:	bd80      	pop	{r7, pc}
	...

08002548 <_ZN12STPLEDDriverC1EP19__SPI_HandleTypeDef8STP_PinsP13MCP4023Driver>:
	this->h_spi           = spi;
	this->pins            = pins;
	this->rxUnion.integer = defaultValue;
}

STPLEDDriver::STPLEDDriver(SPI_HandleTypeDef *spi, STP_Pins pins, MCP4023Driver *blDriver)
 8002548:	b082      	sub	sp, #8
 800254a:	b590      	push	{r4, r7, lr}
 800254c:	b083      	sub	sp, #12
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
 8002552:	6039      	str	r1, [r7, #0]
 8002554:	2418      	movs	r4, #24
 8002556:	1939      	adds	r1, r7, r4
 8002558:	600a      	str	r2, [r1, #0]
 800255a:	604b      	str	r3, [r1, #4]
 800255c:	4a11      	ldr	r2, [pc, #68]	@ (80025a4 <_ZN12STPLEDDriverC1EP19__SPI_HandleTypeDef8STP_PinsP13MCP4023Driver+0x5c>)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a10      	ldr	r2, [pc, #64]	@ (80025a8 <_ZN12STPLEDDriverC1EP19__SPI_HandleTypeDef8STP_PinsP13MCP4023Driver+0x60>)
 8002566:	819a      	strh	r2, [r3, #12]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3310      	adds	r3, #16
 800256c:	0018      	movs	r0, r3
 800256e:	f7fe fd8d 	bl	800108c <_ZN8STP_PinsC1Ev>
{
	this->h_spi           = spi;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	605a      	str	r2, [r3, #4]
	this->pins            = pins;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	193a      	adds	r2, r7, r4
 800257c:	3310      	adds	r3, #16
 800257e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002580:	c313      	stmia	r3!, {r0, r1, r4}
 8002582:	ca03      	ldmia	r2!, {r0, r1}
 8002584:	c303      	stmia	r3!, {r0, r1}
	this->h_bl            = blDriver;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800258a:	609a      	str	r2, [r3, #8]
	this->rxUnion.integer = 0;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	81da      	strh	r2, [r3, #14]
}
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	0018      	movs	r0, r3
 8002596:	46bd      	mov	sp, r7
 8002598:	b003      	add	sp, #12
 800259a:	bc90      	pop	{r4, r7}
 800259c:	bc08      	pop	{r3}
 800259e:	b002      	add	sp, #8
 80025a0:	4718      	bx	r3
 80025a2:	46c0      	nop			@ (mov r8, r8)
 80025a4:	0800dec8 	.word	0x0800dec8
 80025a8:	00007fff 	.word	0x00007fff

080025ac <_ZN12STPLEDDriverD1Ev>:
	this->pins            = pins;
	this->h_bl            = blDriver;
	this->rxUnion.integer = defaultValue;
}

STPLEDDriver::~STPLEDDriver()
 80025ac:	b590      	push	{r4, r7, lr}
 80025ae:	b087      	sub	sp, #28
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	4a10      	ldr	r2, [pc, #64]	@ (80025f8 <_ZN12STPLEDDriverD1Ev+0x4c>)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	601a      	str	r2, [r3, #0]
{
	this->h_spi           = NULL;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	605a      	str	r2, [r3, #4]
	this->h_bl            = NULL;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	609a      	str	r2, [r3, #8]
	this->pins            = { };
 80025c6:	240c      	movs	r4, #12
 80025c8:	193b      	adds	r3, r7, r4
 80025ca:	0018      	movs	r0, r3
 80025cc:	f7fd fe28 	bl	8000220 <_ZN3PinC1Ev>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3310      	adds	r3, #16
 80025d4:	2214      	movs	r2, #20
 80025d6:	2100      	movs	r1, #0
 80025d8:	0018      	movs	r0, r3
 80025da:	f00b fb31 	bl	800dc40 <memset>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	193a      	adds	r2, r7, r4
 80025e2:	3310      	adds	r3, #16
 80025e4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80025e6:	c313      	stmia	r3!, {r0, r1, r4}
	this->rxUnion.integer = 0;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	81da      	strh	r2, [r3, #14]
}
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	0018      	movs	r0, r3
 80025f2:	46bd      	mov	sp, r7
 80025f4:	b007      	add	sp, #28
 80025f6:	bd90      	pop	{r4, r7, pc}
 80025f8:	0800dec8 	.word	0x0800dec8

080025fc <_ZN12STPLEDDriverD0Ev>:
STPLEDDriver::~STPLEDDriver()
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
}
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	0018      	movs	r0, r3
 8002608:	f7ff ffd0 	bl	80025ac <_ZN12STPLEDDriverD1Ev>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2124      	movs	r1, #36	@ 0x24
 8002610:	0018      	movs	r0, r3
 8002612:	f00b fa1f 	bl	800da54 <_ZdlPvj>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	0018      	movs	r0, r3
 800261a:	46bd      	mov	sp, r7
 800261c:	b002      	add	sp, #8
 800261e:	bd80      	pop	{r7, pc}

08002620 <_ZN12STPLEDDriver4InitEv>:

HAL_StatusTypeDef STPLEDDriver::Init()
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
	if (this->h_bl->Init() != HAL_OK) {
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	0018      	movs	r0, r3
 800262e:	f7fe fb67 	bl	8000d00 <_ZN13MCP4023Driver4InitEv>
 8002632:	0003      	movs	r3, r0
 8002634:	1e5a      	subs	r2, r3, #1
 8002636:	4193      	sbcs	r3, r2
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <_ZN12STPLEDDriver4InitEv+0x22>
		return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e014      	b.n	800266c <_ZN12STPLEDDriver4InitEv+0x4c>
	}

	HAL_TIM_PWM_Start(this->pins.oePin.htim, this->pins.oePin.ch);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69da      	ldr	r2, [r3, #28]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	0019      	movs	r1, r3
 800264c:	0010      	movs	r0, r2
 800264e:	f005 f803 	bl	8007658 <HAL_TIM_PWM_Start>
	if (this->SendState() != HAL_OK) {
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	0018      	movs	r0, r3
 8002656:	f000 f8a0 	bl	800279a <_ZN12STPLEDDriver9SendStateEv>
 800265a:	0003      	movs	r3, r0
 800265c:	1e5a      	subs	r2, r3, #1
 800265e:	4193      	sbcs	r3, r2
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <_ZN12STPLEDDriver4InitEv+0x4a>
		return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e000      	b.n	800266c <_ZN12STPLEDDriver4InitEv+0x4c>
	}

	return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	0018      	movs	r0, r3
 800266e:	46bd      	mov	sp, r7
 8002670:	b002      	add	sp, #8
 8002672:	bd80      	pop	{r7, pc}

08002674 <_ZN12STPLEDDriver16SetAllIndicatorsEt>:
	this->rxUnion.integer ^= (1 << index);
	this->SendState();
}

void STPLEDDriver::SetAllIndicators(uint16_t states)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	000a      	movs	r2, r1
 800267e:	1cbb      	adds	r3, r7, #2
 8002680:	801a      	strh	r2, [r3, #0]
	this->rxUnion.integer = states;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	1cba      	adds	r2, r7, #2
 8002686:	8812      	ldrh	r2, [r2, #0]
 8002688:	81da      	strh	r2, [r3, #14]
	this->SendState();
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	0018      	movs	r0, r3
 800268e:	f000 f884 	bl	800279a <_ZN12STPLEDDriver9SendStateEv>
}
 8002692:	46c0      	nop			@ (mov r8, r8)
 8002694:	46bd      	mov	sp, r7
 8002696:	b002      	add	sp, #8
 8002698:	bd80      	pop	{r7, pc}

0800269a <_ZN12STPLEDDriver16SetMaxBrightnessEh>:
	this->rxUnion.integer = 0;
	this->SendState();
}

void STPLEDDriver::SetMaxBrightness(uint8_t bright)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b082      	sub	sp, #8
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
 80026a2:	000a      	movs	r2, r1
 80026a4:	1cfb      	adds	r3, r7, #3
 80026a6:	701a      	strb	r2, [r3, #0]
	this->h_bl->SetWiper(bright);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	1cfb      	adds	r3, r7, #3
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	0019      	movs	r1, r3
 80026b2:	0010      	movs	r0, r2
 80026b4:	f7fe fb38 	bl	8000d28 <_ZN13MCP4023Driver8SetWiperEh>
}
 80026b8:	46c0      	nop			@ (mov r8, r8)
 80026ba:	46bd      	mov	sp, r7
 80026bc:	b002      	add	sp, #8
 80026be:	bd80      	pop	{r7, pc}

080026c0 <_ZN12STPLEDDriver13SetBrightnessEt>:

void STPLEDDriver::SetBrightness(uint16_t bright)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	000a      	movs	r2, r1
 80026ca:	1cbb      	adds	r3, r7, #2
 80026cc:	801a      	strh	r2, [r3, #0]
	this->brightness = bright;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	1cba      	adds	r2, r7, #2
 80026d2:	8812      	ldrh	r2, [r2, #0]
 80026d4:	819a      	strh	r2, [r3, #12]
	this->SetBright();
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	0018      	movs	r0, r3
 80026da:	f000 f804 	bl	80026e6 <_ZN12STPLEDDriver9SetBrightEv>
}
 80026de:	46c0      	nop			@ (mov r8, r8)
 80026e0:	46bd      	mov	sp, r7
 80026e2:	b002      	add	sp, #8
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <_ZN12STPLEDDriver9SetBrightEv>:

void STPLEDDriver::SetBright()
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b082      	sub	sp, #8
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(this->pins.oePin.htim, this->pins.oePin.ch, this->brightness);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d106      	bne.n	8002704 <_ZN12STPLEDDriver9SetBrightEv+0x1e>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	899a      	ldrh	r2, [r3, #12]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002702:	e01b      	b.n	800273c <_ZN12STPLEDDriver9SetBrightEv+0x56>
	__HAL_TIM_SET_COMPARE(this->pins.oePin.htim, this->pins.oePin.ch, this->brightness);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	2b04      	cmp	r3, #4
 800270a:	d106      	bne.n	800271a <_ZN12STPLEDDriver9SetBrightEv+0x34>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	899a      	ldrh	r2, [r3, #12]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	69db      	ldr	r3, [r3, #28]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002718:	e010      	b.n	800273c <_ZN12STPLEDDriver9SetBrightEv+0x56>
	__HAL_TIM_SET_COMPARE(this->pins.oePin.htim, this->pins.oePin.ch, this->brightness);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	2b08      	cmp	r3, #8
 8002720:	d106      	bne.n	8002730 <_ZN12STPLEDDriver9SetBrightEv+0x4a>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	899a      	ldrh	r2, [r3, #12]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800272e:	e005      	b.n	800273c <_ZN12STPLEDDriver9SetBrightEv+0x56>
	__HAL_TIM_SET_COMPARE(this->pins.oePin.htim, this->pins.oePin.ch, this->brightness);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	899a      	ldrh	r2, [r3, #12]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	69db      	ldr	r3, [r3, #28]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800273c:	46c0      	nop			@ (mov r8, r8)
 800273e:	46bd      	mov	sp, r7
 8002740:	b002      	add	sp, #8
 8002742:	bd80      	pop	{r7, pc}

08002744 <_ZN12STPLEDDriver11ClearBrightEv>:

void STPLEDDriver::ClearBright()
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(this->pins.oePin.htim, this->pins.oePin.ch, 0);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d105      	bne.n	8002760 <_ZN12STPLEDDriver11ClearBrightEv+0x1c>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	69db      	ldr	r3, [r3, #28]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2200      	movs	r2, #0
 800275c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800275e:	e018      	b.n	8002792 <_ZN12STPLEDDriver11ClearBrightEv+0x4e>
	__HAL_TIM_SET_COMPARE(this->pins.oePin.htim, this->pins.oePin.ch, 0);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	2b04      	cmp	r3, #4
 8002766:	d105      	bne.n	8002774 <_ZN12STPLEDDriver11ClearBrightEv+0x30>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	69db      	ldr	r3, [r3, #28]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2200      	movs	r2, #0
 8002770:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002772:	e00e      	b.n	8002792 <_ZN12STPLEDDriver11ClearBrightEv+0x4e>
	__HAL_TIM_SET_COMPARE(this->pins.oePin.htim, this->pins.oePin.ch, 0);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	2b08      	cmp	r3, #8
 800277a:	d105      	bne.n	8002788 <_ZN12STPLEDDriver11ClearBrightEv+0x44>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	69db      	ldr	r3, [r3, #28]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2200      	movs	r2, #0
 8002784:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8002786:	e004      	b.n	8002792 <_ZN12STPLEDDriver11ClearBrightEv+0x4e>
	__HAL_TIM_SET_COMPARE(this->pins.oePin.htim, this->pins.oePin.ch, 0);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	69db      	ldr	r3, [r3, #28]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2200      	movs	r2, #0
 8002790:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002792:	46c0      	nop			@ (mov r8, r8)
 8002794:	46bd      	mov	sp, r7
 8002796:	b002      	add	sp, #8
 8002798:	bd80      	pop	{r7, pc}

0800279a <_ZN12STPLEDDriver9SendStateEv>:

HAL_StatusTypeDef STPLEDDriver::SendState()
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b082      	sub	sp, #8
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
	this->ClearBright();
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	0018      	movs	r0, r3
 80027a6:	f7ff ffcd 	bl	8002744 <_ZN12STPLEDDriver11ClearBrightEv>
	this->pins.lePin.Write(true);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	3310      	adds	r3, #16
 80027ae:	2101      	movs	r1, #1
 80027b0:	0018      	movs	r0, r3
 80027b2:	f7fe fa2a 	bl	8000c0a <_ZN3Pin5WriteEb>
	if (HAL_SPI_Transmit(this->h_spi, this->rxUnion.bytes, 2, 100) != HAL_OK) {
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6858      	ldr	r0, [r3, #4]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	330e      	adds	r3, #14
 80027be:	0019      	movs	r1, r3
 80027c0:	2364      	movs	r3, #100	@ 0x64
 80027c2:	2202      	movs	r2, #2
 80027c4:	f004 fb50 	bl	8006e68 <HAL_SPI_Transmit>
 80027c8:	0003      	movs	r3, r0
 80027ca:	1e5a      	subs	r2, r3, #1
 80027cc:	4193      	sbcs	r3, r2
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <_ZN12STPLEDDriver9SendStateEv+0x3e>
		return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e00a      	b.n	80027ee <_ZN12STPLEDDriver9SendStateEv+0x54>
	}
	this->pins.lePin.Write(false);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3310      	adds	r3, #16
 80027dc:	2100      	movs	r1, #0
 80027de:	0018      	movs	r0, r3
 80027e0:	f7fe fa13 	bl	8000c0a <_ZN3Pin5WriteEb>
	this->SetBright();
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	0018      	movs	r0, r3
 80027e8:	f7ff ff7d 	bl	80026e6 <_ZN12STPLEDDriver9SetBrightEv>
	return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	0018      	movs	r0, r3
 80027f0:	46bd      	mov	sp, r7
 80027f2:	b002      	add	sp, #8
 80027f4:	bd80      	pop	{r7, pc}
	...

080027f8 <_ZN10UsbManagerC1EP17TIM_HandleTypeDefP11StatusUnionP13ButtonManagerP16IndicatorManagerP14EncoderManagerPFvP17OptionStatesUnionE>:
 */

#include <UsbManager.h>
#include "usb_device.h"

UsbManager::UsbManager(
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
 8002804:	603b      	str	r3, [r7, #0]
		StatusUnion           *status,
		ButtonManager         *buttons,
		IndicatorManager      *indicators,
		EncoderManager        *encoders,
		OptionsChangedCallback optionsCallback
	)
 8002806:	4a21      	ldr	r2, [pc, #132]	@ (800288c <_ZN10UsbManagerC1EP17TIM_HandleTypeDefP11StatusUnionP13ButtonManagerP16IndicatorManagerP14EncoderManagerPFvP17OptionStatesUnionE+0x94>)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2224      	movs	r2, #36	@ 0x24
 8002810:	2100      	movs	r1, #0
 8002812:	5499      	strb	r1, [r3, r2]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2225      	movs	r2, #37	@ 0x25
 8002818:	2100      	movs	r1, #0
 800281a:	5499      	strb	r1, [r3, r2]
{
	this->htim       = htim;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	68ba      	ldr	r2, [r7, #8]
 8002820:	605a      	str	r2, [r3, #4]
	this->buttons    = buttons;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	609a      	str	r2, [r3, #8]
	this->indicators = indicators;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	60da      	str	r2, [r3, #12]
	this->encoders   = encoders;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	69fa      	ldr	r2, [r7, #28]
 8002832:	611a      	str	r2, [r3, #16]
	this->txBuffer   = new uint8_t[USB_TXBUFFER_LEN]();
 8002834:	2018      	movs	r0, #24
 8002836:	f00b f915 	bl	800da64 <_Znaj>
 800283a:	0003      	movs	r3, r0
 800283c:	0019      	movs	r1, r3
 800283e:	000a      	movs	r2, r1
 8002840:	2317      	movs	r3, #23
 8002842:	e003      	b.n	800284c <_ZN10UsbManagerC1EP17TIM_HandleTypeDefP11StatusUnionP13ButtonManagerP16IndicatorManagerP14EncoderManagerPFvP17OptionStatesUnionE+0x54>
 8002844:	2000      	movs	r0, #0
 8002846:	7010      	strb	r0, [r2, #0]
 8002848:	3b01      	subs	r3, #1
 800284a:	3201      	adds	r2, #1
 800284c:	2b00      	cmp	r3, #0
 800284e:	daf9      	bge.n	8002844 <_ZN10UsbManagerC1EP17TIM_HandleTypeDefP11StatusUnionP13ButtonManagerP16IndicatorManagerP14EncoderManagerPFvP17OptionStatesUnionE+0x4c>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	61d9      	str	r1, [r3, #28]
	this->rxBuffer   = new uint8_t[USB_RXBUFFER_LEN]();
 8002854:	2038      	movs	r0, #56	@ 0x38
 8002856:	f00b f905 	bl	800da64 <_Znaj>
 800285a:	0003      	movs	r3, r0
 800285c:	0019      	movs	r1, r3
 800285e:	000a      	movs	r2, r1
 8002860:	2337      	movs	r3, #55	@ 0x37
 8002862:	e003      	b.n	800286c <_ZN10UsbManagerC1EP17TIM_HandleTypeDefP11StatusUnionP13ButtonManagerP16IndicatorManagerP14EncoderManagerPFvP17OptionStatesUnionE+0x74>
 8002864:	2000      	movs	r0, #0
 8002866:	7010      	strb	r0, [r2, #0]
 8002868:	3b01      	subs	r3, #1
 800286a:	3201      	adds	r2, #1
 800286c:	2b00      	cmp	r3, #0
 800286e:	daf9      	bge.n	8002864 <_ZN10UsbManagerC1EP17TIM_HandleTypeDefP11StatusUnionP13ButtonManagerP16IndicatorManagerP14EncoderManagerPFvP17OptionStatesUnionE+0x6c>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6199      	str	r1, [r3, #24]
	this->status     = status;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	629a      	str	r2, [r3, #40]	@ 0x28
	this->optionsCallback = optionsCallback;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6a3a      	ldr	r2, [r7, #32]
 800287e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	0018      	movs	r0, r3
 8002884:	46bd      	mov	sp, r7
 8002886:	b004      	add	sp, #16
 8002888:	bd80      	pop	{r7, pc}
 800288a:	46c0      	nop			@ (mov r8, r8)
 800288c:	0800df24 	.word	0x0800df24

08002890 <_ZN10UsbManagerD1Ev>:

UsbManager::~UsbManager()
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	4a0c      	ldr	r2, [pc, #48]	@ (80028cc <_ZN10UsbManagerD1Ev+0x3c>)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	601a      	str	r2, [r3, #0]
{
	delete[] this->txBuffer;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d004      	beq.n	80028b0 <_ZN10UsbManagerD1Ev+0x20>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	0018      	movs	r0, r3
 80028ac:	f00b f8d6 	bl	800da5c <_ZdaPv>
	delete[] this->rxBuffer;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d004      	beq.n	80028c2 <_ZN10UsbManagerD1Ev+0x32>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	0018      	movs	r0, r3
 80028be:	f00b f8cd 	bl	800da5c <_ZdaPv>
}
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	0018      	movs	r0, r3
 80028c6:	46bd      	mov	sp, r7
 80028c8:	b002      	add	sp, #8
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	0800df24 	.word	0x0800df24

080028d0 <_ZN10UsbManagerD0Ev>:
UsbManager::~UsbManager()
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
}
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	0018      	movs	r0, r3
 80028dc:	f7ff ffd8 	bl	8002890 <_ZN10UsbManagerD1Ev>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2130      	movs	r1, #48	@ 0x30
 80028e4:	0018      	movs	r0, r3
 80028e6:	f00b f8b5 	bl	800da54 <_ZdlPvj>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	0018      	movs	r0, r3
 80028ee:	46bd      	mov	sp, r7
 80028f0:	b002      	add	sp, #8
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <_ZN10UsbManager19UsbReceivedCallbackEPhPm>:

void UsbManager::UsbReceivedCallback(uint8_t *buffer, uint32_t *len)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
	for (uint32_t i = 0; i < *len; ++i) {
 8002900:	2300      	movs	r3, #0
 8002902:	617b      	str	r3, [r7, #20]
 8002904:	e00b      	b.n	800291e <_ZN10UsbManager19UsbReceivedCallbackEPhPm+0x2a>
		this->rxBuffer[i] = buffer[i];
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	18d2      	adds	r2, r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6999      	ldr	r1, [r3, #24]
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	18cb      	adds	r3, r1, r3
 8002914:	7812      	ldrb	r2, [r2, #0]
 8002916:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < *len; ++i) {
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	3301      	adds	r3, #1
 800291c:	617b      	str	r3, [r7, #20]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	429a      	cmp	r2, r3
 8002926:	d3ee      	bcc.n	8002906 <_ZN10UsbManager19UsbReceivedCallbackEPhPm+0x12>
	}
	this->rxLen = *len;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	621a      	str	r2, [r3, #32]
	this->dataReceivedFlag = true;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2224      	movs	r2, #36	@ 0x24
 8002934:	2101      	movs	r1, #1
 8002936:	5499      	strb	r1, [r3, r2]
}
 8002938:	46c0      	nop			@ (mov r8, r8)
 800293a:	46bd      	mov	sp, r7
 800293c:	b006      	add	sp, #24
 800293e:	bd80      	pop	{r7, pc}

08002940 <_ZN10UsbManager6UpdateEv>:

void UsbManager::Update()
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
	if (this->dataReceivedFlag) {
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2224      	movs	r2, #36	@ 0x24
 800294c:	5c9b      	ldrb	r3, [r3, r2]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d007      	beq.n	8002962 <_ZN10UsbManager6UpdateEv+0x22>
		this->ParseCommand();
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	0018      	movs	r0, r3
 8002956:	f000 f849 	bl	80029ec <_ZN10UsbManager12ParseCommandEv>
		this->dataReceivedFlag = false;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2224      	movs	r2, #36	@ 0x24
 800295e:	2100      	movs	r1, #0
 8002960:	5499      	strb	r1, [r3, r2]
	}
}
 8002962:	46c0      	nop			@ (mov r8, r8)
 8002964:	46bd      	mov	sp, r7
 8002966:	b002      	add	sp, #8
 8002968:	bd80      	pop	{r7, pc}

0800296a <_ZN10UsbManager18StreamDataCallbackEv>:

void UsbManager::StreamDataCallback()
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b082      	sub	sp, #8
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
	if (!this->streamFlag) return;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2225      	movs	r2, #37	@ 0x25
 8002976:	5c9b      	ldrb	r3, [r3, r2]
 8002978:	2201      	movs	r2, #1
 800297a:	4053      	eors	r3, r2
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d12f      	bne.n	80029e2 <_ZN10UsbManager18StreamDataCallbackEv+0x78>

	// If it takes too long in the callback, I can just
	// set the flag and move this to the update method.
	if (this->buttons->GetStateChanged() || this->encoders->GetStateChanged()) {
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	0018      	movs	r0, r3
 8002988:	f7fd fd82 	bl	8000490 <_ZN13ButtonManager15GetStateChangedEv>
 800298c:	1e03      	subs	r3, r0, #0
 800298e:	d106      	bne.n	800299e <_ZN10UsbManager18StreamDataCallbackEv+0x34>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	0018      	movs	r0, r3
 8002996:	f7fd ff61 	bl	800085c <_ZN14EncoderManager15GetStateChangedEv>
 800299a:	1e03      	subs	r3, r0, #0
 800299c:	d001      	beq.n	80029a2 <_ZN10UsbManager18StreamDataCallbackEv+0x38>
 800299e:	2301      	movs	r3, #1
 80029a0:	e000      	b.n	80029a4 <_ZN10UsbManager18StreamDataCallbackEv+0x3a>
 80029a2:	2300      	movs	r3, #0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d01d      	beq.n	80029e4 <_ZN10UsbManager18StreamDataCallbackEv+0x7a>
		this->txBuffer[0] = (uint8_t)RX_STREAM;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	69db      	ldr	r3, [r3, #28]
 80029ac:	2205      	movs	r2, #5
 80029ae:	701a      	strb	r2, [r3, #0]
		this->buttons->GetButtons(this->txBuffer + 1);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	69db      	ldr	r3, [r3, #28]
 80029b8:	3301      	adds	r3, #1
 80029ba:	0019      	movs	r1, r3
 80029bc:	0010      	movs	r0, r2
 80029be:	f7fd fd41 	bl	8000444 <_ZN13ButtonManager10GetButtonsEPh>
//		this->encoders->GetPositions(this->txBuffer + 4);
		this->encoders->GetDirections(this->txBuffer + 4);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	691a      	ldr	r2, [r3, #16]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	3304      	adds	r3, #4
 80029cc:	0019      	movs	r1, r3
 80029ce:	0010      	movs	r0, r2
 80029d0:	f7fd ffc7 	bl	8000962 <_ZN14EncoderManager13GetDirectionsEPh>
		UsbTransmitData(this->txBuffer, RX_STREAM_LEN + 1);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	69db      	ldr	r3, [r3, #28]
 80029d8:	2106      	movs	r1, #6
 80029da:	0018      	movs	r0, r3
 80029dc:	f00a fae4 	bl	800cfa8 <UsbTransmitData>
 80029e0:	e000      	b.n	80029e4 <_ZN10UsbManager18StreamDataCallbackEv+0x7a>
	if (!this->streamFlag) return;
 80029e2:	46c0      	nop			@ (mov r8, r8)
	}
}
 80029e4:	46bd      	mov	sp, r7
 80029e6:	b002      	add	sp, #8
 80029e8:	bd80      	pop	{r7, pc}
	...

080029ec <_ZN10UsbManager12ParseCommandEv>:

void UsbManager::ParseCommand()
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
	this->currentCmd = (UsbCommand)this->rxBuffer[0];
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	781a      	ldrb	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	751a      	strb	r2, [r3, #20]

	switch (this->currentCmd) {
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	7d1b      	ldrb	r3, [r3, #20]
 8002a02:	2bfe      	cmp	r3, #254	@ 0xfe
 8002a04:	d100      	bne.n	8002a08 <_ZN10UsbManager12ParseCommandEv+0x1c>
 8002a06:	e0fd      	b.n	8002c04 <_ZN10UsbManager12ParseCommandEv+0x218>
 8002a08:	dd00      	ble.n	8002a0c <_ZN10UsbManager12ParseCommandEv+0x20>
 8002a0a:	e109      	b.n	8002c20 <_ZN10UsbManager12ParseCommandEv+0x234>
 8002a0c:	2bf2      	cmp	r3, #242	@ 0xf2
 8002a0e:	d100      	bne.n	8002a12 <_ZN10UsbManager12ParseCommandEv+0x26>
 8002a10:	e0d3      	b.n	8002bba <_ZN10UsbManager12ParseCommandEv+0x1ce>
 8002a12:	dd00      	ble.n	8002a16 <_ZN10UsbManager12ParseCommandEv+0x2a>
 8002a14:	e104      	b.n	8002c20 <_ZN10UsbManager12ParseCommandEv+0x234>
 8002a16:	2b12      	cmp	r3, #18
 8002a18:	dc0a      	bgt.n	8002a30 <_ZN10UsbManager12ParseCommandEv+0x44>
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	da00      	bge.n	8002a20 <_ZN10UsbManager12ParseCommandEv+0x34>
 8002a1e:	e0ff      	b.n	8002c20 <_ZN10UsbManager12ParseCommandEv+0x234>
 8002a20:	2b12      	cmp	r3, #18
 8002a22:	d900      	bls.n	8002a26 <_ZN10UsbManager12ParseCommandEv+0x3a>
 8002a24:	e0fc      	b.n	8002c20 <_ZN10UsbManager12ParseCommandEv+0x234>
 8002a26:	009a      	lsls	r2, r3, #2
 8002a28:	4b82      	ldr	r3, [pc, #520]	@ (8002c34 <_ZN10UsbManager12ParseCommandEv+0x248>)
 8002a2a:	18d3      	adds	r3, r2, r3
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	469f      	mov	pc, r3
 8002a30:	2bf1      	cmp	r3, #241	@ 0xf1
 8002a32:	d100      	bne.n	8002a36 <_ZN10UsbManager12ParseCommandEv+0x4a>
 8002a34:	e0ae      	b.n	8002b94 <_ZN10UsbManager12ParseCommandEv+0x1a8>
		case RX_HELLO:
			this->txBuffer[0] = (uint8_t)RX_HELLO;
			this->streamFlag = false;
			UsbTransmitData(this->txBuffer, 1);
		default:
			break;
 8002a36:	e0f3      	b.n	8002c20 <_ZN10UsbManager12ParseCommandEv+0x234>
			if (HAL_TIM_Base_Start_IT(this->htim) != HAL_OK) {
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	f004 fd39 	bl	80074b4 <HAL_TIM_Base_Start_IT>
 8002a42:	0003      	movs	r3, r0
 8002a44:	1e5a      	subs	r2, r3, #1
 8002a46:	4193      	sbcs	r3, r2
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <_ZN10UsbManager12ParseCommandEv+0x6a>
				this->streamFlag = false;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2225      	movs	r2, #37	@ 0x25
 8002a52:	2100      	movs	r1, #0
 8002a54:	5499      	strb	r1, [r3, r2]
			this->streamFlag = true;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2225      	movs	r2, #37	@ 0x25
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	5499      	strb	r1, [r3, r2]
			break;
 8002a5e:	e0e4      	b.n	8002c2a <_ZN10UsbManager12ParseCommandEv+0x23e>
			HAL_TIM_Base_Stop_IT(this->htim);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	0018      	movs	r0, r3
 8002a66:	f004 fd71 	bl	800754c <HAL_TIM_Base_Stop_IT>
			this->streamFlag = false;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2225      	movs	r2, #37	@ 0x25
 8002a6e:	2100      	movs	r1, #0
 8002a70:	5499      	strb	r1, [r3, r2]
			break;
 8002a72:	e0da      	b.n	8002c2a <_ZN10UsbManager12ParseCommandEv+0x23e>
			if (this->streamFlag) {
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2225      	movs	r2, #37	@ 0x25
 8002a78:	5c9b      	ldrb	r3, [r3, r2]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d004      	beq.n	8002a88 <_ZN10UsbManager12ParseCommandEv+0x9c>
				this->SendError();
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	0018      	movs	r0, r3
 8002a82:	f000 f8d9 	bl	8002c38 <_ZN10UsbManager9SendErrorEv>
				break;
 8002a86:	e0d0      	b.n	8002c2a <_ZN10UsbManager12ParseCommandEv+0x23e>
			this->txBuffer[0] = (uint8_t)RX_BUTTONS;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	69db      	ldr	r3, [r3, #28]
 8002a8c:	2202      	movs	r2, #2
 8002a8e:	701a      	strb	r2, [r3, #0]
			this->buttons->GetButtons(this->txBuffer + 1);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	69db      	ldr	r3, [r3, #28]
 8002a98:	3301      	adds	r3, #1
 8002a9a:	0019      	movs	r1, r3
 8002a9c:	0010      	movs	r0, r2
 8002a9e:	f7fd fcd1 	bl	8000444 <_ZN13ButtonManager10GetButtonsEPh>
			UsbTransmitData(this->txBuffer, RX_BUTTONS_LEN + 1);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	69db      	ldr	r3, [r3, #28]
 8002aa6:	2104      	movs	r1, #4
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	f00a fa7d 	bl	800cfa8 <UsbTransmitData>
			break;
 8002aae:	e0bc      	b.n	8002c2a <_ZN10UsbManager12ParseCommandEv+0x23e>
			if (this->streamFlag) {
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2225      	movs	r2, #37	@ 0x25
 8002ab4:	5c9b      	ldrb	r3, [r3, r2]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d004      	beq.n	8002ac4 <_ZN10UsbManager12ParseCommandEv+0xd8>
				this->SendError();
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	0018      	movs	r0, r3
 8002abe:	f000 f8bb 	bl	8002c38 <_ZN10UsbManager9SendErrorEv>
				break;
 8002ac2:	e0b2      	b.n	8002c2a <_ZN10UsbManager12ParseCommandEv+0x23e>
			this->txBuffer[0] = (uint8_t)RX_ENC_POS;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	69db      	ldr	r3, [r3, #28]
 8002ac8:	2204      	movs	r2, #4
 8002aca:	701a      	strb	r2, [r3, #0]
			this->encoders->GetPositions(this->txBuffer + 1);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	691a      	ldr	r2, [r3, #16]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	0019      	movs	r1, r3
 8002ad8:	0010      	movs	r0, r2
 8002ada:	f7fd ff04 	bl	80008e6 <_ZN14EncoderManager12GetPositionsEPh>
			UsbTransmitData(this->txBuffer, RX_ENCODERS_LEN + 1);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	2103      	movs	r1, #3
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	f00a fa5f 	bl	800cfa8 <UsbTransmitData>
			break;
 8002aea:	e09e      	b.n	8002c2a <_ZN10UsbManager12ParseCommandEv+0x23e>
			this->txBuffer[0] = (uint8_t)RX_ENC_DIR;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	69db      	ldr	r3, [r3, #28]
 8002af0:	2203      	movs	r2, #3
 8002af2:	701a      	strb	r2, [r3, #0]
			this->encoders->GetDirections(this->txBuffer + 1);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	691a      	ldr	r2, [r3, #16]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	69db      	ldr	r3, [r3, #28]
 8002afc:	3301      	adds	r3, #1
 8002afe:	0019      	movs	r1, r3
 8002b00:	0010      	movs	r0, r2
 8002b02:	f7fd ff2e 	bl	8000962 <_ZN14EncoderManager13GetDirectionsEPh>
			UsbTransmitData(this->txBuffer, RX_ENC_DIR_LEN + 1);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	2103      	movs	r1, #3
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	f00a fa4b 	bl	800cfa8 <UsbTransmitData>
			break;
 8002b12:	e08a      	b.n	8002c2a <_ZN10UsbManager12ParseCommandEv+0x23e>
			this->indicators->ParseIndicators(this->rxBuffer + 1);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	68da      	ldr	r2, [r3, #12]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	0019      	movs	r1, r3
 8002b20:	0010      	movs	r0, r2
 8002b22:	f7fd fffb 	bl	8000b1c <_ZN16IndicatorManager15ParseIndicatorsEPh>
			break;
 8002b26:	e080      	b.n	8002c2a <_ZN10UsbManager12ParseCommandEv+0x23e>
			this->u16UnionTemp.bytes[0] = this->rxBuffer[1];
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	7859      	ldrb	r1, [r3, #1]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2226      	movs	r2, #38	@ 0x26
 8002b32:	5499      	strb	r1, [r3, r2]
			this->u16UnionTemp.bytes[1] = this->rxBuffer[2];
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	7899      	ldrb	r1, [r3, #2]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2227      	movs	r2, #39	@ 0x27
 8002b3e:	5499      	strb	r1, [r3, r2]
			this->indicators->SetBacklight(this->u16UnionTemp.integer);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68da      	ldr	r2, [r3, #12]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b48:	0019      	movs	r1, r3
 8002b4a:	0010      	movs	r0, r2
 8002b4c:	f7fd ffff 	bl	8000b4e <_ZN16IndicatorManager12SetBacklightEt>
			break;
 8002b50:	e06b      	b.n	8002c2a <_ZN10UsbManager12ParseCommandEv+0x23e>
			this->u16UnionTemp.bytes[0] = this->rxBuffer[1];
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	7859      	ldrb	r1, [r3, #1]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2226      	movs	r2, #38	@ 0x26
 8002b5c:	5499      	strb	r1, [r3, r2]
			this->u16UnionTemp.bytes[1] = this->rxBuffer[2];
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	7899      	ldrb	r1, [r3, #2]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2227      	movs	r2, #39	@ 0x27
 8002b68:	5499      	strb	r1, [r3, r2]
			this->indicators->SetIndBrightness(this->u16UnionTemp.integer);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	68da      	ldr	r2, [r3, #12]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	0019      	movs	r1, r3
 8002b76:	0010      	movs	r0, r2
 8002b78:	f7fd fffc 	bl	8000b74 <_ZN16IndicatorManager16SetIndBrightnessEh>
			break;
 8002b7c:	e055      	b.n	8002c2a <_ZN10UsbManager12ParseCommandEv+0x23e>
			this->indicators->SetMaxIndBrightness(this->rxBuffer[1]);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68da      	ldr	r2, [r3, #12]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	3301      	adds	r3, #1
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	0019      	movs	r1, r3
 8002b8c:	0010      	movs	r0, r2
 8002b8e:	f7fe f805 	bl	8000b9c <_ZN16IndicatorManager19SetMaxIndBrightnessEh>
			break;
 8002b92:	e04a      	b.n	8002c2a <_ZN10UsbManager12ParseCommandEv+0x23e>
			this->status->obj.options.byte = this->rxBuffer[1];
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	3301      	adds	r3, #1
 8002b9a:	781a      	ldrb	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba0:	805a      	strh	r2, [r3, #2]
			if (this->optionsCallback != NULL) {
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d03c      	beq.n	8002c24 <_ZN10UsbManager12ParseCommandEv+0x238>
				this->optionsCallback(&this->status->obj.options);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb2:	3302      	adds	r3, #2
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	4790      	blx	r2
			break;
 8002bb8:	e034      	b.n	8002c24 <_ZN10UsbManager12ParseCommandEv+0x238>
			if (this->streamFlag) break;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2225      	movs	r2, #37	@ 0x25
 8002bbe:	5c9b      	ldrb	r3, [r3, r2]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d131      	bne.n	8002c28 <_ZN10UsbManager12ParseCommandEv+0x23c>
			this->txBuffer[0] = (uint8_t)RX_STATUS;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	69db      	ldr	r3, [r3, #28]
 8002bc8:	22f2      	movs	r2, #242	@ 0xf2
 8002bca:	701a      	strb	r2, [r3, #0]
			this->txBuffer[1] = this->status->bytes[0];
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	7812      	ldrb	r2, [r2, #0]
 8002bd8:	701a      	strb	r2, [r3, #0]
			this->txBuffer[2] = this->status->bytes[1];
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	3302      	adds	r3, #2
 8002be4:	7852      	ldrb	r2, [r2, #1]
 8002be6:	701a      	strb	r2, [r3, #0]
			this->txBuffer[3] = this->status->bytes[2];
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	69db      	ldr	r3, [r3, #28]
 8002bf0:	3303      	adds	r3, #3
 8002bf2:	7892      	ldrb	r2, [r2, #2]
 8002bf4:	701a      	strb	r2, [r3, #0]
			UsbTransmitData(this->txBuffer, RX_BUTTONS_LEN + 1);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	2104      	movs	r1, #4
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	f00a f9d3 	bl	800cfa8 <UsbTransmitData>
			break;
 8002c02:	e012      	b.n	8002c2a <_ZN10UsbManager12ParseCommandEv+0x23e>
			this->txBuffer[0] = (uint8_t)RX_HELLO;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	69db      	ldr	r3, [r3, #28]
 8002c08:	22fe      	movs	r2, #254	@ 0xfe
 8002c0a:	701a      	strb	r2, [r3, #0]
			this->streamFlag = false;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2225      	movs	r2, #37	@ 0x25
 8002c10:	2100      	movs	r1, #0
 8002c12:	5499      	strb	r1, [r3, r2]
			UsbTransmitData(this->txBuffer, 1);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	69db      	ldr	r3, [r3, #28]
 8002c18:	2101      	movs	r1, #1
 8002c1a:	0018      	movs	r0, r3
 8002c1c:	f00a f9c4 	bl	800cfa8 <UsbTransmitData>
			break;
 8002c20:	46c0      	nop			@ (mov r8, r8)
 8002c22:	e002      	b.n	8002c2a <_ZN10UsbManager12ParseCommandEv+0x23e>
			break;
 8002c24:	46c0      	nop			@ (mov r8, r8)
 8002c26:	e000      	b.n	8002c2a <_ZN10UsbManager12ParseCommandEv+0x23e>
			if (this->streamFlag) break;
 8002c28:	46c0      	nop			@ (mov r8, r8)
	}
}
 8002c2a:	46c0      	nop			@ (mov r8, r8)
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	b002      	add	sp, #8
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	46c0      	nop			@ (mov r8, r8)
 8002c34:	0800ded0 	.word	0x0800ded0

08002c38 <_ZN10UsbManager9SendErrorEv>:

void UsbManager::SendError()
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
	this->txBuffer[0] = (uint8_t)RX_TX_ERROR;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	69db      	ldr	r3, [r3, #28]
 8002c44:	22ff      	movs	r2, #255	@ 0xff
 8002c46:	701a      	strb	r2, [r3, #0]
	UsbTransmitData(txBuffer, 1);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	69db      	ldr	r3, [r3, #28]
 8002c4c:	2101      	movs	r1, #1
 8002c4e:	0018      	movs	r0, r3
 8002c50:	f00a f9aa 	bl	800cfa8 <UsbTransmitData>
}
 8002c54:	46c0      	nop			@ (mov r8, r8)
 8002c56:	46bd      	mov	sp, r7
 8002c58:	b002      	add	sp, #8
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	0002      	movs	r2, r0
 8002c64:	1dbb      	adds	r3, r7, #6
 8002c66:	801a      	strh	r2, [r3, #0]
	EncInterruptCallback(GPIO_Pin);
 8002c68:	1dbb      	adds	r3, r7, #6
 8002c6a:	881b      	ldrh	r3, [r3, #0]
 8002c6c:	0018      	movs	r0, r3
 8002c6e:	f7fe fab9 	bl	80011e4 <EncInterruptCallback>
}
 8002c72:	46c0      	nop			@ (mov r8, r8)
 8002c74:	46bd      	mov	sp, r7
 8002c76:	b002      	add	sp, #8
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b082      	sub	sp, #8
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
	TimerElapsedCallback(htim);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	0018      	movs	r0, r3
 8002c86:	f7fe fb0d 	bl	80012a4 <TimerElapsedCallback>
}
 8002c8a:	46c0      	nop			@ (mov r8, r8)
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	b002      	add	sp, #8
 8002c90:	bd80      	pop	{r7, pc}
	...

08002c94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c94:	b590      	push	{r4, r7, lr}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c9a:	f000 fe9b 	bl	80039d4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c9e:	f000 f82d 	bl	8002cfc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ca2:	f000 fab7 	bl	8003214 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002ca6:	f000 f905 	bl	8002eb4 <MX_SPI1_Init>
  MX_TIM15_Init();
 8002caa:	f000 f9bb 	bl	8003024 <MX_TIM15_Init>
  MX_USART3_UART_Init();
 8002cae:	f000 fa81 	bl	80031b4 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8002cb2:	f00a f989 	bl	800cfc8 <MX_USB_DEVICE_Init>
  MX_ADC_Init();
 8002cb6:	f000 f887 	bl	8002dc8 <MX_ADC_Init>
  MX_TIM1_Init();
 8002cba:	f000 f939 	bl	8002f30 <MX_TIM1_Init>
  MX_TIM7_Init();
 8002cbe:	f000 f98f 	bl	8002fe0 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(200);
 8002cc2:	20c8      	movs	r0, #200	@ 0xc8
 8002cc4:	f000 feea 	bl	8003a9c <HAL_Delay>
  if (Init(&hadc, &hspi1, &htim15, &huart3, &htim7) != HAL_OK)
 8002cc8:	4c07      	ldr	r4, [pc, #28]	@ (8002ce8 <main+0x54>)
 8002cca:	4a08      	ldr	r2, [pc, #32]	@ (8002cec <main+0x58>)
 8002ccc:	4908      	ldr	r1, [pc, #32]	@ (8002cf0 <main+0x5c>)
 8002cce:	4809      	ldr	r0, [pc, #36]	@ (8002cf4 <main+0x60>)
 8002cd0:	4b09      	ldr	r3, [pc, #36]	@ (8002cf8 <main+0x64>)
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	0023      	movs	r3, r4
 8002cd6:	f7fe fb3d 	bl	8001354 <Init>
 8002cda:	1e03      	subs	r3, r0, #0
 8002cdc:	d001      	beq.n	8002ce2 <main+0x4e>
  {
	  Error_Handler();
 8002cde:	f000 fbb3 	bl	8003448 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Main();
 8002ce2:	f7fe fbc3 	bl	800146c <Main>
 8002ce6:	e7fc      	b.n	8002ce2 <main+0x4e>
 8002ce8:	200008ac 	.word	0x200008ac
 8002cec:	20000864 	.word	0x20000864
 8002cf0:	20000770 	.word	0x20000770
 8002cf4:	20000730 	.word	0x20000730
 8002cf8:	2000081c 	.word	0x2000081c

08002cfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cfc:	b590      	push	{r4, r7, lr}
 8002cfe:	b097      	sub	sp, #92	@ 0x5c
 8002d00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d02:	2428      	movs	r4, #40	@ 0x28
 8002d04:	193b      	adds	r3, r7, r4
 8002d06:	0018      	movs	r0, r3
 8002d08:	2330      	movs	r3, #48	@ 0x30
 8002d0a:	001a      	movs	r2, r3
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	f00a ff97 	bl	800dc40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d12:	2318      	movs	r3, #24
 8002d14:	18fb      	adds	r3, r7, r3
 8002d16:	0018      	movs	r0, r3
 8002d18:	2310      	movs	r3, #16
 8002d1a:	001a      	movs	r2, r3
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	f00a ff8f 	bl	800dc40 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d22:	1d3b      	adds	r3, r7, #4
 8002d24:	0018      	movs	r0, r3
 8002d26:	2314      	movs	r3, #20
 8002d28:	001a      	movs	r2, r3
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	f00a ff88 	bl	800dc40 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 8002d30:	0021      	movs	r1, r4
 8002d32:	187b      	adds	r3, r7, r1
 8002d34:	2211      	movs	r2, #17
 8002d36:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d38:	187b      	adds	r3, r7, r1
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8002d3e:	187b      	adds	r3, r7, r1
 8002d40:	2201      	movs	r2, #1
 8002d42:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8002d44:	187b      	adds	r3, r7, r1
 8002d46:	2210      	movs	r2, #16
 8002d48:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d4a:	187b      	adds	r3, r7, r1
 8002d4c:	2202      	movs	r2, #2
 8002d4e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d50:	187b      	adds	r3, r7, r1
 8002d52:	2280      	movs	r2, #128	@ 0x80
 8002d54:	0252      	lsls	r2, r2, #9
 8002d56:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 8002d58:	187b      	adds	r3, r7, r1
 8002d5a:	22d0      	movs	r2, #208	@ 0xd0
 8002d5c:	0392      	lsls	r2, r2, #14
 8002d5e:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV5;
 8002d60:	187b      	adds	r3, r7, r1
 8002d62:	2204      	movs	r2, #4
 8002d64:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d66:	187b      	adds	r3, r7, r1
 8002d68:	0018      	movs	r0, r3
 8002d6a:	f003 fa81 	bl	8006270 <HAL_RCC_OscConfig>
 8002d6e:	1e03      	subs	r3, r0, #0
 8002d70:	d001      	beq.n	8002d76 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8002d72:	f000 fb69 	bl	8003448 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d76:	2118      	movs	r1, #24
 8002d78:	187b      	adds	r3, r7, r1
 8002d7a:	2207      	movs	r2, #7
 8002d7c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d7e:	187b      	adds	r3, r7, r1
 8002d80:	2202      	movs	r2, #2
 8002d82:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8002d84:	187b      	adds	r3, r7, r1
 8002d86:	2280      	movs	r2, #128	@ 0x80
 8002d88:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002d8a:	187b      	adds	r3, r7, r1
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002d90:	187b      	adds	r3, r7, r1
 8002d92:	2101      	movs	r1, #1
 8002d94:	0018      	movs	r0, r3
 8002d96:	f003 fd89 	bl	80068ac <HAL_RCC_ClockConfig>
 8002d9a:	1e03      	subs	r3, r0, #0
 8002d9c:	d001      	beq.n	8002da2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002d9e:	f000 fb53 	bl	8003448 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002da2:	1d3b      	adds	r3, r7, #4
 8002da4:	2280      	movs	r2, #128	@ 0x80
 8002da6:	0292      	lsls	r2, r2, #10
 8002da8:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002daa:	1d3b      	adds	r3, r7, #4
 8002dac:	2280      	movs	r2, #128	@ 0x80
 8002dae:	611a      	str	r2, [r3, #16]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002db0:	1d3b      	adds	r3, r7, #4
 8002db2:	0018      	movs	r0, r3
 8002db4:	f003 fec2 	bl	8006b3c <HAL_RCCEx_PeriphCLKConfig>
 8002db8:	1e03      	subs	r3, r0, #0
 8002dba:	d001      	beq.n	8002dc0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002dbc:	f000 fb44 	bl	8003448 <Error_Handler>
  }
}
 8002dc0:	46c0      	nop			@ (mov r8, r8)
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	b017      	add	sp, #92	@ 0x5c
 8002dc6:	bd90      	pop	{r4, r7, pc}

08002dc8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002dce:	1d3b      	adds	r3, r7, #4
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	230c      	movs	r3, #12
 8002dd4:	001a      	movs	r2, r3
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	f00a ff32 	bl	800dc40 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002ddc:	4b33      	ldr	r3, [pc, #204]	@ (8002eac <MX_ADC_Init+0xe4>)
 8002dde:	4a34      	ldr	r2, [pc, #208]	@ (8002eb0 <MX_ADC_Init+0xe8>)
 8002de0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002de2:	4b32      	ldr	r3, [pc, #200]	@ (8002eac <MX_ADC_Init+0xe4>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002de8:	4b30      	ldr	r3, [pc, #192]	@ (8002eac <MX_ADC_Init+0xe4>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002dee:	4b2f      	ldr	r3, [pc, #188]	@ (8002eac <MX_ADC_Init+0xe4>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002df4:	4b2d      	ldr	r3, [pc, #180]	@ (8002eac <MX_ADC_Init+0xe4>)
 8002df6:	2201      	movs	r2, #1
 8002df8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002dfa:	4b2c      	ldr	r3, [pc, #176]	@ (8002eac <MX_ADC_Init+0xe4>)
 8002dfc:	2204      	movs	r2, #4
 8002dfe:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002e00:	4b2a      	ldr	r3, [pc, #168]	@ (8002eac <MX_ADC_Init+0xe4>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002e06:	4b29      	ldr	r3, [pc, #164]	@ (8002eac <MX_ADC_Init+0xe4>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002e0c:	4b27      	ldr	r3, [pc, #156]	@ (8002eac <MX_ADC_Init+0xe4>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002e12:	4b26      	ldr	r3, [pc, #152]	@ (8002eac <MX_ADC_Init+0xe4>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002e18:	4b24      	ldr	r3, [pc, #144]	@ (8002eac <MX_ADC_Init+0xe4>)
 8002e1a:	22c2      	movs	r2, #194	@ 0xc2
 8002e1c:	32ff      	adds	r2, #255	@ 0xff
 8002e1e:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002e20:	4b22      	ldr	r3, [pc, #136]	@ (8002eac <MX_ADC_Init+0xe4>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002e26:	4b21      	ldr	r3, [pc, #132]	@ (8002eac <MX_ADC_Init+0xe4>)
 8002e28:	2224      	movs	r2, #36	@ 0x24
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002e2e:	4b1f      	ldr	r3, [pc, #124]	@ (8002eac <MX_ADC_Init+0xe4>)
 8002e30:	2201      	movs	r2, #1
 8002e32:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002e34:	4b1d      	ldr	r3, [pc, #116]	@ (8002eac <MX_ADC_Init+0xe4>)
 8002e36:	0018      	movs	r0, r3
 8002e38:	f000 fe54 	bl	8003ae4 <HAL_ADC_Init>
 8002e3c:	1e03      	subs	r3, r0, #0
 8002e3e:	d001      	beq.n	8002e44 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8002e40:	f000 fb02 	bl	8003448 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002e44:	1d3b      	adds	r3, r7, #4
 8002e46:	2200      	movs	r2, #0
 8002e48:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002e4a:	1d3b      	adds	r3, r7, #4
 8002e4c:	2280      	movs	r2, #128	@ 0x80
 8002e4e:	0152      	lsls	r2, r2, #5
 8002e50:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002e52:	1d3b      	adds	r3, r7, #4
 8002e54:	2280      	movs	r2, #128	@ 0x80
 8002e56:	0552      	lsls	r2, r2, #21
 8002e58:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002e5a:	1d3a      	adds	r2, r7, #4
 8002e5c:	4b13      	ldr	r3, [pc, #76]	@ (8002eac <MX_ADC_Init+0xe4>)
 8002e5e:	0011      	movs	r1, r2
 8002e60:	0018      	movs	r0, r3
 8002e62:	f000 ff7f 	bl	8003d64 <HAL_ADC_ConfigChannel>
 8002e66:	1e03      	subs	r3, r0, #0
 8002e68:	d001      	beq.n	8002e6e <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8002e6a:	f000 faed 	bl	8003448 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002e6e:	1d3b      	adds	r3, r7, #4
 8002e70:	2201      	movs	r2, #1
 8002e72:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002e74:	1d3a      	adds	r2, r7, #4
 8002e76:	4b0d      	ldr	r3, [pc, #52]	@ (8002eac <MX_ADC_Init+0xe4>)
 8002e78:	0011      	movs	r1, r2
 8002e7a:	0018      	movs	r0, r3
 8002e7c:	f000 ff72 	bl	8003d64 <HAL_ADC_ConfigChannel>
 8002e80:	1e03      	subs	r3, r0, #0
 8002e82:	d001      	beq.n	8002e88 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8002e84:	f000 fae0 	bl	8003448 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8002e88:	1d3b      	adds	r3, r7, #4
 8002e8a:	2210      	movs	r2, #16
 8002e8c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002e8e:	1d3a      	adds	r2, r7, #4
 8002e90:	4b06      	ldr	r3, [pc, #24]	@ (8002eac <MX_ADC_Init+0xe4>)
 8002e92:	0011      	movs	r1, r2
 8002e94:	0018      	movs	r0, r3
 8002e96:	f000 ff65 	bl	8003d64 <HAL_ADC_ConfigChannel>
 8002e9a:	1e03      	subs	r3, r0, #0
 8002e9c:	d001      	beq.n	8002ea2 <MX_ADC_Init+0xda>
  {
    Error_Handler();
 8002e9e:	f000 fad3 	bl	8003448 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002ea2:	46c0      	nop			@ (mov r8, r8)
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	b004      	add	sp, #16
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	46c0      	nop			@ (mov r8, r8)
 8002eac:	20000730 	.word	0x20000730
 8002eb0:	40012400 	.word	0x40012400

08002eb4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002eb8:	4b1b      	ldr	r3, [pc, #108]	@ (8002f28 <MX_SPI1_Init+0x74>)
 8002eba:	4a1c      	ldr	r2, [pc, #112]	@ (8002f2c <MX_SPI1_Init+0x78>)
 8002ebc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002ebe:	4b1a      	ldr	r3, [pc, #104]	@ (8002f28 <MX_SPI1_Init+0x74>)
 8002ec0:	2282      	movs	r2, #130	@ 0x82
 8002ec2:	0052      	lsls	r2, r2, #1
 8002ec4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002ec6:	4b18      	ldr	r3, [pc, #96]	@ (8002f28 <MX_SPI1_Init+0x74>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ecc:	4b16      	ldr	r3, [pc, #88]	@ (8002f28 <MX_SPI1_Init+0x74>)
 8002ece:	22e0      	movs	r2, #224	@ 0xe0
 8002ed0:	00d2      	lsls	r2, r2, #3
 8002ed2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ed4:	4b14      	ldr	r3, [pc, #80]	@ (8002f28 <MX_SPI1_Init+0x74>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002eda:	4b13      	ldr	r3, [pc, #76]	@ (8002f28 <MX_SPI1_Init+0x74>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002ee0:	4b11      	ldr	r3, [pc, #68]	@ (8002f28 <MX_SPI1_Init+0x74>)
 8002ee2:	2280      	movs	r2, #128	@ 0x80
 8002ee4:	0092      	lsls	r2, r2, #2
 8002ee6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8002f28 <MX_SPI1_Init+0x74>)
 8002eea:	2218      	movs	r2, #24
 8002eec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002eee:	4b0e      	ldr	r3, [pc, #56]	@ (8002f28 <MX_SPI1_Init+0x74>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8002f28 <MX_SPI1_Init+0x74>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002efa:	4b0b      	ldr	r3, [pc, #44]	@ (8002f28 <MX_SPI1_Init+0x74>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002f00:	4b09      	ldr	r3, [pc, #36]	@ (8002f28 <MX_SPI1_Init+0x74>)
 8002f02:	2207      	movs	r2, #7
 8002f04:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002f06:	4b08      	ldr	r3, [pc, #32]	@ (8002f28 <MX_SPI1_Init+0x74>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002f0c:	4b06      	ldr	r3, [pc, #24]	@ (8002f28 <MX_SPI1_Init+0x74>)
 8002f0e:	2208      	movs	r2, #8
 8002f10:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002f12:	4b05      	ldr	r3, [pc, #20]	@ (8002f28 <MX_SPI1_Init+0x74>)
 8002f14:	0018      	movs	r0, r3
 8002f16:	f003 feef 	bl	8006cf8 <HAL_SPI_Init>
 8002f1a:	1e03      	subs	r3, r0, #0
 8002f1c:	d001      	beq.n	8002f22 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002f1e:	f000 fa93 	bl	8003448 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002f22:	46c0      	nop			@ (mov r8, r8)
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	20000770 	.word	0x20000770
 8002f2c:	40013000 	.word	0x40013000

08002f30 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f36:	2308      	movs	r3, #8
 8002f38:	18fb      	adds	r3, r7, r3
 8002f3a:	0018      	movs	r0, r3
 8002f3c:	2310      	movs	r3, #16
 8002f3e:	001a      	movs	r2, r3
 8002f40:	2100      	movs	r1, #0
 8002f42:	f00a fe7d 	bl	800dc40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f46:	003b      	movs	r3, r7
 8002f48:	0018      	movs	r0, r3
 8002f4a:	2308      	movs	r3, #8
 8002f4c:	001a      	movs	r2, r3
 8002f4e:	2100      	movs	r1, #0
 8002f50:	f00a fe76 	bl	800dc40 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002f54:	4b1f      	ldr	r3, [pc, #124]	@ (8002fd4 <MX_TIM1_Init+0xa4>)
 8002f56:	4a20      	ldr	r2, [pc, #128]	@ (8002fd8 <MX_TIM1_Init+0xa8>)
 8002f58:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 27;
 8002f5a:	4b1e      	ldr	r3, [pc, #120]	@ (8002fd4 <MX_TIM1_Init+0xa4>)
 8002f5c:	221b      	movs	r2, #27
 8002f5e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f60:	4b1c      	ldr	r3, [pc, #112]	@ (8002fd4 <MX_TIM1_Init+0xa4>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 42857;
 8002f66:	4b1b      	ldr	r3, [pc, #108]	@ (8002fd4 <MX_TIM1_Init+0xa4>)
 8002f68:	4a1c      	ldr	r2, [pc, #112]	@ (8002fdc <MX_TIM1_Init+0xac>)
 8002f6a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f6c:	4b19      	ldr	r3, [pc, #100]	@ (8002fd4 <MX_TIM1_Init+0xa4>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002f72:	4b18      	ldr	r3, [pc, #96]	@ (8002fd4 <MX_TIM1_Init+0xa4>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002f78:	4b16      	ldr	r3, [pc, #88]	@ (8002fd4 <MX_TIM1_Init+0xa4>)
 8002f7a:	2280      	movs	r2, #128	@ 0x80
 8002f7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002f7e:	4b15      	ldr	r3, [pc, #84]	@ (8002fd4 <MX_TIM1_Init+0xa4>)
 8002f80:	0018      	movs	r0, r3
 8002f82:	f004 fa47 	bl	8007414 <HAL_TIM_Base_Init>
 8002f86:	1e03      	subs	r3, r0, #0
 8002f88:	d001      	beq.n	8002f8e <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8002f8a:	f000 fa5d 	bl	8003448 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f8e:	2108      	movs	r1, #8
 8002f90:	187b      	adds	r3, r7, r1
 8002f92:	2280      	movs	r2, #128	@ 0x80
 8002f94:	0152      	lsls	r2, r2, #5
 8002f96:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002f98:	187a      	adds	r2, r7, r1
 8002f9a:	4b0e      	ldr	r3, [pc, #56]	@ (8002fd4 <MX_TIM1_Init+0xa4>)
 8002f9c:	0011      	movs	r1, r2
 8002f9e:	0018      	movs	r0, r3
 8002fa0:	f004 fde8 	bl	8007b74 <HAL_TIM_ConfigClockSource>
 8002fa4:	1e03      	subs	r3, r0, #0
 8002fa6:	d001      	beq.n	8002fac <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002fa8:	f000 fa4e 	bl	8003448 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002fac:	003b      	movs	r3, r7
 8002fae:	2220      	movs	r2, #32
 8002fb0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fb2:	003b      	movs	r3, r7
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002fb8:	003a      	movs	r2, r7
 8002fba:	4b06      	ldr	r3, [pc, #24]	@ (8002fd4 <MX_TIM1_Init+0xa4>)
 8002fbc:	0011      	movs	r1, r2
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	f005 f9fc 	bl	80083bc <HAL_TIMEx_MasterConfigSynchronization>
 8002fc4:	1e03      	subs	r3, r0, #0
 8002fc6:	d001      	beq.n	8002fcc <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8002fc8:	f000 fa3e 	bl	8003448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002fcc:	46c0      	nop			@ (mov r8, r8)
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	b006      	add	sp, #24
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	200007d4 	.word	0x200007d4
 8002fd8:	40012c00 	.word	0x40012c00
 8002fdc:	0000a769 	.word	0x0000a769

08002fe0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM7_Init 0 */

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8003018 <MX_TIM7_Init+0x38>)
 8002fe6:	4a0d      	ldr	r2, [pc, #52]	@ (800301c <MX_TIM7_Init+0x3c>)
 8002fe8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 11;
 8002fea:	4b0b      	ldr	r3, [pc, #44]	@ (8003018 <MX_TIM7_Init+0x38>)
 8002fec:	220b      	movs	r2, #11
 8002fee:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ff0:	4b09      	ldr	r3, [pc, #36]	@ (8003018 <MX_TIM7_Init+0x38>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 40000;
 8002ff6:	4b08      	ldr	r3, [pc, #32]	@ (8003018 <MX_TIM7_Init+0x38>)
 8002ff8:	4a09      	ldr	r2, [pc, #36]	@ (8003020 <MX_TIM7_Init+0x40>)
 8002ffa:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ffc:	4b06      	ldr	r3, [pc, #24]	@ (8003018 <MX_TIM7_Init+0x38>)
 8002ffe:	2280      	movs	r2, #128	@ 0x80
 8003000:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003002:	4b05      	ldr	r3, [pc, #20]	@ (8003018 <MX_TIM7_Init+0x38>)
 8003004:	0018      	movs	r0, r3
 8003006:	f004 fa05 	bl	8007414 <HAL_TIM_Base_Init>
 800300a:	1e03      	subs	r3, r0, #0
 800300c:	d001      	beq.n	8003012 <MX_TIM7_Init+0x32>
  {
    Error_Handler();
 800300e:	f000 fa1b 	bl	8003448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003012:	46c0      	nop			@ (mov r8, r8)
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	2000081c 	.word	0x2000081c
 800301c:	40001400 	.word	0x40001400
 8003020:	00009c40 	.word	0x00009c40

08003024 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b096      	sub	sp, #88	@ 0x58
 8003028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800302a:	2348      	movs	r3, #72	@ 0x48
 800302c:	18fb      	adds	r3, r7, r3
 800302e:	0018      	movs	r0, r3
 8003030:	2310      	movs	r3, #16
 8003032:	001a      	movs	r2, r3
 8003034:	2100      	movs	r1, #0
 8003036:	f00a fe03 	bl	800dc40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800303a:	2340      	movs	r3, #64	@ 0x40
 800303c:	18fb      	adds	r3, r7, r3
 800303e:	0018      	movs	r0, r3
 8003040:	2308      	movs	r3, #8
 8003042:	001a      	movs	r2, r3
 8003044:	2100      	movs	r1, #0
 8003046:	f00a fdfb 	bl	800dc40 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800304a:	2324      	movs	r3, #36	@ 0x24
 800304c:	18fb      	adds	r3, r7, r3
 800304e:	0018      	movs	r0, r3
 8003050:	231c      	movs	r3, #28
 8003052:	001a      	movs	r2, r3
 8003054:	2100      	movs	r1, #0
 8003056:	f00a fdf3 	bl	800dc40 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800305a:	1d3b      	adds	r3, r7, #4
 800305c:	0018      	movs	r0, r3
 800305e:	2320      	movs	r3, #32
 8003060:	001a      	movs	r2, r3
 8003062:	2100      	movs	r1, #0
 8003064:	f00a fdec 	bl	800dc40 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8003068:	4b4f      	ldr	r3, [pc, #316]	@ (80031a8 <MX_TIM15_Init+0x184>)
 800306a:	4a50      	ldr	r2, [pc, #320]	@ (80031ac <MX_TIM15_Init+0x188>)
 800306c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800306e:	4b4e      	ldr	r3, [pc, #312]	@ (80031a8 <MX_TIM15_Init+0x184>)
 8003070:	2200      	movs	r2, #0
 8003072:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003074:	4b4c      	ldr	r3, [pc, #304]	@ (80031a8 <MX_TIM15_Init+0x184>)
 8003076:	2200      	movs	r2, #0
 8003078:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 800307a:	4b4b      	ldr	r3, [pc, #300]	@ (80031a8 <MX_TIM15_Init+0x184>)
 800307c:	4a4c      	ldr	r2, [pc, #304]	@ (80031b0 <MX_TIM15_Init+0x18c>)
 800307e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003080:	4b49      	ldr	r3, [pc, #292]	@ (80031a8 <MX_TIM15_Init+0x184>)
 8003082:	2200      	movs	r2, #0
 8003084:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8003086:	4b48      	ldr	r3, [pc, #288]	@ (80031a8 <MX_TIM15_Init+0x184>)
 8003088:	2200      	movs	r2, #0
 800308a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800308c:	4b46      	ldr	r3, [pc, #280]	@ (80031a8 <MX_TIM15_Init+0x184>)
 800308e:	2280      	movs	r2, #128	@ 0x80
 8003090:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8003092:	4b45      	ldr	r3, [pc, #276]	@ (80031a8 <MX_TIM15_Init+0x184>)
 8003094:	0018      	movs	r0, r3
 8003096:	f004 f9bd 	bl	8007414 <HAL_TIM_Base_Init>
 800309a:	1e03      	subs	r3, r0, #0
 800309c:	d001      	beq.n	80030a2 <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 800309e:	f000 f9d3 	bl	8003448 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030a2:	2148      	movs	r1, #72	@ 0x48
 80030a4:	187b      	adds	r3, r7, r1
 80030a6:	2280      	movs	r2, #128	@ 0x80
 80030a8:	0152      	lsls	r2, r2, #5
 80030aa:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80030ac:	187a      	adds	r2, r7, r1
 80030ae:	4b3e      	ldr	r3, [pc, #248]	@ (80031a8 <MX_TIM15_Init+0x184>)
 80030b0:	0011      	movs	r1, r2
 80030b2:	0018      	movs	r0, r3
 80030b4:	f004 fd5e 	bl	8007b74 <HAL_TIM_ConfigClockSource>
 80030b8:	1e03      	subs	r3, r0, #0
 80030ba:	d001      	beq.n	80030c0 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 80030bc:	f000 f9c4 	bl	8003448 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80030c0:	4b39      	ldr	r3, [pc, #228]	@ (80031a8 <MX_TIM15_Init+0x184>)
 80030c2:	0018      	movs	r0, r3
 80030c4:	f004 fa70 	bl	80075a8 <HAL_TIM_PWM_Init>
 80030c8:	1e03      	subs	r3, r0, #0
 80030ca:	d001      	beq.n	80030d0 <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 80030cc:	f000 f9bc 	bl	8003448 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030d0:	2140      	movs	r1, #64	@ 0x40
 80030d2:	187b      	adds	r3, r7, r1
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030d8:	187b      	adds	r3, r7, r1
 80030da:	2200      	movs	r2, #0
 80030dc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80030de:	187a      	adds	r2, r7, r1
 80030e0:	4b31      	ldr	r3, [pc, #196]	@ (80031a8 <MX_TIM15_Init+0x184>)
 80030e2:	0011      	movs	r1, r2
 80030e4:	0018      	movs	r0, r3
 80030e6:	f005 f969 	bl	80083bc <HAL_TIMEx_MasterConfigSynchronization>
 80030ea:	1e03      	subs	r3, r0, #0
 80030ec:	d001      	beq.n	80030f2 <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 80030ee:	f000 f9ab 	bl	8003448 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030f2:	2124      	movs	r1, #36	@ 0x24
 80030f4:	187b      	adds	r3, r7, r1
 80030f6:	2260      	movs	r2, #96	@ 0x60
 80030f8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80030fa:	187b      	adds	r3, r7, r1
 80030fc:	2200      	movs	r2, #0
 80030fe:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8003100:	187b      	adds	r3, r7, r1
 8003102:	2202      	movs	r2, #2
 8003104:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003106:	187b      	adds	r3, r7, r1
 8003108:	2200      	movs	r2, #0
 800310a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800310c:	187b      	adds	r3, r7, r1
 800310e:	2200      	movs	r2, #0
 8003110:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8003112:	187b      	adds	r3, r7, r1
 8003114:	2280      	movs	r2, #128	@ 0x80
 8003116:	0052      	lsls	r2, r2, #1
 8003118:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800311a:	187b      	adds	r3, r7, r1
 800311c:	2200      	movs	r2, #0
 800311e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003120:	1879      	adds	r1, r7, r1
 8003122:	4b21      	ldr	r3, [pc, #132]	@ (80031a8 <MX_TIM15_Init+0x184>)
 8003124:	2200      	movs	r2, #0
 8003126:	0018      	movs	r0, r3
 8003128:	f004 fc5e 	bl	80079e8 <HAL_TIM_PWM_ConfigChannel>
 800312c:	1e03      	subs	r3, r0, #0
 800312e:	d001      	beq.n	8003134 <MX_TIM15_Init+0x110>
  {
    Error_Handler();
 8003130:	f000 f98a 	bl	8003448 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003134:	2124      	movs	r1, #36	@ 0x24
 8003136:	187b      	adds	r3, r7, r1
 8003138:	2200      	movs	r2, #0
 800313a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800313c:	187b      	adds	r3, r7, r1
 800313e:	2200      	movs	r2, #0
 8003140:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003142:	1879      	adds	r1, r7, r1
 8003144:	4b18      	ldr	r3, [pc, #96]	@ (80031a8 <MX_TIM15_Init+0x184>)
 8003146:	2204      	movs	r2, #4
 8003148:	0018      	movs	r0, r3
 800314a:	f004 fc4d 	bl	80079e8 <HAL_TIM_PWM_ConfigChannel>
 800314e:	1e03      	subs	r3, r0, #0
 8003150:	d001      	beq.n	8003156 <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8003152:	f000 f979 	bl	8003448 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003156:	1d3b      	adds	r3, r7, #4
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800315c:	1d3b      	adds	r3, r7, #4
 800315e:	2200      	movs	r2, #0
 8003160:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003162:	1d3b      	adds	r3, r7, #4
 8003164:	2200      	movs	r2, #0
 8003166:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003168:	1d3b      	adds	r3, r7, #4
 800316a:	2200      	movs	r2, #0
 800316c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800316e:	1d3b      	adds	r3, r7, #4
 8003170:	2200      	movs	r2, #0
 8003172:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003174:	1d3b      	adds	r3, r7, #4
 8003176:	2280      	movs	r2, #128	@ 0x80
 8003178:	0192      	lsls	r2, r2, #6
 800317a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800317c:	1d3b      	adds	r3, r7, #4
 800317e:	2200      	movs	r2, #0
 8003180:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8003182:	1d3a      	adds	r2, r7, #4
 8003184:	4b08      	ldr	r3, [pc, #32]	@ (80031a8 <MX_TIM15_Init+0x184>)
 8003186:	0011      	movs	r1, r2
 8003188:	0018      	movs	r0, r3
 800318a:	f005 f96f 	bl	800846c <HAL_TIMEx_ConfigBreakDeadTime>
 800318e:	1e03      	subs	r3, r0, #0
 8003190:	d001      	beq.n	8003196 <MX_TIM15_Init+0x172>
  {
    Error_Handler();
 8003192:	f000 f959 	bl	8003448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8003196:	4b04      	ldr	r3, [pc, #16]	@ (80031a8 <MX_TIM15_Init+0x184>)
 8003198:	0018      	movs	r0, r3
 800319a:	f000 fa73 	bl	8003684 <HAL_TIM_MspPostInit>

}
 800319e:	46c0      	nop			@ (mov r8, r8)
 80031a0:	46bd      	mov	sp, r7
 80031a2:	b016      	add	sp, #88	@ 0x58
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	46c0      	nop			@ (mov r8, r8)
 80031a8:	20000864 	.word	0x20000864
 80031ac:	40014000 	.word	0x40014000
 80031b0:	0000ffff 	.word	0x0000ffff

080031b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80031b8:	4b14      	ldr	r3, [pc, #80]	@ (800320c <MX_USART3_UART_Init+0x58>)
 80031ba:	4a15      	ldr	r2, [pc, #84]	@ (8003210 <MX_USART3_UART_Init+0x5c>)
 80031bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 11200;
 80031be:	4b13      	ldr	r3, [pc, #76]	@ (800320c <MX_USART3_UART_Init+0x58>)
 80031c0:	22af      	movs	r2, #175	@ 0xaf
 80031c2:	0192      	lsls	r2, r2, #6
 80031c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80031c6:	4b11      	ldr	r3, [pc, #68]	@ (800320c <MX_USART3_UART_Init+0x58>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80031cc:	4b0f      	ldr	r3, [pc, #60]	@ (800320c <MX_USART3_UART_Init+0x58>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80031d2:	4b0e      	ldr	r3, [pc, #56]	@ (800320c <MX_USART3_UART_Init+0x58>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80031d8:	4b0c      	ldr	r3, [pc, #48]	@ (800320c <MX_USART3_UART_Init+0x58>)
 80031da:	220c      	movs	r2, #12
 80031dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031de:	4b0b      	ldr	r3, [pc, #44]	@ (800320c <MX_USART3_UART_Init+0x58>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80031e4:	4b09      	ldr	r3, [pc, #36]	@ (800320c <MX_USART3_UART_Init+0x58>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031ea:	4b08      	ldr	r3, [pc, #32]	@ (800320c <MX_USART3_UART_Init+0x58>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80031f0:	4b06      	ldr	r3, [pc, #24]	@ (800320c <MX_USART3_UART_Init+0x58>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80031f6:	4b05      	ldr	r3, [pc, #20]	@ (800320c <MX_USART3_UART_Init+0x58>)
 80031f8:	0018      	movs	r0, r3
 80031fa:	f005 f9a5 	bl	8008548 <HAL_UART_Init>
 80031fe:	1e03      	subs	r3, r0, #0
 8003200:	d001      	beq.n	8003206 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003202:	f000 f921 	bl	8003448 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003206:	46c0      	nop			@ (mov r8, r8)
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	200008ac 	.word	0x200008ac
 8003210:	40004800 	.word	0x40004800

08003214 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003214:	b590      	push	{r4, r7, lr}
 8003216:	b08b      	sub	sp, #44	@ 0x2c
 8003218:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800321a:	2414      	movs	r4, #20
 800321c:	193b      	adds	r3, r7, r4
 800321e:	0018      	movs	r0, r3
 8003220:	2314      	movs	r3, #20
 8003222:	001a      	movs	r2, r3
 8003224:	2100      	movs	r1, #0
 8003226:	f00a fd0b 	bl	800dc40 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800322a:	4b7f      	ldr	r3, [pc, #508]	@ (8003428 <MX_GPIO_Init+0x214>)
 800322c:	695a      	ldr	r2, [r3, #20]
 800322e:	4b7e      	ldr	r3, [pc, #504]	@ (8003428 <MX_GPIO_Init+0x214>)
 8003230:	2180      	movs	r1, #128	@ 0x80
 8003232:	0309      	lsls	r1, r1, #12
 8003234:	430a      	orrs	r2, r1
 8003236:	615a      	str	r2, [r3, #20]
 8003238:	4b7b      	ldr	r3, [pc, #492]	@ (8003428 <MX_GPIO_Init+0x214>)
 800323a:	695a      	ldr	r2, [r3, #20]
 800323c:	2380      	movs	r3, #128	@ 0x80
 800323e:	031b      	lsls	r3, r3, #12
 8003240:	4013      	ands	r3, r2
 8003242:	613b      	str	r3, [r7, #16]
 8003244:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003246:	4b78      	ldr	r3, [pc, #480]	@ (8003428 <MX_GPIO_Init+0x214>)
 8003248:	695a      	ldr	r2, [r3, #20]
 800324a:	4b77      	ldr	r3, [pc, #476]	@ (8003428 <MX_GPIO_Init+0x214>)
 800324c:	2180      	movs	r1, #128	@ 0x80
 800324e:	03c9      	lsls	r1, r1, #15
 8003250:	430a      	orrs	r2, r1
 8003252:	615a      	str	r2, [r3, #20]
 8003254:	4b74      	ldr	r3, [pc, #464]	@ (8003428 <MX_GPIO_Init+0x214>)
 8003256:	695a      	ldr	r2, [r3, #20]
 8003258:	2380      	movs	r3, #128	@ 0x80
 800325a:	03db      	lsls	r3, r3, #15
 800325c:	4013      	ands	r3, r2
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003262:	4b71      	ldr	r3, [pc, #452]	@ (8003428 <MX_GPIO_Init+0x214>)
 8003264:	695a      	ldr	r2, [r3, #20]
 8003266:	4b70      	ldr	r3, [pc, #448]	@ (8003428 <MX_GPIO_Init+0x214>)
 8003268:	2180      	movs	r1, #128	@ 0x80
 800326a:	0289      	lsls	r1, r1, #10
 800326c:	430a      	orrs	r2, r1
 800326e:	615a      	str	r2, [r3, #20]
 8003270:	4b6d      	ldr	r3, [pc, #436]	@ (8003428 <MX_GPIO_Init+0x214>)
 8003272:	695a      	ldr	r2, [r3, #20]
 8003274:	2380      	movs	r3, #128	@ 0x80
 8003276:	029b      	lsls	r3, r3, #10
 8003278:	4013      	ands	r3, r2
 800327a:	60bb      	str	r3, [r7, #8]
 800327c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800327e:	4b6a      	ldr	r3, [pc, #424]	@ (8003428 <MX_GPIO_Init+0x214>)
 8003280:	695a      	ldr	r2, [r3, #20]
 8003282:	4b69      	ldr	r3, [pc, #420]	@ (8003428 <MX_GPIO_Init+0x214>)
 8003284:	2180      	movs	r1, #128	@ 0x80
 8003286:	02c9      	lsls	r1, r1, #11
 8003288:	430a      	orrs	r2, r1
 800328a:	615a      	str	r2, [r3, #20]
 800328c:	4b66      	ldr	r3, [pc, #408]	@ (8003428 <MX_GPIO_Init+0x214>)
 800328e:	695a      	ldr	r2, [r3, #20]
 8003290:	2380      	movs	r3, #128	@ 0x80
 8003292:	02db      	lsls	r3, r3, #11
 8003294:	4013      	ands	r3, r2
 8003296:	607b      	str	r3, [r7, #4]
 8003298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800329a:	4b63      	ldr	r3, [pc, #396]	@ (8003428 <MX_GPIO_Init+0x214>)
 800329c:	695a      	ldr	r2, [r3, #20]
 800329e:	4b62      	ldr	r3, [pc, #392]	@ (8003428 <MX_GPIO_Init+0x214>)
 80032a0:	2180      	movs	r1, #128	@ 0x80
 80032a2:	0349      	lsls	r1, r1, #13
 80032a4:	430a      	orrs	r2, r1
 80032a6:	615a      	str	r2, [r3, #20]
 80032a8:	4b5f      	ldr	r3, [pc, #380]	@ (8003428 <MX_GPIO_Init+0x214>)
 80032aa:	695a      	ldr	r2, [r3, #20]
 80032ac:	2380      	movs	r3, #128	@ 0x80
 80032ae:	035b      	lsls	r3, r3, #13
 80032b0:	4013      	ands	r3, r2
 80032b2:	603b      	str	r3, [r7, #0]
 80032b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_OUT_Pin|BRGT_CS_Pin|BRGT_UD_Pin|STATUS_IND_Pin, GPIO_PIN_RESET);
 80032b6:	495d      	ldr	r1, [pc, #372]	@ (800342c <MX_GPIO_Init+0x218>)
 80032b8:	4b5d      	ldr	r3, [pc, #372]	@ (8003430 <MX_GPIO_Init+0x21c>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	0018      	movs	r0, r3
 80032be:	f001 f930 	bl	8004522 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IND_LATCH_GPIO_Port, IND_LATCH_Pin, GPIO_PIN_RESET);
 80032c2:	2390      	movs	r3, #144	@ 0x90
 80032c4:	05db      	lsls	r3, r3, #23
 80032c6:	2200      	movs	r2, #0
 80032c8:	2140      	movs	r1, #64	@ 0x40
 80032ca:	0018      	movs	r0, r3
 80032cc:	f001 f929 	bl	8004522 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_OUT_Pin BRGT_CS_Pin BRGT_UD_Pin STATUS_IND_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT_Pin|BRGT_CS_Pin|BRGT_UD_Pin|STATUS_IND_Pin;
 80032d0:	193b      	adds	r3, r7, r4
 80032d2:	4a56      	ldr	r2, [pc, #344]	@ (800342c <MX_GPIO_Init+0x218>)
 80032d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032d6:	193b      	adds	r3, r7, r4
 80032d8:	2201      	movs	r2, #1
 80032da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032dc:	193b      	adds	r3, r7, r4
 80032de:	2200      	movs	r2, #0
 80032e0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032e2:	193b      	adds	r3, r7, r4
 80032e4:	2200      	movs	r2, #0
 80032e6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032e8:	193b      	adds	r3, r7, r4
 80032ea:	4a51      	ldr	r2, [pc, #324]	@ (8003430 <MX_GPIO_Init+0x21c>)
 80032ec:	0019      	movs	r1, r3
 80032ee:	0010      	movs	r0, r2
 80032f0:	f000 ff8a 	bl	8004208 <HAL_GPIO_Init>

  /*Configure GPIO pin : WHEEL_A_Pin */
  GPIO_InitStruct.Pin = WHEEL_A_Pin;
 80032f4:	0021      	movs	r1, r4
 80032f6:	187b      	adds	r3, r7, r1
 80032f8:	2204      	movs	r2, #4
 80032fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80032fc:	187b      	adds	r3, r7, r1
 80032fe:	2288      	movs	r2, #136	@ 0x88
 8003300:	0352      	lsls	r2, r2, #13
 8003302:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003304:	000c      	movs	r4, r1
 8003306:	193b      	adds	r3, r7, r4
 8003308:	2200      	movs	r2, #0
 800330a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(WHEEL_A_GPIO_Port, &GPIO_InitStruct);
 800330c:	193b      	adds	r3, r7, r4
 800330e:	4a48      	ldr	r2, [pc, #288]	@ (8003430 <MX_GPIO_Init+0x21c>)
 8003310:	0019      	movs	r1, r3
 8003312:	0010      	movs	r0, r2
 8003314:	f000 ff78 	bl	8004208 <HAL_GPIO_Init>

  /*Configure GPIO pins : WHEEL_B_Pin ALT_B_Pin AP_BTN_Pin ALT_SW_Pin
                           BANK_BTN_Pin CRS1_B_Pin CRS1_SW_Pin BC_BTN_Pin */
  GPIO_InitStruct.Pin = WHEEL_B_Pin|ALT_B_Pin|AP_BTN_Pin|ALT_SW_Pin
 8003318:	193b      	adds	r3, r7, r4
 800331a:	4a46      	ldr	r2, [pc, #280]	@ (8003434 <MX_GPIO_Init+0x220>)
 800331c:	601a      	str	r2, [r3, #0]
                          |BANK_BTN_Pin|CRS1_B_Pin|CRS1_SW_Pin|BC_BTN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800331e:	193b      	adds	r3, r7, r4
 8003320:	2200      	movs	r2, #0
 8003322:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003324:	193b      	adds	r3, r7, r4
 8003326:	2200      	movs	r2, #0
 8003328:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800332a:	193b      	adds	r3, r7, r4
 800332c:	4a40      	ldr	r2, [pc, #256]	@ (8003430 <MX_GPIO_Init+0x21c>)
 800332e:	0019      	movs	r1, r3
 8003330:	0010      	movs	r0, r2
 8003332:	f000 ff69 	bl	8004208 <HAL_GPIO_Init>

  /*Configure GPIO pins : ALT_BTN_Pin VS_BTN_Pin FD_BTN_Pin YD_BTN_Pin
                           XFR_BTN_Pin */
  GPIO_InitStruct.Pin = ALT_BTN_Pin|VS_BTN_Pin|FD_BTN_Pin|YD_BTN_Pin
 8003336:	193b      	adds	r3, r7, r4
 8003338:	22e3      	movs	r2, #227	@ 0xe3
 800333a:	00d2      	lsls	r2, r2, #3
 800333c:	601a      	str	r2, [r3, #0]
                          |XFR_BTN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800333e:	193b      	adds	r3, r7, r4
 8003340:	2200      	movs	r2, #0
 8003342:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003344:	193b      	adds	r3, r7, r4
 8003346:	2200      	movs	r2, #0
 8003348:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800334a:	193a      	adds	r2, r7, r4
 800334c:	2390      	movs	r3, #144	@ 0x90
 800334e:	05db      	lsls	r3, r3, #23
 8003350:	0011      	movs	r1, r2
 8003352:	0018      	movs	r0, r3
 8003354:	f000 ff58 	bl	8004208 <HAL_GPIO_Init>

  /*Configure GPIO pin : IND_LATCH_Pin */
  GPIO_InitStruct.Pin = IND_LATCH_Pin;
 8003358:	193b      	adds	r3, r7, r4
 800335a:	2240      	movs	r2, #64	@ 0x40
 800335c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800335e:	193b      	adds	r3, r7, r4
 8003360:	2201      	movs	r2, #1
 8003362:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003364:	193b      	adds	r3, r7, r4
 8003366:	2200      	movs	r2, #0
 8003368:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800336a:	193b      	adds	r3, r7, r4
 800336c:	2200      	movs	r2, #0
 800336e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(IND_LATCH_GPIO_Port, &GPIO_InitStruct);
 8003370:	193a      	adds	r2, r7, r4
 8003372:	2390      	movs	r3, #144	@ 0x90
 8003374:	05db      	lsls	r3, r3, #23
 8003376:	0011      	movs	r1, r2
 8003378:	0018      	movs	r0, r3
 800337a:	f000 ff45 	bl	8004208 <HAL_GPIO_Init>

  /*Configure GPIO pins : FLC_BTN_Pin SPD_BTN_Pin VNV_BTN_Pin CRS2_SW_Pin
                           CRS2_A_Pin GPIO_IN_Pin CRS2_B_Pin HDG_BTN_Pin
                           APR_BTN_Pin NAV_BTN_Pin HDG_B_Pin USB_SER_SEL_Pin
                           USART_INVALID_Pin */
  GPIO_InitStruct.Pin = FLC_BTN_Pin|SPD_BTN_Pin|VNV_BTN_Pin|CRS2_SW_Pin
 800337e:	193b      	adds	r3, r7, r4
 8003380:	4a2d      	ldr	r2, [pc, #180]	@ (8003438 <MX_GPIO_Init+0x224>)
 8003382:	601a      	str	r2, [r3, #0]
                          |CRS2_A_Pin|GPIO_IN_Pin|CRS2_B_Pin|HDG_BTN_Pin
                          |APR_BTN_Pin|NAV_BTN_Pin|HDG_B_Pin|USB_SER_SEL_Pin
                          |USART_INVALID_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003384:	193b      	adds	r3, r7, r4
 8003386:	2200      	movs	r2, #0
 8003388:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800338a:	193b      	adds	r3, r7, r4
 800338c:	2200      	movs	r2, #0
 800338e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003390:	193b      	adds	r3, r7, r4
 8003392:	4a2a      	ldr	r2, [pc, #168]	@ (800343c <MX_GPIO_Init+0x228>)
 8003394:	0019      	movs	r1, r3
 8003396:	0010      	movs	r0, r2
 8003398:	f000 ff36 	bl	8004208 <HAL_GPIO_Init>

  /*Configure GPIO pins : ALT_A_Pin HDG_A_Pin */
  GPIO_InitStruct.Pin = ALT_A_Pin|HDG_A_Pin;
 800339c:	193b      	adds	r3, r7, r4
 800339e:	4a28      	ldr	r2, [pc, #160]	@ (8003440 <MX_GPIO_Init+0x22c>)
 80033a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80033a2:	193b      	adds	r3, r7, r4
 80033a4:	2288      	movs	r2, #136	@ 0x88
 80033a6:	0352      	lsls	r2, r2, #13
 80033a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033aa:	193b      	adds	r3, r7, r4
 80033ac:	2200      	movs	r2, #0
 80033ae:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033b0:	193b      	adds	r3, r7, r4
 80033b2:	4a22      	ldr	r2, [pc, #136]	@ (800343c <MX_GPIO_Init+0x228>)
 80033b4:	0019      	movs	r1, r3
 80033b6:	0010      	movs	r0, r2
 80033b8:	f000 ff26 	bl	8004208 <HAL_GPIO_Init>

  /*Configure GPIO pin : CRS1_A_Pin */
  GPIO_InitStruct.Pin = CRS1_A_Pin;
 80033bc:	193b      	adds	r3, r7, r4
 80033be:	2280      	movs	r2, #128	@ 0x80
 80033c0:	0212      	lsls	r2, r2, #8
 80033c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80033c4:	193b      	adds	r3, r7, r4
 80033c6:	2288      	movs	r2, #136	@ 0x88
 80033c8:	0352      	lsls	r2, r2, #13
 80033ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033cc:	193b      	adds	r3, r7, r4
 80033ce:	2200      	movs	r2, #0
 80033d0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CRS1_A_GPIO_Port, &GPIO_InitStruct);
 80033d2:	193a      	adds	r2, r7, r4
 80033d4:	2390      	movs	r3, #144	@ 0x90
 80033d6:	05db      	lsls	r3, r3, #23
 80033d8:	0011      	movs	r1, r2
 80033da:	0018      	movs	r0, r3
 80033dc:	f000 ff14 	bl	8004208 <HAL_GPIO_Init>

  /*Configure GPIO pin : HDG_SW_Pin */
  GPIO_InitStruct.Pin = HDG_SW_Pin;
 80033e0:	193b      	adds	r3, r7, r4
 80033e2:	2204      	movs	r2, #4
 80033e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033e6:	193b      	adds	r3, r7, r4
 80033e8:	2200      	movs	r2, #0
 80033ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ec:	193b      	adds	r3, r7, r4
 80033ee:	2200      	movs	r2, #0
 80033f0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(HDG_SW_GPIO_Port, &GPIO_InitStruct);
 80033f2:	193b      	adds	r3, r7, r4
 80033f4:	4a13      	ldr	r2, [pc, #76]	@ (8003444 <MX_GPIO_Init+0x230>)
 80033f6:	0019      	movs	r1, r3
 80033f8:	0010      	movs	r0, r2
 80033fa:	f000 ff05 	bl	8004208 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80033fe:	2200      	movs	r2, #0
 8003400:	2100      	movs	r1, #0
 8003402:	2006      	movs	r0, #6
 8003404:	f000 fe50 	bl	80040a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8003408:	2006      	movs	r0, #6
 800340a:	f000 fe62 	bl	80040d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800340e:	2200      	movs	r2, #0
 8003410:	2100      	movs	r1, #0
 8003412:	2007      	movs	r0, #7
 8003414:	f000 fe48 	bl	80040a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003418:	2007      	movs	r0, #7
 800341a:	f000 fe5a 	bl	80040d2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800341e:	46c0      	nop			@ (mov r8, r8)
 8003420:	46bd      	mov	sp, r7
 8003422:	b00b      	add	sp, #44	@ 0x2c
 8003424:	bd90      	pop	{r4, r7, pc}
 8003426:	46c0      	nop			@ (mov r8, r8)
 8003428:	40021000 	.word	0x40021000
 800342c:	0000e001 	.word	0x0000e001
 8003430:	48000800 	.word	0x48000800
 8003434:	00001fc8 	.word	0x00001fc8
 8003438:	00003fbf 	.word	0x00003fbf
 800343c:	48000400 	.word	0x48000400
 8003440:	00004040 	.word	0x00004040
 8003444:	48000c00 	.word	0x48000c00

08003448 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	HAL_GPIO_WritePin(STATUS_IND_GPIO_Port, STATUS_IND_Pin, GPIO_PIN_SET);
 800344c:	4b04      	ldr	r3, [pc, #16]	@ (8003460 <Error_Handler+0x18>)
 800344e:	2201      	movs	r2, #1
 8003450:	2101      	movs	r1, #1
 8003452:	0018      	movs	r0, r3
 8003454:	f001 f865 	bl	8004522 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003458:	b672      	cpsid	i
}
 800345a:	46c0      	nop			@ (mov r8, r8)

  __disable_irq();
  while (1)
 800345c:	46c0      	nop			@ (mov r8, r8)
 800345e:	e7fd      	b.n	800345c <Error_Handler+0x14>
 8003460:	48000800 	.word	0x48000800

08003464 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800346a:	4b0f      	ldr	r3, [pc, #60]	@ (80034a8 <HAL_MspInit+0x44>)
 800346c:	699a      	ldr	r2, [r3, #24]
 800346e:	4b0e      	ldr	r3, [pc, #56]	@ (80034a8 <HAL_MspInit+0x44>)
 8003470:	2101      	movs	r1, #1
 8003472:	430a      	orrs	r2, r1
 8003474:	619a      	str	r2, [r3, #24]
 8003476:	4b0c      	ldr	r3, [pc, #48]	@ (80034a8 <HAL_MspInit+0x44>)
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	2201      	movs	r2, #1
 800347c:	4013      	ands	r3, r2
 800347e:	607b      	str	r3, [r7, #4]
 8003480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003482:	4b09      	ldr	r3, [pc, #36]	@ (80034a8 <HAL_MspInit+0x44>)
 8003484:	69da      	ldr	r2, [r3, #28]
 8003486:	4b08      	ldr	r3, [pc, #32]	@ (80034a8 <HAL_MspInit+0x44>)
 8003488:	2180      	movs	r1, #128	@ 0x80
 800348a:	0549      	lsls	r1, r1, #21
 800348c:	430a      	orrs	r2, r1
 800348e:	61da      	str	r2, [r3, #28]
 8003490:	4b05      	ldr	r3, [pc, #20]	@ (80034a8 <HAL_MspInit+0x44>)
 8003492:	69da      	ldr	r2, [r3, #28]
 8003494:	2380      	movs	r3, #128	@ 0x80
 8003496:	055b      	lsls	r3, r3, #21
 8003498:	4013      	ands	r3, r2
 800349a:	603b      	str	r3, [r7, #0]
 800349c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800349e:	46c0      	nop			@ (mov r8, r8)
 80034a0:	46bd      	mov	sp, r7
 80034a2:	b002      	add	sp, #8
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	46c0      	nop			@ (mov r8, r8)
 80034a8:	40021000 	.word	0x40021000

080034ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80034ac:	b590      	push	{r4, r7, lr}
 80034ae:	b08b      	sub	sp, #44	@ 0x2c
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034b4:	2414      	movs	r4, #20
 80034b6:	193b      	adds	r3, r7, r4
 80034b8:	0018      	movs	r0, r3
 80034ba:	2314      	movs	r3, #20
 80034bc:	001a      	movs	r2, r3
 80034be:	2100      	movs	r1, #0
 80034c0:	f00a fbbe 	bl	800dc40 <memset>
  if(hadc->Instance==ADC1)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a19      	ldr	r2, [pc, #100]	@ (8003530 <HAL_ADC_MspInit+0x84>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d12b      	bne.n	8003526 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80034ce:	4b19      	ldr	r3, [pc, #100]	@ (8003534 <HAL_ADC_MspInit+0x88>)
 80034d0:	699a      	ldr	r2, [r3, #24]
 80034d2:	4b18      	ldr	r3, [pc, #96]	@ (8003534 <HAL_ADC_MspInit+0x88>)
 80034d4:	2180      	movs	r1, #128	@ 0x80
 80034d6:	0089      	lsls	r1, r1, #2
 80034d8:	430a      	orrs	r2, r1
 80034da:	619a      	str	r2, [r3, #24]
 80034dc:	4b15      	ldr	r3, [pc, #84]	@ (8003534 <HAL_ADC_MspInit+0x88>)
 80034de:	699a      	ldr	r2, [r3, #24]
 80034e0:	2380      	movs	r3, #128	@ 0x80
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4013      	ands	r3, r2
 80034e6:	613b      	str	r3, [r7, #16]
 80034e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ea:	4b12      	ldr	r3, [pc, #72]	@ (8003534 <HAL_ADC_MspInit+0x88>)
 80034ec:	695a      	ldr	r2, [r3, #20]
 80034ee:	4b11      	ldr	r3, [pc, #68]	@ (8003534 <HAL_ADC_MspInit+0x88>)
 80034f0:	2180      	movs	r1, #128	@ 0x80
 80034f2:	0289      	lsls	r1, r1, #10
 80034f4:	430a      	orrs	r2, r1
 80034f6:	615a      	str	r2, [r3, #20]
 80034f8:	4b0e      	ldr	r3, [pc, #56]	@ (8003534 <HAL_ADC_MspInit+0x88>)
 80034fa:	695a      	ldr	r2, [r3, #20]
 80034fc:	2380      	movs	r3, #128	@ 0x80
 80034fe:	029b      	lsls	r3, r3, #10
 8003500:	4013      	ands	r3, r2
 8003502:	60fb      	str	r3, [r7, #12]
 8003504:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = VBUS_Pin|BACKLIGHT_IN_Pin;
 8003506:	193b      	adds	r3, r7, r4
 8003508:	2203      	movs	r2, #3
 800350a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800350c:	193b      	adds	r3, r7, r4
 800350e:	2203      	movs	r2, #3
 8003510:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003512:	193b      	adds	r3, r7, r4
 8003514:	2200      	movs	r2, #0
 8003516:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003518:	193a      	adds	r2, r7, r4
 800351a:	2390      	movs	r3, #144	@ 0x90
 800351c:	05db      	lsls	r3, r3, #23
 800351e:	0011      	movs	r1, r2
 8003520:	0018      	movs	r0, r3
 8003522:	f000 fe71 	bl	8004208 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003526:	46c0      	nop			@ (mov r8, r8)
 8003528:	46bd      	mov	sp, r7
 800352a:	b00b      	add	sp, #44	@ 0x2c
 800352c:	bd90      	pop	{r4, r7, pc}
 800352e:	46c0      	nop			@ (mov r8, r8)
 8003530:	40012400 	.word	0x40012400
 8003534:	40021000 	.word	0x40021000

08003538 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003538:	b590      	push	{r4, r7, lr}
 800353a:	b08b      	sub	sp, #44	@ 0x2c
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003540:	2414      	movs	r4, #20
 8003542:	193b      	adds	r3, r7, r4
 8003544:	0018      	movs	r0, r3
 8003546:	2314      	movs	r3, #20
 8003548:	001a      	movs	r2, r3
 800354a:	2100      	movs	r1, #0
 800354c:	f00a fb78 	bl	800dc40 <memset>
  if(hspi->Instance==SPI1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a1c      	ldr	r2, [pc, #112]	@ (80035c8 <HAL_SPI_MspInit+0x90>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d132      	bne.n	80035c0 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800355a:	4b1c      	ldr	r3, [pc, #112]	@ (80035cc <HAL_SPI_MspInit+0x94>)
 800355c:	699a      	ldr	r2, [r3, #24]
 800355e:	4b1b      	ldr	r3, [pc, #108]	@ (80035cc <HAL_SPI_MspInit+0x94>)
 8003560:	2180      	movs	r1, #128	@ 0x80
 8003562:	0149      	lsls	r1, r1, #5
 8003564:	430a      	orrs	r2, r1
 8003566:	619a      	str	r2, [r3, #24]
 8003568:	4b18      	ldr	r3, [pc, #96]	@ (80035cc <HAL_SPI_MspInit+0x94>)
 800356a:	699a      	ldr	r2, [r3, #24]
 800356c:	2380      	movs	r3, #128	@ 0x80
 800356e:	015b      	lsls	r3, r3, #5
 8003570:	4013      	ands	r3, r2
 8003572:	613b      	str	r3, [r7, #16]
 8003574:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003576:	4b15      	ldr	r3, [pc, #84]	@ (80035cc <HAL_SPI_MspInit+0x94>)
 8003578:	695a      	ldr	r2, [r3, #20]
 800357a:	4b14      	ldr	r3, [pc, #80]	@ (80035cc <HAL_SPI_MspInit+0x94>)
 800357c:	2180      	movs	r1, #128	@ 0x80
 800357e:	0289      	lsls	r1, r1, #10
 8003580:	430a      	orrs	r2, r1
 8003582:	615a      	str	r2, [r3, #20]
 8003584:	4b11      	ldr	r3, [pc, #68]	@ (80035cc <HAL_SPI_MspInit+0x94>)
 8003586:	695a      	ldr	r2, [r3, #20]
 8003588:	2380      	movs	r3, #128	@ 0x80
 800358a:	029b      	lsls	r3, r3, #10
 800358c:	4013      	ands	r3, r2
 800358e:	60fb      	str	r3, [r7, #12]
 8003590:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = IND_SCLK_Pin|IND_SD_Pin;
 8003592:	0021      	movs	r1, r4
 8003594:	187b      	adds	r3, r7, r1
 8003596:	22a0      	movs	r2, #160	@ 0xa0
 8003598:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800359a:	187b      	adds	r3, r7, r1
 800359c:	2202      	movs	r2, #2
 800359e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a0:	187b      	adds	r3, r7, r1
 80035a2:	2200      	movs	r2, #0
 80035a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035a6:	187b      	adds	r3, r7, r1
 80035a8:	2203      	movs	r2, #3
 80035aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80035ac:	187b      	adds	r3, r7, r1
 80035ae:	2200      	movs	r2, #0
 80035b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035b2:	187a      	adds	r2, r7, r1
 80035b4:	2390      	movs	r3, #144	@ 0x90
 80035b6:	05db      	lsls	r3, r3, #23
 80035b8:	0011      	movs	r1, r2
 80035ba:	0018      	movs	r0, r3
 80035bc:	f000 fe24 	bl	8004208 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80035c0:	46c0      	nop			@ (mov r8, r8)
 80035c2:	46bd      	mov	sp, r7
 80035c4:	b00b      	add	sp, #44	@ 0x2c
 80035c6:	bd90      	pop	{r4, r7, pc}
 80035c8:	40013000 	.word	0x40013000
 80035cc:	40021000 	.word	0x40021000

080035d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a25      	ldr	r2, [pc, #148]	@ (8003674 <HAL_TIM_Base_MspInit+0xa4>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d116      	bne.n	8003610 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80035e2:	4b25      	ldr	r3, [pc, #148]	@ (8003678 <HAL_TIM_Base_MspInit+0xa8>)
 80035e4:	699a      	ldr	r2, [r3, #24]
 80035e6:	4b24      	ldr	r3, [pc, #144]	@ (8003678 <HAL_TIM_Base_MspInit+0xa8>)
 80035e8:	2180      	movs	r1, #128	@ 0x80
 80035ea:	0109      	lsls	r1, r1, #4
 80035ec:	430a      	orrs	r2, r1
 80035ee:	619a      	str	r2, [r3, #24]
 80035f0:	4b21      	ldr	r3, [pc, #132]	@ (8003678 <HAL_TIM_Base_MspInit+0xa8>)
 80035f2:	699a      	ldr	r2, [r3, #24]
 80035f4:	2380      	movs	r3, #128	@ 0x80
 80035f6:	011b      	lsls	r3, r3, #4
 80035f8:	4013      	ands	r3, r2
 80035fa:	617b      	str	r3, [r7, #20]
 80035fc:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 80035fe:	2200      	movs	r2, #0
 8003600:	2100      	movs	r1, #0
 8003602:	200d      	movs	r0, #13
 8003604:	f000 fd50 	bl	80040a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8003608:	200d      	movs	r0, #13
 800360a:	f000 fd62 	bl	80040d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800360e:	e02c      	b.n	800366a <HAL_TIM_Base_MspInit+0x9a>
  else if(htim_base->Instance==TIM7)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a19      	ldr	r2, [pc, #100]	@ (800367c <HAL_TIM_Base_MspInit+0xac>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d114      	bne.n	8003644 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800361a:	4b17      	ldr	r3, [pc, #92]	@ (8003678 <HAL_TIM_Base_MspInit+0xa8>)
 800361c:	69da      	ldr	r2, [r3, #28]
 800361e:	4b16      	ldr	r3, [pc, #88]	@ (8003678 <HAL_TIM_Base_MspInit+0xa8>)
 8003620:	2120      	movs	r1, #32
 8003622:	430a      	orrs	r2, r1
 8003624:	61da      	str	r2, [r3, #28]
 8003626:	4b14      	ldr	r3, [pc, #80]	@ (8003678 <HAL_TIM_Base_MspInit+0xa8>)
 8003628:	69db      	ldr	r3, [r3, #28]
 800362a:	2220      	movs	r2, #32
 800362c:	4013      	ands	r3, r2
 800362e:	613b      	str	r3, [r7, #16]
 8003630:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003632:	2200      	movs	r2, #0
 8003634:	2100      	movs	r1, #0
 8003636:	2012      	movs	r0, #18
 8003638:	f000 fd36 	bl	80040a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800363c:	2012      	movs	r0, #18
 800363e:	f000 fd48 	bl	80040d2 <HAL_NVIC_EnableIRQ>
}
 8003642:	e012      	b.n	800366a <HAL_TIM_Base_MspInit+0x9a>
  else if(htim_base->Instance==TIM15)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a0d      	ldr	r2, [pc, #52]	@ (8003680 <HAL_TIM_Base_MspInit+0xb0>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d10d      	bne.n	800366a <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800364e:	4b0a      	ldr	r3, [pc, #40]	@ (8003678 <HAL_TIM_Base_MspInit+0xa8>)
 8003650:	699a      	ldr	r2, [r3, #24]
 8003652:	4b09      	ldr	r3, [pc, #36]	@ (8003678 <HAL_TIM_Base_MspInit+0xa8>)
 8003654:	2180      	movs	r1, #128	@ 0x80
 8003656:	0249      	lsls	r1, r1, #9
 8003658:	430a      	orrs	r2, r1
 800365a:	619a      	str	r2, [r3, #24]
 800365c:	4b06      	ldr	r3, [pc, #24]	@ (8003678 <HAL_TIM_Base_MspInit+0xa8>)
 800365e:	699a      	ldr	r2, [r3, #24]
 8003660:	2380      	movs	r3, #128	@ 0x80
 8003662:	025b      	lsls	r3, r3, #9
 8003664:	4013      	ands	r3, r2
 8003666:	60fb      	str	r3, [r7, #12]
 8003668:	68fb      	ldr	r3, [r7, #12]
}
 800366a:	46c0      	nop			@ (mov r8, r8)
 800366c:	46bd      	mov	sp, r7
 800366e:	b006      	add	sp, #24
 8003670:	bd80      	pop	{r7, pc}
 8003672:	46c0      	nop			@ (mov r8, r8)
 8003674:	40012c00 	.word	0x40012c00
 8003678:	40021000 	.word	0x40021000
 800367c:	40001400 	.word	0x40001400
 8003680:	40014000 	.word	0x40014000

08003684 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003684:	b590      	push	{r4, r7, lr}
 8003686:	b08b      	sub	sp, #44	@ 0x2c
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800368c:	2414      	movs	r4, #20
 800368e:	193b      	adds	r3, r7, r4
 8003690:	0018      	movs	r0, r3
 8003692:	2314      	movs	r3, #20
 8003694:	001a      	movs	r2, r3
 8003696:	2100      	movs	r1, #0
 8003698:	f00a fad2 	bl	800dc40 <memset>
  if(htim->Instance==TIM15)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a27      	ldr	r2, [pc, #156]	@ (8003740 <HAL_TIM_MspPostInit+0xbc>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d148      	bne.n	8003738 <HAL_TIM_MspPostInit+0xb4>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036a6:	4b27      	ldr	r3, [pc, #156]	@ (8003744 <HAL_TIM_MspPostInit+0xc0>)
 80036a8:	695a      	ldr	r2, [r3, #20]
 80036aa:	4b26      	ldr	r3, [pc, #152]	@ (8003744 <HAL_TIM_MspPostInit+0xc0>)
 80036ac:	2180      	movs	r1, #128	@ 0x80
 80036ae:	0289      	lsls	r1, r1, #10
 80036b0:	430a      	orrs	r2, r1
 80036b2:	615a      	str	r2, [r3, #20]
 80036b4:	4b23      	ldr	r3, [pc, #140]	@ (8003744 <HAL_TIM_MspPostInit+0xc0>)
 80036b6:	695a      	ldr	r2, [r3, #20]
 80036b8:	2380      	movs	r3, #128	@ 0x80
 80036ba:	029b      	lsls	r3, r3, #10
 80036bc:	4013      	ands	r3, r2
 80036be:	613b      	str	r3, [r7, #16]
 80036c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036c2:	4b20      	ldr	r3, [pc, #128]	@ (8003744 <HAL_TIM_MspPostInit+0xc0>)
 80036c4:	695a      	ldr	r2, [r3, #20]
 80036c6:	4b1f      	ldr	r3, [pc, #124]	@ (8003744 <HAL_TIM_MspPostInit+0xc0>)
 80036c8:	2180      	movs	r1, #128	@ 0x80
 80036ca:	02c9      	lsls	r1, r1, #11
 80036cc:	430a      	orrs	r2, r1
 80036ce:	615a      	str	r2, [r3, #20]
 80036d0:	4b1c      	ldr	r3, [pc, #112]	@ (8003744 <HAL_TIM_MspPostInit+0xc0>)
 80036d2:	695a      	ldr	r2, [r3, #20]
 80036d4:	2380      	movs	r3, #128	@ 0x80
 80036d6:	02db      	lsls	r3, r3, #11
 80036d8:	4013      	ands	r3, r2
 80036da:	60fb      	str	r3, [r7, #12]
 80036dc:	68fb      	ldr	r3, [r7, #12]
    /**TIM15 GPIO Configuration
    PA2     ------> TIM15_CH1
    PB15     ------> TIM15_CH2
    */
    GPIO_InitStruct.Pin = BRIGHT_Pin;
 80036de:	193b      	adds	r3, r7, r4
 80036e0:	2204      	movs	r2, #4
 80036e2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e4:	193b      	adds	r3, r7, r4
 80036e6:	2202      	movs	r2, #2
 80036e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ea:	193b      	adds	r3, r7, r4
 80036ec:	2200      	movs	r2, #0
 80036ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036f0:	193b      	adds	r3, r7, r4
 80036f2:	2200      	movs	r2, #0
 80036f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM15;
 80036f6:	193b      	adds	r3, r7, r4
 80036f8:	2200      	movs	r2, #0
 80036fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BRIGHT_GPIO_Port, &GPIO_InitStruct);
 80036fc:	193a      	adds	r2, r7, r4
 80036fe:	2390      	movs	r3, #144	@ 0x90
 8003700:	05db      	lsls	r3, r3, #23
 8003702:	0011      	movs	r1, r2
 8003704:	0018      	movs	r0, r3
 8003706:	f000 fd7f 	bl	8004208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BACKLIGHT_Pin;
 800370a:	0021      	movs	r1, r4
 800370c:	187b      	adds	r3, r7, r1
 800370e:	2280      	movs	r2, #128	@ 0x80
 8003710:	0212      	lsls	r2, r2, #8
 8003712:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003714:	187b      	adds	r3, r7, r1
 8003716:	2202      	movs	r2, #2
 8003718:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800371a:	187b      	adds	r3, r7, r1
 800371c:	2200      	movs	r2, #0
 800371e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003720:	187b      	adds	r3, r7, r1
 8003722:	2200      	movs	r2, #0
 8003724:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8003726:	187b      	adds	r3, r7, r1
 8003728:	2201      	movs	r2, #1
 800372a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BACKLIGHT_GPIO_Port, &GPIO_InitStruct);
 800372c:	187b      	adds	r3, r7, r1
 800372e:	4a06      	ldr	r2, [pc, #24]	@ (8003748 <HAL_TIM_MspPostInit+0xc4>)
 8003730:	0019      	movs	r1, r3
 8003732:	0010      	movs	r0, r2
 8003734:	f000 fd68 	bl	8004208 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8003738:	46c0      	nop			@ (mov r8, r8)
 800373a:	46bd      	mov	sp, r7
 800373c:	b00b      	add	sp, #44	@ 0x2c
 800373e:	bd90      	pop	{r4, r7, pc}
 8003740:	40014000 	.word	0x40014000
 8003744:	40021000 	.word	0x40021000
 8003748:	48000400 	.word	0x48000400

0800374c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800374c:	b590      	push	{r4, r7, lr}
 800374e:	b08b      	sub	sp, #44	@ 0x2c
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003754:	2414      	movs	r4, #20
 8003756:	193b      	adds	r3, r7, r4
 8003758:	0018      	movs	r0, r3
 800375a:	2314      	movs	r3, #20
 800375c:	001a      	movs	r2, r3
 800375e:	2100      	movs	r1, #0
 8003760:	f00a fa6e 	bl	800dc40 <memset>
  if(huart->Instance==USART3)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a20      	ldr	r2, [pc, #128]	@ (80037ec <HAL_UART_MspInit+0xa0>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d139      	bne.n	80037e2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800376e:	4b20      	ldr	r3, [pc, #128]	@ (80037f0 <HAL_UART_MspInit+0xa4>)
 8003770:	69da      	ldr	r2, [r3, #28]
 8003772:	4b1f      	ldr	r3, [pc, #124]	@ (80037f0 <HAL_UART_MspInit+0xa4>)
 8003774:	2180      	movs	r1, #128	@ 0x80
 8003776:	02c9      	lsls	r1, r1, #11
 8003778:	430a      	orrs	r2, r1
 800377a:	61da      	str	r2, [r3, #28]
 800377c:	4b1c      	ldr	r3, [pc, #112]	@ (80037f0 <HAL_UART_MspInit+0xa4>)
 800377e:	69da      	ldr	r2, [r3, #28]
 8003780:	2380      	movs	r3, #128	@ 0x80
 8003782:	02db      	lsls	r3, r3, #11
 8003784:	4013      	ands	r3, r2
 8003786:	613b      	str	r3, [r7, #16]
 8003788:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800378a:	4b19      	ldr	r3, [pc, #100]	@ (80037f0 <HAL_UART_MspInit+0xa4>)
 800378c:	695a      	ldr	r2, [r3, #20]
 800378e:	4b18      	ldr	r3, [pc, #96]	@ (80037f0 <HAL_UART_MspInit+0xa4>)
 8003790:	2180      	movs	r1, #128	@ 0x80
 8003792:	0309      	lsls	r1, r1, #12
 8003794:	430a      	orrs	r2, r1
 8003796:	615a      	str	r2, [r3, #20]
 8003798:	4b15      	ldr	r3, [pc, #84]	@ (80037f0 <HAL_UART_MspInit+0xa4>)
 800379a:	695a      	ldr	r2, [r3, #20]
 800379c:	2380      	movs	r3, #128	@ 0x80
 800379e:	031b      	lsls	r3, r3, #12
 80037a0:	4013      	ands	r3, r2
 80037a2:	60fb      	str	r3, [r7, #12]
 80037a4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC4     ------> USART3_TX
    PC5     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80037a6:	0021      	movs	r1, r4
 80037a8:	187b      	adds	r3, r7, r1
 80037aa:	2230      	movs	r2, #48	@ 0x30
 80037ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ae:	187b      	adds	r3, r7, r1
 80037b0:	2202      	movs	r2, #2
 80037b2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b4:	187b      	adds	r3, r7, r1
 80037b6:	2200      	movs	r2, #0
 80037b8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80037ba:	187b      	adds	r3, r7, r1
 80037bc:	2203      	movs	r2, #3
 80037be:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 80037c0:	187b      	adds	r3, r7, r1
 80037c2:	2201      	movs	r2, #1
 80037c4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037c6:	187b      	adds	r3, r7, r1
 80037c8:	4a0a      	ldr	r2, [pc, #40]	@ (80037f4 <HAL_UART_MspInit+0xa8>)
 80037ca:	0019      	movs	r1, r3
 80037cc:	0010      	movs	r0, r2
 80037ce:	f000 fd1b 	bl	8004208 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 80037d2:	2200      	movs	r2, #0
 80037d4:	2100      	movs	r1, #0
 80037d6:	201d      	movs	r0, #29
 80037d8:	f000 fc66 	bl	80040a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 80037dc:	201d      	movs	r0, #29
 80037de:	f000 fc78 	bl	80040d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80037e2:	46c0      	nop			@ (mov r8, r8)
 80037e4:	46bd      	mov	sp, r7
 80037e6:	b00b      	add	sp, #44	@ 0x2c
 80037e8:	bd90      	pop	{r4, r7, pc}
 80037ea:	46c0      	nop			@ (mov r8, r8)
 80037ec:	40004800 	.word	0x40004800
 80037f0:	40021000 	.word	0x40021000
 80037f4:	48000800 	.word	0x48000800

080037f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80037fc:	46c0      	nop			@ (mov r8, r8)
 80037fe:	e7fd      	b.n	80037fc <NMI_Handler+0x4>

08003800 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003804:	46c0      	nop			@ (mov r8, r8)
 8003806:	e7fd      	b.n	8003804 <HardFault_Handler+0x4>

08003808 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800380c:	46c0      	nop			@ (mov r8, r8)
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003816:	46c0      	nop			@ (mov r8, r8)
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003820:	f000 f920 	bl	8003a64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003824:	46c0      	nop			@ (mov r8, r8)
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 800382a:	b580      	push	{r7, lr}
 800382c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(WHEEL_A_Pin);
 800382e:	2004      	movs	r0, #4
 8003830:	f000 feb0 	bl	8004594 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8003834:	46c0      	nop			@ (mov r8, r8)
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HDG_A_Pin);
 800383e:	2040      	movs	r0, #64	@ 0x40
 8003840:	f000 fea8 	bl	8004594 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ALT_A_Pin);
 8003844:	2380      	movs	r3, #128	@ 0x80
 8003846:	01db      	lsls	r3, r3, #7
 8003848:	0018      	movs	r0, r3
 800384a:	f000 fea3 	bl	8004594 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CRS1_A_Pin);
 800384e:	2380      	movs	r3, #128	@ 0x80
 8003850:	021b      	lsls	r3, r3, #8
 8003852:	0018      	movs	r0, r3
 8003854:	f000 fe9e 	bl	8004594 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003858:	46c0      	nop			@ (mov r8, r8)
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
	...

08003860 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003864:	4b03      	ldr	r3, [pc, #12]	@ (8003874 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8003866:	0018      	movs	r0, r3
 8003868:	f003 ffa8 	bl	80077bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 800386c:	46c0      	nop			@ (mov r8, r8)
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	46c0      	nop			@ (mov r8, r8)
 8003874:	200007d4 	.word	0x200007d4

08003878 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800387c:	4b03      	ldr	r3, [pc, #12]	@ (800388c <TIM7_IRQHandler+0x14>)
 800387e:	0018      	movs	r0, r3
 8003880:	f003 ff9c 	bl	80077bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003884:	46c0      	nop			@ (mov r8, r8)
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	46c0      	nop			@ (mov r8, r8)
 800388c:	2000081c 	.word	0x2000081c

08003890 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003894:	4b03      	ldr	r3, [pc, #12]	@ (80038a4 <USART3_4_IRQHandler+0x14>)
 8003896:	0018      	movs	r0, r3
 8003898:	f004 feaa 	bl	80085f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 800389c:	46c0      	nop			@ (mov r8, r8)
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	46c0      	nop			@ (mov r8, r8)
 80038a4:	200008ac 	.word	0x200008ac

080038a8 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80038ac:	4b03      	ldr	r3, [pc, #12]	@ (80038bc <USB_IRQHandler+0x14>)
 80038ae:	0018      	movs	r0, r3
 80038b0:	f000 ffb2 	bl	8004818 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80038b4:	46c0      	nop			@ (mov r8, r8)
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	46c0      	nop			@ (mov r8, r8)
 80038bc:	20001608 	.word	0x20001608

080038c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
  return 1;
 80038c4:	2301      	movs	r3, #1
}
 80038c6:	0018      	movs	r0, r3
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <_kill>:

int _kill(int pid, int sig)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80038d6:	f00a fa17 	bl	800dd08 <__errno>
 80038da:	0003      	movs	r3, r0
 80038dc:	2216      	movs	r2, #22
 80038de:	601a      	str	r2, [r3, #0]
  return -1;
 80038e0:	2301      	movs	r3, #1
 80038e2:	425b      	negs	r3, r3
}
 80038e4:	0018      	movs	r0, r3
 80038e6:	46bd      	mov	sp, r7
 80038e8:	b002      	add	sp, #8
 80038ea:	bd80      	pop	{r7, pc}

080038ec <_exit>:

void _exit (int status)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80038f4:	2301      	movs	r3, #1
 80038f6:	425a      	negs	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	0011      	movs	r1, r2
 80038fc:	0018      	movs	r0, r3
 80038fe:	f7ff ffe5 	bl	80038cc <_kill>
  while (1) {}    /* Make sure we hang here */
 8003902:	46c0      	nop			@ (mov r8, r8)
 8003904:	e7fd      	b.n	8003902 <_exit+0x16>
	...

08003908 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003910:	4a14      	ldr	r2, [pc, #80]	@ (8003964 <_sbrk+0x5c>)
 8003912:	4b15      	ldr	r3, [pc, #84]	@ (8003968 <_sbrk+0x60>)
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800391c:	4b13      	ldr	r3, [pc, #76]	@ (800396c <_sbrk+0x64>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d102      	bne.n	800392a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003924:	4b11      	ldr	r3, [pc, #68]	@ (800396c <_sbrk+0x64>)
 8003926:	4a12      	ldr	r2, [pc, #72]	@ (8003970 <_sbrk+0x68>)
 8003928:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800392a:	4b10      	ldr	r3, [pc, #64]	@ (800396c <_sbrk+0x64>)
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	18d3      	adds	r3, r2, r3
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	429a      	cmp	r2, r3
 8003936:	d207      	bcs.n	8003948 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003938:	f00a f9e6 	bl	800dd08 <__errno>
 800393c:	0003      	movs	r3, r0
 800393e:	220c      	movs	r2, #12
 8003940:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003942:	2301      	movs	r3, #1
 8003944:	425b      	negs	r3, r3
 8003946:	e009      	b.n	800395c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003948:	4b08      	ldr	r3, [pc, #32]	@ (800396c <_sbrk+0x64>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800394e:	4b07      	ldr	r3, [pc, #28]	@ (800396c <_sbrk+0x64>)
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	18d2      	adds	r2, r2, r3
 8003956:	4b05      	ldr	r3, [pc, #20]	@ (800396c <_sbrk+0x64>)
 8003958:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800395a:	68fb      	ldr	r3, [r7, #12]
}
 800395c:	0018      	movs	r0, r3
 800395e:	46bd      	mov	sp, r7
 8003960:	b006      	add	sp, #24
 8003962:	bd80      	pop	{r7, pc}
 8003964:	20004000 	.word	0x20004000
 8003968:	00001000 	.word	0x00001000
 800396c:	20000934 	.word	0x20000934
 8003970:	20001c68 	.word	0x20001c68

08003974 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003978:	46c0      	nop			@ (mov r8, r8)
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
	...

08003980 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003980:	480d      	ldr	r0, [pc, #52]	@ (80039b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003982:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003984:	f7ff fff6 	bl	8003974 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003988:	480c      	ldr	r0, [pc, #48]	@ (80039bc <LoopForever+0x6>)
  ldr r1, =_edata
 800398a:	490d      	ldr	r1, [pc, #52]	@ (80039c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800398c:	4a0d      	ldr	r2, [pc, #52]	@ (80039c4 <LoopForever+0xe>)
  movs r3, #0
 800398e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003990:	e002      	b.n	8003998 <LoopCopyDataInit>

08003992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003996:	3304      	adds	r3, #4

08003998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800399a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800399c:	d3f9      	bcc.n	8003992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800399e:	4a0a      	ldr	r2, [pc, #40]	@ (80039c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80039a0:	4c0a      	ldr	r4, [pc, #40]	@ (80039cc <LoopForever+0x16>)
  movs r3, #0
 80039a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039a4:	e001      	b.n	80039aa <LoopFillZerobss>

080039a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039a8:	3204      	adds	r2, #4

080039aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039ac:	d3fb      	bcc.n	80039a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80039ae:	f00a f9b1 	bl	800dd14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80039b2:	f7ff f96f 	bl	8002c94 <main>

080039b6 <LoopForever>:

LoopForever:
    b LoopForever
 80039b6:	e7fe      	b.n	80039b6 <LoopForever>
  ldr   r0, =_estack
 80039b8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80039bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039c0:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 80039c4:	0800e064 	.word	0x0800e064
  ldr r2, =_sbss
 80039c8:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 80039cc:	20001c68 	.word	0x20001c68

080039d0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80039d0:	e7fe      	b.n	80039d0 <ADC1_IRQHandler>
	...

080039d4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039d8:	4b07      	ldr	r3, [pc, #28]	@ (80039f8 <HAL_Init+0x24>)
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	4b06      	ldr	r3, [pc, #24]	@ (80039f8 <HAL_Init+0x24>)
 80039de:	2110      	movs	r1, #16
 80039e0:	430a      	orrs	r2, r1
 80039e2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80039e4:	2003      	movs	r0, #3
 80039e6:	f000 f809 	bl	80039fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039ea:	f7ff fd3b 	bl	8003464 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	0018      	movs	r0, r3
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	46c0      	nop			@ (mov r8, r8)
 80039f8:	40022000 	.word	0x40022000

080039fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039fc:	b590      	push	{r4, r7, lr}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a04:	4b14      	ldr	r3, [pc, #80]	@ (8003a58 <HAL_InitTick+0x5c>)
 8003a06:	681c      	ldr	r4, [r3, #0]
 8003a08:	4b14      	ldr	r3, [pc, #80]	@ (8003a5c <HAL_InitTick+0x60>)
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	0019      	movs	r1, r3
 8003a0e:	23fa      	movs	r3, #250	@ 0xfa
 8003a10:	0098      	lsls	r0, r3, #2
 8003a12:	f7fc fb79 	bl	8000108 <__udivsi3>
 8003a16:	0003      	movs	r3, r0
 8003a18:	0019      	movs	r1, r3
 8003a1a:	0020      	movs	r0, r4
 8003a1c:	f7fc fb74 	bl	8000108 <__udivsi3>
 8003a20:	0003      	movs	r3, r0
 8003a22:	0018      	movs	r0, r3
 8003a24:	f000 fb65 	bl	80040f2 <HAL_SYSTICK_Config>
 8003a28:	1e03      	subs	r3, r0, #0
 8003a2a:	d001      	beq.n	8003a30 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e00f      	b.n	8003a50 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2b03      	cmp	r3, #3
 8003a34:	d80b      	bhi.n	8003a4e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a36:	6879      	ldr	r1, [r7, #4]
 8003a38:	2301      	movs	r3, #1
 8003a3a:	425b      	negs	r3, r3
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	0018      	movs	r0, r3
 8003a40:	f000 fb32 	bl	80040a8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a44:	4b06      	ldr	r3, [pc, #24]	@ (8003a60 <HAL_InitTick+0x64>)
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	e000      	b.n	8003a50 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
}
 8003a50:	0018      	movs	r0, r3
 8003a52:	46bd      	mov	sp, r7
 8003a54:	b003      	add	sp, #12
 8003a56:	bd90      	pop	{r4, r7, pc}
 8003a58:	20000000 	.word	0x20000000
 8003a5c:	20000008 	.word	0x20000008
 8003a60:	20000004 	.word	0x20000004

08003a64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a68:	4b05      	ldr	r3, [pc, #20]	@ (8003a80 <HAL_IncTick+0x1c>)
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	001a      	movs	r2, r3
 8003a6e:	4b05      	ldr	r3, [pc, #20]	@ (8003a84 <HAL_IncTick+0x20>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	18d2      	adds	r2, r2, r3
 8003a74:	4b03      	ldr	r3, [pc, #12]	@ (8003a84 <HAL_IncTick+0x20>)
 8003a76:	601a      	str	r2, [r3, #0]
}
 8003a78:	46c0      	nop			@ (mov r8, r8)
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	46c0      	nop			@ (mov r8, r8)
 8003a80:	20000008 	.word	0x20000008
 8003a84:	20000938 	.word	0x20000938

08003a88 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8003a8c:	4b02      	ldr	r3, [pc, #8]	@ (8003a98 <HAL_GetTick+0x10>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
}
 8003a90:	0018      	movs	r0, r3
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	46c0      	nop			@ (mov r8, r8)
 8003a98:	20000938 	.word	0x20000938

08003a9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003aa4:	f7ff fff0 	bl	8003a88 <HAL_GetTick>
 8003aa8:	0003      	movs	r3, r0
 8003aaa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	d005      	beq.n	8003ac2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8003ae0 <HAL_Delay+0x44>)
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	001a      	movs	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	189b      	adds	r3, r3, r2
 8003ac0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003ac2:	46c0      	nop			@ (mov r8, r8)
 8003ac4:	f7ff ffe0 	bl	8003a88 <HAL_GetTick>
 8003ac8:	0002      	movs	r2, r0
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d8f7      	bhi.n	8003ac4 <HAL_Delay+0x28>
  {
  }
}
 8003ad4:	46c0      	nop			@ (mov r8, r8)
 8003ad6:	46c0      	nop			@ (mov r8, r8)
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	b004      	add	sp, #16
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	46c0      	nop			@ (mov r8, r8)
 8003ae0:	20000008 	.word	0x20000008

08003ae4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003aec:	230f      	movs	r3, #15
 8003aee:	18fb      	adds	r3, r7, r3
 8003af0:	2200      	movs	r2, #0
 8003af2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8003af4:	2300      	movs	r3, #0
 8003af6:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e125      	b.n	8003d4e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10a      	bne.n	8003b20 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2234      	movs	r2, #52	@ 0x34
 8003b14:	2100      	movs	r1, #0
 8003b16:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	0018      	movs	r0, r3
 8003b1c:	f7ff fcc6 	bl	80034ac <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b24:	2210      	movs	r2, #16
 8003b26:	4013      	ands	r3, r2
 8003b28:	d000      	beq.n	8003b2c <HAL_ADC_Init+0x48>
 8003b2a:	e103      	b.n	8003d34 <HAL_ADC_Init+0x250>
 8003b2c:	230f      	movs	r3, #15
 8003b2e:	18fb      	adds	r3, r7, r3
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d000      	beq.n	8003b38 <HAL_ADC_Init+0x54>
 8003b36:	e0fd      	b.n	8003d34 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	2204      	movs	r2, #4
 8003b40:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8003b42:	d000      	beq.n	8003b46 <HAL_ADC_Init+0x62>
 8003b44:	e0f6      	b.n	8003d34 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b4a:	4a83      	ldr	r2, [pc, #524]	@ (8003d58 <HAL_ADC_Init+0x274>)
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	2202      	movs	r2, #2
 8003b50:	431a      	orrs	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	2203      	movs	r2, #3
 8003b5e:	4013      	ands	r3, r2
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d112      	bne.n	8003b8a <HAL_ADC_Init+0xa6>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d009      	beq.n	8003b86 <HAL_ADC_Init+0xa2>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68da      	ldr	r2, [r3, #12]
 8003b78:	2380      	movs	r3, #128	@ 0x80
 8003b7a:	021b      	lsls	r3, r3, #8
 8003b7c:	401a      	ands	r2, r3
 8003b7e:	2380      	movs	r3, #128	@ 0x80
 8003b80:	021b      	lsls	r3, r3, #8
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d101      	bne.n	8003b8a <HAL_ADC_Init+0xa6>
 8003b86:	2301      	movs	r3, #1
 8003b88:	e000      	b.n	8003b8c <HAL_ADC_Init+0xa8>
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d116      	bne.n	8003bbe <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	2218      	movs	r2, #24
 8003b98:	4393      	bics	r3, r2
 8003b9a:	0019      	movs	r1, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689a      	ldr	r2, [r3, #8]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	0899      	lsrs	r1, r3, #2
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68da      	ldr	r2, [r3, #12]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4964      	ldr	r1, [pc, #400]	@ (8003d5c <HAL_ADC_Init+0x278>)
 8003bca:	400a      	ands	r2, r1
 8003bcc:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	7e1b      	ldrb	r3, [r3, #24]
 8003bd2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	7e5b      	ldrb	r3, [r3, #25]
 8003bd8:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003bda:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	7e9b      	ldrb	r3, [r3, #26]
 8003be0:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003be2:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d002      	beq.n	8003bf2 <HAL_ADC_Init+0x10e>
 8003bec:	2380      	movs	r3, #128	@ 0x80
 8003bee:	015b      	lsls	r3, r3, #5
 8003bf0:	e000      	b.n	8003bf4 <HAL_ADC_Init+0x110>
 8003bf2:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003bf4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003bfa:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d101      	bne.n	8003c08 <HAL_ADC_Init+0x124>
 8003c04:	2304      	movs	r3, #4
 8003c06:	e000      	b.n	8003c0a <HAL_ADC_Init+0x126>
 8003c08:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8003c0a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2124      	movs	r1, #36	@ 0x24
 8003c10:	5c5b      	ldrb	r3, [r3, r1]
 8003c12:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003c14:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003c16:	68ba      	ldr	r2, [r7, #8]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	7edb      	ldrb	r3, [r3, #27]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d115      	bne.n	8003c50 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	7e9b      	ldrb	r3, [r3, #26]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d105      	bne.n	8003c38 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	2280      	movs	r2, #128	@ 0x80
 8003c30:	0252      	lsls	r2, r2, #9
 8003c32:	4313      	orrs	r3, r2
 8003c34:	60bb      	str	r3, [r7, #8]
 8003c36:	e00b      	b.n	8003c50 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c48:	2201      	movs	r2, #1
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	69da      	ldr	r2, [r3, #28]
 8003c54:	23c2      	movs	r3, #194	@ 0xc2
 8003c56:	33ff      	adds	r3, #255	@ 0xff
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d007      	beq.n	8003c6c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003c64:	4313      	orrs	r3, r2
 8003c66:	68ba      	ldr	r2, [r7, #8]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68d9      	ldr	r1, [r3, #12]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	430a      	orrs	r2, r1
 8003c7a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c80:	2380      	movs	r3, #128	@ 0x80
 8003c82:	055b      	lsls	r3, r3, #21
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d01b      	beq.n	8003cc0 <HAL_ADC_Init+0x1dc>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d017      	beq.n	8003cc0 <HAL_ADC_Init+0x1dc>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d013      	beq.n	8003cc0 <HAL_ADC_Init+0x1dc>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c9c:	2b03      	cmp	r3, #3
 8003c9e:	d00f      	beq.n	8003cc0 <HAL_ADC_Init+0x1dc>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca4:	2b04      	cmp	r3, #4
 8003ca6:	d00b      	beq.n	8003cc0 <HAL_ADC_Init+0x1dc>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cac:	2b05      	cmp	r3, #5
 8003cae:	d007      	beq.n	8003cc0 <HAL_ADC_Init+0x1dc>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb4:	2b06      	cmp	r3, #6
 8003cb6:	d003      	beq.n	8003cc0 <HAL_ADC_Init+0x1dc>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cbc:	2b07      	cmp	r3, #7
 8003cbe:	d112      	bne.n	8003ce6 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	695a      	ldr	r2, [r3, #20]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2107      	movs	r1, #7
 8003ccc:	438a      	bics	r2, r1
 8003cce:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	6959      	ldr	r1, [r3, #20]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cda:	2207      	movs	r2, #7
 8003cdc:	401a      	ands	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	4a1c      	ldr	r2, [pc, #112]	@ (8003d60 <HAL_ADC_Init+0x27c>)
 8003cee:	4013      	ands	r3, r2
 8003cf0:	68ba      	ldr	r2, [r7, #8]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d10b      	bne.n	8003d0e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d00:	2203      	movs	r2, #3
 8003d02:	4393      	bics	r3, r2
 8003d04:	2201      	movs	r2, #1
 8003d06:	431a      	orrs	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003d0c:	e01c      	b.n	8003d48 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d12:	2212      	movs	r2, #18
 8003d14:	4393      	bics	r3, r2
 8003d16:	2210      	movs	r2, #16
 8003d18:	431a      	orrs	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d22:	2201      	movs	r2, #1
 8003d24:	431a      	orrs	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8003d2a:	230f      	movs	r3, #15
 8003d2c:	18fb      	adds	r3, r7, r3
 8003d2e:	2201      	movs	r2, #1
 8003d30:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003d32:	e009      	b.n	8003d48 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d38:	2210      	movs	r2, #16
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8003d40:	230f      	movs	r3, #15
 8003d42:	18fb      	adds	r3, r7, r3
 8003d44:	2201      	movs	r2, #1
 8003d46:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003d48:	230f      	movs	r3, #15
 8003d4a:	18fb      	adds	r3, r7, r3
 8003d4c:	781b      	ldrb	r3, [r3, #0]
}
 8003d4e:	0018      	movs	r0, r3
 8003d50:	46bd      	mov	sp, r7
 8003d52:	b004      	add	sp, #16
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	46c0      	nop			@ (mov r8, r8)
 8003d58:	fffffefd 	.word	0xfffffefd
 8003d5c:	fffe0219 	.word	0xfffe0219
 8003d60:	833fffe7 	.word	0x833fffe7

08003d64 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d6e:	230f      	movs	r3, #15
 8003d70:	18fb      	adds	r3, r7, r3
 8003d72:	2200      	movs	r2, #0
 8003d74:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8003d76:	2300      	movs	r3, #0
 8003d78:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d7e:	2380      	movs	r3, #128	@ 0x80
 8003d80:	055b      	lsls	r3, r3, #21
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d011      	beq.n	8003daa <HAL_ADC_ConfigChannel+0x46>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d00d      	beq.n	8003daa <HAL_ADC_ConfigChannel+0x46>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d009      	beq.n	8003daa <HAL_ADC_ConfigChannel+0x46>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d9a:	2b03      	cmp	r3, #3
 8003d9c:	d005      	beq.n	8003daa <HAL_ADC_ConfigChannel+0x46>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	d001      	beq.n	8003daa <HAL_ADC_ConfigChannel+0x46>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2234      	movs	r2, #52	@ 0x34
 8003dae:	5c9b      	ldrb	r3, [r3, r2]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d101      	bne.n	8003db8 <HAL_ADC_ConfigChannel+0x54>
 8003db4:	2302      	movs	r3, #2
 8003db6:	e0bb      	b.n	8003f30 <HAL_ADC_ConfigChannel+0x1cc>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2234      	movs	r2, #52	@ 0x34
 8003dbc:	2101      	movs	r1, #1
 8003dbe:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	2204      	movs	r2, #4
 8003dc8:	4013      	ands	r3, r2
 8003dca:	d000      	beq.n	8003dce <HAL_ADC_ConfigChannel+0x6a>
 8003dcc:	e09f      	b.n	8003f0e <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	4a59      	ldr	r2, [pc, #356]	@ (8003f38 <HAL_ADC_ConfigChannel+0x1d4>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d100      	bne.n	8003dda <HAL_ADC_ConfigChannel+0x76>
 8003dd8:	e077      	b.n	8003eca <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2201      	movs	r2, #1
 8003de6:	409a      	lsls	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	430a      	orrs	r2, r1
 8003dee:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003df4:	2380      	movs	r3, #128	@ 0x80
 8003df6:	055b      	lsls	r3, r3, #21
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d037      	beq.n	8003e6c <HAL_ADC_ConfigChannel+0x108>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d033      	beq.n	8003e6c <HAL_ADC_ConfigChannel+0x108>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d02f      	beq.n	8003e6c <HAL_ADC_ConfigChannel+0x108>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e10:	2b03      	cmp	r3, #3
 8003e12:	d02b      	beq.n	8003e6c <HAL_ADC_ConfigChannel+0x108>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e18:	2b04      	cmp	r3, #4
 8003e1a:	d027      	beq.n	8003e6c <HAL_ADC_ConfigChannel+0x108>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e20:	2b05      	cmp	r3, #5
 8003e22:	d023      	beq.n	8003e6c <HAL_ADC_ConfigChannel+0x108>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e28:	2b06      	cmp	r3, #6
 8003e2a:	d01f      	beq.n	8003e6c <HAL_ADC_ConfigChannel+0x108>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e30:	2b07      	cmp	r3, #7
 8003e32:	d01b      	beq.n	8003e6c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	689a      	ldr	r2, [r3, #8]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	2107      	movs	r1, #7
 8003e40:	400b      	ands	r3, r1
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d012      	beq.n	8003e6c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	695a      	ldr	r2, [r3, #20]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2107      	movs	r1, #7
 8003e52:	438a      	bics	r2, r1
 8003e54:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6959      	ldr	r1, [r3, #20]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	2207      	movs	r2, #7
 8003e62:	401a      	ands	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2b10      	cmp	r3, #16
 8003e72:	d003      	beq.n	8003e7c <HAL_ADC_ConfigChannel+0x118>
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2b11      	cmp	r3, #17
 8003e7a:	d152      	bne.n	8003f22 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003e7c:	4b2f      	ldr	r3, [pc, #188]	@ (8003f3c <HAL_ADC_ConfigChannel+0x1d8>)
 8003e7e:	6819      	ldr	r1, [r3, #0]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2b10      	cmp	r3, #16
 8003e86:	d102      	bne.n	8003e8e <HAL_ADC_ConfigChannel+0x12a>
 8003e88:	2380      	movs	r3, #128	@ 0x80
 8003e8a:	041b      	lsls	r3, r3, #16
 8003e8c:	e001      	b.n	8003e92 <HAL_ADC_ConfigChannel+0x12e>
 8003e8e:	2380      	movs	r3, #128	@ 0x80
 8003e90:	03db      	lsls	r3, r3, #15
 8003e92:	4a2a      	ldr	r2, [pc, #168]	@ (8003f3c <HAL_ADC_ConfigChannel+0x1d8>)
 8003e94:	430b      	orrs	r3, r1
 8003e96:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2b10      	cmp	r3, #16
 8003e9e:	d140      	bne.n	8003f22 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003ea0:	4b27      	ldr	r3, [pc, #156]	@ (8003f40 <HAL_ADC_ConfigChannel+0x1dc>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4927      	ldr	r1, [pc, #156]	@ (8003f44 <HAL_ADC_ConfigChannel+0x1e0>)
 8003ea6:	0018      	movs	r0, r3
 8003ea8:	f7fc f92e 	bl	8000108 <__udivsi3>
 8003eac:	0003      	movs	r3, r0
 8003eae:	001a      	movs	r2, r3
 8003eb0:	0013      	movs	r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	189b      	adds	r3, r3, r2
 8003eb6:	005b      	lsls	r3, r3, #1
 8003eb8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003eba:	e002      	b.n	8003ec2 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1f9      	bne.n	8003ebc <HAL_ADC_ConfigChannel+0x158>
 8003ec8:	e02b      	b.n	8003f22 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2101      	movs	r1, #1
 8003ed6:	4099      	lsls	r1, r3
 8003ed8:	000b      	movs	r3, r1
 8003eda:	43d9      	mvns	r1, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	400a      	ands	r2, r1
 8003ee2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2b10      	cmp	r3, #16
 8003eea:	d003      	beq.n	8003ef4 <HAL_ADC_ConfigChannel+0x190>
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2b11      	cmp	r3, #17
 8003ef2:	d116      	bne.n	8003f22 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003ef4:	4b11      	ldr	r3, [pc, #68]	@ (8003f3c <HAL_ADC_ConfigChannel+0x1d8>)
 8003ef6:	6819      	ldr	r1, [r3, #0]
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2b10      	cmp	r3, #16
 8003efe:	d101      	bne.n	8003f04 <HAL_ADC_ConfigChannel+0x1a0>
 8003f00:	4a11      	ldr	r2, [pc, #68]	@ (8003f48 <HAL_ADC_ConfigChannel+0x1e4>)
 8003f02:	e000      	b.n	8003f06 <HAL_ADC_ConfigChannel+0x1a2>
 8003f04:	4a11      	ldr	r2, [pc, #68]	@ (8003f4c <HAL_ADC_ConfigChannel+0x1e8>)
 8003f06:	4b0d      	ldr	r3, [pc, #52]	@ (8003f3c <HAL_ADC_ConfigChannel+0x1d8>)
 8003f08:	400a      	ands	r2, r1
 8003f0a:	601a      	str	r2, [r3, #0]
 8003f0c:	e009      	b.n	8003f22 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f12:	2220      	movs	r2, #32
 8003f14:	431a      	orrs	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003f1a:	230f      	movs	r3, #15
 8003f1c:	18fb      	adds	r3, r7, r3
 8003f1e:	2201      	movs	r2, #1
 8003f20:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2234      	movs	r2, #52	@ 0x34
 8003f26:	2100      	movs	r1, #0
 8003f28:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003f2a:	230f      	movs	r3, #15
 8003f2c:	18fb      	adds	r3, r7, r3
 8003f2e:	781b      	ldrb	r3, [r3, #0]
}
 8003f30:	0018      	movs	r0, r3
 8003f32:	46bd      	mov	sp, r7
 8003f34:	b004      	add	sp, #16
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	00001001 	.word	0x00001001
 8003f3c:	40012708 	.word	0x40012708
 8003f40:	20000000 	.word	0x20000000
 8003f44:	000f4240 	.word	0x000f4240
 8003f48:	ff7fffff 	.word	0xff7fffff
 8003f4c:	ffbfffff 	.word	0xffbfffff

08003f50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	0002      	movs	r2, r0
 8003f58:	1dfb      	adds	r3, r7, #7
 8003f5a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003f5c:	1dfb      	adds	r3, r7, #7
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	2b7f      	cmp	r3, #127	@ 0x7f
 8003f62:	d809      	bhi.n	8003f78 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f64:	1dfb      	adds	r3, r7, #7
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	001a      	movs	r2, r3
 8003f6a:	231f      	movs	r3, #31
 8003f6c:	401a      	ands	r2, r3
 8003f6e:	4b04      	ldr	r3, [pc, #16]	@ (8003f80 <__NVIC_EnableIRQ+0x30>)
 8003f70:	2101      	movs	r1, #1
 8003f72:	4091      	lsls	r1, r2
 8003f74:	000a      	movs	r2, r1
 8003f76:	601a      	str	r2, [r3, #0]
  }
}
 8003f78:	46c0      	nop			@ (mov r8, r8)
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	b002      	add	sp, #8
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	e000e100 	.word	0xe000e100

08003f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f84:	b590      	push	{r4, r7, lr}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	0002      	movs	r2, r0
 8003f8c:	6039      	str	r1, [r7, #0]
 8003f8e:	1dfb      	adds	r3, r7, #7
 8003f90:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003f92:	1dfb      	adds	r3, r7, #7
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	2b7f      	cmp	r3, #127	@ 0x7f
 8003f98:	d828      	bhi.n	8003fec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f9a:	4a2f      	ldr	r2, [pc, #188]	@ (8004058 <__NVIC_SetPriority+0xd4>)
 8003f9c:	1dfb      	adds	r3, r7, #7
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	b25b      	sxtb	r3, r3
 8003fa2:	089b      	lsrs	r3, r3, #2
 8003fa4:	33c0      	adds	r3, #192	@ 0xc0
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	589b      	ldr	r3, [r3, r2]
 8003faa:	1dfa      	adds	r2, r7, #7
 8003fac:	7812      	ldrb	r2, [r2, #0]
 8003fae:	0011      	movs	r1, r2
 8003fb0:	2203      	movs	r2, #3
 8003fb2:	400a      	ands	r2, r1
 8003fb4:	00d2      	lsls	r2, r2, #3
 8003fb6:	21ff      	movs	r1, #255	@ 0xff
 8003fb8:	4091      	lsls	r1, r2
 8003fba:	000a      	movs	r2, r1
 8003fbc:	43d2      	mvns	r2, r2
 8003fbe:	401a      	ands	r2, r3
 8003fc0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	019b      	lsls	r3, r3, #6
 8003fc6:	22ff      	movs	r2, #255	@ 0xff
 8003fc8:	401a      	ands	r2, r3
 8003fca:	1dfb      	adds	r3, r7, #7
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	0018      	movs	r0, r3
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	4003      	ands	r3, r0
 8003fd4:	00db      	lsls	r3, r3, #3
 8003fd6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003fd8:	481f      	ldr	r0, [pc, #124]	@ (8004058 <__NVIC_SetPriority+0xd4>)
 8003fda:	1dfb      	adds	r3, r7, #7
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	b25b      	sxtb	r3, r3
 8003fe0:	089b      	lsrs	r3, r3, #2
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	33c0      	adds	r3, #192	@ 0xc0
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003fea:	e031      	b.n	8004050 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003fec:	4a1b      	ldr	r2, [pc, #108]	@ (800405c <__NVIC_SetPriority+0xd8>)
 8003fee:	1dfb      	adds	r3, r7, #7
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	0019      	movs	r1, r3
 8003ff4:	230f      	movs	r3, #15
 8003ff6:	400b      	ands	r3, r1
 8003ff8:	3b08      	subs	r3, #8
 8003ffa:	089b      	lsrs	r3, r3, #2
 8003ffc:	3306      	adds	r3, #6
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	18d3      	adds	r3, r2, r3
 8004002:	3304      	adds	r3, #4
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	1dfa      	adds	r2, r7, #7
 8004008:	7812      	ldrb	r2, [r2, #0]
 800400a:	0011      	movs	r1, r2
 800400c:	2203      	movs	r2, #3
 800400e:	400a      	ands	r2, r1
 8004010:	00d2      	lsls	r2, r2, #3
 8004012:	21ff      	movs	r1, #255	@ 0xff
 8004014:	4091      	lsls	r1, r2
 8004016:	000a      	movs	r2, r1
 8004018:	43d2      	mvns	r2, r2
 800401a:	401a      	ands	r2, r3
 800401c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	019b      	lsls	r3, r3, #6
 8004022:	22ff      	movs	r2, #255	@ 0xff
 8004024:	401a      	ands	r2, r3
 8004026:	1dfb      	adds	r3, r7, #7
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	0018      	movs	r0, r3
 800402c:	2303      	movs	r3, #3
 800402e:	4003      	ands	r3, r0
 8004030:	00db      	lsls	r3, r3, #3
 8004032:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004034:	4809      	ldr	r0, [pc, #36]	@ (800405c <__NVIC_SetPriority+0xd8>)
 8004036:	1dfb      	adds	r3, r7, #7
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	001c      	movs	r4, r3
 800403c:	230f      	movs	r3, #15
 800403e:	4023      	ands	r3, r4
 8004040:	3b08      	subs	r3, #8
 8004042:	089b      	lsrs	r3, r3, #2
 8004044:	430a      	orrs	r2, r1
 8004046:	3306      	adds	r3, #6
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	18c3      	adds	r3, r0, r3
 800404c:	3304      	adds	r3, #4
 800404e:	601a      	str	r2, [r3, #0]
}
 8004050:	46c0      	nop			@ (mov r8, r8)
 8004052:	46bd      	mov	sp, r7
 8004054:	b003      	add	sp, #12
 8004056:	bd90      	pop	{r4, r7, pc}
 8004058:	e000e100 	.word	0xe000e100
 800405c:	e000ed00 	.word	0xe000ed00

08004060 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	1e5a      	subs	r2, r3, #1
 800406c:	2380      	movs	r3, #128	@ 0x80
 800406e:	045b      	lsls	r3, r3, #17
 8004070:	429a      	cmp	r2, r3
 8004072:	d301      	bcc.n	8004078 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004074:	2301      	movs	r3, #1
 8004076:	e010      	b.n	800409a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004078:	4b0a      	ldr	r3, [pc, #40]	@ (80040a4 <SysTick_Config+0x44>)
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	3a01      	subs	r2, #1
 800407e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004080:	2301      	movs	r3, #1
 8004082:	425b      	negs	r3, r3
 8004084:	2103      	movs	r1, #3
 8004086:	0018      	movs	r0, r3
 8004088:	f7ff ff7c 	bl	8003f84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800408c:	4b05      	ldr	r3, [pc, #20]	@ (80040a4 <SysTick_Config+0x44>)
 800408e:	2200      	movs	r2, #0
 8004090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004092:	4b04      	ldr	r3, [pc, #16]	@ (80040a4 <SysTick_Config+0x44>)
 8004094:	2207      	movs	r2, #7
 8004096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004098:	2300      	movs	r3, #0
}
 800409a:	0018      	movs	r0, r3
 800409c:	46bd      	mov	sp, r7
 800409e:	b002      	add	sp, #8
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	46c0      	nop			@ (mov r8, r8)
 80040a4:	e000e010 	.word	0xe000e010

080040a8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60b9      	str	r1, [r7, #8]
 80040b0:	607a      	str	r2, [r7, #4]
 80040b2:	210f      	movs	r1, #15
 80040b4:	187b      	adds	r3, r7, r1
 80040b6:	1c02      	adds	r2, r0, #0
 80040b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80040ba:	68ba      	ldr	r2, [r7, #8]
 80040bc:	187b      	adds	r3, r7, r1
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	b25b      	sxtb	r3, r3
 80040c2:	0011      	movs	r1, r2
 80040c4:	0018      	movs	r0, r3
 80040c6:	f7ff ff5d 	bl	8003f84 <__NVIC_SetPriority>
}
 80040ca:	46c0      	nop			@ (mov r8, r8)
 80040cc:	46bd      	mov	sp, r7
 80040ce:	b004      	add	sp, #16
 80040d0:	bd80      	pop	{r7, pc}

080040d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040d2:	b580      	push	{r7, lr}
 80040d4:	b082      	sub	sp, #8
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	0002      	movs	r2, r0
 80040da:	1dfb      	adds	r3, r7, #7
 80040dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040de:	1dfb      	adds	r3, r7, #7
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	b25b      	sxtb	r3, r3
 80040e4:	0018      	movs	r0, r3
 80040e6:	f7ff ff33 	bl	8003f50 <__NVIC_EnableIRQ>
}
 80040ea:	46c0      	nop			@ (mov r8, r8)
 80040ec:	46bd      	mov	sp, r7
 80040ee:	b002      	add	sp, #8
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b082      	sub	sp, #8
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	0018      	movs	r0, r3
 80040fe:	f7ff ffaf 	bl	8004060 <SysTick_Config>
 8004102:	0003      	movs	r3, r0
}
 8004104:	0018      	movs	r0, r3
 8004106:	46bd      	mov	sp, r7
 8004108:	b002      	add	sp, #8
 800410a:	bd80      	pop	{r7, pc}

0800410c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2221      	movs	r2, #33	@ 0x21
 8004118:	5c9b      	ldrb	r3, [r3, r2]
 800411a:	b2db      	uxtb	r3, r3
 800411c:	2b02      	cmp	r3, #2
 800411e:	d008      	beq.n	8004132 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2204      	movs	r2, #4
 8004124:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2220      	movs	r2, #32
 800412a:	2100      	movs	r1, #0
 800412c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e020      	b.n	8004174 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	210e      	movs	r1, #14
 800413e:	438a      	bics	r2, r1
 8004140:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2101      	movs	r1, #1
 800414e:	438a      	bics	r2, r1
 8004150:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800415a:	2101      	movs	r1, #1
 800415c:	4091      	lsls	r1, r2
 800415e:	000a      	movs	r2, r1
 8004160:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2221      	movs	r2, #33	@ 0x21
 8004166:	2101      	movs	r1, #1
 8004168:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2220      	movs	r2, #32
 800416e:	2100      	movs	r1, #0
 8004170:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	0018      	movs	r0, r3
 8004176:	46bd      	mov	sp, r7
 8004178:	b002      	add	sp, #8
 800417a:	bd80      	pop	{r7, pc}

0800417c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004184:	210f      	movs	r1, #15
 8004186:	187b      	adds	r3, r7, r1
 8004188:	2200      	movs	r2, #0
 800418a:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2221      	movs	r2, #33	@ 0x21
 8004190:	5c9b      	ldrb	r3, [r3, r2]
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b02      	cmp	r3, #2
 8004196:	d006      	beq.n	80041a6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2204      	movs	r2, #4
 800419c:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 800419e:	187b      	adds	r3, r7, r1
 80041a0:	2201      	movs	r2, #1
 80041a2:	701a      	strb	r2, [r3, #0]
 80041a4:	e028      	b.n	80041f8 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	210e      	movs	r1, #14
 80041b2:	438a      	bics	r2, r1
 80041b4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2101      	movs	r1, #1
 80041c2:	438a      	bics	r2, r1
 80041c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ce:	2101      	movs	r1, #1
 80041d0:	4091      	lsls	r1, r2
 80041d2:	000a      	movs	r2, r1
 80041d4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2221      	movs	r2, #33	@ 0x21
 80041da:	2101      	movs	r1, #1
 80041dc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2220      	movs	r2, #32
 80041e2:	2100      	movs	r1, #0
 80041e4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d004      	beq.n	80041f8 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	0010      	movs	r0, r2
 80041f6:	4798      	blx	r3
    }
  }
  return status;
 80041f8:	230f      	movs	r3, #15
 80041fa:	18fb      	adds	r3, r7, r3
 80041fc:	781b      	ldrb	r3, [r3, #0]
}
 80041fe:	0018      	movs	r0, r3
 8004200:	46bd      	mov	sp, r7
 8004202:	b004      	add	sp, #16
 8004204:	bd80      	pop	{r7, pc}
	...

08004208 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b086      	sub	sp, #24
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004212:	2300      	movs	r3, #0
 8004214:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004216:	e14f      	b.n	80044b8 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2101      	movs	r1, #1
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	4091      	lsls	r1, r2
 8004222:	000a      	movs	r2, r1
 8004224:	4013      	ands	r3, r2
 8004226:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d100      	bne.n	8004230 <HAL_GPIO_Init+0x28>
 800422e:	e140      	b.n	80044b2 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	2203      	movs	r2, #3
 8004236:	4013      	ands	r3, r2
 8004238:	2b01      	cmp	r3, #1
 800423a:	d005      	beq.n	8004248 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	2203      	movs	r2, #3
 8004242:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004244:	2b02      	cmp	r3, #2
 8004246:	d130      	bne.n	80042aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	005b      	lsls	r3, r3, #1
 8004252:	2203      	movs	r2, #3
 8004254:	409a      	lsls	r2, r3
 8004256:	0013      	movs	r3, r2
 8004258:	43da      	mvns	r2, r3
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	4013      	ands	r3, r2
 800425e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	68da      	ldr	r2, [r3, #12]
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	005b      	lsls	r3, r3, #1
 8004268:	409a      	lsls	r2, r3
 800426a:	0013      	movs	r3, r2
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	4313      	orrs	r3, r2
 8004270:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800427e:	2201      	movs	r2, #1
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	409a      	lsls	r2, r3
 8004284:	0013      	movs	r3, r2
 8004286:	43da      	mvns	r2, r3
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	4013      	ands	r3, r2
 800428c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	091b      	lsrs	r3, r3, #4
 8004294:	2201      	movs	r2, #1
 8004296:	401a      	ands	r2, r3
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	409a      	lsls	r2, r3
 800429c:	0013      	movs	r3, r2
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	2203      	movs	r2, #3
 80042b0:	4013      	ands	r3, r2
 80042b2:	2b03      	cmp	r3, #3
 80042b4:	d017      	beq.n	80042e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	005b      	lsls	r3, r3, #1
 80042c0:	2203      	movs	r2, #3
 80042c2:	409a      	lsls	r2, r3
 80042c4:	0013      	movs	r3, r2
 80042c6:	43da      	mvns	r2, r3
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	4013      	ands	r3, r2
 80042cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	689a      	ldr	r2, [r3, #8]
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	005b      	lsls	r3, r3, #1
 80042d6:	409a      	lsls	r2, r3
 80042d8:	0013      	movs	r3, r2
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	4313      	orrs	r3, r2
 80042de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	2203      	movs	r2, #3
 80042ec:	4013      	ands	r3, r2
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d123      	bne.n	800433a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	08da      	lsrs	r2, r3, #3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	3208      	adds	r2, #8
 80042fa:	0092      	lsls	r2, r2, #2
 80042fc:	58d3      	ldr	r3, [r2, r3]
 80042fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	2207      	movs	r2, #7
 8004304:	4013      	ands	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	220f      	movs	r2, #15
 800430a:	409a      	lsls	r2, r3
 800430c:	0013      	movs	r3, r2
 800430e:	43da      	mvns	r2, r3
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	4013      	ands	r3, r2
 8004314:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	691a      	ldr	r2, [r3, #16]
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	2107      	movs	r1, #7
 800431e:	400b      	ands	r3, r1
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	409a      	lsls	r2, r3
 8004324:	0013      	movs	r3, r2
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	4313      	orrs	r3, r2
 800432a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	08da      	lsrs	r2, r3, #3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	3208      	adds	r2, #8
 8004334:	0092      	lsls	r2, r2, #2
 8004336:	6939      	ldr	r1, [r7, #16]
 8004338:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	2203      	movs	r2, #3
 8004346:	409a      	lsls	r2, r3
 8004348:	0013      	movs	r3, r2
 800434a:	43da      	mvns	r2, r3
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	4013      	ands	r3, r2
 8004350:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	2203      	movs	r2, #3
 8004358:	401a      	ands	r2, r3
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	005b      	lsls	r3, r3, #1
 800435e:	409a      	lsls	r2, r3
 8004360:	0013      	movs	r3, r2
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	4313      	orrs	r3, r2
 8004366:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	23c0      	movs	r3, #192	@ 0xc0
 8004374:	029b      	lsls	r3, r3, #10
 8004376:	4013      	ands	r3, r2
 8004378:	d100      	bne.n	800437c <HAL_GPIO_Init+0x174>
 800437a:	e09a      	b.n	80044b2 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800437c:	4b54      	ldr	r3, [pc, #336]	@ (80044d0 <HAL_GPIO_Init+0x2c8>)
 800437e:	699a      	ldr	r2, [r3, #24]
 8004380:	4b53      	ldr	r3, [pc, #332]	@ (80044d0 <HAL_GPIO_Init+0x2c8>)
 8004382:	2101      	movs	r1, #1
 8004384:	430a      	orrs	r2, r1
 8004386:	619a      	str	r2, [r3, #24]
 8004388:	4b51      	ldr	r3, [pc, #324]	@ (80044d0 <HAL_GPIO_Init+0x2c8>)
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	2201      	movs	r2, #1
 800438e:	4013      	ands	r3, r2
 8004390:	60bb      	str	r3, [r7, #8]
 8004392:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004394:	4a4f      	ldr	r2, [pc, #316]	@ (80044d4 <HAL_GPIO_Init+0x2cc>)
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	089b      	lsrs	r3, r3, #2
 800439a:	3302      	adds	r3, #2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	589b      	ldr	r3, [r3, r2]
 80043a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	2203      	movs	r2, #3
 80043a6:	4013      	ands	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	220f      	movs	r2, #15
 80043ac:	409a      	lsls	r2, r3
 80043ae:	0013      	movs	r3, r2
 80043b0:	43da      	mvns	r2, r3
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	4013      	ands	r3, r2
 80043b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	2390      	movs	r3, #144	@ 0x90
 80043bc:	05db      	lsls	r3, r3, #23
 80043be:	429a      	cmp	r2, r3
 80043c0:	d013      	beq.n	80043ea <HAL_GPIO_Init+0x1e2>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a44      	ldr	r2, [pc, #272]	@ (80044d8 <HAL_GPIO_Init+0x2d0>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d00d      	beq.n	80043e6 <HAL_GPIO_Init+0x1de>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a43      	ldr	r2, [pc, #268]	@ (80044dc <HAL_GPIO_Init+0x2d4>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d007      	beq.n	80043e2 <HAL_GPIO_Init+0x1da>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a42      	ldr	r2, [pc, #264]	@ (80044e0 <HAL_GPIO_Init+0x2d8>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d101      	bne.n	80043de <HAL_GPIO_Init+0x1d6>
 80043da:	2303      	movs	r3, #3
 80043dc:	e006      	b.n	80043ec <HAL_GPIO_Init+0x1e4>
 80043de:	2305      	movs	r3, #5
 80043e0:	e004      	b.n	80043ec <HAL_GPIO_Init+0x1e4>
 80043e2:	2302      	movs	r3, #2
 80043e4:	e002      	b.n	80043ec <HAL_GPIO_Init+0x1e4>
 80043e6:	2301      	movs	r3, #1
 80043e8:	e000      	b.n	80043ec <HAL_GPIO_Init+0x1e4>
 80043ea:	2300      	movs	r3, #0
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	2103      	movs	r1, #3
 80043f0:	400a      	ands	r2, r1
 80043f2:	0092      	lsls	r2, r2, #2
 80043f4:	4093      	lsls	r3, r2
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80043fc:	4935      	ldr	r1, [pc, #212]	@ (80044d4 <HAL_GPIO_Init+0x2cc>)
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	089b      	lsrs	r3, r3, #2
 8004402:	3302      	adds	r3, #2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800440a:	4b36      	ldr	r3, [pc, #216]	@ (80044e4 <HAL_GPIO_Init+0x2dc>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	43da      	mvns	r2, r3
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	4013      	ands	r3, r2
 8004418:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	2380      	movs	r3, #128	@ 0x80
 8004420:	035b      	lsls	r3, r3, #13
 8004422:	4013      	ands	r3, r2
 8004424:	d003      	beq.n	800442e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	4313      	orrs	r3, r2
 800442c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800442e:	4b2d      	ldr	r3, [pc, #180]	@ (80044e4 <HAL_GPIO_Init+0x2dc>)
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004434:	4b2b      	ldr	r3, [pc, #172]	@ (80044e4 <HAL_GPIO_Init+0x2dc>)
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	43da      	mvns	r2, r3
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	4013      	ands	r3, r2
 8004442:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685a      	ldr	r2, [r3, #4]
 8004448:	2380      	movs	r3, #128	@ 0x80
 800444a:	039b      	lsls	r3, r3, #14
 800444c:	4013      	ands	r3, r2
 800444e:	d003      	beq.n	8004458 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	4313      	orrs	r3, r2
 8004456:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004458:	4b22      	ldr	r3, [pc, #136]	@ (80044e4 <HAL_GPIO_Init+0x2dc>)
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800445e:	4b21      	ldr	r3, [pc, #132]	@ (80044e4 <HAL_GPIO_Init+0x2dc>)
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	43da      	mvns	r2, r3
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	4013      	ands	r3, r2
 800446c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	2380      	movs	r3, #128	@ 0x80
 8004474:	029b      	lsls	r3, r3, #10
 8004476:	4013      	ands	r3, r2
 8004478:	d003      	beq.n	8004482 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	4313      	orrs	r3, r2
 8004480:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004482:	4b18      	ldr	r3, [pc, #96]	@ (80044e4 <HAL_GPIO_Init+0x2dc>)
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8004488:	4b16      	ldr	r3, [pc, #88]	@ (80044e4 <HAL_GPIO_Init+0x2dc>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	43da      	mvns	r2, r3
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	4013      	ands	r3, r2
 8004496:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685a      	ldr	r2, [r3, #4]
 800449c:	2380      	movs	r3, #128	@ 0x80
 800449e:	025b      	lsls	r3, r3, #9
 80044a0:	4013      	ands	r3, r2
 80044a2:	d003      	beq.n	80044ac <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80044ac:	4b0d      	ldr	r3, [pc, #52]	@ (80044e4 <HAL_GPIO_Init+0x2dc>)
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	3301      	adds	r3, #1
 80044b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	40da      	lsrs	r2, r3
 80044c0:	1e13      	subs	r3, r2, #0
 80044c2:	d000      	beq.n	80044c6 <HAL_GPIO_Init+0x2be>
 80044c4:	e6a8      	b.n	8004218 <HAL_GPIO_Init+0x10>
  } 
}
 80044c6:	46c0      	nop			@ (mov r8, r8)
 80044c8:	46c0      	nop			@ (mov r8, r8)
 80044ca:	46bd      	mov	sp, r7
 80044cc:	b006      	add	sp, #24
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	40021000 	.word	0x40021000
 80044d4:	40010000 	.word	0x40010000
 80044d8:	48000400 	.word	0x48000400
 80044dc:	48000800 	.word	0x48000800
 80044e0:	48000c00 	.word	0x48000c00
 80044e4:	40010400 	.word	0x40010400

080044e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	000a      	movs	r2, r1
 80044f2:	1cbb      	adds	r3, r7, #2
 80044f4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	1cba      	adds	r2, r7, #2
 80044fc:	8812      	ldrh	r2, [r2, #0]
 80044fe:	4013      	ands	r3, r2
 8004500:	d004      	beq.n	800450c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004502:	230f      	movs	r3, #15
 8004504:	18fb      	adds	r3, r7, r3
 8004506:	2201      	movs	r2, #1
 8004508:	701a      	strb	r2, [r3, #0]
 800450a:	e003      	b.n	8004514 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800450c:	230f      	movs	r3, #15
 800450e:	18fb      	adds	r3, r7, r3
 8004510:	2200      	movs	r2, #0
 8004512:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004514:	230f      	movs	r3, #15
 8004516:	18fb      	adds	r3, r7, r3
 8004518:	781b      	ldrb	r3, [r3, #0]
  }
 800451a:	0018      	movs	r0, r3
 800451c:	46bd      	mov	sp, r7
 800451e:	b004      	add	sp, #16
 8004520:	bd80      	pop	{r7, pc}

08004522 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b082      	sub	sp, #8
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
 800452a:	0008      	movs	r0, r1
 800452c:	0011      	movs	r1, r2
 800452e:	1cbb      	adds	r3, r7, #2
 8004530:	1c02      	adds	r2, r0, #0
 8004532:	801a      	strh	r2, [r3, #0]
 8004534:	1c7b      	adds	r3, r7, #1
 8004536:	1c0a      	adds	r2, r1, #0
 8004538:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800453a:	1c7b      	adds	r3, r7, #1
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d004      	beq.n	800454c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004542:	1cbb      	adds	r3, r7, #2
 8004544:	881a      	ldrh	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800454a:	e003      	b.n	8004554 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800454c:	1cbb      	adds	r3, r7, #2
 800454e:	881a      	ldrh	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004554:	46c0      	nop			@ (mov r8, r8)
 8004556:	46bd      	mov	sp, r7
 8004558:	b002      	add	sp, #8
 800455a:	bd80      	pop	{r7, pc}

0800455c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	000a      	movs	r2, r1
 8004566:	1cbb      	adds	r3, r7, #2
 8004568:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004570:	1cbb      	adds	r3, r7, #2
 8004572:	881b      	ldrh	r3, [r3, #0]
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	4013      	ands	r3, r2
 8004578:	041a      	lsls	r2, r3, #16
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	43db      	mvns	r3, r3
 800457e:	1cb9      	adds	r1, r7, #2
 8004580:	8809      	ldrh	r1, [r1, #0]
 8004582:	400b      	ands	r3, r1
 8004584:	431a      	orrs	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	619a      	str	r2, [r3, #24]
}
 800458a:	46c0      	nop			@ (mov r8, r8)
 800458c:	46bd      	mov	sp, r7
 800458e:	b004      	add	sp, #16
 8004590:	bd80      	pop	{r7, pc}
	...

08004594 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	0002      	movs	r2, r0
 800459c:	1dbb      	adds	r3, r7, #6
 800459e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80045a0:	4b09      	ldr	r3, [pc, #36]	@ (80045c8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	1dba      	adds	r2, r7, #6
 80045a6:	8812      	ldrh	r2, [r2, #0]
 80045a8:	4013      	ands	r3, r2
 80045aa:	d008      	beq.n	80045be <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80045ac:	4b06      	ldr	r3, [pc, #24]	@ (80045c8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80045ae:	1dba      	adds	r2, r7, #6
 80045b0:	8812      	ldrh	r2, [r2, #0]
 80045b2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80045b4:	1dbb      	adds	r3, r7, #6
 80045b6:	881b      	ldrh	r3, [r3, #0]
 80045b8:	0018      	movs	r0, r3
 80045ba:	f7fe fb4f 	bl	8002c5c <HAL_GPIO_EXTI_Callback>
  }
}
 80045be:	46c0      	nop			@ (mov r8, r8)
 80045c0:	46bd      	mov	sp, r7
 80045c2:	b002      	add	sp, #8
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	46c0      	nop			@ (mov r8, r8)
 80045c8:	40010400 	.word	0x40010400

080045cc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80045cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045ce:	b08b      	sub	sp, #44	@ 0x2c
 80045d0:	af06      	add	r7, sp, #24
 80045d2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e0f0      	b.n	80047c0 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a79      	ldr	r2, [pc, #484]	@ (80047c8 <HAL_PCD_Init+0x1fc>)
 80045e2:	5c9b      	ldrb	r3, [r3, r2]
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d108      	bne.n	80045fc <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	23aa      	movs	r3, #170	@ 0xaa
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	2100      	movs	r1, #0
 80045f2:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	0018      	movs	r0, r3
 80045f8:	f008 fece 	bl	800d398 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a72      	ldr	r2, [pc, #456]	@ (80047c8 <HAL_PCD_Init+0x1fc>)
 8004600:	2103      	movs	r1, #3
 8004602:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	0018      	movs	r0, r3
 800460a:	f004 feaf 	bl	800936c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800460e:	230f      	movs	r3, #15
 8004610:	18fb      	adds	r3, r7, r3
 8004612:	2200      	movs	r2, #0
 8004614:	701a      	strb	r2, [r3, #0]
 8004616:	e049      	b.n	80046ac <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004618:	200f      	movs	r0, #15
 800461a:	183b      	adds	r3, r7, r0
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	6879      	ldr	r1, [r7, #4]
 8004620:	1c5a      	adds	r2, r3, #1
 8004622:	0013      	movs	r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	189b      	adds	r3, r3, r2
 8004628:	00db      	lsls	r3, r3, #3
 800462a:	18cb      	adds	r3, r1, r3
 800462c:	3301      	adds	r3, #1
 800462e:	2201      	movs	r2, #1
 8004630:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004632:	183b      	adds	r3, r7, r0
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	6879      	ldr	r1, [r7, #4]
 8004638:	1c5a      	adds	r2, r3, #1
 800463a:	0013      	movs	r3, r2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	189b      	adds	r3, r3, r2
 8004640:	00db      	lsls	r3, r3, #3
 8004642:	183a      	adds	r2, r7, r0
 8004644:	7812      	ldrb	r2, [r2, #0]
 8004646:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004648:	183b      	adds	r3, r7, r0
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	6879      	ldr	r1, [r7, #4]
 800464e:	1c5a      	adds	r2, r3, #1
 8004650:	0013      	movs	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	189b      	adds	r3, r3, r2
 8004656:	00db      	lsls	r3, r3, #3
 8004658:	18cb      	adds	r3, r1, r3
 800465a:	3303      	adds	r3, #3
 800465c:	2200      	movs	r2, #0
 800465e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004660:	183b      	adds	r3, r7, r0
 8004662:	781a      	ldrb	r2, [r3, #0]
 8004664:	6879      	ldr	r1, [r7, #4]
 8004666:	0013      	movs	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	189b      	adds	r3, r3, r2
 800466c:	00db      	lsls	r3, r3, #3
 800466e:	18cb      	adds	r3, r1, r3
 8004670:	3338      	adds	r3, #56	@ 0x38
 8004672:	2200      	movs	r2, #0
 8004674:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004676:	183b      	adds	r3, r7, r0
 8004678:	781a      	ldrb	r2, [r3, #0]
 800467a:	6879      	ldr	r1, [r7, #4]
 800467c:	0013      	movs	r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	189b      	adds	r3, r3, r2
 8004682:	00db      	lsls	r3, r3, #3
 8004684:	18cb      	adds	r3, r1, r3
 8004686:	333c      	adds	r3, #60	@ 0x3c
 8004688:	2200      	movs	r2, #0
 800468a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800468c:	183b      	adds	r3, r7, r0
 800468e:	781a      	ldrb	r2, [r3, #0]
 8004690:	6879      	ldr	r1, [r7, #4]
 8004692:	0013      	movs	r3, r2
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	189b      	adds	r3, r3, r2
 8004698:	00db      	lsls	r3, r3, #3
 800469a:	18cb      	adds	r3, r1, r3
 800469c:	3340      	adds	r3, #64	@ 0x40
 800469e:	2200      	movs	r2, #0
 80046a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046a2:	183b      	adds	r3, r7, r0
 80046a4:	781a      	ldrb	r2, [r3, #0]
 80046a6:	183b      	adds	r3, r7, r0
 80046a8:	3201      	adds	r2, #1
 80046aa:	701a      	strb	r2, [r3, #0]
 80046ac:	210f      	movs	r1, #15
 80046ae:	187b      	adds	r3, r7, r1
 80046b0:	781a      	ldrb	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d3ae      	bcc.n	8004618 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046ba:	187b      	adds	r3, r7, r1
 80046bc:	2200      	movs	r2, #0
 80046be:	701a      	strb	r2, [r3, #0]
 80046c0:	e056      	b.n	8004770 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80046c2:	240f      	movs	r4, #15
 80046c4:	193b      	adds	r3, r7, r4
 80046c6:	781a      	ldrb	r2, [r3, #0]
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	236a      	movs	r3, #106	@ 0x6a
 80046cc:	33ff      	adds	r3, #255	@ 0xff
 80046ce:	0019      	movs	r1, r3
 80046d0:	0013      	movs	r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	189b      	adds	r3, r3, r2
 80046d6:	00db      	lsls	r3, r3, #3
 80046d8:	18c3      	adds	r3, r0, r3
 80046da:	185b      	adds	r3, r3, r1
 80046dc:	2200      	movs	r2, #0
 80046de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80046e0:	193b      	adds	r3, r7, r4
 80046e2:	781a      	ldrb	r2, [r3, #0]
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	23b4      	movs	r3, #180	@ 0xb4
 80046e8:	0059      	lsls	r1, r3, #1
 80046ea:	0013      	movs	r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	189b      	adds	r3, r3, r2
 80046f0:	00db      	lsls	r3, r3, #3
 80046f2:	18c3      	adds	r3, r0, r3
 80046f4:	185b      	adds	r3, r3, r1
 80046f6:	193a      	adds	r2, r7, r4
 80046f8:	7812      	ldrb	r2, [r2, #0]
 80046fa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80046fc:	193b      	adds	r3, r7, r4
 80046fe:	781a      	ldrb	r2, [r3, #0]
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	236c      	movs	r3, #108	@ 0x6c
 8004704:	33ff      	adds	r3, #255	@ 0xff
 8004706:	0019      	movs	r1, r3
 8004708:	0013      	movs	r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	189b      	adds	r3, r3, r2
 800470e:	00db      	lsls	r3, r3, #3
 8004710:	18c3      	adds	r3, r0, r3
 8004712:	185b      	adds	r3, r3, r1
 8004714:	2200      	movs	r2, #0
 8004716:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004718:	193b      	adds	r3, r7, r4
 800471a:	781a      	ldrb	r2, [r3, #0]
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	23bc      	movs	r3, #188	@ 0xbc
 8004720:	0059      	lsls	r1, r3, #1
 8004722:	0013      	movs	r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	189b      	adds	r3, r3, r2
 8004728:	00db      	lsls	r3, r3, #3
 800472a:	18c3      	adds	r3, r0, r3
 800472c:	185b      	adds	r3, r3, r1
 800472e:	2200      	movs	r2, #0
 8004730:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004732:	193b      	adds	r3, r7, r4
 8004734:	781a      	ldrb	r2, [r3, #0]
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	23be      	movs	r3, #190	@ 0xbe
 800473a:	0059      	lsls	r1, r3, #1
 800473c:	0013      	movs	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	189b      	adds	r3, r3, r2
 8004742:	00db      	lsls	r3, r3, #3
 8004744:	18c3      	adds	r3, r0, r3
 8004746:	185b      	adds	r3, r3, r1
 8004748:	2200      	movs	r2, #0
 800474a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800474c:	193b      	adds	r3, r7, r4
 800474e:	781a      	ldrb	r2, [r3, #0]
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	23c0      	movs	r3, #192	@ 0xc0
 8004754:	0059      	lsls	r1, r3, #1
 8004756:	0013      	movs	r3, r2
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	189b      	adds	r3, r3, r2
 800475c:	00db      	lsls	r3, r3, #3
 800475e:	18c3      	adds	r3, r0, r3
 8004760:	185b      	adds	r3, r3, r1
 8004762:	2200      	movs	r2, #0
 8004764:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004766:	193b      	adds	r3, r7, r4
 8004768:	781a      	ldrb	r2, [r3, #0]
 800476a:	193b      	adds	r3, r7, r4
 800476c:	3201      	adds	r2, #1
 800476e:	701a      	strb	r2, [r3, #0]
 8004770:	230f      	movs	r3, #15
 8004772:	18fb      	adds	r3, r7, r3
 8004774:	781a      	ldrb	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	429a      	cmp	r2, r3
 800477c:	d3a1      	bcc.n	80046c2 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6818      	ldr	r0, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	466a      	mov	r2, sp
 8004786:	0011      	movs	r1, r2
 8004788:	001a      	movs	r2, r3
 800478a:	3210      	adds	r2, #16
 800478c:	ca70      	ldmia	r2!, {r4, r5, r6}
 800478e:	c170      	stmia	r1!, {r4, r5, r6}
 8004790:	ca30      	ldmia	r2!, {r4, r5}
 8004792:	c130      	stmia	r1!, {r4, r5}
 8004794:	6859      	ldr	r1, [r3, #4]
 8004796:	689a      	ldr	r2, [r3, #8]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	f004 fe01 	bl	80093a0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2224      	movs	r2, #36	@ 0x24
 80047a2:	2100      	movs	r1, #0
 80047a4:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a07      	ldr	r2, [pc, #28]	@ (80047c8 <HAL_PCD_Init+0x1fc>)
 80047aa:	2101      	movs	r1, #1
 80047ac:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	69db      	ldr	r3, [r3, #28]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d103      	bne.n	80047be <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	0018      	movs	r0, r3
 80047ba:	f001 fd23 	bl	8006204 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	0018      	movs	r0, r3
 80047c2:	46bd      	mov	sp, r7
 80047c4:	b005      	add	sp, #20
 80047c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047c8:	000002a9 	.word	0x000002a9

080047cc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	23aa      	movs	r3, #170	@ 0xaa
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	5cd3      	ldrb	r3, [r2, r3]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d101      	bne.n	80047e4 <HAL_PCD_Start+0x18>
 80047e0:	2302      	movs	r3, #2
 80047e2:	e014      	b.n	800480e <HAL_PCD_Start+0x42>
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	23aa      	movs	r3, #170	@ 0xaa
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	2101      	movs	r1, #1
 80047ec:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	0018      	movs	r0, r3
 80047f4:	f004 fda4 	bl	8009340 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	0018      	movs	r0, r3
 80047fe:	f006 fda7 	bl	800b350 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	23aa      	movs	r3, #170	@ 0xaa
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	2100      	movs	r1, #0
 800480a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	0018      	movs	r0, r3
 8004810:	46bd      	mov	sp, r7
 8004812:	b002      	add	sp, #8
 8004814:	bd80      	pop	{r7, pc}
	...

08004818 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	0018      	movs	r0, r3
 8004826:	f006 fda9 	bl	800b37c <USB_ReadInterrupts>
 800482a:	0003      	movs	r3, r0
 800482c:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	2380      	movs	r3, #128	@ 0x80
 8004832:	021b      	lsls	r3, r3, #8
 8004834:	4013      	ands	r3, r2
 8004836:	d004      	beq.n	8004842 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	0018      	movs	r0, r3
 800483c:	f000 fb62 	bl	8004f04 <PCD_EP_ISR_Handler>

    return;
 8004840:	e11d      	b.n	8004a7e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	2380      	movs	r3, #128	@ 0x80
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	4013      	ands	r3, r2
 800484a:	d015      	beq.n	8004878 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2244      	movs	r2, #68	@ 0x44
 8004852:	5a9b      	ldrh	r3, [r3, r2]
 8004854:	b29a      	uxth	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	498a      	ldr	r1, [pc, #552]	@ (8004a84 <HAL_PCD_IRQHandler+0x26c>)
 800485c:	400a      	ands	r2, r1
 800485e:	b291      	uxth	r1, r2
 8004860:	2244      	movs	r2, #68	@ 0x44
 8004862:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	0018      	movs	r0, r3
 8004868:	f008 fe21 	bl	800d4ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2100      	movs	r1, #0
 8004870:	0018      	movs	r0, r3
 8004872:	f000 f915 	bl	8004aa0 <HAL_PCD_SetAddress>

    return;
 8004876:	e102      	b.n	8004a7e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	2380      	movs	r3, #128	@ 0x80
 800487c:	01db      	lsls	r3, r3, #7
 800487e:	4013      	ands	r3, r2
 8004880:	d00c      	beq.n	800489c <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2244      	movs	r2, #68	@ 0x44
 8004888:	5a9b      	ldrh	r3, [r3, r2]
 800488a:	b29a      	uxth	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	497d      	ldr	r1, [pc, #500]	@ (8004a88 <HAL_PCD_IRQHandler+0x270>)
 8004892:	400a      	ands	r2, r1
 8004894:	b291      	uxth	r1, r2
 8004896:	2244      	movs	r2, #68	@ 0x44
 8004898:	5299      	strh	r1, [r3, r2]

    return;
 800489a:	e0f0      	b.n	8004a7e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	2380      	movs	r3, #128	@ 0x80
 80048a0:	019b      	lsls	r3, r3, #6
 80048a2:	4013      	ands	r3, r2
 80048a4:	d00c      	beq.n	80048c0 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2244      	movs	r2, #68	@ 0x44
 80048ac:	5a9b      	ldrh	r3, [r3, r2]
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4975      	ldr	r1, [pc, #468]	@ (8004a8c <HAL_PCD_IRQHandler+0x274>)
 80048b6:	400a      	ands	r2, r1
 80048b8:	b291      	uxth	r1, r2
 80048ba:	2244      	movs	r2, #68	@ 0x44
 80048bc:	5299      	strh	r1, [r3, r2]

    return;
 80048be:	e0de      	b.n	8004a7e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	2380      	movs	r3, #128	@ 0x80
 80048c4:	015b      	lsls	r3, r3, #5
 80048c6:	4013      	ands	r3, r2
 80048c8:	d038      	beq.n	800493c <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2240      	movs	r2, #64	@ 0x40
 80048d0:	5a9b      	ldrh	r3, [r3, r2]
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2104      	movs	r1, #4
 80048da:	438a      	bics	r2, r1
 80048dc:	b291      	uxth	r1, r2
 80048de:	2240      	movs	r2, #64	@ 0x40
 80048e0:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2240      	movs	r2, #64	@ 0x40
 80048e8:	5a9b      	ldrh	r3, [r3, r2]
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2108      	movs	r1, #8
 80048f2:	438a      	bics	r2, r1
 80048f4:	b291      	uxth	r1, r2
 80048f6:	2240      	movs	r2, #64	@ 0x40
 80048f8:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	23b8      	movs	r3, #184	@ 0xb8
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	5cd3      	ldrb	r3, [r2, r3]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d109      	bne.n	800491a <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	23b8      	movs	r3, #184	@ 0xb8
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	2100      	movs	r1, #0
 800490e:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2100      	movs	r1, #0
 8004914:	0018      	movs	r0, r3
 8004916:	f001 fc9f 	bl	8006258 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	0018      	movs	r0, r3
 800491e:	f008 fe07 	bl	800d530 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2244      	movs	r2, #68	@ 0x44
 8004928:	5a9b      	ldrh	r3, [r3, r2]
 800492a:	b29a      	uxth	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4957      	ldr	r1, [pc, #348]	@ (8004a90 <HAL_PCD_IRQHandler+0x278>)
 8004932:	400a      	ands	r2, r1
 8004934:	b291      	uxth	r1, r2
 8004936:	2244      	movs	r2, #68	@ 0x44
 8004938:	5299      	strh	r1, [r3, r2]

    return;
 800493a:	e0a0      	b.n	8004a7e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	2380      	movs	r3, #128	@ 0x80
 8004940:	011b      	lsls	r3, r3, #4
 8004942:	4013      	ands	r3, r2
 8004944:	d028      	beq.n	8004998 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2240      	movs	r2, #64	@ 0x40
 800494c:	5a9b      	ldrh	r3, [r3, r2]
 800494e:	b29a      	uxth	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2108      	movs	r1, #8
 8004956:	430a      	orrs	r2, r1
 8004958:	b291      	uxth	r1, r2
 800495a:	2240      	movs	r2, #64	@ 0x40
 800495c:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2244      	movs	r2, #68	@ 0x44
 8004964:	5a9b      	ldrh	r3, [r3, r2]
 8004966:	b29a      	uxth	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4949      	ldr	r1, [pc, #292]	@ (8004a94 <HAL_PCD_IRQHandler+0x27c>)
 800496e:	400a      	ands	r2, r1
 8004970:	b291      	uxth	r1, r2
 8004972:	2244      	movs	r2, #68	@ 0x44
 8004974:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2240      	movs	r2, #64	@ 0x40
 800497c:	5a9b      	ldrh	r3, [r3, r2]
 800497e:	b29a      	uxth	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2104      	movs	r1, #4
 8004986:	430a      	orrs	r2, r1
 8004988:	b291      	uxth	r1, r2
 800498a:	2240      	movs	r2, #64	@ 0x40
 800498c:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	0018      	movs	r0, r3
 8004992:	f008 fdb1 	bl	800d4f8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004996:	e072      	b.n	8004a7e <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2280      	movs	r2, #128	@ 0x80
 800499c:	4013      	ands	r3, r2
 800499e:	d046      	beq.n	8004a2e <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2244      	movs	r2, #68	@ 0x44
 80049a6:	5a9b      	ldrh	r3, [r3, r2]
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2180      	movs	r1, #128	@ 0x80
 80049b0:	438a      	bics	r2, r1
 80049b2:	b291      	uxth	r1, r2
 80049b4:	2244      	movs	r2, #68	@ 0x44
 80049b6:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	23b8      	movs	r3, #184	@ 0xb8
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	5cd3      	ldrb	r3, [r2, r3]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d12f      	bne.n	8004a24 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2240      	movs	r2, #64	@ 0x40
 80049ca:	5a9b      	ldrh	r3, [r3, r2]
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2104      	movs	r1, #4
 80049d4:	430a      	orrs	r2, r1
 80049d6:	b291      	uxth	r1, r2
 80049d8:	2240      	movs	r2, #64	@ 0x40
 80049da:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2240      	movs	r2, #64	@ 0x40
 80049e2:	5a9b      	ldrh	r3, [r3, r2]
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2108      	movs	r1, #8
 80049ec:	430a      	orrs	r2, r1
 80049ee:	b291      	uxth	r1, r2
 80049f0:	2240      	movs	r2, #64	@ 0x40
 80049f2:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	23b8      	movs	r3, #184	@ 0xb8
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	2101      	movs	r1, #1
 80049fc:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2254      	movs	r2, #84	@ 0x54
 8004a04:	5a9b      	ldrh	r3, [r3, r2]
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	089b      	lsrs	r3, r3, #2
 8004a0a:	223c      	movs	r2, #60	@ 0x3c
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	0019      	movs	r1, r3
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	23b9      	movs	r3, #185	@ 0xb9
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2101      	movs	r1, #1
 8004a1c:	0018      	movs	r0, r3
 8004a1e:	f001 fc1b 	bl	8006258 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004a22:	e02c      	b.n	8004a7e <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	0018      	movs	r0, r3
 8004a28:	f008 fd66 	bl	800d4f8 <HAL_PCD_SuspendCallback>
    return;
 8004a2c:	e027      	b.n	8004a7e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	2380      	movs	r3, #128	@ 0x80
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	4013      	ands	r3, r2
 8004a36:	d010      	beq.n	8004a5a <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2244      	movs	r2, #68	@ 0x44
 8004a3e:	5a9b      	ldrh	r3, [r3, r2]
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4914      	ldr	r1, [pc, #80]	@ (8004a98 <HAL_PCD_IRQHandler+0x280>)
 8004a48:	400a      	ands	r2, r1
 8004a4a:	b291      	uxth	r1, r2
 8004a4c:	2244      	movs	r2, #68	@ 0x44
 8004a4e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	0018      	movs	r0, r3
 8004a54:	f008 fd1c 	bl	800d490 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004a58:	e011      	b.n	8004a7e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	2380      	movs	r3, #128	@ 0x80
 8004a5e:	005b      	lsls	r3, r3, #1
 8004a60:	4013      	ands	r3, r2
 8004a62:	d00c      	beq.n	8004a7e <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2244      	movs	r2, #68	@ 0x44
 8004a6a:	5a9b      	ldrh	r3, [r3, r2]
 8004a6c:	b29a      	uxth	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	490a      	ldr	r1, [pc, #40]	@ (8004a9c <HAL_PCD_IRQHandler+0x284>)
 8004a74:	400a      	ands	r2, r1
 8004a76:	b291      	uxth	r1, r2
 8004a78:	2244      	movs	r2, #68	@ 0x44
 8004a7a:	5299      	strh	r1, [r3, r2]

    return;
 8004a7c:	46c0      	nop			@ (mov r8, r8)
  }
}
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	b004      	add	sp, #16
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	fffffbff 	.word	0xfffffbff
 8004a88:	ffffbfff 	.word	0xffffbfff
 8004a8c:	ffffdfff 	.word	0xffffdfff
 8004a90:	ffffefff 	.word	0xffffefff
 8004a94:	fffff7ff 	.word	0xfffff7ff
 8004a98:	fffffdff 	.word	0xfffffdff
 8004a9c:	fffffeff 	.word	0xfffffeff

08004aa0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	000a      	movs	r2, r1
 8004aaa:	1cfb      	adds	r3, r7, #3
 8004aac:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	23aa      	movs	r3, #170	@ 0xaa
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	5cd3      	ldrb	r3, [r2, r3]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d101      	bne.n	8004abe <HAL_PCD_SetAddress+0x1e>
 8004aba:	2302      	movs	r3, #2
 8004abc:	e017      	b.n	8004aee <HAL_PCD_SetAddress+0x4e>
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	23aa      	movs	r3, #170	@ 0xaa
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	2101      	movs	r1, #1
 8004ac6:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	1cfa      	adds	r2, r7, #3
 8004acc:	2124      	movs	r1, #36	@ 0x24
 8004ace:	7812      	ldrb	r2, [r2, #0]
 8004ad0:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	1cfb      	adds	r3, r7, #3
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	0019      	movs	r1, r3
 8004adc:	0010      	movs	r0, r2
 8004ade:	f006 fc23 	bl	800b328 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	23aa      	movs	r3, #170	@ 0xaa
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	2100      	movs	r1, #0
 8004aea:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	0018      	movs	r0, r3
 8004af0:	46bd      	mov	sp, r7
 8004af2:	b002      	add	sp, #8
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004af6:	b590      	push	{r4, r7, lr}
 8004af8:	b085      	sub	sp, #20
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
 8004afe:	000c      	movs	r4, r1
 8004b00:	0010      	movs	r0, r2
 8004b02:	0019      	movs	r1, r3
 8004b04:	1cfb      	adds	r3, r7, #3
 8004b06:	1c22      	adds	r2, r4, #0
 8004b08:	701a      	strb	r2, [r3, #0]
 8004b0a:	003b      	movs	r3, r7
 8004b0c:	1c02      	adds	r2, r0, #0
 8004b0e:	801a      	strh	r2, [r3, #0]
 8004b10:	1cbb      	adds	r3, r7, #2
 8004b12:	1c0a      	adds	r2, r1, #0
 8004b14:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004b16:	230b      	movs	r3, #11
 8004b18:	18fb      	adds	r3, r7, r3
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b1e:	1cfb      	adds	r3, r7, #3
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	b25b      	sxtb	r3, r3
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	da0f      	bge.n	8004b48 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b28:	1cfb      	adds	r3, r7, #3
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	2207      	movs	r2, #7
 8004b2e:	4013      	ands	r3, r2
 8004b30:	1c5a      	adds	r2, r3, #1
 8004b32:	0013      	movs	r3, r2
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	189b      	adds	r3, r3, r2
 8004b38:	00db      	lsls	r3, r3, #3
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	18d3      	adds	r3, r2, r3
 8004b3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2201      	movs	r2, #1
 8004b44:	705a      	strb	r2, [r3, #1]
 8004b46:	e00f      	b.n	8004b68 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b48:	1cfb      	adds	r3, r7, #3
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	2207      	movs	r2, #7
 8004b4e:	401a      	ands	r2, r3
 8004b50:	0013      	movs	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	189b      	adds	r3, r3, r2
 8004b56:	00db      	lsls	r3, r3, #3
 8004b58:	3369      	adds	r3, #105	@ 0x69
 8004b5a:	33ff      	adds	r3, #255	@ 0xff
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	18d3      	adds	r3, r2, r3
 8004b60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004b68:	1cfb      	adds	r3, r7, #3
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	2207      	movs	r2, #7
 8004b6e:	4013      	ands	r3, r2
 8004b70:	b2da      	uxtb	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004b76:	003b      	movs	r3, r7
 8004b78:	881a      	ldrh	r2, [r3, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	1cba      	adds	r2, r7, #2
 8004b82:	7812      	ldrb	r2, [r2, #0]
 8004b84:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004b86:	1cbb      	adds	r3, r7, #2
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d102      	bne.n	8004b94 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	23aa      	movs	r3, #170	@ 0xaa
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	5cd3      	ldrb	r3, [r2, r3]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d101      	bne.n	8004ba4 <HAL_PCD_EP_Open+0xae>
 8004ba0:	2302      	movs	r3, #2
 8004ba2:	e013      	b.n	8004bcc <HAL_PCD_EP_Open+0xd6>
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	23aa      	movs	r3, #170	@ 0xaa
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	2101      	movs	r1, #1
 8004bac:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	0011      	movs	r1, r2
 8004bb6:	0018      	movs	r0, r3
 8004bb8:	f004 fc1a 	bl	80093f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	23aa      	movs	r3, #170	@ 0xaa
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	2100      	movs	r1, #0
 8004bc4:	54d1      	strb	r1, [r2, r3]

  return ret;
 8004bc6:	230b      	movs	r3, #11
 8004bc8:	18fb      	adds	r3, r7, r3
 8004bca:	781b      	ldrb	r3, [r3, #0]
}
 8004bcc:	0018      	movs	r0, r3
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	b005      	add	sp, #20
 8004bd2:	bd90      	pop	{r4, r7, pc}

08004bd4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	000a      	movs	r2, r1
 8004bde:	1cfb      	adds	r3, r7, #3
 8004be0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004be2:	1cfb      	adds	r3, r7, #3
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	b25b      	sxtb	r3, r3
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	da0f      	bge.n	8004c0c <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bec:	1cfb      	adds	r3, r7, #3
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	2207      	movs	r2, #7
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	1c5a      	adds	r2, r3, #1
 8004bf6:	0013      	movs	r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	189b      	adds	r3, r3, r2
 8004bfc:	00db      	lsls	r3, r3, #3
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	18d3      	adds	r3, r2, r3
 8004c02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2201      	movs	r2, #1
 8004c08:	705a      	strb	r2, [r3, #1]
 8004c0a:	e00f      	b.n	8004c2c <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c0c:	1cfb      	adds	r3, r7, #3
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	2207      	movs	r2, #7
 8004c12:	401a      	ands	r2, r3
 8004c14:	0013      	movs	r3, r2
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	189b      	adds	r3, r3, r2
 8004c1a:	00db      	lsls	r3, r3, #3
 8004c1c:	3369      	adds	r3, #105	@ 0x69
 8004c1e:	33ff      	adds	r3, #255	@ 0xff
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	18d3      	adds	r3, r2, r3
 8004c24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c2c:	1cfb      	adds	r3, r7, #3
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	2207      	movs	r2, #7
 8004c32:	4013      	ands	r3, r2
 8004c34:	b2da      	uxtb	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	23aa      	movs	r3, #170	@ 0xaa
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	5cd3      	ldrb	r3, [r2, r3]
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d101      	bne.n	8004c4a <HAL_PCD_EP_Close+0x76>
 8004c46:	2302      	movs	r3, #2
 8004c48:	e011      	b.n	8004c6e <HAL_PCD_EP_Close+0x9a>
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	23aa      	movs	r3, #170	@ 0xaa
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	2101      	movs	r1, #1
 8004c52:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	0011      	movs	r1, r2
 8004c5c:	0018      	movs	r0, r3
 8004c5e:	f004 ff69 	bl	8009b34 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	23aa      	movs	r3, #170	@ 0xaa
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	2100      	movs	r1, #0
 8004c6a:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	0018      	movs	r0, r3
 8004c70:	46bd      	mov	sp, r7
 8004c72:	b004      	add	sp, #16
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b086      	sub	sp, #24
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	60f8      	str	r0, [r7, #12]
 8004c7e:	607a      	str	r2, [r7, #4]
 8004c80:	603b      	str	r3, [r7, #0]
 8004c82:	200b      	movs	r0, #11
 8004c84:	183b      	adds	r3, r7, r0
 8004c86:	1c0a      	adds	r2, r1, #0
 8004c88:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c8a:	0001      	movs	r1, r0
 8004c8c:	187b      	adds	r3, r7, r1
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	2207      	movs	r2, #7
 8004c92:	401a      	ands	r2, r3
 8004c94:	0013      	movs	r3, r2
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	189b      	adds	r3, r3, r2
 8004c9a:	00db      	lsls	r3, r3, #3
 8004c9c:	3369      	adds	r3, #105	@ 0x69
 8004c9e:	33ff      	adds	r3, #255	@ 0xff
 8004ca0:	68fa      	ldr	r2, [r7, #12]
 8004ca2:	18d3      	adds	r3, r2, r3
 8004ca4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	683a      	ldr	r2, [r7, #0]
 8004cb0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cbe:	187b      	adds	r3, r7, r1
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	2207      	movs	r2, #7
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	b2da      	uxtb	r2, r3
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	0011      	movs	r1, r2
 8004cd4:	0018      	movs	r0, r3
 8004cd6:	f005 f8ed 	bl	8009eb4 <USB_EPStartXfer>

  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	0018      	movs	r0, r3
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	b006      	add	sp, #24
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	000a      	movs	r2, r1
 8004cee:	1cfb      	adds	r3, r7, #3
 8004cf0:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004cf2:	1cfb      	adds	r3, r7, #3
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	2207      	movs	r2, #7
 8004cf8:	401a      	ands	r2, r3
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	23c2      	movs	r3, #194	@ 0xc2
 8004cfe:	0059      	lsls	r1, r3, #1
 8004d00:	0013      	movs	r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	189b      	adds	r3, r3, r2
 8004d06:	00db      	lsls	r3, r3, #3
 8004d08:	18c3      	adds	r3, r0, r3
 8004d0a:	185b      	adds	r3, r3, r1
 8004d0c:	681b      	ldr	r3, [r3, #0]
}
 8004d0e:	0018      	movs	r0, r3
 8004d10:	46bd      	mov	sp, r7
 8004d12:	b002      	add	sp, #8
 8004d14:	bd80      	pop	{r7, pc}

08004d16 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b086      	sub	sp, #24
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	60f8      	str	r0, [r7, #12]
 8004d1e:	607a      	str	r2, [r7, #4]
 8004d20:	603b      	str	r3, [r7, #0]
 8004d22:	200b      	movs	r0, #11
 8004d24:	183b      	adds	r3, r7, r0
 8004d26:	1c0a      	adds	r2, r1, #0
 8004d28:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d2a:	183b      	adds	r3, r7, r0
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	2207      	movs	r2, #7
 8004d30:	4013      	ands	r3, r2
 8004d32:	1c5a      	adds	r2, r3, #1
 8004d34:	0013      	movs	r3, r2
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	189b      	adds	r3, r3, r2
 8004d3a:	00db      	lsls	r3, r3, #3
 8004d3c:	68fa      	ldr	r2, [r7, #12]
 8004d3e:	18d3      	adds	r3, r2, r3
 8004d40:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	683a      	ldr	r2, [r7, #0]
 8004d4c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	2224      	movs	r2, #36	@ 0x24
 8004d52:	2101      	movs	r1, #1
 8004d54:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	683a      	ldr	r2, [r7, #0]
 8004d5a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	2201      	movs	r2, #1
 8004d66:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d68:	183b      	adds	r3, r7, r0
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	2207      	movs	r2, #7
 8004d6e:	4013      	ands	r3, r2
 8004d70:	b2da      	uxtb	r2, r3
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	0011      	movs	r1, r2
 8004d7e:	0018      	movs	r0, r3
 8004d80:	f005 f898 	bl	8009eb4 <USB_EPStartXfer>

  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	0018      	movs	r0, r3
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	b006      	add	sp, #24
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b084      	sub	sp, #16
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
 8004d96:	000a      	movs	r2, r1
 8004d98:	1cfb      	adds	r3, r7, #3
 8004d9a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004d9c:	1cfb      	adds	r3, r7, #3
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	2207      	movs	r2, #7
 8004da2:	401a      	ands	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d901      	bls.n	8004db0 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e046      	b.n	8004e3e <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004db0:	1cfb      	adds	r3, r7, #3
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	b25b      	sxtb	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	da0f      	bge.n	8004dda <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004dba:	1cfb      	adds	r3, r7, #3
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	2207      	movs	r2, #7
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	1c5a      	adds	r2, r3, #1
 8004dc4:	0013      	movs	r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	189b      	adds	r3, r3, r2
 8004dca:	00db      	lsls	r3, r3, #3
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	18d3      	adds	r3, r2, r3
 8004dd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	705a      	strb	r2, [r3, #1]
 8004dd8:	e00d      	b.n	8004df6 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004dda:	1cfb      	adds	r3, r7, #3
 8004ddc:	781a      	ldrb	r2, [r3, #0]
 8004dde:	0013      	movs	r3, r2
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	189b      	adds	r3, r3, r2
 8004de4:	00db      	lsls	r3, r3, #3
 8004de6:	3369      	adds	r3, #105	@ 0x69
 8004de8:	33ff      	adds	r3, #255	@ 0xff
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	18d3      	adds	r3, r2, r3
 8004dee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004dfc:	1cfb      	adds	r3, r7, #3
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	2207      	movs	r2, #7
 8004e02:	4013      	ands	r3, r2
 8004e04:	b2da      	uxtb	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	23aa      	movs	r3, #170	@ 0xaa
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	5cd3      	ldrb	r3, [r2, r3]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d101      	bne.n	8004e1a <HAL_PCD_EP_SetStall+0x8c>
 8004e16:	2302      	movs	r3, #2
 8004e18:	e011      	b.n	8004e3e <HAL_PCD_EP_SetStall+0xb0>
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	23aa      	movs	r3, #170	@ 0xaa
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	2101      	movs	r1, #1
 8004e22:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	0011      	movs	r1, r2
 8004e2c:	0018      	movs	r0, r3
 8004e2e:	f006 f979 	bl	800b124 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	23aa      	movs	r3, #170	@ 0xaa
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	2100      	movs	r1, #0
 8004e3a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	0018      	movs	r0, r3
 8004e40:	46bd      	mov	sp, r7
 8004e42:	b004      	add	sp, #16
 8004e44:	bd80      	pop	{r7, pc}

08004e46 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e46:	b580      	push	{r7, lr}
 8004e48:	b084      	sub	sp, #16
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
 8004e4e:	000a      	movs	r2, r1
 8004e50:	1cfb      	adds	r3, r7, #3
 8004e52:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004e54:	1cfb      	adds	r3, r7, #3
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	220f      	movs	r2, #15
 8004e5a:	401a      	ands	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d901      	bls.n	8004e68 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e048      	b.n	8004efa <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004e68:	1cfb      	adds	r3, r7, #3
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	b25b      	sxtb	r3, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	da0f      	bge.n	8004e92 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e72:	1cfb      	adds	r3, r7, #3
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	2207      	movs	r2, #7
 8004e78:	4013      	ands	r3, r2
 8004e7a:	1c5a      	adds	r2, r3, #1
 8004e7c:	0013      	movs	r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	189b      	adds	r3, r3, r2
 8004e82:	00db      	lsls	r3, r3, #3
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	18d3      	adds	r3, r2, r3
 8004e88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	705a      	strb	r2, [r3, #1]
 8004e90:	e00f      	b.n	8004eb2 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e92:	1cfb      	adds	r3, r7, #3
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	2207      	movs	r2, #7
 8004e98:	401a      	ands	r2, r3
 8004e9a:	0013      	movs	r3, r2
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	189b      	adds	r3, r3, r2
 8004ea0:	00db      	lsls	r3, r3, #3
 8004ea2:	3369      	adds	r3, #105	@ 0x69
 8004ea4:	33ff      	adds	r3, #255	@ 0xff
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	18d3      	adds	r3, r2, r3
 8004eaa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004eb8:	1cfb      	adds	r3, r7, #3
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	2207      	movs	r2, #7
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	b2da      	uxtb	r2, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	23aa      	movs	r3, #170	@ 0xaa
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	5cd3      	ldrb	r3, [r2, r3]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d101      	bne.n	8004ed6 <HAL_PCD_EP_ClrStall+0x90>
 8004ed2:	2302      	movs	r3, #2
 8004ed4:	e011      	b.n	8004efa <HAL_PCD_EP_ClrStall+0xb4>
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	23aa      	movs	r3, #170	@ 0xaa
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	2101      	movs	r1, #1
 8004ede:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68fa      	ldr	r2, [r7, #12]
 8004ee6:	0011      	movs	r1, r2
 8004ee8:	0018      	movs	r0, r3
 8004eea:	f006 f96b 	bl	800b1c4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	23aa      	movs	r3, #170	@ 0xaa
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	2100      	movs	r1, #0
 8004ef6:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	0018      	movs	r0, r3
 8004efc:	46bd      	mov	sp, r7
 8004efe:	b004      	add	sp, #16
 8004f00:	bd80      	pop	{r7, pc}
	...

08004f04 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004f04:	b5b0      	push	{r4, r5, r7, lr}
 8004f06:	b096      	sub	sp, #88	@ 0x58
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004f0c:	f000 fbec 	bl	80056e8 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	204e      	movs	r0, #78	@ 0x4e
 8004f16:	183b      	adds	r3, r7, r0
 8004f18:	2144      	movs	r1, #68	@ 0x44
 8004f1a:	5a52      	ldrh	r2, [r2, r1]
 8004f1c:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004f1e:	183b      	adds	r3, r7, r0
 8004f20:	881b      	ldrh	r3, [r3, #0]
 8004f22:	b2da      	uxtb	r2, r3
 8004f24:	244d      	movs	r4, #77	@ 0x4d
 8004f26:	193b      	adds	r3, r7, r4
 8004f28:	210f      	movs	r1, #15
 8004f2a:	400a      	ands	r2, r1
 8004f2c:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8004f2e:	193b      	adds	r3, r7, r4
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d000      	beq.n	8004f38 <PCD_EP_ISR_Handler+0x34>
 8004f36:	e18f      	b.n	8005258 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004f38:	183b      	adds	r3, r7, r0
 8004f3a:	881b      	ldrh	r3, [r3, #0]
 8004f3c:	2210      	movs	r2, #16
 8004f3e:	4013      	ands	r3, r2
 8004f40:	d155      	bne.n	8004fee <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	881b      	ldrh	r3, [r3, #0]
 8004f48:	b29a      	uxth	r2, r3
 8004f4a:	200e      	movs	r0, #14
 8004f4c:	183b      	adds	r3, r7, r0
 8004f4e:	49bb      	ldr	r1, [pc, #748]	@ (800523c <PCD_EP_ISR_Handler+0x338>)
 8004f50:	400a      	ands	r2, r1
 8004f52:	801a      	strh	r2, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	183a      	adds	r2, r7, r0
 8004f5a:	8812      	ldrh	r2, [r2, #0]
 8004f5c:	49b8      	ldr	r1, [pc, #736]	@ (8005240 <PCD_EP_ISR_Handler+0x33c>)
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	b292      	uxth	r2, r2
 8004f62:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	3328      	adds	r3, #40	@ 0x28
 8004f68:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2250      	movs	r2, #80	@ 0x50
 8004f70:	5a9b      	ldrh	r3, [r3, r2]
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	001a      	movs	r2, r3
 8004f76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	00db      	lsls	r3, r3, #3
 8004f7c:	18d2      	adds	r2, r2, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	18d3      	adds	r3, r2, r3
 8004f84:	4aaf      	ldr	r2, [pc, #700]	@ (8005244 <PCD_EP_ISR_Handler+0x340>)
 8004f86:	4694      	mov	ip, r2
 8004f88:	4463      	add	r3, ip
 8004f8a:	881b      	ldrh	r3, [r3, #0]
 8004f8c:	059b      	lsls	r3, r3, #22
 8004f8e:	0d9a      	lsrs	r2, r3, #22
 8004f90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f92:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004f94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f96:	695a      	ldr	r2, [r3, #20]
 8004f98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f9a:	69db      	ldr	r3, [r3, #28]
 8004f9c:	18d2      	adds	r2, r2, r3
 8004f9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fa0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2100      	movs	r1, #0
 8004fa6:	0018      	movs	r0, r3
 8004fa8:	f008 fa54 	bl	800d454 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2224      	movs	r2, #36	@ 0x24
 8004fb0:	5c9b      	ldrb	r3, [r3, r2]
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d101      	bne.n	8004fbc <PCD_EP_ISR_Handler+0xb8>
 8004fb8:	f000 fb96 	bl	80056e8 <PCD_EP_ISR_Handler+0x7e4>
 8004fbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fbe:	699b      	ldr	r3, [r3, #24]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d001      	beq.n	8004fc8 <PCD_EP_ISR_Handler+0xc4>
 8004fc4:	f000 fb90 	bl	80056e8 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2224      	movs	r2, #36	@ 0x24
 8004fcc:	5c9b      	ldrb	r3, [r3, r2]
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	2280      	movs	r2, #128	@ 0x80
 8004fd2:	4252      	negs	r2, r2
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	b2da      	uxtb	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	0011      	movs	r1, r2
 8004fde:	224c      	movs	r2, #76	@ 0x4c
 8004fe0:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2224      	movs	r2, #36	@ 0x24
 8004fe6:	2100      	movs	r1, #0
 8004fe8:	5499      	strb	r1, [r3, r2]
 8004fea:	f000 fb7d 	bl	80056e8 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	3369      	adds	r3, #105	@ 0x69
 8004ff2:	33ff      	adds	r3, #255	@ 0xff
 8004ff4:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	214a      	movs	r1, #74	@ 0x4a
 8004ffc:	187b      	adds	r3, r7, r1
 8004ffe:	8812      	ldrh	r2, [r2, #0]
 8005000:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005002:	187b      	adds	r3, r7, r1
 8005004:	881a      	ldrh	r2, [r3, #0]
 8005006:	2380      	movs	r3, #128	@ 0x80
 8005008:	011b      	lsls	r3, r3, #4
 800500a:	4013      	ands	r3, r2
 800500c:	d037      	beq.n	800507e <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2250      	movs	r2, #80	@ 0x50
 8005014:	5a9b      	ldrh	r3, [r3, r2]
 8005016:	b29b      	uxth	r3, r3
 8005018:	001a      	movs	r2, r3
 800501a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	00db      	lsls	r3, r3, #3
 8005020:	18d2      	adds	r2, r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	18d3      	adds	r3, r2, r3
 8005028:	4a87      	ldr	r2, [pc, #540]	@ (8005248 <PCD_EP_ISR_Handler+0x344>)
 800502a:	4694      	mov	ip, r2
 800502c:	4463      	add	r3, ip
 800502e:	881b      	ldrh	r3, [r3, #0]
 8005030:	059b      	lsls	r3, r3, #22
 8005032:	0d9a      	lsrs	r2, r3, #22
 8005034:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005036:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6818      	ldr	r0, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	22ac      	movs	r2, #172	@ 0xac
 8005040:	0092      	lsls	r2, r2, #2
 8005042:	1899      	adds	r1, r3, r2
 8005044:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005046:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005048:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800504a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800504c:	b29b      	uxth	r3, r3
 800504e:	f006 f9ec 	bl	800b42a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	881b      	ldrh	r3, [r3, #0]
 8005058:	b29a      	uxth	r2, r3
 800505a:	2010      	movs	r0, #16
 800505c:	183b      	adds	r3, r7, r0
 800505e:	497b      	ldr	r1, [pc, #492]	@ (800524c <PCD_EP_ISR_Handler+0x348>)
 8005060:	400a      	ands	r2, r1
 8005062:	801a      	strh	r2, [r3, #0]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	183a      	adds	r2, r7, r0
 800506a:	8812      	ldrh	r2, [r2, #0]
 800506c:	2180      	movs	r1, #128	@ 0x80
 800506e:	430a      	orrs	r2, r1
 8005070:	b292      	uxth	r2, r2
 8005072:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	0018      	movs	r0, r3
 8005078:	f008 f9b6 	bl	800d3e8 <HAL_PCD_SetupStageCallback>
 800507c:	e334      	b.n	80056e8 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800507e:	234a      	movs	r3, #74	@ 0x4a
 8005080:	18fb      	adds	r3, r7, r3
 8005082:	2200      	movs	r2, #0
 8005084:	5e9b      	ldrsh	r3, [r3, r2]
 8005086:	2b00      	cmp	r3, #0
 8005088:	db00      	blt.n	800508c <PCD_EP_ISR_Handler+0x188>
 800508a:	e32d      	b.n	80056e8 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	881b      	ldrh	r3, [r3, #0]
 8005092:	b29a      	uxth	r2, r3
 8005094:	201e      	movs	r0, #30
 8005096:	183b      	adds	r3, r7, r0
 8005098:	496c      	ldr	r1, [pc, #432]	@ (800524c <PCD_EP_ISR_Handler+0x348>)
 800509a:	400a      	ands	r2, r1
 800509c:	801a      	strh	r2, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	183a      	adds	r2, r7, r0
 80050a4:	8812      	ldrh	r2, [r2, #0]
 80050a6:	2180      	movs	r1, #128	@ 0x80
 80050a8:	430a      	orrs	r2, r1
 80050aa:	b292      	uxth	r2, r2
 80050ac:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2250      	movs	r2, #80	@ 0x50
 80050b4:	5a9b      	ldrh	r3, [r3, r2]
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	001a      	movs	r2, r3
 80050ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	00db      	lsls	r3, r3, #3
 80050c0:	18d2      	adds	r2, r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	18d3      	adds	r3, r2, r3
 80050c8:	4a5f      	ldr	r2, [pc, #380]	@ (8005248 <PCD_EP_ISR_Handler+0x344>)
 80050ca:	4694      	mov	ip, r2
 80050cc:	4463      	add	r3, ip
 80050ce:	881b      	ldrh	r3, [r3, #0]
 80050d0:	059b      	lsls	r3, r3, #22
 80050d2:	0d9a      	lsrs	r2, r3, #22
 80050d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050d6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80050d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050da:	69db      	ldr	r3, [r3, #28]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d01a      	beq.n	8005116 <PCD_EP_ISR_Handler+0x212>
 80050e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050e2:	695b      	ldr	r3, [r3, #20]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d016      	beq.n	8005116 <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6818      	ldr	r0, [r3, #0]
 80050ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050ee:	6959      	ldr	r1, [r3, #20]
 80050f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050f2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80050f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050f6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	f006 f996 	bl	800b42a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80050fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005100:	695a      	ldr	r2, [r3, #20]
 8005102:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005104:	69db      	ldr	r3, [r3, #28]
 8005106:	18d2      	adds	r2, r2, r3
 8005108:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800510a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2100      	movs	r1, #0
 8005110:	0018      	movs	r0, r3
 8005112:	f008 f97e 	bl	800d412 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	214a      	movs	r1, #74	@ 0x4a
 800511c:	187b      	adds	r3, r7, r1
 800511e:	8812      	ldrh	r2, [r2, #0]
 8005120:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005122:	187b      	adds	r3, r7, r1
 8005124:	881a      	ldrh	r2, [r3, #0]
 8005126:	2380      	movs	r3, #128	@ 0x80
 8005128:	011b      	lsls	r3, r3, #4
 800512a:	4013      	ands	r3, r2
 800512c:	d000      	beq.n	8005130 <PCD_EP_ISR_Handler+0x22c>
 800512e:	e2db      	b.n	80056e8 <PCD_EP_ISR_Handler+0x7e4>
 8005130:	187b      	adds	r3, r7, r1
 8005132:	881a      	ldrh	r2, [r3, #0]
 8005134:	23c0      	movs	r3, #192	@ 0xc0
 8005136:	019b      	lsls	r3, r3, #6
 8005138:	401a      	ands	r2, r3
 800513a:	23c0      	movs	r3, #192	@ 0xc0
 800513c:	019b      	lsls	r3, r3, #6
 800513e:	429a      	cmp	r2, r3
 8005140:	d100      	bne.n	8005144 <PCD_EP_ISR_Handler+0x240>
 8005142:	e2d1      	b.n	80056e8 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	61bb      	str	r3, [r7, #24]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2250      	movs	r2, #80	@ 0x50
 8005150:	5a9b      	ldrh	r3, [r3, r2]
 8005152:	b29b      	uxth	r3, r3
 8005154:	001a      	movs	r2, r3
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	189b      	adds	r3, r3, r2
 800515a:	61bb      	str	r3, [r7, #24]
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	4a3a      	ldr	r2, [pc, #232]	@ (8005248 <PCD_EP_ISR_Handler+0x344>)
 8005160:	4694      	mov	ip, r2
 8005162:	4463      	add	r3, ip
 8005164:	617b      	str	r3, [r7, #20]
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	881b      	ldrh	r3, [r3, #0]
 800516a:	b29b      	uxth	r3, r3
 800516c:	059b      	lsls	r3, r3, #22
 800516e:	0d9b      	lsrs	r3, r3, #22
 8005170:	b29a      	uxth	r2, r3
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	801a      	strh	r2, [r3, #0]
 8005176:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	2b3e      	cmp	r3, #62	@ 0x3e
 800517c:	d91a      	bls.n	80051b4 <PCD_EP_ISR_Handler+0x2b0>
 800517e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	095b      	lsrs	r3, r3, #5
 8005184:	647b      	str	r3, [r7, #68]	@ 0x44
 8005186:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	221f      	movs	r2, #31
 800518c:	4013      	ands	r3, r2
 800518e:	d102      	bne.n	8005196 <PCD_EP_ISR_Handler+0x292>
 8005190:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005192:	3b01      	subs	r3, #1
 8005194:	647b      	str	r3, [r7, #68]	@ 0x44
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	881b      	ldrh	r3, [r3, #0]
 800519a:	b29a      	uxth	r2, r3
 800519c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800519e:	b29b      	uxth	r3, r3
 80051a0:	029b      	lsls	r3, r3, #10
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	4313      	orrs	r3, r2
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	4a25      	ldr	r2, [pc, #148]	@ (8005240 <PCD_EP_ISR_Handler+0x33c>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	b29a      	uxth	r2, r3
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	801a      	strh	r2, [r3, #0]
 80051b2:	e023      	b.n	80051fc <PCD_EP_ISR_Handler+0x2f8>
 80051b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d108      	bne.n	80051ce <PCD_EP_ISR_Handler+0x2ca>
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	881b      	ldrh	r3, [r3, #0]
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	4a1f      	ldr	r2, [pc, #124]	@ (8005240 <PCD_EP_ISR_Handler+0x33c>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	801a      	strh	r2, [r3, #0]
 80051cc:	e016      	b.n	80051fc <PCD_EP_ISR_Handler+0x2f8>
 80051ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	085b      	lsrs	r3, r3, #1
 80051d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80051d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	2201      	movs	r2, #1
 80051dc:	4013      	ands	r3, r2
 80051de:	d002      	beq.n	80051e6 <PCD_EP_ISR_Handler+0x2e2>
 80051e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051e2:	3301      	adds	r3, #1
 80051e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	881b      	ldrh	r3, [r3, #0]
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	029b      	lsls	r3, r3, #10
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	4313      	orrs	r3, r2
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	881b      	ldrh	r3, [r3, #0]
 8005202:	b29a      	uxth	r2, r3
 8005204:	2012      	movs	r0, #18
 8005206:	183b      	adds	r3, r7, r0
 8005208:	4911      	ldr	r1, [pc, #68]	@ (8005250 <PCD_EP_ISR_Handler+0x34c>)
 800520a:	400a      	ands	r2, r1
 800520c:	801a      	strh	r2, [r3, #0]
 800520e:	183b      	adds	r3, r7, r0
 8005210:	183a      	adds	r2, r7, r0
 8005212:	8812      	ldrh	r2, [r2, #0]
 8005214:	2180      	movs	r1, #128	@ 0x80
 8005216:	0149      	lsls	r1, r1, #5
 8005218:	404a      	eors	r2, r1
 800521a:	801a      	strh	r2, [r3, #0]
 800521c:	183b      	adds	r3, r7, r0
 800521e:	183a      	adds	r2, r7, r0
 8005220:	8812      	ldrh	r2, [r2, #0]
 8005222:	2180      	movs	r1, #128	@ 0x80
 8005224:	0189      	lsls	r1, r1, #6
 8005226:	404a      	eors	r2, r1
 8005228:	801a      	strh	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	183a      	adds	r2, r7, r0
 8005230:	8812      	ldrh	r2, [r2, #0]
 8005232:	4908      	ldr	r1, [pc, #32]	@ (8005254 <PCD_EP_ISR_Handler+0x350>)
 8005234:	430a      	orrs	r2, r1
 8005236:	b292      	uxth	r2, r2
 8005238:	801a      	strh	r2, [r3, #0]
 800523a:	e255      	b.n	80056e8 <PCD_EP_ISR_Handler+0x7e4>
 800523c:	ffff8f0f 	.word	0xffff8f0f
 8005240:	ffff8000 	.word	0xffff8000
 8005244:	00000402 	.word	0x00000402
 8005248:	00000406 	.word	0x00000406
 800524c:	00000f8f 	.word	0x00000f8f
 8005250:	ffffbf8f 	.word	0xffffbf8f
 8005254:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	001a      	movs	r2, r3
 800525e:	204d      	movs	r0, #77	@ 0x4d
 8005260:	183b      	adds	r3, r7, r0
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	18d2      	adds	r2, r2, r3
 8005268:	214a      	movs	r1, #74	@ 0x4a
 800526a:	187b      	adds	r3, r7, r1
 800526c:	8812      	ldrh	r2, [r2, #0]
 800526e:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005270:	187b      	adds	r3, r7, r1
 8005272:	2200      	movs	r2, #0
 8005274:	5e9b      	ldrsh	r3, [r3, r2]
 8005276:	2b00      	cmp	r3, #0
 8005278:	db00      	blt.n	800527c <PCD_EP_ISR_Handler+0x378>
 800527a:	e0fa      	b.n	8005472 <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	001a      	movs	r2, r3
 8005282:	183b      	adds	r3, r7, r0
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	18d3      	adds	r3, r2, r3
 800528a:	881b      	ldrh	r3, [r3, #0]
 800528c:	b29a      	uxth	r2, r3
 800528e:	2448      	movs	r4, #72	@ 0x48
 8005290:	193b      	adds	r3, r7, r4
 8005292:	49d1      	ldr	r1, [pc, #836]	@ (80055d8 <PCD_EP_ISR_Handler+0x6d4>)
 8005294:	400a      	ands	r2, r1
 8005296:	801a      	strh	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	001a      	movs	r2, r3
 800529e:	183b      	adds	r3, r7, r0
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	18d3      	adds	r3, r2, r3
 80052a6:	193a      	adds	r2, r7, r4
 80052a8:	8812      	ldrh	r2, [r2, #0]
 80052aa:	2180      	movs	r1, #128	@ 0x80
 80052ac:	430a      	orrs	r2, r1
 80052ae:	b292      	uxth	r2, r2
 80052b0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80052b2:	183b      	adds	r3, r7, r0
 80052b4:	781a      	ldrb	r2, [r3, #0]
 80052b6:	0013      	movs	r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	189b      	adds	r3, r3, r2
 80052bc:	00db      	lsls	r3, r3, #3
 80052be:	3369      	adds	r3, #105	@ 0x69
 80052c0:	33ff      	adds	r3, #255	@ 0xff
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	18d3      	adds	r3, r2, r3
 80052c6:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80052c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052ca:	7b1b      	ldrb	r3, [r3, #12]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d125      	bne.n	800531c <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2250      	movs	r2, #80	@ 0x50
 80052d6:	5a9b      	ldrh	r3, [r3, r2]
 80052d8:	b29b      	uxth	r3, r3
 80052da:	001a      	movs	r2, r3
 80052dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	00db      	lsls	r3, r3, #3
 80052e2:	18d2      	adds	r2, r2, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	18d3      	adds	r3, r2, r3
 80052ea:	4abc      	ldr	r2, [pc, #752]	@ (80055dc <PCD_EP_ISR_Handler+0x6d8>)
 80052ec:	4694      	mov	ip, r2
 80052ee:	4463      	add	r3, ip
 80052f0:	881a      	ldrh	r2, [r3, #0]
 80052f2:	2450      	movs	r4, #80	@ 0x50
 80052f4:	193b      	adds	r3, r7, r4
 80052f6:	0592      	lsls	r2, r2, #22
 80052f8:	0d92      	lsrs	r2, r2, #22
 80052fa:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 80052fc:	193b      	adds	r3, r7, r4
 80052fe:	881b      	ldrh	r3, [r3, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d100      	bne.n	8005306 <PCD_EP_ISR_Handler+0x402>
 8005304:	e08d      	b.n	8005422 <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6818      	ldr	r0, [r3, #0]
 800530a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800530c:	6959      	ldr	r1, [r3, #20]
 800530e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005310:	88da      	ldrh	r2, [r3, #6]
 8005312:	193b      	adds	r3, r7, r4
 8005314:	881b      	ldrh	r3, [r3, #0]
 8005316:	f006 f888 	bl	800b42a <USB_ReadPMA>
 800531a:	e082      	b.n	8005422 <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800531c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800531e:	78db      	ldrb	r3, [r3, #3]
 8005320:	2b02      	cmp	r3, #2
 8005322:	d10c      	bne.n	800533e <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005324:	2350      	movs	r3, #80	@ 0x50
 8005326:	18fc      	adds	r4, r7, r3
 8005328:	234a      	movs	r3, #74	@ 0x4a
 800532a:	18fb      	adds	r3, r7, r3
 800532c:	881a      	ldrh	r2, [r3, #0]
 800532e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	0018      	movs	r0, r3
 8005334:	f000 f9ec 	bl	8005710 <HAL_PCD_EP_DB_Receive>
 8005338:	0003      	movs	r3, r0
 800533a:	8023      	strh	r3, [r4, #0]
 800533c:	e071      	b.n	8005422 <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	001a      	movs	r2, r3
 8005344:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	18d3      	adds	r3, r2, r3
 800534c:	881b      	ldrh	r3, [r3, #0]
 800534e:	b29a      	uxth	r2, r3
 8005350:	2052      	movs	r0, #82	@ 0x52
 8005352:	183b      	adds	r3, r7, r0
 8005354:	49a2      	ldr	r1, [pc, #648]	@ (80055e0 <PCD_EP_ISR_Handler+0x6dc>)
 8005356:	400a      	ands	r2, r1
 8005358:	801a      	strh	r2, [r3, #0]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	001a      	movs	r2, r3
 8005360:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	18d3      	adds	r3, r2, r3
 8005368:	183a      	adds	r2, r7, r0
 800536a:	8812      	ldrh	r2, [r2, #0]
 800536c:	499d      	ldr	r1, [pc, #628]	@ (80055e4 <PCD_EP_ISR_Handler+0x6e0>)
 800536e:	430a      	orrs	r2, r1
 8005370:	b292      	uxth	r2, r2
 8005372:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	001a      	movs	r2, r3
 800537a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	18d3      	adds	r3, r2, r3
 8005382:	881b      	ldrh	r3, [r3, #0]
 8005384:	b29b      	uxth	r3, r3
 8005386:	001a      	movs	r2, r3
 8005388:	2380      	movs	r3, #128	@ 0x80
 800538a:	01db      	lsls	r3, r3, #7
 800538c:	4013      	ands	r3, r2
 800538e:	d024      	beq.n	80053da <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2250      	movs	r2, #80	@ 0x50
 8005396:	5a9b      	ldrh	r3, [r3, r2]
 8005398:	b29b      	uxth	r3, r3
 800539a:	001a      	movs	r2, r3
 800539c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	00db      	lsls	r3, r3, #3
 80053a2:	18d2      	adds	r2, r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	18d3      	adds	r3, r2, r3
 80053aa:	4a8f      	ldr	r2, [pc, #572]	@ (80055e8 <PCD_EP_ISR_Handler+0x6e4>)
 80053ac:	4694      	mov	ip, r2
 80053ae:	4463      	add	r3, ip
 80053b0:	881a      	ldrh	r2, [r3, #0]
 80053b2:	2450      	movs	r4, #80	@ 0x50
 80053b4:	193b      	adds	r3, r7, r4
 80053b6:	0592      	lsls	r2, r2, #22
 80053b8:	0d92      	lsrs	r2, r2, #22
 80053ba:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80053bc:	193b      	adds	r3, r7, r4
 80053be:	881b      	ldrh	r3, [r3, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d02e      	beq.n	8005422 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6818      	ldr	r0, [r3, #0]
 80053c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053ca:	6959      	ldr	r1, [r3, #20]
 80053cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053ce:	891a      	ldrh	r2, [r3, #8]
 80053d0:	193b      	adds	r3, r7, r4
 80053d2:	881b      	ldrh	r3, [r3, #0]
 80053d4:	f006 f829 	bl	800b42a <USB_ReadPMA>
 80053d8:	e023      	b.n	8005422 <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2250      	movs	r2, #80	@ 0x50
 80053e0:	5a9b      	ldrh	r3, [r3, r2]
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	001a      	movs	r2, r3
 80053e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	00db      	lsls	r3, r3, #3
 80053ec:	18d2      	adds	r2, r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	18d3      	adds	r3, r2, r3
 80053f4:	4a79      	ldr	r2, [pc, #484]	@ (80055dc <PCD_EP_ISR_Handler+0x6d8>)
 80053f6:	4694      	mov	ip, r2
 80053f8:	4463      	add	r3, ip
 80053fa:	881a      	ldrh	r2, [r3, #0]
 80053fc:	2450      	movs	r4, #80	@ 0x50
 80053fe:	193b      	adds	r3, r7, r4
 8005400:	0592      	lsls	r2, r2, #22
 8005402:	0d92      	lsrs	r2, r2, #22
 8005404:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8005406:	193b      	adds	r3, r7, r4
 8005408:	881b      	ldrh	r3, [r3, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d009      	beq.n	8005422 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6818      	ldr	r0, [r3, #0]
 8005412:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005414:	6959      	ldr	r1, [r3, #20]
 8005416:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005418:	895a      	ldrh	r2, [r3, #10]
 800541a:	193b      	adds	r3, r7, r4
 800541c:	881b      	ldrh	r3, [r3, #0]
 800541e:	f006 f804 	bl	800b42a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005422:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005424:	69da      	ldr	r2, [r3, #28]
 8005426:	2150      	movs	r1, #80	@ 0x50
 8005428:	187b      	adds	r3, r7, r1
 800542a:	881b      	ldrh	r3, [r3, #0]
 800542c:	18d2      	adds	r2, r2, r3
 800542e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005430:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005432:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005434:	695a      	ldr	r2, [r3, #20]
 8005436:	187b      	adds	r3, r7, r1
 8005438:	881b      	ldrh	r3, [r3, #0]
 800543a:	18d2      	adds	r2, r2, r3
 800543c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800543e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005440:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d005      	beq.n	8005454 <PCD_EP_ISR_Handler+0x550>
 8005448:	187b      	adds	r3, r7, r1
 800544a:	881a      	ldrh	r2, [r3, #0]
 800544c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	429a      	cmp	r2, r3
 8005452:	d207      	bcs.n	8005464 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005454:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005456:	781a      	ldrb	r2, [r3, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	0011      	movs	r1, r2
 800545c:	0018      	movs	r0, r3
 800545e:	f007 ffd8 	bl	800d412 <HAL_PCD_DataOutStageCallback>
 8005462:	e006      	b.n	8005472 <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800546a:	0011      	movs	r1, r2
 800546c:	0018      	movs	r0, r3
 800546e:	f004 fd21 	bl	8009eb4 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005472:	244a      	movs	r4, #74	@ 0x4a
 8005474:	193b      	adds	r3, r7, r4
 8005476:	881b      	ldrh	r3, [r3, #0]
 8005478:	2280      	movs	r2, #128	@ 0x80
 800547a:	4013      	ands	r3, r2
 800547c:	d100      	bne.n	8005480 <PCD_EP_ISR_Handler+0x57c>
 800547e:	e133      	b.n	80056e8 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8005480:	204d      	movs	r0, #77	@ 0x4d
 8005482:	183b      	adds	r3, r7, r0
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	1c5a      	adds	r2, r3, #1
 8005488:	0013      	movs	r3, r2
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	189b      	adds	r3, r3, r2
 800548e:	00db      	lsls	r3, r3, #3
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	18d3      	adds	r3, r2, r3
 8005494:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	001a      	movs	r2, r3
 800549c:	183b      	adds	r3, r7, r0
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	18d3      	adds	r3, r2, r3
 80054a4:	881b      	ldrh	r3, [r3, #0]
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	2542      	movs	r5, #66	@ 0x42
 80054aa:	197b      	adds	r3, r7, r5
 80054ac:	494f      	ldr	r1, [pc, #316]	@ (80055ec <PCD_EP_ISR_Handler+0x6e8>)
 80054ae:	400a      	ands	r2, r1
 80054b0:	801a      	strh	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	001a      	movs	r2, r3
 80054b8:	183b      	adds	r3, r7, r0
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	18d3      	adds	r3, r2, r3
 80054c0:	197a      	adds	r2, r7, r5
 80054c2:	8812      	ldrh	r2, [r2, #0]
 80054c4:	494a      	ldr	r1, [pc, #296]	@ (80055f0 <PCD_EP_ISR_Handler+0x6ec>)
 80054c6:	430a      	orrs	r2, r1
 80054c8:	b292      	uxth	r2, r2
 80054ca:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 80054cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054ce:	78db      	ldrb	r3, [r3, #3]
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d000      	beq.n	80054d6 <PCD_EP_ISR_Handler+0x5d2>
 80054d4:	e0af      	b.n	8005636 <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 80054d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054d8:	2200      	movs	r2, #0
 80054da:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80054dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054de:	7b1b      	ldrb	r3, [r3, #12]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d100      	bne.n	80054e6 <PCD_EP_ISR_Handler+0x5e2>
 80054e4:	e09f      	b.n	8005626 <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80054e6:	193b      	adds	r3, r7, r4
 80054e8:	881b      	ldrh	r3, [r3, #0]
 80054ea:	2240      	movs	r2, #64	@ 0x40
 80054ec:	4013      	ands	r3, r2
 80054ee:	d046      	beq.n	800557e <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80054f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054f2:	785b      	ldrb	r3, [r3, #1]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d125      	bne.n	8005544 <PCD_EP_ISR_Handler+0x640>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2250      	movs	r2, #80	@ 0x50
 8005504:	5a9b      	ldrh	r3, [r3, r2]
 8005506:	b29b      	uxth	r3, r3
 8005508:	001a      	movs	r2, r3
 800550a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800550c:	189b      	adds	r3, r3, r2
 800550e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005510:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	00da      	lsls	r2, r3, #3
 8005516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005518:	18d3      	adds	r3, r2, r3
 800551a:	4a33      	ldr	r2, [pc, #204]	@ (80055e8 <PCD_EP_ISR_Handler+0x6e4>)
 800551c:	4694      	mov	ip, r2
 800551e:	4463      	add	r3, ip
 8005520:	623b      	str	r3, [r7, #32]
 8005522:	6a3b      	ldr	r3, [r7, #32]
 8005524:	881b      	ldrh	r3, [r3, #0]
 8005526:	b29b      	uxth	r3, r3
 8005528:	059b      	lsls	r3, r3, #22
 800552a:	0d9b      	lsrs	r3, r3, #22
 800552c:	b29a      	uxth	r2, r3
 800552e:	6a3b      	ldr	r3, [r7, #32]
 8005530:	801a      	strh	r2, [r3, #0]
 8005532:	6a3b      	ldr	r3, [r7, #32]
 8005534:	881b      	ldrh	r3, [r3, #0]
 8005536:	b29b      	uxth	r3, r3
 8005538:	4a2d      	ldr	r2, [pc, #180]	@ (80055f0 <PCD_EP_ISR_Handler+0x6ec>)
 800553a:	4313      	orrs	r3, r2
 800553c:	b29a      	uxth	r2, r3
 800553e:	6a3b      	ldr	r3, [r7, #32]
 8005540:	801a      	strh	r2, [r3, #0]
 8005542:	e070      	b.n	8005626 <PCD_EP_ISR_Handler+0x722>
 8005544:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005546:	785b      	ldrb	r3, [r3, #1]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d16c      	bne.n	8005626 <PCD_EP_ISR_Handler+0x722>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2250      	movs	r2, #80	@ 0x50
 8005558:	5a9b      	ldrh	r3, [r3, r2]
 800555a:	b29b      	uxth	r3, r3
 800555c:	001a      	movs	r2, r3
 800555e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005560:	189b      	adds	r3, r3, r2
 8005562:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005564:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	00da      	lsls	r2, r3, #3
 800556a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800556c:	18d3      	adds	r3, r2, r3
 800556e:	4a1e      	ldr	r2, [pc, #120]	@ (80055e8 <PCD_EP_ISR_Handler+0x6e4>)
 8005570:	4694      	mov	ip, r2
 8005572:	4463      	add	r3, ip
 8005574:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005578:	2200      	movs	r2, #0
 800557a:	801a      	strh	r2, [r3, #0]
 800557c:	e053      	b.n	8005626 <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005584:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005586:	785b      	ldrb	r3, [r3, #1]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d133      	bne.n	80055f4 <PCD_EP_ISR_Handler+0x6f0>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	637b      	str	r3, [r7, #52]	@ 0x34
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2250      	movs	r2, #80	@ 0x50
 8005598:	5a9b      	ldrh	r3, [r3, r2]
 800559a:	b29b      	uxth	r3, r3
 800559c:	001a      	movs	r2, r3
 800559e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055a0:	189b      	adds	r3, r3, r2
 80055a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80055a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	00da      	lsls	r2, r3, #3
 80055aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055ac:	18d3      	adds	r3, r2, r3
 80055ae:	4a0b      	ldr	r2, [pc, #44]	@ (80055dc <PCD_EP_ISR_Handler+0x6d8>)
 80055b0:	4694      	mov	ip, r2
 80055b2:	4463      	add	r3, ip
 80055b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80055b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b8:	881b      	ldrh	r3, [r3, #0]
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	059b      	lsls	r3, r3, #22
 80055be:	0d9b      	lsrs	r3, r3, #22
 80055c0:	b29a      	uxth	r2, r3
 80055c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c4:	801a      	strh	r2, [r3, #0]
 80055c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c8:	881b      	ldrh	r3, [r3, #0]
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	4a08      	ldr	r2, [pc, #32]	@ (80055f0 <PCD_EP_ISR_Handler+0x6ec>)
 80055ce:	4313      	orrs	r3, r2
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d4:	801a      	strh	r2, [r3, #0]
 80055d6:	e026      	b.n	8005626 <PCD_EP_ISR_Handler+0x722>
 80055d8:	00000f8f 	.word	0x00000f8f
 80055dc:	00000406 	.word	0x00000406
 80055e0:	ffff8f8f 	.word	0xffff8f8f
 80055e4:	ffff80c0 	.word	0xffff80c0
 80055e8:	00000402 	.word	0x00000402
 80055ec:	ffff8f0f 	.word	0xffff8f0f
 80055f0:	ffff8000 	.word	0xffff8000
 80055f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055f6:	785b      	ldrb	r3, [r3, #1]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d114      	bne.n	8005626 <PCD_EP_ISR_Handler+0x722>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2250      	movs	r2, #80	@ 0x50
 8005602:	5a9b      	ldrh	r3, [r3, r2]
 8005604:	b29b      	uxth	r3, r3
 8005606:	001a      	movs	r2, r3
 8005608:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800560a:	189b      	adds	r3, r3, r2
 800560c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800560e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	00da      	lsls	r2, r3, #3
 8005614:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005616:	18d3      	adds	r3, r2, r3
 8005618:	4a3b      	ldr	r2, [pc, #236]	@ (8005708 <PCD_EP_ISR_Handler+0x804>)
 800561a:	4694      	mov	ip, r2
 800561c:	4463      	add	r3, ip
 800561e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005622:	2200      	movs	r2, #0
 8005624:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005626:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005628:	781a      	ldrb	r2, [r3, #0]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	0011      	movs	r1, r2
 800562e:	0018      	movs	r0, r3
 8005630:	f007 ff10 	bl	800d454 <HAL_PCD_DataInStageCallback>
 8005634:	e058      	b.n	80056e8 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005636:	234a      	movs	r3, #74	@ 0x4a
 8005638:	18fb      	adds	r3, r7, r3
 800563a:	881a      	ldrh	r2, [r3, #0]
 800563c:	2380      	movs	r3, #128	@ 0x80
 800563e:	005b      	lsls	r3, r3, #1
 8005640:	4013      	ands	r3, r2
 8005642:	d149      	bne.n	80056d8 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2250      	movs	r2, #80	@ 0x50
 800564a:	5a9b      	ldrh	r3, [r3, r2]
 800564c:	b29b      	uxth	r3, r3
 800564e:	001a      	movs	r2, r3
 8005650:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	00db      	lsls	r3, r3, #3
 8005656:	18d2      	adds	r2, r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	18d3      	adds	r3, r2, r3
 800565e:	4a2b      	ldr	r2, [pc, #172]	@ (800570c <PCD_EP_ISR_Handler+0x808>)
 8005660:	4694      	mov	ip, r2
 8005662:	4463      	add	r3, ip
 8005664:	881a      	ldrh	r2, [r3, #0]
 8005666:	2140      	movs	r1, #64	@ 0x40
 8005668:	187b      	adds	r3, r7, r1
 800566a:	0592      	lsls	r2, r2, #22
 800566c:	0d92      	lsrs	r2, r2, #22
 800566e:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8005670:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005672:	699a      	ldr	r2, [r3, #24]
 8005674:	187b      	adds	r3, r7, r1
 8005676:	881b      	ldrh	r3, [r3, #0]
 8005678:	429a      	cmp	r2, r3
 800567a:	d907      	bls.n	800568c <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 800567c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800567e:	699a      	ldr	r2, [r3, #24]
 8005680:	187b      	adds	r3, r7, r1
 8005682:	881b      	ldrh	r3, [r3, #0]
 8005684:	1ad2      	subs	r2, r2, r3
 8005686:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005688:	619a      	str	r2, [r3, #24]
 800568a:	e002      	b.n	8005692 <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 800568c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800568e:	2200      	movs	r2, #0
 8005690:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005692:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d107      	bne.n	80056aa <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800569a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800569c:	781a      	ldrb	r2, [r3, #0]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	0011      	movs	r1, r2
 80056a2:	0018      	movs	r0, r3
 80056a4:	f007 fed6 	bl	800d454 <HAL_PCD_DataInStageCallback>
 80056a8:	e01e      	b.n	80056e8 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80056aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056ac:	695a      	ldr	r2, [r3, #20]
 80056ae:	2140      	movs	r1, #64	@ 0x40
 80056b0:	187b      	adds	r3, r7, r1
 80056b2:	881b      	ldrh	r3, [r3, #0]
 80056b4:	18d2      	adds	r2, r2, r3
 80056b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056b8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80056ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056bc:	69da      	ldr	r2, [r3, #28]
 80056be:	187b      	adds	r3, r7, r1
 80056c0:	881b      	ldrh	r3, [r3, #0]
 80056c2:	18d2      	adds	r2, r2, r3
 80056c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056c6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80056ce:	0011      	movs	r1, r2
 80056d0:	0018      	movs	r0, r3
 80056d2:	f004 fbef 	bl	8009eb4 <USB_EPStartXfer>
 80056d6:	e007      	b.n	80056e8 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80056d8:	234a      	movs	r3, #74	@ 0x4a
 80056da:	18fb      	adds	r3, r7, r3
 80056dc:	881a      	ldrh	r2, [r3, #0]
 80056de:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	0018      	movs	r0, r3
 80056e4:	f000 f930 	bl	8005948 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2244      	movs	r2, #68	@ 0x44
 80056ee:	5a9b      	ldrh	r3, [r3, r2]
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	b21b      	sxth	r3, r3
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	da01      	bge.n	80056fc <PCD_EP_ISR_Handler+0x7f8>
 80056f8:	f7ff fc0a 	bl	8004f10 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	0018      	movs	r0, r3
 8005700:	46bd      	mov	sp, r7
 8005702:	b016      	add	sp, #88	@ 0x58
 8005704:	bdb0      	pop	{r4, r5, r7, pc}
 8005706:	46c0      	nop			@ (mov r8, r8)
 8005708:	00000406 	.word	0x00000406
 800570c:	00000402 	.word	0x00000402

08005710 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005710:	b590      	push	{r4, r7, lr}
 8005712:	b089      	sub	sp, #36	@ 0x24
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	1dbb      	adds	r3, r7, #6
 800571c:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800571e:	1dbb      	adds	r3, r7, #6
 8005720:	881a      	ldrh	r2, [r3, #0]
 8005722:	2380      	movs	r3, #128	@ 0x80
 8005724:	01db      	lsls	r3, r3, #7
 8005726:	4013      	ands	r3, r2
 8005728:	d100      	bne.n	800572c <HAL_PCD_EP_DB_Receive+0x1c>
 800572a:	e07d      	b.n	8005828 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2250      	movs	r2, #80	@ 0x50
 8005732:	5a9b      	ldrh	r3, [r3, r2]
 8005734:	b29b      	uxth	r3, r3
 8005736:	001a      	movs	r2, r3
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	00db      	lsls	r3, r3, #3
 800573e:	18d2      	adds	r2, r2, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	18d3      	adds	r3, r2, r3
 8005746:	4a7a      	ldr	r2, [pc, #488]	@ (8005930 <HAL_PCD_EP_DB_Receive+0x220>)
 8005748:	4694      	mov	ip, r2
 800574a:	4463      	add	r3, ip
 800574c:	881a      	ldrh	r2, [r3, #0]
 800574e:	211a      	movs	r1, #26
 8005750:	187b      	adds	r3, r7, r1
 8005752:	0592      	lsls	r2, r2, #22
 8005754:	0d92      	lsrs	r2, r2, #22
 8005756:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	699a      	ldr	r2, [r3, #24]
 800575c:	187b      	adds	r3, r7, r1
 800575e:	881b      	ldrh	r3, [r3, #0]
 8005760:	429a      	cmp	r2, r3
 8005762:	d307      	bcc.n	8005774 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	699a      	ldr	r2, [r3, #24]
 8005768:	187b      	adds	r3, r7, r1
 800576a:	881b      	ldrh	r3, [r3, #0]
 800576c:	1ad2      	subs	r2, r2, r3
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	619a      	str	r2, [r3, #24]
 8005772:	e002      	b.n	800577a <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	2200      	movs	r2, #0
 8005778:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d121      	bne.n	80057c6 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	001a      	movs	r2, r3
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	18d3      	adds	r3, r2, r3
 8005790:	881b      	ldrh	r3, [r3, #0]
 8005792:	b29a      	uxth	r2, r3
 8005794:	2018      	movs	r0, #24
 8005796:	183b      	adds	r3, r7, r0
 8005798:	4966      	ldr	r1, [pc, #408]	@ (8005934 <HAL_PCD_EP_DB_Receive+0x224>)
 800579a:	400a      	ands	r2, r1
 800579c:	801a      	strh	r2, [r3, #0]
 800579e:	183b      	adds	r3, r7, r0
 80057a0:	183a      	adds	r2, r7, r0
 80057a2:	8812      	ldrh	r2, [r2, #0]
 80057a4:	2180      	movs	r1, #128	@ 0x80
 80057a6:	0189      	lsls	r1, r1, #6
 80057a8:	404a      	eors	r2, r1
 80057aa:	801a      	strh	r2, [r3, #0]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	001a      	movs	r2, r3
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	18d3      	adds	r3, r2, r3
 80057ba:	183a      	adds	r2, r7, r0
 80057bc:	8812      	ldrh	r2, [r2, #0]
 80057be:	495e      	ldr	r1, [pc, #376]	@ (8005938 <HAL_PCD_EP_DB_Receive+0x228>)
 80057c0:	430a      	orrs	r2, r1
 80057c2:	b292      	uxth	r2, r2
 80057c4:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80057c6:	1dbb      	adds	r3, r7, #6
 80057c8:	881b      	ldrh	r3, [r3, #0]
 80057ca:	2240      	movs	r2, #64	@ 0x40
 80057cc:	4013      	ands	r3, r2
 80057ce:	d01a      	beq.n	8005806 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	001a      	movs	r2, r3
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	18d3      	adds	r3, r2, r3
 80057de:	881b      	ldrh	r3, [r3, #0]
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	2016      	movs	r0, #22
 80057e4:	183b      	adds	r3, r7, r0
 80057e6:	4955      	ldr	r1, [pc, #340]	@ (800593c <HAL_PCD_EP_DB_Receive+0x22c>)
 80057e8:	400a      	ands	r2, r1
 80057ea:	801a      	strh	r2, [r3, #0]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	001a      	movs	r2, r3
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	18d3      	adds	r3, r2, r3
 80057fa:	183a      	adds	r2, r7, r0
 80057fc:	8812      	ldrh	r2, [r2, #0]
 80057fe:	4950      	ldr	r1, [pc, #320]	@ (8005940 <HAL_PCD_EP_DB_Receive+0x230>)
 8005800:	430a      	orrs	r2, r1
 8005802:	b292      	uxth	r2, r2
 8005804:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8005806:	241a      	movs	r4, #26
 8005808:	193b      	adds	r3, r7, r4
 800580a:	881b      	ldrh	r3, [r3, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d100      	bne.n	8005812 <HAL_PCD_EP_DB_Receive+0x102>
 8005810:	e086      	b.n	8005920 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6818      	ldr	r0, [r3, #0]
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	6959      	ldr	r1, [r3, #20]
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	891a      	ldrh	r2, [r3, #8]
 800581e:	193b      	adds	r3, r7, r4
 8005820:	881b      	ldrh	r3, [r3, #0]
 8005822:	f005 fe02 	bl	800b42a <USB_ReadPMA>
 8005826:	e07b      	b.n	8005920 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2250      	movs	r2, #80	@ 0x50
 800582e:	5a9b      	ldrh	r3, [r3, r2]
 8005830:	b29b      	uxth	r3, r3
 8005832:	001a      	movs	r2, r3
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	00db      	lsls	r3, r3, #3
 800583a:	18d2      	adds	r2, r2, r3
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	18d3      	adds	r3, r2, r3
 8005842:	4a40      	ldr	r2, [pc, #256]	@ (8005944 <HAL_PCD_EP_DB_Receive+0x234>)
 8005844:	4694      	mov	ip, r2
 8005846:	4463      	add	r3, ip
 8005848:	881a      	ldrh	r2, [r3, #0]
 800584a:	211a      	movs	r1, #26
 800584c:	187b      	adds	r3, r7, r1
 800584e:	0592      	lsls	r2, r2, #22
 8005850:	0d92      	lsrs	r2, r2, #22
 8005852:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	699a      	ldr	r2, [r3, #24]
 8005858:	187b      	adds	r3, r7, r1
 800585a:	881b      	ldrh	r3, [r3, #0]
 800585c:	429a      	cmp	r2, r3
 800585e:	d307      	bcc.n	8005870 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	699a      	ldr	r2, [r3, #24]
 8005864:	187b      	adds	r3, r7, r1
 8005866:	881b      	ldrh	r3, [r3, #0]
 8005868:	1ad2      	subs	r2, r2, r3
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	619a      	str	r2, [r3, #24]
 800586e:	e002      	b.n	8005876 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	2200      	movs	r2, #0
 8005874:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d121      	bne.n	80058c2 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	001a      	movs	r2, r3
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	18d3      	adds	r3, r2, r3
 800588c:	881b      	ldrh	r3, [r3, #0]
 800588e:	b29a      	uxth	r2, r3
 8005890:	201e      	movs	r0, #30
 8005892:	183b      	adds	r3, r7, r0
 8005894:	4927      	ldr	r1, [pc, #156]	@ (8005934 <HAL_PCD_EP_DB_Receive+0x224>)
 8005896:	400a      	ands	r2, r1
 8005898:	801a      	strh	r2, [r3, #0]
 800589a:	183b      	adds	r3, r7, r0
 800589c:	183a      	adds	r2, r7, r0
 800589e:	8812      	ldrh	r2, [r2, #0]
 80058a0:	2180      	movs	r1, #128	@ 0x80
 80058a2:	0189      	lsls	r1, r1, #6
 80058a4:	404a      	eors	r2, r1
 80058a6:	801a      	strh	r2, [r3, #0]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	001a      	movs	r2, r3
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	18d3      	adds	r3, r2, r3
 80058b6:	183a      	adds	r2, r7, r0
 80058b8:	8812      	ldrh	r2, [r2, #0]
 80058ba:	491f      	ldr	r1, [pc, #124]	@ (8005938 <HAL_PCD_EP_DB_Receive+0x228>)
 80058bc:	430a      	orrs	r2, r1
 80058be:	b292      	uxth	r2, r2
 80058c0:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80058c2:	1dbb      	adds	r3, r7, #6
 80058c4:	881b      	ldrh	r3, [r3, #0]
 80058c6:	2240      	movs	r2, #64	@ 0x40
 80058c8:	4013      	ands	r3, r2
 80058ca:	d11a      	bne.n	8005902 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	001a      	movs	r2, r3
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	18d3      	adds	r3, r2, r3
 80058da:	881b      	ldrh	r3, [r3, #0]
 80058dc:	b29a      	uxth	r2, r3
 80058de:	201c      	movs	r0, #28
 80058e0:	183b      	adds	r3, r7, r0
 80058e2:	4916      	ldr	r1, [pc, #88]	@ (800593c <HAL_PCD_EP_DB_Receive+0x22c>)
 80058e4:	400a      	ands	r2, r1
 80058e6:	801a      	strh	r2, [r3, #0]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	001a      	movs	r2, r3
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	18d3      	adds	r3, r2, r3
 80058f6:	183a      	adds	r2, r7, r0
 80058f8:	8812      	ldrh	r2, [r2, #0]
 80058fa:	4911      	ldr	r1, [pc, #68]	@ (8005940 <HAL_PCD_EP_DB_Receive+0x230>)
 80058fc:	430a      	orrs	r2, r1
 80058fe:	b292      	uxth	r2, r2
 8005900:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8005902:	241a      	movs	r4, #26
 8005904:	193b      	adds	r3, r7, r4
 8005906:	881b      	ldrh	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d009      	beq.n	8005920 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6818      	ldr	r0, [r3, #0]
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	6959      	ldr	r1, [r3, #20]
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	895a      	ldrh	r2, [r3, #10]
 8005918:	193b      	adds	r3, r7, r4
 800591a:	881b      	ldrh	r3, [r3, #0]
 800591c:	f005 fd85 	bl	800b42a <USB_ReadPMA>
    }
  }

  return count;
 8005920:	231a      	movs	r3, #26
 8005922:	18fb      	adds	r3, r7, r3
 8005924:	881b      	ldrh	r3, [r3, #0]
}
 8005926:	0018      	movs	r0, r3
 8005928:	46bd      	mov	sp, r7
 800592a:	b009      	add	sp, #36	@ 0x24
 800592c:	bd90      	pop	{r4, r7, pc}
 800592e:	46c0      	nop			@ (mov r8, r8)
 8005930:	00000402 	.word	0x00000402
 8005934:	ffffbf8f 	.word	0xffffbf8f
 8005938:	ffff8080 	.word	0xffff8080
 800593c:	ffff8f8f 	.word	0xffff8f8f
 8005940:	ffff80c0 	.word	0xffff80c0
 8005944:	00000406 	.word	0x00000406

08005948 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b0a4      	sub	sp, #144	@ 0x90
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	1dbb      	adds	r3, r7, #6
 8005954:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005956:	1dbb      	adds	r3, r7, #6
 8005958:	881b      	ldrh	r3, [r3, #0]
 800595a:	2240      	movs	r2, #64	@ 0x40
 800595c:	4013      	ands	r3, r2
 800595e:	d100      	bne.n	8005962 <HAL_PCD_EP_DB_Transmit+0x1a>
 8005960:	e1e4      	b.n	8005d2c <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2250      	movs	r2, #80	@ 0x50
 8005968:	5a9b      	ldrh	r3, [r3, r2]
 800596a:	b29b      	uxth	r3, r3
 800596c:	001a      	movs	r2, r3
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	00db      	lsls	r3, r3, #3
 8005974:	18d2      	adds	r2, r2, r3
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	18d3      	adds	r3, r2, r3
 800597c:	4ad0      	ldr	r2, [pc, #832]	@ (8005cc0 <HAL_PCD_EP_DB_Transmit+0x378>)
 800597e:	4694      	mov	ip, r2
 8005980:	4463      	add	r3, ip
 8005982:	881a      	ldrh	r2, [r3, #0]
 8005984:	2186      	movs	r1, #134	@ 0x86
 8005986:	187b      	adds	r3, r7, r1
 8005988:	0592      	lsls	r2, r2, #22
 800598a:	0d92      	lsrs	r2, r2, #22
 800598c:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	699a      	ldr	r2, [r3, #24]
 8005992:	187b      	adds	r3, r7, r1
 8005994:	881b      	ldrh	r3, [r3, #0]
 8005996:	429a      	cmp	r2, r3
 8005998:	d907      	bls.n	80059aa <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	699a      	ldr	r2, [r3, #24]
 800599e:	187b      	adds	r3, r7, r1
 80059a0:	881b      	ldrh	r3, [r3, #0]
 80059a2:	1ad2      	subs	r2, r2, r3
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	619a      	str	r2, [r3, #24]
 80059a8:	e002      	b.n	80059b0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	2200      	movs	r2, #0
 80059ae:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	699b      	ldr	r3, [r3, #24]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d000      	beq.n	80059ba <HAL_PCD_EP_DB_Transmit+0x72>
 80059b8:	e0b5      	b.n	8005b26 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	785b      	ldrb	r3, [r3, #1]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d125      	bne.n	8005a0e <HAL_PCD_EP_DB_Transmit+0xc6>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2250      	movs	r2, #80	@ 0x50
 80059ce:	5a9b      	ldrh	r3, [r3, r2]
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	001a      	movs	r2, r3
 80059d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059d6:	189b      	adds	r3, r3, r2
 80059d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	00da      	lsls	r2, r3, #3
 80059e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059e2:	18d3      	adds	r3, r2, r3
 80059e4:	4ab6      	ldr	r2, [pc, #728]	@ (8005cc0 <HAL_PCD_EP_DB_Transmit+0x378>)
 80059e6:	4694      	mov	ip, r2
 80059e8:	4463      	add	r3, ip
 80059ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ee:	881b      	ldrh	r3, [r3, #0]
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	059b      	lsls	r3, r3, #22
 80059f4:	0d9b      	lsrs	r3, r3, #22
 80059f6:	b29a      	uxth	r2, r3
 80059f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059fa:	801a      	strh	r2, [r3, #0]
 80059fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059fe:	881b      	ldrh	r3, [r3, #0]
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	4ab0      	ldr	r2, [pc, #704]	@ (8005cc4 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a0a:	801a      	strh	r2, [r3, #0]
 8005a0c:	e01b      	b.n	8005a46 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	785b      	ldrb	r3, [r3, #1]
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d117      	bne.n	8005a46 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2250      	movs	r2, #80	@ 0x50
 8005a22:	5a9b      	ldrh	r3, [r3, r2]
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	001a      	movs	r2, r3
 8005a28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a2a:	189b      	adds	r3, r3, r2
 8005a2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	00da      	lsls	r2, r3, #3
 8005a34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a36:	18d3      	adds	r3, r2, r3
 8005a38:	4aa1      	ldr	r2, [pc, #644]	@ (8005cc0 <HAL_PCD_EP_DB_Transmit+0x378>)
 8005a3a:	4694      	mov	ip, r2
 8005a3c:	4463      	add	r3, ip
 8005a3e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a42:	2200      	movs	r2, #0
 8005a44:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	785b      	ldrb	r3, [r3, #1]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d125      	bne.n	8005aa0 <HAL_PCD_EP_DB_Transmit+0x158>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	61fb      	str	r3, [r7, #28]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2250      	movs	r2, #80	@ 0x50
 8005a60:	5a9b      	ldrh	r3, [r3, r2]
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	001a      	movs	r2, r3
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	189b      	adds	r3, r3, r2
 8005a6a:	61fb      	str	r3, [r7, #28]
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	00da      	lsls	r2, r3, #3
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	18d3      	adds	r3, r2, r3
 8005a76:	4a94      	ldr	r2, [pc, #592]	@ (8005cc8 <HAL_PCD_EP_DB_Transmit+0x380>)
 8005a78:	4694      	mov	ip, r2
 8005a7a:	4463      	add	r3, ip
 8005a7c:	61bb      	str	r3, [r7, #24]
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	881b      	ldrh	r3, [r3, #0]
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	059b      	lsls	r3, r3, #22
 8005a86:	0d9b      	lsrs	r3, r3, #22
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	801a      	strh	r2, [r3, #0]
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	881b      	ldrh	r3, [r3, #0]
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	4a8b      	ldr	r2, [pc, #556]	@ (8005cc4 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8005a96:	4313      	orrs	r3, r2
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	801a      	strh	r2, [r3, #0]
 8005a9e:	e018      	b.n	8005ad2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	785b      	ldrb	r3, [r3, #1]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d114      	bne.n	8005ad2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2250      	movs	r2, #80	@ 0x50
 8005aae:	5a9b      	ldrh	r3, [r3, r2]
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	001a      	movs	r2, r3
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab6:	189b      	adds	r3, r3, r2
 8005ab8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	00da      	lsls	r2, r3, #3
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac2:	18d3      	adds	r3, r2, r3
 8005ac4:	4a80      	ldr	r2, [pc, #512]	@ (8005cc8 <HAL_PCD_EP_DB_Transmit+0x380>)
 8005ac6:	4694      	mov	ip, r2
 8005ac8:	4463      	add	r3, ip
 8005aca:	623b      	str	r3, [r7, #32]
 8005acc:	6a3b      	ldr	r3, [r7, #32]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	781a      	ldrb	r2, [r3, #0]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	0011      	movs	r1, r2
 8005ada:	0018      	movs	r0, r3
 8005adc:	f007 fcba 	bl	800d454 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005ae0:	1dbb      	adds	r3, r7, #6
 8005ae2:	881a      	ldrh	r2, [r3, #0]
 8005ae4:	2380      	movs	r3, #128	@ 0x80
 8005ae6:	01db      	lsls	r3, r3, #7
 8005ae8:	4013      	ands	r3, r2
 8005aea:	d100      	bne.n	8005aee <HAL_PCD_EP_DB_Transmit+0x1a6>
 8005aec:	e309      	b.n	8006102 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	001a      	movs	r2, r3
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	18d3      	adds	r3, r2, r3
 8005afc:	881b      	ldrh	r3, [r3, #0]
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	2016      	movs	r0, #22
 8005b02:	183b      	adds	r3, r7, r0
 8005b04:	4971      	ldr	r1, [pc, #452]	@ (8005ccc <HAL_PCD_EP_DB_Transmit+0x384>)
 8005b06:	400a      	ands	r2, r1
 8005b08:	801a      	strh	r2, [r3, #0]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	001a      	movs	r2, r3
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	18d3      	adds	r3, r2, r3
 8005b18:	183a      	adds	r2, r7, r0
 8005b1a:	8812      	ldrh	r2, [r2, #0]
 8005b1c:	496c      	ldr	r1, [pc, #432]	@ (8005cd0 <HAL_PCD_EP_DB_Transmit+0x388>)
 8005b1e:	430a      	orrs	r2, r1
 8005b20:	b292      	uxth	r2, r2
 8005b22:	801a      	strh	r2, [r3, #0]
 8005b24:	e2ed      	b.n	8006102 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005b26:	1dbb      	adds	r3, r7, #6
 8005b28:	881a      	ldrh	r2, [r3, #0]
 8005b2a:	2380      	movs	r3, #128	@ 0x80
 8005b2c:	01db      	lsls	r3, r3, #7
 8005b2e:	4013      	ands	r3, r2
 8005b30:	d01a      	beq.n	8005b68 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	001a      	movs	r2, r3
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	18d3      	adds	r3, r2, r3
 8005b40:	881b      	ldrh	r3, [r3, #0]
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	208a      	movs	r0, #138	@ 0x8a
 8005b46:	183b      	adds	r3, r7, r0
 8005b48:	4960      	ldr	r1, [pc, #384]	@ (8005ccc <HAL_PCD_EP_DB_Transmit+0x384>)
 8005b4a:	400a      	ands	r2, r1
 8005b4c:	801a      	strh	r2, [r3, #0]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	001a      	movs	r2, r3
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	18d3      	adds	r3, r2, r3
 8005b5c:	183a      	adds	r2, r7, r0
 8005b5e:	8812      	ldrh	r2, [r2, #0]
 8005b60:	495b      	ldr	r1, [pc, #364]	@ (8005cd0 <HAL_PCD_EP_DB_Transmit+0x388>)
 8005b62:	430a      	orrs	r2, r1
 8005b64:	b292      	uxth	r2, r2
 8005b66:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	2224      	movs	r2, #36	@ 0x24
 8005b6c:	5c9b      	ldrb	r3, [r3, r2]
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d000      	beq.n	8005b74 <HAL_PCD_EP_DB_Transmit+0x22c>
 8005b72:	e2c6      	b.n	8006102 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	695a      	ldr	r2, [r3, #20]
 8005b78:	2186      	movs	r1, #134	@ 0x86
 8005b7a:	187b      	adds	r3, r7, r1
 8005b7c:	881b      	ldrh	r3, [r3, #0]
 8005b7e:	18d2      	adds	r2, r2, r3
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	69da      	ldr	r2, [r3, #28]
 8005b88:	187b      	adds	r3, r7, r1
 8005b8a:	881b      	ldrh	r3, [r3, #0]
 8005b8c:	18d2      	adds	r2, r2, r3
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	6a1a      	ldr	r2, [r3, #32]
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d30c      	bcc.n	8005bb8 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	218c      	movs	r1, #140	@ 0x8c
 8005ba4:	187a      	adds	r2, r7, r1
 8005ba6:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	6a1a      	ldr	r2, [r3, #32]
 8005bac:	187b      	adds	r3, r7, r1
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	1ad2      	subs	r2, r2, r3
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	621a      	str	r2, [r3, #32]
 8005bb6:	e01a      	b.n	8005bee <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	6a1b      	ldr	r3, [r3, #32]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d10a      	bne.n	8005bd6 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8005bc0:	2386      	movs	r3, #134	@ 0x86
 8005bc2:	18fb      	adds	r3, r7, r3
 8005bc4:	881b      	ldrh	r3, [r3, #0]
 8005bc6:	228c      	movs	r2, #140	@ 0x8c
 8005bc8:	18ba      	adds	r2, r7, r2
 8005bca:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	2224      	movs	r2, #36	@ 0x24
 8005bd0:	2100      	movs	r1, #0
 8005bd2:	5499      	strb	r1, [r3, r2]
 8005bd4:	e00b      	b.n	8005bee <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	2224      	movs	r2, #36	@ 0x24
 8005bda:	2100      	movs	r1, #0
 8005bdc:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	6a1b      	ldr	r3, [r3, #32]
 8005be2:	228c      	movs	r2, #140	@ 0x8c
 8005be4:	18ba      	adds	r2, r7, r2
 8005be6:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	2200      	movs	r2, #0
 8005bec:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	785b      	ldrb	r3, [r3, #1]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d000      	beq.n	8005bf8 <HAL_PCD_EP_DB_Transmit+0x2b0>
 8005bf6:	e06d      	b.n	8005cd4 <HAL_PCD_EP_DB_Transmit+0x38c>
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2250      	movs	r2, #80	@ 0x50
 8005c04:	5a9b      	ldrh	r3, [r3, r2]
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	001a      	movs	r2, r3
 8005c0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c0c:	189b      	adds	r3, r3, r2
 8005c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	00da      	lsls	r2, r3, #3
 8005c16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c18:	18d3      	adds	r3, r2, r3
 8005c1a:	4a29      	ldr	r2, [pc, #164]	@ (8005cc0 <HAL_PCD_EP_DB_Transmit+0x378>)
 8005c1c:	4694      	mov	ip, r2
 8005c1e:	4463      	add	r3, ip
 8005c20:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c24:	881b      	ldrh	r3, [r3, #0]
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	059b      	lsls	r3, r3, #22
 8005c2a:	0d9b      	lsrs	r3, r3, #22
 8005c2c:	b29a      	uxth	r2, r3
 8005c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c30:	801a      	strh	r2, [r3, #0]
 8005c32:	228c      	movs	r2, #140	@ 0x8c
 8005c34:	18bb      	adds	r3, r7, r2
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2b3e      	cmp	r3, #62	@ 0x3e
 8005c3a:	d91a      	bls.n	8005c72 <HAL_PCD_EP_DB_Transmit+0x32a>
 8005c3c:	18bb      	adds	r3, r7, r2
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	095b      	lsrs	r3, r3, #5
 8005c42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c44:	18bb      	adds	r3, r7, r2
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	221f      	movs	r2, #31
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	d102      	bne.n	8005c54 <HAL_PCD_EP_DB_Transmit+0x30c>
 8005c4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c50:	3b01      	subs	r3, #1
 8005c52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c56:	881b      	ldrh	r3, [r3, #0]
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	029b      	lsls	r3, r3, #10
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	4313      	orrs	r3, r2
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	4a17      	ldr	r2, [pc, #92]	@ (8005cc4 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c6e:	801a      	strh	r2, [r3, #0]
 8005c70:	e04f      	b.n	8005d12 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8005c72:	238c      	movs	r3, #140	@ 0x8c
 8005c74:	18fb      	adds	r3, r7, r3
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d108      	bne.n	8005c8e <HAL_PCD_EP_DB_Transmit+0x346>
 8005c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c7e:	881b      	ldrh	r3, [r3, #0]
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	4a10      	ldr	r2, [pc, #64]	@ (8005cc4 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8005c84:	4313      	orrs	r3, r2
 8005c86:	b29a      	uxth	r2, r3
 8005c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c8a:	801a      	strh	r2, [r3, #0]
 8005c8c:	e041      	b.n	8005d12 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8005c8e:	228c      	movs	r2, #140	@ 0x8c
 8005c90:	18bb      	adds	r3, r7, r2
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	085b      	lsrs	r3, r3, #1
 8005c96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c98:	18bb      	adds	r3, r7, r2
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	d002      	beq.n	8005ca8 <HAL_PCD_EP_DB_Transmit+0x360>
 8005ca2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005caa:	881b      	ldrh	r3, [r3, #0]
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	029b      	lsls	r3, r3, #10
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	b29a      	uxth	r2, r3
 8005cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cbc:	801a      	strh	r2, [r3, #0]
 8005cbe:	e028      	b.n	8005d12 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8005cc0:	00000402 	.word	0x00000402
 8005cc4:	ffff8000 	.word	0xffff8000
 8005cc8:	00000406 	.word	0x00000406
 8005ccc:	ffff8f8f 	.word	0xffff8f8f
 8005cd0:	ffffc080 	.word	0xffffc080
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	785b      	ldrb	r3, [r3, #1]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d11a      	bne.n	8005d12 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2250      	movs	r2, #80	@ 0x50
 8005ce8:	5a9b      	ldrh	r3, [r3, r2]
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	001a      	movs	r2, r3
 8005cee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cf0:	189b      	adds	r3, r3, r2
 8005cf2:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	00da      	lsls	r2, r3, #3
 8005cfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cfc:	18d3      	adds	r3, r2, r3
 8005cfe:	4adb      	ldr	r2, [pc, #876]	@ (800606c <HAL_PCD_EP_DB_Transmit+0x724>)
 8005d00:	4694      	mov	ip, r2
 8005d02:	4463      	add	r3, ip
 8005d04:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d06:	238c      	movs	r3, #140	@ 0x8c
 8005d08:	18fb      	adds	r3, r7, r3
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	b29a      	uxth	r2, r3
 8005d0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d10:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6818      	ldr	r0, [r3, #0]
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	6959      	ldr	r1, [r3, #20]
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	891a      	ldrh	r2, [r3, #8]
 8005d1e:	238c      	movs	r3, #140	@ 0x8c
 8005d20:	18fb      	adds	r3, r7, r3
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	f005 fb37 	bl	800b398 <USB_WritePMA>
 8005d2a:	e1ea      	b.n	8006102 <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2250      	movs	r2, #80	@ 0x50
 8005d32:	5a9b      	ldrh	r3, [r3, r2]
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	001a      	movs	r2, r3
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	00db      	lsls	r3, r3, #3
 8005d3e:	18d2      	adds	r2, r2, r3
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	18d3      	adds	r3, r2, r3
 8005d46:	4aca      	ldr	r2, [pc, #808]	@ (8006070 <HAL_PCD_EP_DB_Transmit+0x728>)
 8005d48:	4694      	mov	ip, r2
 8005d4a:	4463      	add	r3, ip
 8005d4c:	881a      	ldrh	r2, [r3, #0]
 8005d4e:	2186      	movs	r1, #134	@ 0x86
 8005d50:	187b      	adds	r3, r7, r1
 8005d52:	0592      	lsls	r2, r2, #22
 8005d54:	0d92      	lsrs	r2, r2, #22
 8005d56:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	699a      	ldr	r2, [r3, #24]
 8005d5c:	187b      	adds	r3, r7, r1
 8005d5e:	881b      	ldrh	r3, [r3, #0]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d307      	bcc.n	8005d74 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	699a      	ldr	r2, [r3, #24]
 8005d68:	187b      	adds	r3, r7, r1
 8005d6a:	881b      	ldrh	r3, [r3, #0]
 8005d6c:	1ad2      	subs	r2, r2, r3
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	619a      	str	r2, [r3, #24]
 8005d72:	e002      	b.n	8005d7a <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	2200      	movs	r2, #0
 8005d78:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d000      	beq.n	8005d84 <HAL_PCD_EP_DB_Transmit+0x43c>
 8005d82:	e0bb      	b.n	8005efc <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	785b      	ldrb	r3, [r3, #1]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d125      	bne.n	8005dd8 <HAL_PCD_EP_DB_Transmit+0x490>
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2250      	movs	r2, #80	@ 0x50
 8005d98:	5a9b      	ldrh	r3, [r3, r2]
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	001a      	movs	r2, r3
 8005d9e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005da0:	189b      	adds	r3, r3, r2
 8005da2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	00da      	lsls	r2, r3, #3
 8005daa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005dac:	18d3      	adds	r3, r2, r3
 8005dae:	4aaf      	ldr	r2, [pc, #700]	@ (800606c <HAL_PCD_EP_DB_Transmit+0x724>)
 8005db0:	4694      	mov	ip, r2
 8005db2:	4463      	add	r3, ip
 8005db4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005db6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005db8:	881b      	ldrh	r3, [r3, #0]
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	059b      	lsls	r3, r3, #22
 8005dbe:	0d9b      	lsrs	r3, r3, #22
 8005dc0:	b29a      	uxth	r2, r3
 8005dc2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005dc4:	801a      	strh	r2, [r3, #0]
 8005dc6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005dc8:	881b      	ldrh	r3, [r3, #0]
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	4aa9      	ldr	r2, [pc, #676]	@ (8006074 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	b29a      	uxth	r2, r3
 8005dd2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005dd4:	801a      	strh	r2, [r3, #0]
 8005dd6:	e01b      	b.n	8005e10 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	785b      	ldrb	r3, [r3, #1]
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d117      	bne.n	8005e10 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	667b      	str	r3, [r7, #100]	@ 0x64
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2250      	movs	r2, #80	@ 0x50
 8005dec:	5a9b      	ldrh	r3, [r3, r2]
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	001a      	movs	r2, r3
 8005df2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005df4:	189b      	adds	r3, r3, r2
 8005df6:	667b      	str	r3, [r7, #100]	@ 0x64
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	00da      	lsls	r2, r3, #3
 8005dfe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e00:	18d3      	adds	r3, r2, r3
 8005e02:	4a9a      	ldr	r2, [pc, #616]	@ (800606c <HAL_PCD_EP_DB_Transmit+0x724>)
 8005e04:	4694      	mov	ip, r2
 8005e06:	4463      	add	r3, ip
 8005e08:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	677b      	str	r3, [r7, #116]	@ 0x74
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	785b      	ldrb	r3, [r3, #1]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d12b      	bne.n	8005e76 <HAL_PCD_EP_DB_Transmit+0x52e>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2250      	movs	r2, #80	@ 0x50
 8005e2a:	5a9b      	ldrh	r3, [r3, r2]
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	001a      	movs	r2, r3
 8005e30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e32:	189b      	adds	r3, r3, r2
 8005e34:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	00da      	lsls	r2, r3, #3
 8005e3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e3e:	18d3      	adds	r3, r2, r3
 8005e40:	4a8b      	ldr	r2, [pc, #556]	@ (8006070 <HAL_PCD_EP_DB_Transmit+0x728>)
 8005e42:	4694      	mov	ip, r2
 8005e44:	4463      	add	r3, ip
 8005e46:	2180      	movs	r1, #128	@ 0x80
 8005e48:	187a      	adds	r2, r7, r1
 8005e4a:	6013      	str	r3, [r2, #0]
 8005e4c:	187b      	adds	r3, r7, r1
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	881b      	ldrh	r3, [r3, #0]
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	059b      	lsls	r3, r3, #22
 8005e56:	0d9b      	lsrs	r3, r3, #22
 8005e58:	b29a      	uxth	r2, r3
 8005e5a:	187b      	adds	r3, r7, r1
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	801a      	strh	r2, [r3, #0]
 8005e60:	187b      	adds	r3, r7, r1
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	881b      	ldrh	r3, [r3, #0]
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	4a82      	ldr	r2, [pc, #520]	@ (8006074 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	187b      	adds	r3, r7, r1
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	801a      	strh	r2, [r3, #0]
 8005e74:	e018      	b.n	8005ea8 <HAL_PCD_EP_DB_Transmit+0x560>
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	785b      	ldrb	r3, [r3, #1]
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d114      	bne.n	8005ea8 <HAL_PCD_EP_DB_Transmit+0x560>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2250      	movs	r2, #80	@ 0x50
 8005e84:	5a9b      	ldrh	r3, [r3, r2]
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	001a      	movs	r2, r3
 8005e8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e8c:	189b      	adds	r3, r3, r2
 8005e8e:	677b      	str	r3, [r7, #116]	@ 0x74
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	00da      	lsls	r2, r3, #3
 8005e96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e98:	18d3      	adds	r3, r2, r3
 8005e9a:	4a75      	ldr	r2, [pc, #468]	@ (8006070 <HAL_PCD_EP_DB_Transmit+0x728>)
 8005e9c:	4694      	mov	ip, r2
 8005e9e:	4463      	add	r3, ip
 8005ea0:	673b      	str	r3, [r7, #112]	@ 0x70
 8005ea2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	781a      	ldrb	r2, [r3, #0]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	0011      	movs	r1, r2
 8005eb0:	0018      	movs	r0, r3
 8005eb2:	f007 facf 	bl	800d454 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005eb6:	1dbb      	adds	r3, r7, #6
 8005eb8:	881a      	ldrh	r2, [r3, #0]
 8005eba:	2380      	movs	r3, #128	@ 0x80
 8005ebc:	01db      	lsls	r3, r3, #7
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	d000      	beq.n	8005ec4 <HAL_PCD_EP_DB_Transmit+0x57c>
 8005ec2:	e11e      	b.n	8006102 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	001a      	movs	r2, r3
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	18d3      	adds	r3, r2, r3
 8005ed2:	881b      	ldrh	r3, [r3, #0]
 8005ed4:	b29a      	uxth	r2, r3
 8005ed6:	2088      	movs	r0, #136	@ 0x88
 8005ed8:	183b      	adds	r3, r7, r0
 8005eda:	4967      	ldr	r1, [pc, #412]	@ (8006078 <HAL_PCD_EP_DB_Transmit+0x730>)
 8005edc:	400a      	ands	r2, r1
 8005ede:	801a      	strh	r2, [r3, #0]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	001a      	movs	r2, r3
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	18d3      	adds	r3, r2, r3
 8005eee:	183a      	adds	r2, r7, r0
 8005ef0:	8812      	ldrh	r2, [r2, #0]
 8005ef2:	4962      	ldr	r1, [pc, #392]	@ (800607c <HAL_PCD_EP_DB_Transmit+0x734>)
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	b292      	uxth	r2, r2
 8005ef8:	801a      	strh	r2, [r3, #0]
 8005efa:	e102      	b.n	8006102 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005efc:	1dbb      	adds	r3, r7, #6
 8005efe:	881a      	ldrh	r2, [r3, #0]
 8005f00:	2380      	movs	r3, #128	@ 0x80
 8005f02:	01db      	lsls	r3, r3, #7
 8005f04:	4013      	ands	r3, r2
 8005f06:	d11a      	bne.n	8005f3e <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	001a      	movs	r2, r3
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	18d3      	adds	r3, r2, r3
 8005f16:	881b      	ldrh	r3, [r3, #0]
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	204e      	movs	r0, #78	@ 0x4e
 8005f1c:	183b      	adds	r3, r7, r0
 8005f1e:	4956      	ldr	r1, [pc, #344]	@ (8006078 <HAL_PCD_EP_DB_Transmit+0x730>)
 8005f20:	400a      	ands	r2, r1
 8005f22:	801a      	strh	r2, [r3, #0]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	001a      	movs	r2, r3
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	18d3      	adds	r3, r2, r3
 8005f32:	183a      	adds	r2, r7, r0
 8005f34:	8812      	ldrh	r2, [r2, #0]
 8005f36:	4951      	ldr	r1, [pc, #324]	@ (800607c <HAL_PCD_EP_DB_Transmit+0x734>)
 8005f38:	430a      	orrs	r2, r1
 8005f3a:	b292      	uxth	r2, r2
 8005f3c:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	2224      	movs	r2, #36	@ 0x24
 8005f42:	5c9b      	ldrb	r3, [r3, r2]
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d000      	beq.n	8005f4a <HAL_PCD_EP_DB_Transmit+0x602>
 8005f48:	e0db      	b.n	8006102 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	695a      	ldr	r2, [r3, #20]
 8005f4e:	2186      	movs	r1, #134	@ 0x86
 8005f50:	187b      	adds	r3, r7, r1
 8005f52:	881b      	ldrh	r3, [r3, #0]
 8005f54:	18d2      	adds	r2, r2, r3
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	69da      	ldr	r2, [r3, #28]
 8005f5e:	187b      	adds	r3, r7, r1
 8005f60:	881b      	ldrh	r3, [r3, #0]
 8005f62:	18d2      	adds	r2, r2, r3
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	6a1a      	ldr	r2, [r3, #32]
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d30c      	bcc.n	8005f8e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	218c      	movs	r1, #140	@ 0x8c
 8005f7a:	187a      	adds	r2, r7, r1
 8005f7c:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	6a1a      	ldr	r2, [r3, #32]
 8005f82:	187b      	adds	r3, r7, r1
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	1ad2      	subs	r2, r2, r3
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	621a      	str	r2, [r3, #32]
 8005f8c:	e01a      	b.n	8005fc4 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	6a1b      	ldr	r3, [r3, #32]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d10a      	bne.n	8005fac <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8005f96:	2386      	movs	r3, #134	@ 0x86
 8005f98:	18fb      	adds	r3, r7, r3
 8005f9a:	881b      	ldrh	r3, [r3, #0]
 8005f9c:	228c      	movs	r2, #140	@ 0x8c
 8005f9e:	18ba      	adds	r2, r7, r2
 8005fa0:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	2224      	movs	r2, #36	@ 0x24
 8005fa6:	2100      	movs	r1, #0
 8005fa8:	5499      	strb	r1, [r3, r2]
 8005faa:	e00b      	b.n	8005fc4 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	6a1b      	ldr	r3, [r3, #32]
 8005fb0:	228c      	movs	r2, #140	@ 0x8c
 8005fb2:	18ba      	adds	r2, r7, r2
 8005fb4:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	2224      	movs	r2, #36	@ 0x24
 8005fc0:	2100      	movs	r1, #0
 8005fc2:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	657b      	str	r3, [r7, #84]	@ 0x54
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	785b      	ldrb	r3, [r3, #1]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d000      	beq.n	8005fd4 <HAL_PCD_EP_DB_Transmit+0x68c>
 8005fd2:	e06e      	b.n	80060b2 <HAL_PCD_EP_DB_Transmit+0x76a>
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2250      	movs	r2, #80	@ 0x50
 8005fe0:	5a9b      	ldrh	r3, [r3, r2]
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	001a      	movs	r2, r3
 8005fe6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005fe8:	189b      	adds	r3, r3, r2
 8005fea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	00da      	lsls	r2, r3, #3
 8005ff2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ff4:	18d3      	adds	r3, r2, r3
 8005ff6:	4a1e      	ldr	r2, [pc, #120]	@ (8006070 <HAL_PCD_EP_DB_Transmit+0x728>)
 8005ff8:	4694      	mov	ip, r2
 8005ffa:	4463      	add	r3, ip
 8005ffc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005ffe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006000:	881b      	ldrh	r3, [r3, #0]
 8006002:	b29b      	uxth	r3, r3
 8006004:	059b      	lsls	r3, r3, #22
 8006006:	0d9b      	lsrs	r3, r3, #22
 8006008:	b29a      	uxth	r2, r3
 800600a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800600c:	801a      	strh	r2, [r3, #0]
 800600e:	228c      	movs	r2, #140	@ 0x8c
 8006010:	18bb      	adds	r3, r7, r2
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2b3e      	cmp	r3, #62	@ 0x3e
 8006016:	d91a      	bls.n	800604e <HAL_PCD_EP_DB_Transmit+0x706>
 8006018:	18bb      	adds	r3, r7, r2
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	095b      	lsrs	r3, r3, #5
 800601e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006020:	18bb      	adds	r3, r7, r2
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	221f      	movs	r2, #31
 8006026:	4013      	ands	r3, r2
 8006028:	d102      	bne.n	8006030 <HAL_PCD_EP_DB_Transmit+0x6e8>
 800602a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800602c:	3b01      	subs	r3, #1
 800602e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006030:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006032:	881b      	ldrh	r3, [r3, #0]
 8006034:	b29a      	uxth	r2, r3
 8006036:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006038:	b29b      	uxth	r3, r3
 800603a:	029b      	lsls	r3, r3, #10
 800603c:	b29b      	uxth	r3, r3
 800603e:	4313      	orrs	r3, r2
 8006040:	b29b      	uxth	r3, r3
 8006042:	4a0c      	ldr	r2, [pc, #48]	@ (8006074 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8006044:	4313      	orrs	r3, r2
 8006046:	b29a      	uxth	r2, r3
 8006048:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800604a:	801a      	strh	r2, [r3, #0]
 800604c:	e04d      	b.n	80060ea <HAL_PCD_EP_DB_Transmit+0x7a2>
 800604e:	238c      	movs	r3, #140	@ 0x8c
 8006050:	18fb      	adds	r3, r7, r3
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d113      	bne.n	8006080 <HAL_PCD_EP_DB_Transmit+0x738>
 8006058:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800605a:	881b      	ldrh	r3, [r3, #0]
 800605c:	b29b      	uxth	r3, r3
 800605e:	4a05      	ldr	r2, [pc, #20]	@ (8006074 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8006060:	4313      	orrs	r3, r2
 8006062:	b29a      	uxth	r2, r3
 8006064:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006066:	801a      	strh	r2, [r3, #0]
 8006068:	e03f      	b.n	80060ea <HAL_PCD_EP_DB_Transmit+0x7a2>
 800606a:	46c0      	nop			@ (mov r8, r8)
 800606c:	00000402 	.word	0x00000402
 8006070:	00000406 	.word	0x00000406
 8006074:	ffff8000 	.word	0xffff8000
 8006078:	ffff8f8f 	.word	0xffff8f8f
 800607c:	ffffc080 	.word	0xffffc080
 8006080:	228c      	movs	r2, #140	@ 0x8c
 8006082:	18bb      	adds	r3, r7, r2
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	085b      	lsrs	r3, r3, #1
 8006088:	66bb      	str	r3, [r7, #104]	@ 0x68
 800608a:	18bb      	adds	r3, r7, r2
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2201      	movs	r2, #1
 8006090:	4013      	ands	r3, r2
 8006092:	d002      	beq.n	800609a <HAL_PCD_EP_DB_Transmit+0x752>
 8006094:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006096:	3301      	adds	r3, #1
 8006098:	66bb      	str	r3, [r7, #104]	@ 0x68
 800609a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800609c:	881b      	ldrh	r3, [r3, #0]
 800609e:	b29a      	uxth	r2, r3
 80060a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	029b      	lsls	r3, r3, #10
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	4313      	orrs	r3, r2
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80060ae:	801a      	strh	r2, [r3, #0]
 80060b0:	e01b      	b.n	80060ea <HAL_PCD_EP_DB_Transmit+0x7a2>
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	785b      	ldrb	r3, [r3, #1]
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d117      	bne.n	80060ea <HAL_PCD_EP_DB_Transmit+0x7a2>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2250      	movs	r2, #80	@ 0x50
 80060c0:	5a9b      	ldrh	r3, [r3, r2]
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	001a      	movs	r2, r3
 80060c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060c8:	189b      	adds	r3, r3, r2
 80060ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	00da      	lsls	r2, r3, #3
 80060d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060d4:	18d3      	adds	r3, r2, r3
 80060d6:	4a21      	ldr	r2, [pc, #132]	@ (800615c <HAL_PCD_EP_DB_Transmit+0x814>)
 80060d8:	4694      	mov	ip, r2
 80060da:	4463      	add	r3, ip
 80060dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80060de:	238c      	movs	r3, #140	@ 0x8c
 80060e0:	18fb      	adds	r3, r7, r3
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	b29a      	uxth	r2, r3
 80060e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060e8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6818      	ldr	r0, [r3, #0]
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	6959      	ldr	r1, [r3, #20]
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	895a      	ldrh	r2, [r3, #10]
 80060f6:	238c      	movs	r3, #140	@ 0x8c
 80060f8:	18fb      	adds	r3, r7, r3
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	f005 f94b 	bl	800b398 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	001a      	movs	r2, r3
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	18d3      	adds	r3, r2, r3
 8006110:	881b      	ldrh	r3, [r3, #0]
 8006112:	b29a      	uxth	r2, r3
 8006114:	2014      	movs	r0, #20
 8006116:	183b      	adds	r3, r7, r0
 8006118:	4911      	ldr	r1, [pc, #68]	@ (8006160 <HAL_PCD_EP_DB_Transmit+0x818>)
 800611a:	400a      	ands	r2, r1
 800611c:	801a      	strh	r2, [r3, #0]
 800611e:	183b      	adds	r3, r7, r0
 8006120:	183a      	adds	r2, r7, r0
 8006122:	8812      	ldrh	r2, [r2, #0]
 8006124:	2110      	movs	r1, #16
 8006126:	404a      	eors	r2, r1
 8006128:	801a      	strh	r2, [r3, #0]
 800612a:	183b      	adds	r3, r7, r0
 800612c:	183a      	adds	r2, r7, r0
 800612e:	8812      	ldrh	r2, [r2, #0]
 8006130:	2120      	movs	r1, #32
 8006132:	404a      	eors	r2, r1
 8006134:	801a      	strh	r2, [r3, #0]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	001a      	movs	r2, r3
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	18d3      	adds	r3, r2, r3
 8006144:	183a      	adds	r2, r7, r0
 8006146:	8812      	ldrh	r2, [r2, #0]
 8006148:	4906      	ldr	r1, [pc, #24]	@ (8006164 <HAL_PCD_EP_DB_Transmit+0x81c>)
 800614a:	430a      	orrs	r2, r1
 800614c:	b292      	uxth	r2, r2
 800614e:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	0018      	movs	r0, r3
 8006154:	46bd      	mov	sp, r7
 8006156:	b024      	add	sp, #144	@ 0x90
 8006158:	bd80      	pop	{r7, pc}
 800615a:	46c0      	nop			@ (mov r8, r8)
 800615c:	00000406 	.word	0x00000406
 8006160:	ffff8fbf 	.word	0xffff8fbf
 8006164:	ffff8080 	.word	0xffff8080

08006168 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006168:	b590      	push	{r4, r7, lr}
 800616a:	b087      	sub	sp, #28
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	0008      	movs	r0, r1
 8006172:	0011      	movs	r1, r2
 8006174:	607b      	str	r3, [r7, #4]
 8006176:	240a      	movs	r4, #10
 8006178:	193b      	adds	r3, r7, r4
 800617a:	1c02      	adds	r2, r0, #0
 800617c:	801a      	strh	r2, [r3, #0]
 800617e:	2308      	movs	r3, #8
 8006180:	18fb      	adds	r3, r7, r3
 8006182:	1c0a      	adds	r2, r1, #0
 8006184:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006186:	0021      	movs	r1, r4
 8006188:	187b      	adds	r3, r7, r1
 800618a:	881b      	ldrh	r3, [r3, #0]
 800618c:	2280      	movs	r2, #128	@ 0x80
 800618e:	4013      	ands	r3, r2
 8006190:	b29b      	uxth	r3, r3
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00c      	beq.n	80061b0 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006196:	187b      	adds	r3, r7, r1
 8006198:	881b      	ldrh	r3, [r3, #0]
 800619a:	2207      	movs	r2, #7
 800619c:	4013      	ands	r3, r2
 800619e:	1c5a      	adds	r2, r3, #1
 80061a0:	0013      	movs	r3, r2
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	189b      	adds	r3, r3, r2
 80061a6:	00db      	lsls	r3, r3, #3
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	18d3      	adds	r3, r2, r3
 80061ac:	617b      	str	r3, [r7, #20]
 80061ae:	e00b      	b.n	80061c8 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80061b0:	230a      	movs	r3, #10
 80061b2:	18fb      	adds	r3, r7, r3
 80061b4:	881a      	ldrh	r2, [r3, #0]
 80061b6:	0013      	movs	r3, r2
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	189b      	adds	r3, r3, r2
 80061bc:	00db      	lsls	r3, r3, #3
 80061be:	3369      	adds	r3, #105	@ 0x69
 80061c0:	33ff      	adds	r3, #255	@ 0xff
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	18d3      	adds	r3, r2, r3
 80061c6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80061c8:	2308      	movs	r3, #8
 80061ca:	18fb      	adds	r3, r7, r3
 80061cc:	881b      	ldrh	r3, [r3, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d107      	bne.n	80061e2 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	2200      	movs	r2, #0
 80061d6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	b29a      	uxth	r2, r3
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	80da      	strh	r2, [r3, #6]
 80061e0:	e00b      	b.n	80061fa <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	2201      	movs	r2, #1
 80061e6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	0c1b      	lsrs	r3, r3, #16
 80061f4:	b29a      	uxth	r2, r3
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	0018      	movs	r0, r3
 80061fe:	46bd      	mov	sp, r7
 8006200:	b007      	add	sp, #28
 8006202:	bd90      	pop	{r4, r7, pc}

08006204 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	23ba      	movs	r3, #186	@ 0xba
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	2101      	movs	r1, #1
 800621a:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	23b8      	movs	r3, #184	@ 0xb8
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	2100      	movs	r1, #0
 8006224:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2254      	movs	r2, #84	@ 0x54
 800622a:	5a9b      	ldrh	r3, [r3, r2]
 800622c:	b29b      	uxth	r3, r3
 800622e:	2201      	movs	r2, #1
 8006230:	4313      	orrs	r3, r2
 8006232:	b299      	uxth	r1, r3
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2254      	movs	r2, #84	@ 0x54
 8006238:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2254      	movs	r2, #84	@ 0x54
 800623e:	5a9b      	ldrh	r3, [r3, r2]
 8006240:	b29b      	uxth	r3, r3
 8006242:	2202      	movs	r2, #2
 8006244:	4313      	orrs	r3, r2
 8006246:	b299      	uxth	r1, r3
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2254      	movs	r2, #84	@ 0x54
 800624c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800624e:	2300      	movs	r3, #0
}
 8006250:	0018      	movs	r0, r3
 8006252:	46bd      	mov	sp, r7
 8006254:	b004      	add	sp, #16
 8006256:	bd80      	pop	{r7, pc}

08006258 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	000a      	movs	r2, r1
 8006262:	1cfb      	adds	r3, r7, #3
 8006264:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006266:	46c0      	nop			@ (mov r8, r8)
 8006268:	46bd      	mov	sp, r7
 800626a:	b002      	add	sp, #8
 800626c:	bd80      	pop	{r7, pc}
	...

08006270 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b088      	sub	sp, #32
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d101      	bne.n	8006282 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e305      	b.n	800688e <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2201      	movs	r2, #1
 8006288:	4013      	ands	r3, r2
 800628a:	d100      	bne.n	800628e <HAL_RCC_OscConfig+0x1e>
 800628c:	e08d      	b.n	80063aa <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800628e:	4bc5      	ldr	r3, [pc, #788]	@ (80065a4 <HAL_RCC_OscConfig+0x334>)
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	220c      	movs	r2, #12
 8006294:	4013      	ands	r3, r2
 8006296:	2b04      	cmp	r3, #4
 8006298:	d00e      	beq.n	80062b8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800629a:	4bc2      	ldr	r3, [pc, #776]	@ (80065a4 <HAL_RCC_OscConfig+0x334>)
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	220c      	movs	r2, #12
 80062a0:	4013      	ands	r3, r2
 80062a2:	2b08      	cmp	r3, #8
 80062a4:	d116      	bne.n	80062d4 <HAL_RCC_OscConfig+0x64>
 80062a6:	4bbf      	ldr	r3, [pc, #764]	@ (80065a4 <HAL_RCC_OscConfig+0x334>)
 80062a8:	685a      	ldr	r2, [r3, #4]
 80062aa:	23c0      	movs	r3, #192	@ 0xc0
 80062ac:	025b      	lsls	r3, r3, #9
 80062ae:	401a      	ands	r2, r3
 80062b0:	2380      	movs	r3, #128	@ 0x80
 80062b2:	025b      	lsls	r3, r3, #9
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d10d      	bne.n	80062d4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062b8:	4bba      	ldr	r3, [pc, #744]	@ (80065a4 <HAL_RCC_OscConfig+0x334>)
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	2380      	movs	r3, #128	@ 0x80
 80062be:	029b      	lsls	r3, r3, #10
 80062c0:	4013      	ands	r3, r2
 80062c2:	d100      	bne.n	80062c6 <HAL_RCC_OscConfig+0x56>
 80062c4:	e070      	b.n	80063a8 <HAL_RCC_OscConfig+0x138>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d000      	beq.n	80062d0 <HAL_RCC_OscConfig+0x60>
 80062ce:	e06b      	b.n	80063a8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e2dc      	b.n	800688e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d107      	bne.n	80062ec <HAL_RCC_OscConfig+0x7c>
 80062dc:	4bb1      	ldr	r3, [pc, #708]	@ (80065a4 <HAL_RCC_OscConfig+0x334>)
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	4bb0      	ldr	r3, [pc, #704]	@ (80065a4 <HAL_RCC_OscConfig+0x334>)
 80062e2:	2180      	movs	r1, #128	@ 0x80
 80062e4:	0249      	lsls	r1, r1, #9
 80062e6:	430a      	orrs	r2, r1
 80062e8:	601a      	str	r2, [r3, #0]
 80062ea:	e02f      	b.n	800634c <HAL_RCC_OscConfig+0xdc>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d10c      	bne.n	800630e <HAL_RCC_OscConfig+0x9e>
 80062f4:	4bab      	ldr	r3, [pc, #684]	@ (80065a4 <HAL_RCC_OscConfig+0x334>)
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	4baa      	ldr	r3, [pc, #680]	@ (80065a4 <HAL_RCC_OscConfig+0x334>)
 80062fa:	49ab      	ldr	r1, [pc, #684]	@ (80065a8 <HAL_RCC_OscConfig+0x338>)
 80062fc:	400a      	ands	r2, r1
 80062fe:	601a      	str	r2, [r3, #0]
 8006300:	4ba8      	ldr	r3, [pc, #672]	@ (80065a4 <HAL_RCC_OscConfig+0x334>)
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	4ba7      	ldr	r3, [pc, #668]	@ (80065a4 <HAL_RCC_OscConfig+0x334>)
 8006306:	49a9      	ldr	r1, [pc, #676]	@ (80065ac <HAL_RCC_OscConfig+0x33c>)
 8006308:	400a      	ands	r2, r1
 800630a:	601a      	str	r2, [r3, #0]
 800630c:	e01e      	b.n	800634c <HAL_RCC_OscConfig+0xdc>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	2b05      	cmp	r3, #5
 8006314:	d10e      	bne.n	8006334 <HAL_RCC_OscConfig+0xc4>
 8006316:	4ba3      	ldr	r3, [pc, #652]	@ (80065a4 <HAL_RCC_OscConfig+0x334>)
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	4ba2      	ldr	r3, [pc, #648]	@ (80065a4 <HAL_RCC_OscConfig+0x334>)
 800631c:	2180      	movs	r1, #128	@ 0x80
 800631e:	02c9      	lsls	r1, r1, #11
 8006320:	430a      	orrs	r2, r1
 8006322:	601a      	str	r2, [r3, #0]
 8006324:	4b9f      	ldr	r3, [pc, #636]	@ (80065a4 <HAL_RCC_OscConfig+0x334>)
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	4b9e      	ldr	r3, [pc, #632]	@ (80065a4 <HAL_RCC_OscConfig+0x334>)
 800632a:	2180      	movs	r1, #128	@ 0x80
 800632c:	0249      	lsls	r1, r1, #9
 800632e:	430a      	orrs	r2, r1
 8006330:	601a      	str	r2, [r3, #0]
 8006332:	e00b      	b.n	800634c <HAL_RCC_OscConfig+0xdc>
 8006334:	4b9b      	ldr	r3, [pc, #620]	@ (80065a4 <HAL_RCC_OscConfig+0x334>)
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	4b9a      	ldr	r3, [pc, #616]	@ (80065a4 <HAL_RCC_OscConfig+0x334>)
 800633a:	499b      	ldr	r1, [pc, #620]	@ (80065a8 <HAL_RCC_OscConfig+0x338>)
 800633c:	400a      	ands	r2, r1
 800633e:	601a      	str	r2, [r3, #0]
 8006340:	4b98      	ldr	r3, [pc, #608]	@ (80065a4 <HAL_RCC_OscConfig+0x334>)
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	4b97      	ldr	r3, [pc, #604]	@ (80065a4 <HAL_RCC_OscConfig+0x334>)
 8006346:	4999      	ldr	r1, [pc, #612]	@ (80065ac <HAL_RCC_OscConfig+0x33c>)
 8006348:	400a      	ands	r2, r1
 800634a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d014      	beq.n	800637e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006354:	f7fd fb98 	bl	8003a88 <HAL_GetTick>
 8006358:	0003      	movs	r3, r0
 800635a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800635c:	e008      	b.n	8006370 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800635e:	f7fd fb93 	bl	8003a88 <HAL_GetTick>
 8006362:	0002      	movs	r2, r0
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	2b64      	cmp	r3, #100	@ 0x64
 800636a:	d901      	bls.n	8006370 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800636c:	2303      	movs	r3, #3
 800636e:	e28e      	b.n	800688e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006370:	4b8c      	ldr	r3, [pc, #560]	@ (80065a4 <HAL_RCC_OscConfig+0x334>)
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	2380      	movs	r3, #128	@ 0x80
 8006376:	029b      	lsls	r3, r3, #10
 8006378:	4013      	ands	r3, r2
 800637a:	d0f0      	beq.n	800635e <HAL_RCC_OscConfig+0xee>
 800637c:	e015      	b.n	80063aa <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800637e:	f7fd fb83 	bl	8003a88 <HAL_GetTick>
 8006382:	0003      	movs	r3, r0
 8006384:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006386:	e008      	b.n	800639a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006388:	f7fd fb7e 	bl	8003a88 <HAL_GetTick>
 800638c:	0002      	movs	r2, r0
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	2b64      	cmp	r3, #100	@ 0x64
 8006394:	d901      	bls.n	800639a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e279      	b.n	800688e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800639a:	4b82      	ldr	r3, [pc, #520]	@ (80065a4 <HAL_RCC_OscConfig+0x334>)
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	2380      	movs	r3, #128	@ 0x80
 80063a0:	029b      	lsls	r3, r3, #10
 80063a2:	4013      	ands	r3, r2
 80063a4:	d1f0      	bne.n	8006388 <HAL_RCC_OscConfig+0x118>
 80063a6:	e000      	b.n	80063aa <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063a8:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2202      	movs	r2, #2
 80063b0:	4013      	ands	r3, r2
 80063b2:	d100      	bne.n	80063b6 <HAL_RCC_OscConfig+0x146>
 80063b4:	e06c      	b.n	8006490 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80063b6:	4b7b      	ldr	r3, [pc, #492]	@ (80065a4 <HAL_RCC_OscConfig+0x334>)
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	220c      	movs	r2, #12
 80063bc:	4013      	ands	r3, r2
 80063be:	d00e      	beq.n	80063de <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80063c0:	4b78      	ldr	r3, [pc, #480]	@ (80065a4 <HAL_RCC_OscConfig+0x334>)
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	220c      	movs	r2, #12
 80063c6:	4013      	ands	r3, r2
 80063c8:	2b08      	cmp	r3, #8
 80063ca:	d11f      	bne.n	800640c <HAL_RCC_OscConfig+0x19c>
 80063cc:	4b75      	ldr	r3, [pc, #468]	@ (80065a4 <HAL_RCC_OscConfig+0x334>)
 80063ce:	685a      	ldr	r2, [r3, #4]
 80063d0:	23c0      	movs	r3, #192	@ 0xc0
 80063d2:	025b      	lsls	r3, r3, #9
 80063d4:	401a      	ands	r2, r3
 80063d6:	2380      	movs	r3, #128	@ 0x80
 80063d8:	021b      	lsls	r3, r3, #8
 80063da:	429a      	cmp	r2, r3
 80063dc:	d116      	bne.n	800640c <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063de:	4b71      	ldr	r3, [pc, #452]	@ (80065a4 <HAL_RCC_OscConfig+0x334>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2202      	movs	r2, #2
 80063e4:	4013      	ands	r3, r2
 80063e6:	d005      	beq.n	80063f4 <HAL_RCC_OscConfig+0x184>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d001      	beq.n	80063f4 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e24c      	b.n	800688e <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063f4:	4b6b      	ldr	r3, [pc, #428]	@ (80065a4 <HAL_RCC_OscConfig+0x334>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	22f8      	movs	r2, #248	@ 0xf8
 80063fa:	4393      	bics	r3, r2
 80063fc:	0019      	movs	r1, r3
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	00da      	lsls	r2, r3, #3
 8006404:	4b67      	ldr	r3, [pc, #412]	@ (80065a4 <HAL_RCC_OscConfig+0x334>)
 8006406:	430a      	orrs	r2, r1
 8006408:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800640a:	e041      	b.n	8006490 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d024      	beq.n	800645e <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006414:	4b63      	ldr	r3, [pc, #396]	@ (80065a4 <HAL_RCC_OscConfig+0x334>)
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	4b62      	ldr	r3, [pc, #392]	@ (80065a4 <HAL_RCC_OscConfig+0x334>)
 800641a:	2101      	movs	r1, #1
 800641c:	430a      	orrs	r2, r1
 800641e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006420:	f7fd fb32 	bl	8003a88 <HAL_GetTick>
 8006424:	0003      	movs	r3, r0
 8006426:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006428:	e008      	b.n	800643c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800642a:	f7fd fb2d 	bl	8003a88 <HAL_GetTick>
 800642e:	0002      	movs	r2, r0
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	2b02      	cmp	r3, #2
 8006436:	d901      	bls.n	800643c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8006438:	2303      	movs	r3, #3
 800643a:	e228      	b.n	800688e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800643c:	4b59      	ldr	r3, [pc, #356]	@ (80065a4 <HAL_RCC_OscConfig+0x334>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2202      	movs	r2, #2
 8006442:	4013      	ands	r3, r2
 8006444:	d0f1      	beq.n	800642a <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006446:	4b57      	ldr	r3, [pc, #348]	@ (80065a4 <HAL_RCC_OscConfig+0x334>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	22f8      	movs	r2, #248	@ 0xf8
 800644c:	4393      	bics	r3, r2
 800644e:	0019      	movs	r1, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	00da      	lsls	r2, r3, #3
 8006456:	4b53      	ldr	r3, [pc, #332]	@ (80065a4 <HAL_RCC_OscConfig+0x334>)
 8006458:	430a      	orrs	r2, r1
 800645a:	601a      	str	r2, [r3, #0]
 800645c:	e018      	b.n	8006490 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800645e:	4b51      	ldr	r3, [pc, #324]	@ (80065a4 <HAL_RCC_OscConfig+0x334>)
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	4b50      	ldr	r3, [pc, #320]	@ (80065a4 <HAL_RCC_OscConfig+0x334>)
 8006464:	2101      	movs	r1, #1
 8006466:	438a      	bics	r2, r1
 8006468:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800646a:	f7fd fb0d 	bl	8003a88 <HAL_GetTick>
 800646e:	0003      	movs	r3, r0
 8006470:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006472:	e008      	b.n	8006486 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006474:	f7fd fb08 	bl	8003a88 <HAL_GetTick>
 8006478:	0002      	movs	r2, r0
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	1ad3      	subs	r3, r2, r3
 800647e:	2b02      	cmp	r3, #2
 8006480:	d901      	bls.n	8006486 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8006482:	2303      	movs	r3, #3
 8006484:	e203      	b.n	800688e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006486:	4b47      	ldr	r3, [pc, #284]	@ (80065a4 <HAL_RCC_OscConfig+0x334>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2202      	movs	r2, #2
 800648c:	4013      	ands	r3, r2
 800648e:	d1f1      	bne.n	8006474 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2208      	movs	r2, #8
 8006496:	4013      	ands	r3, r2
 8006498:	d036      	beq.n	8006508 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	69db      	ldr	r3, [r3, #28]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d019      	beq.n	80064d6 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064a2:	4b40      	ldr	r3, [pc, #256]	@ (80065a4 <HAL_RCC_OscConfig+0x334>)
 80064a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80064a6:	4b3f      	ldr	r3, [pc, #252]	@ (80065a4 <HAL_RCC_OscConfig+0x334>)
 80064a8:	2101      	movs	r1, #1
 80064aa:	430a      	orrs	r2, r1
 80064ac:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064ae:	f7fd faeb 	bl	8003a88 <HAL_GetTick>
 80064b2:	0003      	movs	r3, r0
 80064b4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064b6:	e008      	b.n	80064ca <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064b8:	f7fd fae6 	bl	8003a88 <HAL_GetTick>
 80064bc:	0002      	movs	r2, r0
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d901      	bls.n	80064ca <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 80064c6:	2303      	movs	r3, #3
 80064c8:	e1e1      	b.n	800688e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064ca:	4b36      	ldr	r3, [pc, #216]	@ (80065a4 <HAL_RCC_OscConfig+0x334>)
 80064cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ce:	2202      	movs	r2, #2
 80064d0:	4013      	ands	r3, r2
 80064d2:	d0f1      	beq.n	80064b8 <HAL_RCC_OscConfig+0x248>
 80064d4:	e018      	b.n	8006508 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064d6:	4b33      	ldr	r3, [pc, #204]	@ (80065a4 <HAL_RCC_OscConfig+0x334>)
 80064d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80064da:	4b32      	ldr	r3, [pc, #200]	@ (80065a4 <HAL_RCC_OscConfig+0x334>)
 80064dc:	2101      	movs	r1, #1
 80064de:	438a      	bics	r2, r1
 80064e0:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064e2:	f7fd fad1 	bl	8003a88 <HAL_GetTick>
 80064e6:	0003      	movs	r3, r0
 80064e8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064ea:	e008      	b.n	80064fe <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064ec:	f7fd facc 	bl	8003a88 <HAL_GetTick>
 80064f0:	0002      	movs	r2, r0
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	1ad3      	subs	r3, r2, r3
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d901      	bls.n	80064fe <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80064fa:	2303      	movs	r3, #3
 80064fc:	e1c7      	b.n	800688e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064fe:	4b29      	ldr	r3, [pc, #164]	@ (80065a4 <HAL_RCC_OscConfig+0x334>)
 8006500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006502:	2202      	movs	r2, #2
 8006504:	4013      	ands	r3, r2
 8006506:	d1f1      	bne.n	80064ec <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2204      	movs	r2, #4
 800650e:	4013      	ands	r3, r2
 8006510:	d100      	bne.n	8006514 <HAL_RCC_OscConfig+0x2a4>
 8006512:	e0b5      	b.n	8006680 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006514:	201f      	movs	r0, #31
 8006516:	183b      	adds	r3, r7, r0
 8006518:	2200      	movs	r2, #0
 800651a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800651c:	4b21      	ldr	r3, [pc, #132]	@ (80065a4 <HAL_RCC_OscConfig+0x334>)
 800651e:	69da      	ldr	r2, [r3, #28]
 8006520:	2380      	movs	r3, #128	@ 0x80
 8006522:	055b      	lsls	r3, r3, #21
 8006524:	4013      	ands	r3, r2
 8006526:	d110      	bne.n	800654a <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006528:	4b1e      	ldr	r3, [pc, #120]	@ (80065a4 <HAL_RCC_OscConfig+0x334>)
 800652a:	69da      	ldr	r2, [r3, #28]
 800652c:	4b1d      	ldr	r3, [pc, #116]	@ (80065a4 <HAL_RCC_OscConfig+0x334>)
 800652e:	2180      	movs	r1, #128	@ 0x80
 8006530:	0549      	lsls	r1, r1, #21
 8006532:	430a      	orrs	r2, r1
 8006534:	61da      	str	r2, [r3, #28]
 8006536:	4b1b      	ldr	r3, [pc, #108]	@ (80065a4 <HAL_RCC_OscConfig+0x334>)
 8006538:	69da      	ldr	r2, [r3, #28]
 800653a:	2380      	movs	r3, #128	@ 0x80
 800653c:	055b      	lsls	r3, r3, #21
 800653e:	4013      	ands	r3, r2
 8006540:	60fb      	str	r3, [r7, #12]
 8006542:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006544:	183b      	adds	r3, r7, r0
 8006546:	2201      	movs	r2, #1
 8006548:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800654a:	4b19      	ldr	r3, [pc, #100]	@ (80065b0 <HAL_RCC_OscConfig+0x340>)
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	2380      	movs	r3, #128	@ 0x80
 8006550:	005b      	lsls	r3, r3, #1
 8006552:	4013      	ands	r3, r2
 8006554:	d11a      	bne.n	800658c <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006556:	4b16      	ldr	r3, [pc, #88]	@ (80065b0 <HAL_RCC_OscConfig+0x340>)
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	4b15      	ldr	r3, [pc, #84]	@ (80065b0 <HAL_RCC_OscConfig+0x340>)
 800655c:	2180      	movs	r1, #128	@ 0x80
 800655e:	0049      	lsls	r1, r1, #1
 8006560:	430a      	orrs	r2, r1
 8006562:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006564:	f7fd fa90 	bl	8003a88 <HAL_GetTick>
 8006568:	0003      	movs	r3, r0
 800656a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800656c:	e008      	b.n	8006580 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800656e:	f7fd fa8b 	bl	8003a88 <HAL_GetTick>
 8006572:	0002      	movs	r2, r0
 8006574:	69bb      	ldr	r3, [r7, #24]
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	2b64      	cmp	r3, #100	@ 0x64
 800657a:	d901      	bls.n	8006580 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 800657c:	2303      	movs	r3, #3
 800657e:	e186      	b.n	800688e <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006580:	4b0b      	ldr	r3, [pc, #44]	@ (80065b0 <HAL_RCC_OscConfig+0x340>)
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	2380      	movs	r3, #128	@ 0x80
 8006586:	005b      	lsls	r3, r3, #1
 8006588:	4013      	ands	r3, r2
 800658a:	d0f0      	beq.n	800656e <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d10f      	bne.n	80065b4 <HAL_RCC_OscConfig+0x344>
 8006594:	4b03      	ldr	r3, [pc, #12]	@ (80065a4 <HAL_RCC_OscConfig+0x334>)
 8006596:	6a1a      	ldr	r2, [r3, #32]
 8006598:	4b02      	ldr	r3, [pc, #8]	@ (80065a4 <HAL_RCC_OscConfig+0x334>)
 800659a:	2101      	movs	r1, #1
 800659c:	430a      	orrs	r2, r1
 800659e:	621a      	str	r2, [r3, #32]
 80065a0:	e036      	b.n	8006610 <HAL_RCC_OscConfig+0x3a0>
 80065a2:	46c0      	nop			@ (mov r8, r8)
 80065a4:	40021000 	.word	0x40021000
 80065a8:	fffeffff 	.word	0xfffeffff
 80065ac:	fffbffff 	.word	0xfffbffff
 80065b0:	40007000 	.word	0x40007000
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d10c      	bne.n	80065d6 <HAL_RCC_OscConfig+0x366>
 80065bc:	4bb6      	ldr	r3, [pc, #728]	@ (8006898 <HAL_RCC_OscConfig+0x628>)
 80065be:	6a1a      	ldr	r2, [r3, #32]
 80065c0:	4bb5      	ldr	r3, [pc, #724]	@ (8006898 <HAL_RCC_OscConfig+0x628>)
 80065c2:	2101      	movs	r1, #1
 80065c4:	438a      	bics	r2, r1
 80065c6:	621a      	str	r2, [r3, #32]
 80065c8:	4bb3      	ldr	r3, [pc, #716]	@ (8006898 <HAL_RCC_OscConfig+0x628>)
 80065ca:	6a1a      	ldr	r2, [r3, #32]
 80065cc:	4bb2      	ldr	r3, [pc, #712]	@ (8006898 <HAL_RCC_OscConfig+0x628>)
 80065ce:	2104      	movs	r1, #4
 80065d0:	438a      	bics	r2, r1
 80065d2:	621a      	str	r2, [r3, #32]
 80065d4:	e01c      	b.n	8006610 <HAL_RCC_OscConfig+0x3a0>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	2b05      	cmp	r3, #5
 80065dc:	d10c      	bne.n	80065f8 <HAL_RCC_OscConfig+0x388>
 80065de:	4bae      	ldr	r3, [pc, #696]	@ (8006898 <HAL_RCC_OscConfig+0x628>)
 80065e0:	6a1a      	ldr	r2, [r3, #32]
 80065e2:	4bad      	ldr	r3, [pc, #692]	@ (8006898 <HAL_RCC_OscConfig+0x628>)
 80065e4:	2104      	movs	r1, #4
 80065e6:	430a      	orrs	r2, r1
 80065e8:	621a      	str	r2, [r3, #32]
 80065ea:	4bab      	ldr	r3, [pc, #684]	@ (8006898 <HAL_RCC_OscConfig+0x628>)
 80065ec:	6a1a      	ldr	r2, [r3, #32]
 80065ee:	4baa      	ldr	r3, [pc, #680]	@ (8006898 <HAL_RCC_OscConfig+0x628>)
 80065f0:	2101      	movs	r1, #1
 80065f2:	430a      	orrs	r2, r1
 80065f4:	621a      	str	r2, [r3, #32]
 80065f6:	e00b      	b.n	8006610 <HAL_RCC_OscConfig+0x3a0>
 80065f8:	4ba7      	ldr	r3, [pc, #668]	@ (8006898 <HAL_RCC_OscConfig+0x628>)
 80065fa:	6a1a      	ldr	r2, [r3, #32]
 80065fc:	4ba6      	ldr	r3, [pc, #664]	@ (8006898 <HAL_RCC_OscConfig+0x628>)
 80065fe:	2101      	movs	r1, #1
 8006600:	438a      	bics	r2, r1
 8006602:	621a      	str	r2, [r3, #32]
 8006604:	4ba4      	ldr	r3, [pc, #656]	@ (8006898 <HAL_RCC_OscConfig+0x628>)
 8006606:	6a1a      	ldr	r2, [r3, #32]
 8006608:	4ba3      	ldr	r3, [pc, #652]	@ (8006898 <HAL_RCC_OscConfig+0x628>)
 800660a:	2104      	movs	r1, #4
 800660c:	438a      	bics	r2, r1
 800660e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d014      	beq.n	8006642 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006618:	f7fd fa36 	bl	8003a88 <HAL_GetTick>
 800661c:	0003      	movs	r3, r0
 800661e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006620:	e009      	b.n	8006636 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006622:	f7fd fa31 	bl	8003a88 <HAL_GetTick>
 8006626:	0002      	movs	r2, r0
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	1ad3      	subs	r3, r2, r3
 800662c:	4a9b      	ldr	r2, [pc, #620]	@ (800689c <HAL_RCC_OscConfig+0x62c>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d901      	bls.n	8006636 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	e12b      	b.n	800688e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006636:	4b98      	ldr	r3, [pc, #608]	@ (8006898 <HAL_RCC_OscConfig+0x628>)
 8006638:	6a1b      	ldr	r3, [r3, #32]
 800663a:	2202      	movs	r2, #2
 800663c:	4013      	ands	r3, r2
 800663e:	d0f0      	beq.n	8006622 <HAL_RCC_OscConfig+0x3b2>
 8006640:	e013      	b.n	800666a <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006642:	f7fd fa21 	bl	8003a88 <HAL_GetTick>
 8006646:	0003      	movs	r3, r0
 8006648:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800664a:	e009      	b.n	8006660 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800664c:	f7fd fa1c 	bl	8003a88 <HAL_GetTick>
 8006650:	0002      	movs	r2, r0
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	4a91      	ldr	r2, [pc, #580]	@ (800689c <HAL_RCC_OscConfig+0x62c>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d901      	bls.n	8006660 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 800665c:	2303      	movs	r3, #3
 800665e:	e116      	b.n	800688e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006660:	4b8d      	ldr	r3, [pc, #564]	@ (8006898 <HAL_RCC_OscConfig+0x628>)
 8006662:	6a1b      	ldr	r3, [r3, #32]
 8006664:	2202      	movs	r2, #2
 8006666:	4013      	ands	r3, r2
 8006668:	d1f0      	bne.n	800664c <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800666a:	231f      	movs	r3, #31
 800666c:	18fb      	adds	r3, r7, r3
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	2b01      	cmp	r3, #1
 8006672:	d105      	bne.n	8006680 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006674:	4b88      	ldr	r3, [pc, #544]	@ (8006898 <HAL_RCC_OscConfig+0x628>)
 8006676:	69da      	ldr	r2, [r3, #28]
 8006678:	4b87      	ldr	r3, [pc, #540]	@ (8006898 <HAL_RCC_OscConfig+0x628>)
 800667a:	4989      	ldr	r1, [pc, #548]	@ (80068a0 <HAL_RCC_OscConfig+0x630>)
 800667c:	400a      	ands	r2, r1
 800667e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2210      	movs	r2, #16
 8006686:	4013      	ands	r3, r2
 8006688:	d063      	beq.n	8006752 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	695b      	ldr	r3, [r3, #20]
 800668e:	2b01      	cmp	r3, #1
 8006690:	d12a      	bne.n	80066e8 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006692:	4b81      	ldr	r3, [pc, #516]	@ (8006898 <HAL_RCC_OscConfig+0x628>)
 8006694:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006696:	4b80      	ldr	r3, [pc, #512]	@ (8006898 <HAL_RCC_OscConfig+0x628>)
 8006698:	2104      	movs	r1, #4
 800669a:	430a      	orrs	r2, r1
 800669c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800669e:	4b7e      	ldr	r3, [pc, #504]	@ (8006898 <HAL_RCC_OscConfig+0x628>)
 80066a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80066a2:	4b7d      	ldr	r3, [pc, #500]	@ (8006898 <HAL_RCC_OscConfig+0x628>)
 80066a4:	2101      	movs	r1, #1
 80066a6:	430a      	orrs	r2, r1
 80066a8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066aa:	f7fd f9ed 	bl	8003a88 <HAL_GetTick>
 80066ae:	0003      	movs	r3, r0
 80066b0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80066b2:	e008      	b.n	80066c6 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80066b4:	f7fd f9e8 	bl	8003a88 <HAL_GetTick>
 80066b8:	0002      	movs	r2, r0
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	1ad3      	subs	r3, r2, r3
 80066be:	2b02      	cmp	r3, #2
 80066c0:	d901      	bls.n	80066c6 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 80066c2:	2303      	movs	r3, #3
 80066c4:	e0e3      	b.n	800688e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80066c6:	4b74      	ldr	r3, [pc, #464]	@ (8006898 <HAL_RCC_OscConfig+0x628>)
 80066c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066ca:	2202      	movs	r2, #2
 80066cc:	4013      	ands	r3, r2
 80066ce:	d0f1      	beq.n	80066b4 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80066d0:	4b71      	ldr	r3, [pc, #452]	@ (8006898 <HAL_RCC_OscConfig+0x628>)
 80066d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066d4:	22f8      	movs	r2, #248	@ 0xf8
 80066d6:	4393      	bics	r3, r2
 80066d8:	0019      	movs	r1, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	00da      	lsls	r2, r3, #3
 80066e0:	4b6d      	ldr	r3, [pc, #436]	@ (8006898 <HAL_RCC_OscConfig+0x628>)
 80066e2:	430a      	orrs	r2, r1
 80066e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80066e6:	e034      	b.n	8006752 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	695b      	ldr	r3, [r3, #20]
 80066ec:	3305      	adds	r3, #5
 80066ee:	d111      	bne.n	8006714 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80066f0:	4b69      	ldr	r3, [pc, #420]	@ (8006898 <HAL_RCC_OscConfig+0x628>)
 80066f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80066f4:	4b68      	ldr	r3, [pc, #416]	@ (8006898 <HAL_RCC_OscConfig+0x628>)
 80066f6:	2104      	movs	r1, #4
 80066f8:	438a      	bics	r2, r1
 80066fa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80066fc:	4b66      	ldr	r3, [pc, #408]	@ (8006898 <HAL_RCC_OscConfig+0x628>)
 80066fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006700:	22f8      	movs	r2, #248	@ 0xf8
 8006702:	4393      	bics	r3, r2
 8006704:	0019      	movs	r1, r3
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	00da      	lsls	r2, r3, #3
 800670c:	4b62      	ldr	r3, [pc, #392]	@ (8006898 <HAL_RCC_OscConfig+0x628>)
 800670e:	430a      	orrs	r2, r1
 8006710:	635a      	str	r2, [r3, #52]	@ 0x34
 8006712:	e01e      	b.n	8006752 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006714:	4b60      	ldr	r3, [pc, #384]	@ (8006898 <HAL_RCC_OscConfig+0x628>)
 8006716:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006718:	4b5f      	ldr	r3, [pc, #380]	@ (8006898 <HAL_RCC_OscConfig+0x628>)
 800671a:	2104      	movs	r1, #4
 800671c:	430a      	orrs	r2, r1
 800671e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8006720:	4b5d      	ldr	r3, [pc, #372]	@ (8006898 <HAL_RCC_OscConfig+0x628>)
 8006722:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006724:	4b5c      	ldr	r3, [pc, #368]	@ (8006898 <HAL_RCC_OscConfig+0x628>)
 8006726:	2101      	movs	r1, #1
 8006728:	438a      	bics	r2, r1
 800672a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800672c:	f7fd f9ac 	bl	8003a88 <HAL_GetTick>
 8006730:	0003      	movs	r3, r0
 8006732:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006734:	e008      	b.n	8006748 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006736:	f7fd f9a7 	bl	8003a88 <HAL_GetTick>
 800673a:	0002      	movs	r2, r0
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	1ad3      	subs	r3, r2, r3
 8006740:	2b02      	cmp	r3, #2
 8006742:	d901      	bls.n	8006748 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	e0a2      	b.n	800688e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006748:	4b53      	ldr	r3, [pc, #332]	@ (8006898 <HAL_RCC_OscConfig+0x628>)
 800674a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800674c:	2202      	movs	r2, #2
 800674e:	4013      	ands	r3, r2
 8006750:	d1f1      	bne.n	8006736 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a1b      	ldr	r3, [r3, #32]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d100      	bne.n	800675c <HAL_RCC_OscConfig+0x4ec>
 800675a:	e097      	b.n	800688c <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800675c:	4b4e      	ldr	r3, [pc, #312]	@ (8006898 <HAL_RCC_OscConfig+0x628>)
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	220c      	movs	r2, #12
 8006762:	4013      	ands	r3, r2
 8006764:	2b08      	cmp	r3, #8
 8006766:	d100      	bne.n	800676a <HAL_RCC_OscConfig+0x4fa>
 8006768:	e06b      	b.n	8006842 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	2b02      	cmp	r3, #2
 8006770:	d14c      	bne.n	800680c <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006772:	4b49      	ldr	r3, [pc, #292]	@ (8006898 <HAL_RCC_OscConfig+0x628>)
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	4b48      	ldr	r3, [pc, #288]	@ (8006898 <HAL_RCC_OscConfig+0x628>)
 8006778:	494a      	ldr	r1, [pc, #296]	@ (80068a4 <HAL_RCC_OscConfig+0x634>)
 800677a:	400a      	ands	r2, r1
 800677c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800677e:	f7fd f983 	bl	8003a88 <HAL_GetTick>
 8006782:	0003      	movs	r3, r0
 8006784:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006786:	e008      	b.n	800679a <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006788:	f7fd f97e 	bl	8003a88 <HAL_GetTick>
 800678c:	0002      	movs	r2, r0
 800678e:	69bb      	ldr	r3, [r7, #24]
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	2b02      	cmp	r3, #2
 8006794:	d901      	bls.n	800679a <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8006796:	2303      	movs	r3, #3
 8006798:	e079      	b.n	800688e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800679a:	4b3f      	ldr	r3, [pc, #252]	@ (8006898 <HAL_RCC_OscConfig+0x628>)
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	2380      	movs	r3, #128	@ 0x80
 80067a0:	049b      	lsls	r3, r3, #18
 80067a2:	4013      	ands	r3, r2
 80067a4:	d1f0      	bne.n	8006788 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80067a6:	4b3c      	ldr	r3, [pc, #240]	@ (8006898 <HAL_RCC_OscConfig+0x628>)
 80067a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067aa:	220f      	movs	r2, #15
 80067ac:	4393      	bics	r3, r2
 80067ae:	0019      	movs	r1, r3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067b4:	4b38      	ldr	r3, [pc, #224]	@ (8006898 <HAL_RCC_OscConfig+0x628>)
 80067b6:	430a      	orrs	r2, r1
 80067b8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80067ba:	4b37      	ldr	r3, [pc, #220]	@ (8006898 <HAL_RCC_OscConfig+0x628>)
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	4a3a      	ldr	r2, [pc, #232]	@ (80068a8 <HAL_RCC_OscConfig+0x638>)
 80067c0:	4013      	ands	r3, r2
 80067c2:	0019      	movs	r1, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067cc:	431a      	orrs	r2, r3
 80067ce:	4b32      	ldr	r3, [pc, #200]	@ (8006898 <HAL_RCC_OscConfig+0x628>)
 80067d0:	430a      	orrs	r2, r1
 80067d2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067d4:	4b30      	ldr	r3, [pc, #192]	@ (8006898 <HAL_RCC_OscConfig+0x628>)
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	4b2f      	ldr	r3, [pc, #188]	@ (8006898 <HAL_RCC_OscConfig+0x628>)
 80067da:	2180      	movs	r1, #128	@ 0x80
 80067dc:	0449      	lsls	r1, r1, #17
 80067de:	430a      	orrs	r2, r1
 80067e0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067e2:	f7fd f951 	bl	8003a88 <HAL_GetTick>
 80067e6:	0003      	movs	r3, r0
 80067e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80067ea:	e008      	b.n	80067fe <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067ec:	f7fd f94c 	bl	8003a88 <HAL_GetTick>
 80067f0:	0002      	movs	r2, r0
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d901      	bls.n	80067fe <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e047      	b.n	800688e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80067fe:	4b26      	ldr	r3, [pc, #152]	@ (8006898 <HAL_RCC_OscConfig+0x628>)
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	2380      	movs	r3, #128	@ 0x80
 8006804:	049b      	lsls	r3, r3, #18
 8006806:	4013      	ands	r3, r2
 8006808:	d0f0      	beq.n	80067ec <HAL_RCC_OscConfig+0x57c>
 800680a:	e03f      	b.n	800688c <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800680c:	4b22      	ldr	r3, [pc, #136]	@ (8006898 <HAL_RCC_OscConfig+0x628>)
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	4b21      	ldr	r3, [pc, #132]	@ (8006898 <HAL_RCC_OscConfig+0x628>)
 8006812:	4924      	ldr	r1, [pc, #144]	@ (80068a4 <HAL_RCC_OscConfig+0x634>)
 8006814:	400a      	ands	r2, r1
 8006816:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006818:	f7fd f936 	bl	8003a88 <HAL_GetTick>
 800681c:	0003      	movs	r3, r0
 800681e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006820:	e008      	b.n	8006834 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006822:	f7fd f931 	bl	8003a88 <HAL_GetTick>
 8006826:	0002      	movs	r2, r0
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	2b02      	cmp	r3, #2
 800682e:	d901      	bls.n	8006834 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8006830:	2303      	movs	r3, #3
 8006832:	e02c      	b.n	800688e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006834:	4b18      	ldr	r3, [pc, #96]	@ (8006898 <HAL_RCC_OscConfig+0x628>)
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	2380      	movs	r3, #128	@ 0x80
 800683a:	049b      	lsls	r3, r3, #18
 800683c:	4013      	ands	r3, r2
 800683e:	d1f0      	bne.n	8006822 <HAL_RCC_OscConfig+0x5b2>
 8006840:	e024      	b.n	800688c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a1b      	ldr	r3, [r3, #32]
 8006846:	2b01      	cmp	r3, #1
 8006848:	d101      	bne.n	800684e <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e01f      	b.n	800688e <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800684e:	4b12      	ldr	r3, [pc, #72]	@ (8006898 <HAL_RCC_OscConfig+0x628>)
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8006854:	4b10      	ldr	r3, [pc, #64]	@ (8006898 <HAL_RCC_OscConfig+0x628>)
 8006856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006858:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800685a:	697a      	ldr	r2, [r7, #20]
 800685c:	23c0      	movs	r3, #192	@ 0xc0
 800685e:	025b      	lsls	r3, r3, #9
 8006860:	401a      	ands	r2, r3
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006866:	429a      	cmp	r2, r3
 8006868:	d10e      	bne.n	8006888 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	220f      	movs	r2, #15
 800686e:	401a      	ands	r2, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006874:	429a      	cmp	r2, r3
 8006876:	d107      	bne.n	8006888 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8006878:	697a      	ldr	r2, [r7, #20]
 800687a:	23f0      	movs	r3, #240	@ 0xf0
 800687c:	039b      	lsls	r3, r3, #14
 800687e:	401a      	ands	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006884:	429a      	cmp	r2, r3
 8006886:	d001      	beq.n	800688c <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	e000      	b.n	800688e <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 800688c:	2300      	movs	r3, #0
}
 800688e:	0018      	movs	r0, r3
 8006890:	46bd      	mov	sp, r7
 8006892:	b008      	add	sp, #32
 8006894:	bd80      	pop	{r7, pc}
 8006896:	46c0      	nop			@ (mov r8, r8)
 8006898:	40021000 	.word	0x40021000
 800689c:	00001388 	.word	0x00001388
 80068a0:	efffffff 	.word	0xefffffff
 80068a4:	feffffff 	.word	0xfeffffff
 80068a8:	ffc27fff 	.word	0xffc27fff

080068ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d101      	bne.n	80068c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e0b3      	b.n	8006a28 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80068c0:	4b5b      	ldr	r3, [pc, #364]	@ (8006a30 <HAL_RCC_ClockConfig+0x184>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2201      	movs	r2, #1
 80068c6:	4013      	ands	r3, r2
 80068c8:	683a      	ldr	r2, [r7, #0]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d911      	bls.n	80068f2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068ce:	4b58      	ldr	r3, [pc, #352]	@ (8006a30 <HAL_RCC_ClockConfig+0x184>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2201      	movs	r2, #1
 80068d4:	4393      	bics	r3, r2
 80068d6:	0019      	movs	r1, r3
 80068d8:	4b55      	ldr	r3, [pc, #340]	@ (8006a30 <HAL_RCC_ClockConfig+0x184>)
 80068da:	683a      	ldr	r2, [r7, #0]
 80068dc:	430a      	orrs	r2, r1
 80068de:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068e0:	4b53      	ldr	r3, [pc, #332]	@ (8006a30 <HAL_RCC_ClockConfig+0x184>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2201      	movs	r2, #1
 80068e6:	4013      	ands	r3, r2
 80068e8:	683a      	ldr	r2, [r7, #0]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d001      	beq.n	80068f2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e09a      	b.n	8006a28 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2202      	movs	r2, #2
 80068f8:	4013      	ands	r3, r2
 80068fa:	d015      	beq.n	8006928 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2204      	movs	r2, #4
 8006902:	4013      	ands	r3, r2
 8006904:	d006      	beq.n	8006914 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006906:	4b4b      	ldr	r3, [pc, #300]	@ (8006a34 <HAL_RCC_ClockConfig+0x188>)
 8006908:	685a      	ldr	r2, [r3, #4]
 800690a:	4b4a      	ldr	r3, [pc, #296]	@ (8006a34 <HAL_RCC_ClockConfig+0x188>)
 800690c:	21e0      	movs	r1, #224	@ 0xe0
 800690e:	00c9      	lsls	r1, r1, #3
 8006910:	430a      	orrs	r2, r1
 8006912:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006914:	4b47      	ldr	r3, [pc, #284]	@ (8006a34 <HAL_RCC_ClockConfig+0x188>)
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	22f0      	movs	r2, #240	@ 0xf0
 800691a:	4393      	bics	r3, r2
 800691c:	0019      	movs	r1, r3
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	689a      	ldr	r2, [r3, #8]
 8006922:	4b44      	ldr	r3, [pc, #272]	@ (8006a34 <HAL_RCC_ClockConfig+0x188>)
 8006924:	430a      	orrs	r2, r1
 8006926:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2201      	movs	r2, #1
 800692e:	4013      	ands	r3, r2
 8006930:	d040      	beq.n	80069b4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	2b01      	cmp	r3, #1
 8006938:	d107      	bne.n	800694a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800693a:	4b3e      	ldr	r3, [pc, #248]	@ (8006a34 <HAL_RCC_ClockConfig+0x188>)
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	2380      	movs	r3, #128	@ 0x80
 8006940:	029b      	lsls	r3, r3, #10
 8006942:	4013      	ands	r3, r2
 8006944:	d114      	bne.n	8006970 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e06e      	b.n	8006a28 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	2b02      	cmp	r3, #2
 8006950:	d107      	bne.n	8006962 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006952:	4b38      	ldr	r3, [pc, #224]	@ (8006a34 <HAL_RCC_ClockConfig+0x188>)
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	2380      	movs	r3, #128	@ 0x80
 8006958:	049b      	lsls	r3, r3, #18
 800695a:	4013      	ands	r3, r2
 800695c:	d108      	bne.n	8006970 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e062      	b.n	8006a28 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006962:	4b34      	ldr	r3, [pc, #208]	@ (8006a34 <HAL_RCC_ClockConfig+0x188>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2202      	movs	r2, #2
 8006968:	4013      	ands	r3, r2
 800696a:	d101      	bne.n	8006970 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	e05b      	b.n	8006a28 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006970:	4b30      	ldr	r3, [pc, #192]	@ (8006a34 <HAL_RCC_ClockConfig+0x188>)
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	2203      	movs	r2, #3
 8006976:	4393      	bics	r3, r2
 8006978:	0019      	movs	r1, r3
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	685a      	ldr	r2, [r3, #4]
 800697e:	4b2d      	ldr	r3, [pc, #180]	@ (8006a34 <HAL_RCC_ClockConfig+0x188>)
 8006980:	430a      	orrs	r2, r1
 8006982:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006984:	f7fd f880 	bl	8003a88 <HAL_GetTick>
 8006988:	0003      	movs	r3, r0
 800698a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800698c:	e009      	b.n	80069a2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800698e:	f7fd f87b 	bl	8003a88 <HAL_GetTick>
 8006992:	0002      	movs	r2, r0
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	1ad3      	subs	r3, r2, r3
 8006998:	4a27      	ldr	r2, [pc, #156]	@ (8006a38 <HAL_RCC_ClockConfig+0x18c>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d901      	bls.n	80069a2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800699e:	2303      	movs	r3, #3
 80069a0:	e042      	b.n	8006a28 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069a2:	4b24      	ldr	r3, [pc, #144]	@ (8006a34 <HAL_RCC_ClockConfig+0x188>)
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	220c      	movs	r2, #12
 80069a8:	401a      	ands	r2, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d1ec      	bne.n	800698e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80069b4:	4b1e      	ldr	r3, [pc, #120]	@ (8006a30 <HAL_RCC_ClockConfig+0x184>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2201      	movs	r2, #1
 80069ba:	4013      	ands	r3, r2
 80069bc:	683a      	ldr	r2, [r7, #0]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d211      	bcs.n	80069e6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069c2:	4b1b      	ldr	r3, [pc, #108]	@ (8006a30 <HAL_RCC_ClockConfig+0x184>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2201      	movs	r2, #1
 80069c8:	4393      	bics	r3, r2
 80069ca:	0019      	movs	r1, r3
 80069cc:	4b18      	ldr	r3, [pc, #96]	@ (8006a30 <HAL_RCC_ClockConfig+0x184>)
 80069ce:	683a      	ldr	r2, [r7, #0]
 80069d0:	430a      	orrs	r2, r1
 80069d2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069d4:	4b16      	ldr	r3, [pc, #88]	@ (8006a30 <HAL_RCC_ClockConfig+0x184>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2201      	movs	r2, #1
 80069da:	4013      	ands	r3, r2
 80069dc:	683a      	ldr	r2, [r7, #0]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d001      	beq.n	80069e6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	e020      	b.n	8006a28 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2204      	movs	r2, #4
 80069ec:	4013      	ands	r3, r2
 80069ee:	d009      	beq.n	8006a04 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80069f0:	4b10      	ldr	r3, [pc, #64]	@ (8006a34 <HAL_RCC_ClockConfig+0x188>)
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	4a11      	ldr	r2, [pc, #68]	@ (8006a3c <HAL_RCC_ClockConfig+0x190>)
 80069f6:	4013      	ands	r3, r2
 80069f8:	0019      	movs	r1, r3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	68da      	ldr	r2, [r3, #12]
 80069fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006a34 <HAL_RCC_ClockConfig+0x188>)
 8006a00:	430a      	orrs	r2, r1
 8006a02:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006a04:	f000 f820 	bl	8006a48 <HAL_RCC_GetSysClockFreq>
 8006a08:	0001      	movs	r1, r0
 8006a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8006a34 <HAL_RCC_ClockConfig+0x188>)
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	091b      	lsrs	r3, r3, #4
 8006a10:	220f      	movs	r2, #15
 8006a12:	4013      	ands	r3, r2
 8006a14:	4a0a      	ldr	r2, [pc, #40]	@ (8006a40 <HAL_RCC_ClockConfig+0x194>)
 8006a16:	5cd3      	ldrb	r3, [r2, r3]
 8006a18:	000a      	movs	r2, r1
 8006a1a:	40da      	lsrs	r2, r3
 8006a1c:	4b09      	ldr	r3, [pc, #36]	@ (8006a44 <HAL_RCC_ClockConfig+0x198>)
 8006a1e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006a20:	2003      	movs	r0, #3
 8006a22:	f7fc ffeb 	bl	80039fc <HAL_InitTick>
  
  return HAL_OK;
 8006a26:	2300      	movs	r3, #0
}
 8006a28:	0018      	movs	r0, r3
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	b004      	add	sp, #16
 8006a2e:	bd80      	pop	{r7, pc}
 8006a30:	40022000 	.word	0x40022000
 8006a34:	40021000 	.word	0x40021000
 8006a38:	00001388 	.word	0x00001388
 8006a3c:	fffff8ff 	.word	0xfffff8ff
 8006a40:	0800df2c 	.word	0x0800df2c
 8006a44:	20000000 	.word	0x20000000

08006a48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b086      	sub	sp, #24
 8006a4c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	60fb      	str	r3, [r7, #12]
 8006a52:	2300      	movs	r3, #0
 8006a54:	60bb      	str	r3, [r7, #8]
 8006a56:	2300      	movs	r3, #0
 8006a58:	617b      	str	r3, [r7, #20]
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8006a62:	4b21      	ldr	r3, [pc, #132]	@ (8006ae8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	220c      	movs	r2, #12
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	2b04      	cmp	r3, #4
 8006a70:	d002      	beq.n	8006a78 <HAL_RCC_GetSysClockFreq+0x30>
 8006a72:	2b08      	cmp	r3, #8
 8006a74:	d003      	beq.n	8006a7e <HAL_RCC_GetSysClockFreq+0x36>
 8006a76:	e02e      	b.n	8006ad6 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006a78:	4b1c      	ldr	r3, [pc, #112]	@ (8006aec <HAL_RCC_GetSysClockFreq+0xa4>)
 8006a7a:	613b      	str	r3, [r7, #16]
      break;
 8006a7c:	e02e      	b.n	8006adc <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	0c9b      	lsrs	r3, r3, #18
 8006a82:	220f      	movs	r2, #15
 8006a84:	4013      	ands	r3, r2
 8006a86:	4a1a      	ldr	r2, [pc, #104]	@ (8006af0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8006a88:	5cd3      	ldrb	r3, [r2, r3]
 8006a8a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8006a8c:	4b16      	ldr	r3, [pc, #88]	@ (8006ae8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a90:	220f      	movs	r2, #15
 8006a92:	4013      	ands	r3, r2
 8006a94:	4a17      	ldr	r2, [pc, #92]	@ (8006af4 <HAL_RCC_GetSysClockFreq+0xac>)
 8006a96:	5cd3      	ldrb	r3, [r2, r3]
 8006a98:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	23c0      	movs	r3, #192	@ 0xc0
 8006a9e:	025b      	lsls	r3, r3, #9
 8006aa0:	401a      	ands	r2, r3
 8006aa2:	2380      	movs	r3, #128	@ 0x80
 8006aa4:	025b      	lsls	r3, r3, #9
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d109      	bne.n	8006abe <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006aaa:	68b9      	ldr	r1, [r7, #8]
 8006aac:	480f      	ldr	r0, [pc, #60]	@ (8006aec <HAL_RCC_GetSysClockFreq+0xa4>)
 8006aae:	f7f9 fb2b 	bl	8000108 <__udivsi3>
 8006ab2:	0003      	movs	r3, r0
 8006ab4:	001a      	movs	r2, r3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4353      	muls	r3, r2
 8006aba:	617b      	str	r3, [r7, #20]
 8006abc:	e008      	b.n	8006ad0 <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006abe:	68b9      	ldr	r1, [r7, #8]
 8006ac0:	480d      	ldr	r0, [pc, #52]	@ (8006af8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006ac2:	f7f9 fb21 	bl	8000108 <__udivsi3>
 8006ac6:	0003      	movs	r3, r0
 8006ac8:	001a      	movs	r2, r3
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4353      	muls	r3, r2
 8006ace:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	613b      	str	r3, [r7, #16]
      break;
 8006ad4:	e002      	b.n	8006adc <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006ad6:	4b08      	ldr	r3, [pc, #32]	@ (8006af8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006ad8:	613b      	str	r3, [r7, #16]
      break;
 8006ada:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006adc:	693b      	ldr	r3, [r7, #16]
}
 8006ade:	0018      	movs	r0, r3
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	b006      	add	sp, #24
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	46c0      	nop			@ (mov r8, r8)
 8006ae8:	40021000 	.word	0x40021000
 8006aec:	00f42400 	.word	0x00f42400
 8006af0:	0800df44 	.word	0x0800df44
 8006af4:	0800df54 	.word	0x0800df54
 8006af8:	007a1200 	.word	0x007a1200

08006afc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b00:	4b02      	ldr	r3, [pc, #8]	@ (8006b0c <HAL_RCC_GetHCLKFreq+0x10>)
 8006b02:	681b      	ldr	r3, [r3, #0]
}
 8006b04:	0018      	movs	r0, r3
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	46c0      	nop			@ (mov r8, r8)
 8006b0c:	20000000 	.word	0x20000000

08006b10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8006b14:	f7ff fff2 	bl	8006afc <HAL_RCC_GetHCLKFreq>
 8006b18:	0001      	movs	r1, r0
 8006b1a:	4b06      	ldr	r3, [pc, #24]	@ (8006b34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	0a1b      	lsrs	r3, r3, #8
 8006b20:	2207      	movs	r2, #7
 8006b22:	4013      	ands	r3, r2
 8006b24:	4a04      	ldr	r2, [pc, #16]	@ (8006b38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006b26:	5cd3      	ldrb	r3, [r2, r3]
 8006b28:	40d9      	lsrs	r1, r3
 8006b2a:	000b      	movs	r3, r1
}    
 8006b2c:	0018      	movs	r0, r3
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	46c0      	nop			@ (mov r8, r8)
 8006b34:	40021000 	.word	0x40021000
 8006b38:	0800df3c 	.word	0x0800df3c

08006b3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b086      	sub	sp, #24
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006b44:	2300      	movs	r3, #0
 8006b46:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	2380      	movs	r3, #128	@ 0x80
 8006b52:	025b      	lsls	r3, r3, #9
 8006b54:	4013      	ands	r3, r2
 8006b56:	d100      	bne.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8006b58:	e08e      	b.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8006b5a:	2017      	movs	r0, #23
 8006b5c:	183b      	adds	r3, r7, r0
 8006b5e:	2200      	movs	r2, #0
 8006b60:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b62:	4b5f      	ldr	r3, [pc, #380]	@ (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006b64:	69da      	ldr	r2, [r3, #28]
 8006b66:	2380      	movs	r3, #128	@ 0x80
 8006b68:	055b      	lsls	r3, r3, #21
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	d110      	bne.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006b6e:	4b5c      	ldr	r3, [pc, #368]	@ (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006b70:	69da      	ldr	r2, [r3, #28]
 8006b72:	4b5b      	ldr	r3, [pc, #364]	@ (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006b74:	2180      	movs	r1, #128	@ 0x80
 8006b76:	0549      	lsls	r1, r1, #21
 8006b78:	430a      	orrs	r2, r1
 8006b7a:	61da      	str	r2, [r3, #28]
 8006b7c:	4b58      	ldr	r3, [pc, #352]	@ (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006b7e:	69da      	ldr	r2, [r3, #28]
 8006b80:	2380      	movs	r3, #128	@ 0x80
 8006b82:	055b      	lsls	r3, r3, #21
 8006b84:	4013      	ands	r3, r2
 8006b86:	60bb      	str	r3, [r7, #8]
 8006b88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b8a:	183b      	adds	r3, r7, r0
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b90:	4b54      	ldr	r3, [pc, #336]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	2380      	movs	r3, #128	@ 0x80
 8006b96:	005b      	lsls	r3, r3, #1
 8006b98:	4013      	ands	r3, r2
 8006b9a:	d11a      	bne.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b9c:	4b51      	ldr	r3, [pc, #324]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	4b50      	ldr	r3, [pc, #320]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006ba2:	2180      	movs	r1, #128	@ 0x80
 8006ba4:	0049      	lsls	r1, r1, #1
 8006ba6:	430a      	orrs	r2, r1
 8006ba8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006baa:	f7fc ff6d 	bl	8003a88 <HAL_GetTick>
 8006bae:	0003      	movs	r3, r0
 8006bb0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bb2:	e008      	b.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bb4:	f7fc ff68 	bl	8003a88 <HAL_GetTick>
 8006bb8:	0002      	movs	r2, r0
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	2b64      	cmp	r3, #100	@ 0x64
 8006bc0:	d901      	bls.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8006bc2:	2303      	movs	r3, #3
 8006bc4:	e087      	b.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bc6:	4b47      	ldr	r3, [pc, #284]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	2380      	movs	r3, #128	@ 0x80
 8006bcc:	005b      	lsls	r3, r3, #1
 8006bce:	4013      	ands	r3, r2
 8006bd0:	d0f0      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006bd2:	4b43      	ldr	r3, [pc, #268]	@ (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006bd4:	6a1a      	ldr	r2, [r3, #32]
 8006bd6:	23c0      	movs	r3, #192	@ 0xc0
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	4013      	ands	r3, r2
 8006bdc:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d034      	beq.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	685a      	ldr	r2, [r3, #4]
 8006be8:	23c0      	movs	r3, #192	@ 0xc0
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	4013      	ands	r3, r2
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d02c      	beq.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006bf4:	4b3a      	ldr	r3, [pc, #232]	@ (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006bf6:	6a1b      	ldr	r3, [r3, #32]
 8006bf8:	4a3b      	ldr	r2, [pc, #236]	@ (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006bfe:	4b38      	ldr	r3, [pc, #224]	@ (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006c00:	6a1a      	ldr	r2, [r3, #32]
 8006c02:	4b37      	ldr	r3, [pc, #220]	@ (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006c04:	2180      	movs	r1, #128	@ 0x80
 8006c06:	0249      	lsls	r1, r1, #9
 8006c08:	430a      	orrs	r2, r1
 8006c0a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c0c:	4b34      	ldr	r3, [pc, #208]	@ (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006c0e:	6a1a      	ldr	r2, [r3, #32]
 8006c10:	4b33      	ldr	r3, [pc, #204]	@ (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006c12:	4936      	ldr	r1, [pc, #216]	@ (8006cec <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006c14:	400a      	ands	r2, r1
 8006c16:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006c18:	4b31      	ldr	r3, [pc, #196]	@ (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006c1a:	68fa      	ldr	r2, [r7, #12]
 8006c1c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2201      	movs	r2, #1
 8006c22:	4013      	ands	r3, r2
 8006c24:	d013      	beq.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c26:	f7fc ff2f 	bl	8003a88 <HAL_GetTick>
 8006c2a:	0003      	movs	r3, r0
 8006c2c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c2e:	e009      	b.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c30:	f7fc ff2a 	bl	8003a88 <HAL_GetTick>
 8006c34:	0002      	movs	r2, r0
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	1ad3      	subs	r3, r2, r3
 8006c3a:	4a2d      	ldr	r2, [pc, #180]	@ (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d901      	bls.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006c40:	2303      	movs	r3, #3
 8006c42:	e048      	b.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c44:	4b26      	ldr	r3, [pc, #152]	@ (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006c46:	6a1b      	ldr	r3, [r3, #32]
 8006c48:	2202      	movs	r2, #2
 8006c4a:	4013      	ands	r3, r2
 8006c4c:	d0f0      	beq.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c4e:	4b24      	ldr	r3, [pc, #144]	@ (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006c50:	6a1b      	ldr	r3, [r3, #32]
 8006c52:	4a25      	ldr	r2, [pc, #148]	@ (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006c54:	4013      	ands	r3, r2
 8006c56:	0019      	movs	r1, r3
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	685a      	ldr	r2, [r3, #4]
 8006c5c:	4b20      	ldr	r3, [pc, #128]	@ (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006c5e:	430a      	orrs	r2, r1
 8006c60:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006c62:	2317      	movs	r3, #23
 8006c64:	18fb      	adds	r3, r7, r3
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d105      	bne.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c6c:	4b1c      	ldr	r3, [pc, #112]	@ (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006c6e:	69da      	ldr	r2, [r3, #28]
 8006c70:	4b1b      	ldr	r3, [pc, #108]	@ (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006c72:	4920      	ldr	r1, [pc, #128]	@ (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c74:	400a      	ands	r2, r1
 8006c76:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	4013      	ands	r3, r2
 8006c80:	d009      	beq.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006c82:	4b17      	ldr	r3, [pc, #92]	@ (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c86:	2203      	movs	r2, #3
 8006c88:	4393      	bics	r3, r2
 8006c8a:	0019      	movs	r1, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	689a      	ldr	r2, [r3, #8]
 8006c90:	4b13      	ldr	r3, [pc, #76]	@ (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006c92:	430a      	orrs	r2, r1
 8006c94:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2220      	movs	r2, #32
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	d009      	beq.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ca4:	2210      	movs	r2, #16
 8006ca6:	4393      	bics	r3, r2
 8006ca8:	0019      	movs	r1, r3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	68da      	ldr	r2, [r3, #12]
 8006cae:	4b0c      	ldr	r3, [pc, #48]	@ (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006cb0:	430a      	orrs	r2, r1
 8006cb2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	2380      	movs	r3, #128	@ 0x80
 8006cba:	029b      	lsls	r3, r3, #10
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	d009      	beq.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006cc0:	4b07      	ldr	r3, [pc, #28]	@ (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cc4:	2280      	movs	r2, #128	@ 0x80
 8006cc6:	4393      	bics	r3, r2
 8006cc8:	0019      	movs	r1, r3
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	691a      	ldr	r2, [r3, #16]
 8006cce:	4b04      	ldr	r3, [pc, #16]	@ (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006cd0:	430a      	orrs	r2, r1
 8006cd2:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	0018      	movs	r0, r3
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	b006      	add	sp, #24
 8006cdc:	bd80      	pop	{r7, pc}
 8006cde:	46c0      	nop			@ (mov r8, r8)
 8006ce0:	40021000 	.word	0x40021000
 8006ce4:	40007000 	.word	0x40007000
 8006ce8:	fffffcff 	.word	0xfffffcff
 8006cec:	fffeffff 	.word	0xfffeffff
 8006cf0:	00001388 	.word	0x00001388
 8006cf4:	efffffff 	.word	0xefffffff

08006cf8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d101      	bne.n	8006d0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	e0a8      	b.n	8006e5c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d109      	bne.n	8006d26 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	685a      	ldr	r2, [r3, #4]
 8006d16:	2382      	movs	r3, #130	@ 0x82
 8006d18:	005b      	lsls	r3, r3, #1
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d009      	beq.n	8006d32 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	61da      	str	r2, [r3, #28]
 8006d24:	e005      	b.n	8006d32 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	225d      	movs	r2, #93	@ 0x5d
 8006d3c:	5c9b      	ldrb	r3, [r3, r2]
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d107      	bne.n	8006d54 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	225c      	movs	r2, #92	@ 0x5c
 8006d48:	2100      	movs	r1, #0
 8006d4a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	0018      	movs	r0, r3
 8006d50:	f7fc fbf2 	bl	8003538 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	225d      	movs	r2, #93	@ 0x5d
 8006d58:	2102      	movs	r1, #2
 8006d5a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	2140      	movs	r1, #64	@ 0x40
 8006d68:	438a      	bics	r2, r1
 8006d6a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	68da      	ldr	r2, [r3, #12]
 8006d70:	23e0      	movs	r3, #224	@ 0xe0
 8006d72:	00db      	lsls	r3, r3, #3
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d902      	bls.n	8006d7e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	60fb      	str	r3, [r7, #12]
 8006d7c:	e002      	b.n	8006d84 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006d7e:	2380      	movs	r3, #128	@ 0x80
 8006d80:	015b      	lsls	r3, r3, #5
 8006d82:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	68da      	ldr	r2, [r3, #12]
 8006d88:	23f0      	movs	r3, #240	@ 0xf0
 8006d8a:	011b      	lsls	r3, r3, #4
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d008      	beq.n	8006da2 <HAL_SPI_Init+0xaa>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	68da      	ldr	r2, [r3, #12]
 8006d94:	23e0      	movs	r3, #224	@ 0xe0
 8006d96:	00db      	lsls	r3, r3, #3
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d002      	beq.n	8006da2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	685a      	ldr	r2, [r3, #4]
 8006da6:	2382      	movs	r3, #130	@ 0x82
 8006da8:	005b      	lsls	r3, r3, #1
 8006daa:	401a      	ands	r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6899      	ldr	r1, [r3, #8]
 8006db0:	2384      	movs	r3, #132	@ 0x84
 8006db2:	021b      	lsls	r3, r3, #8
 8006db4:	400b      	ands	r3, r1
 8006db6:	431a      	orrs	r2, r3
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	2102      	movs	r1, #2
 8006dbe:	400b      	ands	r3, r1
 8006dc0:	431a      	orrs	r2, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	695b      	ldr	r3, [r3, #20]
 8006dc6:	2101      	movs	r1, #1
 8006dc8:	400b      	ands	r3, r1
 8006dca:	431a      	orrs	r2, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6999      	ldr	r1, [r3, #24]
 8006dd0:	2380      	movs	r3, #128	@ 0x80
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	400b      	ands	r3, r1
 8006dd6:	431a      	orrs	r2, r3
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	69db      	ldr	r3, [r3, #28]
 8006ddc:	2138      	movs	r1, #56	@ 0x38
 8006dde:	400b      	ands	r3, r1
 8006de0:	431a      	orrs	r2, r3
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6a1b      	ldr	r3, [r3, #32]
 8006de6:	2180      	movs	r1, #128	@ 0x80
 8006de8:	400b      	ands	r3, r1
 8006dea:	431a      	orrs	r2, r3
 8006dec:	0011      	movs	r1, r2
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006df2:	2380      	movs	r3, #128	@ 0x80
 8006df4:	019b      	lsls	r3, r3, #6
 8006df6:	401a      	ands	r2, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	430a      	orrs	r2, r1
 8006dfe:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	699b      	ldr	r3, [r3, #24]
 8006e04:	0c1b      	lsrs	r3, r3, #16
 8006e06:	2204      	movs	r2, #4
 8006e08:	401a      	ands	r2, r3
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e0e:	2110      	movs	r1, #16
 8006e10:	400b      	ands	r3, r1
 8006e12:	431a      	orrs	r2, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e18:	2108      	movs	r1, #8
 8006e1a:	400b      	ands	r3, r1
 8006e1c:	431a      	orrs	r2, r3
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	68d9      	ldr	r1, [r3, #12]
 8006e22:	23f0      	movs	r3, #240	@ 0xf0
 8006e24:	011b      	lsls	r3, r3, #4
 8006e26:	400b      	ands	r3, r1
 8006e28:	431a      	orrs	r2, r3
 8006e2a:	0011      	movs	r1, r2
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	2380      	movs	r3, #128	@ 0x80
 8006e30:	015b      	lsls	r3, r3, #5
 8006e32:	401a      	ands	r2, r3
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	430a      	orrs	r2, r1
 8006e3a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	69da      	ldr	r2, [r3, #28]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4907      	ldr	r1, [pc, #28]	@ (8006e64 <HAL_SPI_Init+0x16c>)
 8006e48:	400a      	ands	r2, r1
 8006e4a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	225d      	movs	r2, #93	@ 0x5d
 8006e56:	2101      	movs	r1, #1
 8006e58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e5a:	2300      	movs	r3, #0
}
 8006e5c:	0018      	movs	r0, r3
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	b004      	add	sp, #16
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	fffff7ff 	.word	0xfffff7ff

08006e68 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b088      	sub	sp, #32
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	60b9      	str	r1, [r7, #8]
 8006e72:	603b      	str	r3, [r7, #0]
 8006e74:	1dbb      	adds	r3, r7, #6
 8006e76:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006e78:	231f      	movs	r3, #31
 8006e7a:	18fb      	adds	r3, r7, r3
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	225c      	movs	r2, #92	@ 0x5c
 8006e84:	5c9b      	ldrb	r3, [r3, r2]
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d101      	bne.n	8006e8e <HAL_SPI_Transmit+0x26>
 8006e8a:	2302      	movs	r3, #2
 8006e8c:	e147      	b.n	800711e <HAL_SPI_Transmit+0x2b6>
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	225c      	movs	r2, #92	@ 0x5c
 8006e92:	2101      	movs	r1, #1
 8006e94:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e96:	f7fc fdf7 	bl	8003a88 <HAL_GetTick>
 8006e9a:	0003      	movs	r3, r0
 8006e9c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006e9e:	2316      	movs	r3, #22
 8006ea0:	18fb      	adds	r3, r7, r3
 8006ea2:	1dba      	adds	r2, r7, #6
 8006ea4:	8812      	ldrh	r2, [r2, #0]
 8006ea6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	225d      	movs	r2, #93	@ 0x5d
 8006eac:	5c9b      	ldrb	r3, [r3, r2]
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d004      	beq.n	8006ebe <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8006eb4:	231f      	movs	r3, #31
 8006eb6:	18fb      	adds	r3, r7, r3
 8006eb8:	2202      	movs	r2, #2
 8006eba:	701a      	strb	r2, [r3, #0]
    goto error;
 8006ebc:	e128      	b.n	8007110 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d003      	beq.n	8006ecc <HAL_SPI_Transmit+0x64>
 8006ec4:	1dbb      	adds	r3, r7, #6
 8006ec6:	881b      	ldrh	r3, [r3, #0]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d104      	bne.n	8006ed6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8006ecc:	231f      	movs	r3, #31
 8006ece:	18fb      	adds	r3, r7, r3
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	701a      	strb	r2, [r3, #0]
    goto error;
 8006ed4:	e11c      	b.n	8007110 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	225d      	movs	r2, #93	@ 0x5d
 8006eda:	2103      	movs	r1, #3
 8006edc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	68ba      	ldr	r2, [r7, #8]
 8006ee8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	1dba      	adds	r2, r7, #6
 8006eee:	8812      	ldrh	r2, [r2, #0]
 8006ef0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	1dba      	adds	r2, r7, #6
 8006ef6:	8812      	ldrh	r2, [r2, #0]
 8006ef8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2200      	movs	r2, #0
 8006efe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2244      	movs	r2, #68	@ 0x44
 8006f04:	2100      	movs	r1, #0
 8006f06:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2246      	movs	r2, #70	@ 0x46
 8006f0c:	2100      	movs	r1, #0
 8006f0e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2200      	movs	r2, #0
 8006f14:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	689a      	ldr	r2, [r3, #8]
 8006f20:	2380      	movs	r3, #128	@ 0x80
 8006f22:	021b      	lsls	r3, r3, #8
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d110      	bne.n	8006f4a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	2140      	movs	r1, #64	@ 0x40
 8006f34:	438a      	bics	r2, r1
 8006f36:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2180      	movs	r1, #128	@ 0x80
 8006f44:	01c9      	lsls	r1, r1, #7
 8006f46:	430a      	orrs	r2, r1
 8006f48:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2240      	movs	r2, #64	@ 0x40
 8006f52:	4013      	ands	r3, r2
 8006f54:	2b40      	cmp	r3, #64	@ 0x40
 8006f56:	d007      	beq.n	8006f68 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2140      	movs	r1, #64	@ 0x40
 8006f64:	430a      	orrs	r2, r1
 8006f66:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	68da      	ldr	r2, [r3, #12]
 8006f6c:	23e0      	movs	r3, #224	@ 0xe0
 8006f6e:	00db      	lsls	r3, r3, #3
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d952      	bls.n	800701a <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d004      	beq.n	8006f86 <HAL_SPI_Transmit+0x11e>
 8006f7c:	2316      	movs	r3, #22
 8006f7e:	18fb      	adds	r3, r7, r3
 8006f80:	881b      	ldrh	r3, [r3, #0]
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d143      	bne.n	800700e <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f8a:	881a      	ldrh	r2, [r3, #0]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f96:	1c9a      	adds	r2, r3, #2
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	b29a      	uxth	r2, r3
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006faa:	e030      	b.n	800700e <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	2202      	movs	r2, #2
 8006fb4:	4013      	ands	r3, r2
 8006fb6:	2b02      	cmp	r3, #2
 8006fb8:	d112      	bne.n	8006fe0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fbe:	881a      	ldrh	r2, [r3, #0]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fca:	1c9a      	adds	r2, r3, #2
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	3b01      	subs	r3, #1
 8006fd8:	b29a      	uxth	r2, r3
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006fde:	e016      	b.n	800700e <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fe0:	f7fc fd52 	bl	8003a88 <HAL_GetTick>
 8006fe4:	0002      	movs	r2, r0
 8006fe6:	69bb      	ldr	r3, [r7, #24]
 8006fe8:	1ad3      	subs	r3, r2, r3
 8006fea:	683a      	ldr	r2, [r7, #0]
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d802      	bhi.n	8006ff6 <HAL_SPI_Transmit+0x18e>
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	d102      	bne.n	8006ffc <HAL_SPI_Transmit+0x194>
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d108      	bne.n	800700e <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8006ffc:	231f      	movs	r3, #31
 8006ffe:	18fb      	adds	r3, r7, r3
 8007000:	2203      	movs	r2, #3
 8007002:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	225d      	movs	r2, #93	@ 0x5d
 8007008:	2101      	movs	r1, #1
 800700a:	5499      	strb	r1, [r3, r2]
          goto error;
 800700c:	e080      	b.n	8007110 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007012:	b29b      	uxth	r3, r3
 8007014:	2b00      	cmp	r3, #0
 8007016:	d1c9      	bne.n	8006fac <HAL_SPI_Transmit+0x144>
 8007018:	e053      	b.n	80070c2 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d004      	beq.n	800702c <HAL_SPI_Transmit+0x1c4>
 8007022:	2316      	movs	r3, #22
 8007024:	18fb      	adds	r3, r7, r3
 8007026:	881b      	ldrh	r3, [r3, #0]
 8007028:	2b01      	cmp	r3, #1
 800702a:	d145      	bne.n	80070b8 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	330c      	adds	r3, #12
 8007036:	7812      	ldrb	r2, [r2, #0]
 8007038:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800703e:	1c5a      	adds	r2, r3, #1
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007048:	b29b      	uxth	r3, r3
 800704a:	3b01      	subs	r3, #1
 800704c:	b29a      	uxth	r2, r3
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8007052:	e031      	b.n	80070b8 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	2202      	movs	r2, #2
 800705c:	4013      	ands	r3, r2
 800705e:	2b02      	cmp	r3, #2
 8007060:	d113      	bne.n	800708a <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	330c      	adds	r3, #12
 800706c:	7812      	ldrb	r2, [r2, #0]
 800706e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007074:	1c5a      	adds	r2, r3, #1
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800707e:	b29b      	uxth	r3, r3
 8007080:	3b01      	subs	r3, #1
 8007082:	b29a      	uxth	r2, r3
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007088:	e016      	b.n	80070b8 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800708a:	f7fc fcfd 	bl	8003a88 <HAL_GetTick>
 800708e:	0002      	movs	r2, r0
 8007090:	69bb      	ldr	r3, [r7, #24]
 8007092:	1ad3      	subs	r3, r2, r3
 8007094:	683a      	ldr	r2, [r7, #0]
 8007096:	429a      	cmp	r2, r3
 8007098:	d802      	bhi.n	80070a0 <HAL_SPI_Transmit+0x238>
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	3301      	adds	r3, #1
 800709e:	d102      	bne.n	80070a6 <HAL_SPI_Transmit+0x23e>
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d108      	bne.n	80070b8 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 80070a6:	231f      	movs	r3, #31
 80070a8:	18fb      	adds	r3, r7, r3
 80070aa:	2203      	movs	r2, #3
 80070ac:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	225d      	movs	r2, #93	@ 0x5d
 80070b2:	2101      	movs	r1, #1
 80070b4:	5499      	strb	r1, [r3, r2]
          goto error;
 80070b6:	e02b      	b.n	8007110 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070bc:	b29b      	uxth	r3, r3
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d1c8      	bne.n	8007054 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80070c2:	69ba      	ldr	r2, [r7, #24]
 80070c4:	6839      	ldr	r1, [r7, #0]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	0018      	movs	r0, r3
 80070ca:	f000 f95d 	bl	8007388 <SPI_EndRxTxTransaction>
 80070ce:	1e03      	subs	r3, r0, #0
 80070d0:	d002      	beq.n	80070d8 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2220      	movs	r2, #32
 80070d6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d10a      	bne.n	80070f6 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80070e0:	2300      	movs	r3, #0
 80070e2:	613b      	str	r3, [r7, #16]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	68db      	ldr	r3, [r3, #12]
 80070ea:	613b      	str	r3, [r7, #16]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	613b      	str	r3, [r7, #16]
 80070f4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d004      	beq.n	8007108 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 80070fe:	231f      	movs	r3, #31
 8007100:	18fb      	adds	r3, r7, r3
 8007102:	2201      	movs	r2, #1
 8007104:	701a      	strb	r2, [r3, #0]
 8007106:	e003      	b.n	8007110 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	225d      	movs	r2, #93	@ 0x5d
 800710c:	2101      	movs	r1, #1
 800710e:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	225c      	movs	r2, #92	@ 0x5c
 8007114:	2100      	movs	r1, #0
 8007116:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007118:	231f      	movs	r3, #31
 800711a:	18fb      	adds	r3, r7, r3
 800711c:	781b      	ldrb	r3, [r3, #0]
}
 800711e:	0018      	movs	r0, r3
 8007120:	46bd      	mov	sp, r7
 8007122:	b008      	add	sp, #32
 8007124:	bd80      	pop	{r7, pc}
	...

08007128 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b088      	sub	sp, #32
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	60b9      	str	r1, [r7, #8]
 8007132:	603b      	str	r3, [r7, #0]
 8007134:	1dfb      	adds	r3, r7, #7
 8007136:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007138:	f7fc fca6 	bl	8003a88 <HAL_GetTick>
 800713c:	0002      	movs	r2, r0
 800713e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007140:	1a9b      	subs	r3, r3, r2
 8007142:	683a      	ldr	r2, [r7, #0]
 8007144:	18d3      	adds	r3, r2, r3
 8007146:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007148:	f7fc fc9e 	bl	8003a88 <HAL_GetTick>
 800714c:	0003      	movs	r3, r0
 800714e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007150:	4b3a      	ldr	r3, [pc, #232]	@ (800723c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	015b      	lsls	r3, r3, #5
 8007156:	0d1b      	lsrs	r3, r3, #20
 8007158:	69fa      	ldr	r2, [r7, #28]
 800715a:	4353      	muls	r3, r2
 800715c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800715e:	e058      	b.n	8007212 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	3301      	adds	r3, #1
 8007164:	d055      	beq.n	8007212 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007166:	f7fc fc8f 	bl	8003a88 <HAL_GetTick>
 800716a:	0002      	movs	r2, r0
 800716c:	69bb      	ldr	r3, [r7, #24]
 800716e:	1ad3      	subs	r3, r2, r3
 8007170:	69fa      	ldr	r2, [r7, #28]
 8007172:	429a      	cmp	r2, r3
 8007174:	d902      	bls.n	800717c <SPI_WaitFlagStateUntilTimeout+0x54>
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d142      	bne.n	8007202 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	685a      	ldr	r2, [r3, #4]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	21e0      	movs	r1, #224	@ 0xe0
 8007188:	438a      	bics	r2, r1
 800718a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	685a      	ldr	r2, [r3, #4]
 8007190:	2382      	movs	r3, #130	@ 0x82
 8007192:	005b      	lsls	r3, r3, #1
 8007194:	429a      	cmp	r2, r3
 8007196:	d113      	bne.n	80071c0 <SPI_WaitFlagStateUntilTimeout+0x98>
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	689a      	ldr	r2, [r3, #8]
 800719c:	2380      	movs	r3, #128	@ 0x80
 800719e:	021b      	lsls	r3, r3, #8
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d005      	beq.n	80071b0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	689a      	ldr	r2, [r3, #8]
 80071a8:	2380      	movs	r3, #128	@ 0x80
 80071aa:	00db      	lsls	r3, r3, #3
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d107      	bne.n	80071c0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2140      	movs	r1, #64	@ 0x40
 80071bc:	438a      	bics	r2, r1
 80071be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80071c4:	2380      	movs	r3, #128	@ 0x80
 80071c6:	019b      	lsls	r3, r3, #6
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d110      	bne.n	80071ee <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	491a      	ldr	r1, [pc, #104]	@ (8007240 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80071d8:	400a      	ands	r2, r1
 80071da:	601a      	str	r2, [r3, #0]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2180      	movs	r1, #128	@ 0x80
 80071e8:	0189      	lsls	r1, r1, #6
 80071ea:	430a      	orrs	r2, r1
 80071ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	225d      	movs	r2, #93	@ 0x5d
 80071f2:	2101      	movs	r1, #1
 80071f4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	225c      	movs	r2, #92	@ 0x5c
 80071fa:	2100      	movs	r1, #0
 80071fc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80071fe:	2303      	movs	r3, #3
 8007200:	e017      	b.n	8007232 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d101      	bne.n	800720c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8007208:	2300      	movs	r3, #0
 800720a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	3b01      	subs	r3, #1
 8007210:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	68ba      	ldr	r2, [r7, #8]
 800721a:	4013      	ands	r3, r2
 800721c:	68ba      	ldr	r2, [r7, #8]
 800721e:	1ad3      	subs	r3, r2, r3
 8007220:	425a      	negs	r2, r3
 8007222:	4153      	adcs	r3, r2
 8007224:	b2db      	uxtb	r3, r3
 8007226:	001a      	movs	r2, r3
 8007228:	1dfb      	adds	r3, r7, #7
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	429a      	cmp	r2, r3
 800722e:	d197      	bne.n	8007160 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007230:	2300      	movs	r3, #0
}
 8007232:	0018      	movs	r0, r3
 8007234:	46bd      	mov	sp, r7
 8007236:	b008      	add	sp, #32
 8007238:	bd80      	pop	{r7, pc}
 800723a:	46c0      	nop			@ (mov r8, r8)
 800723c:	20000000 	.word	0x20000000
 8007240:	ffffdfff 	.word	0xffffdfff

08007244 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b08a      	sub	sp, #40	@ 0x28
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	607a      	str	r2, [r7, #4]
 8007250:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007252:	2317      	movs	r3, #23
 8007254:	18fb      	adds	r3, r7, r3
 8007256:	2200      	movs	r2, #0
 8007258:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800725a:	f7fc fc15 	bl	8003a88 <HAL_GetTick>
 800725e:	0002      	movs	r2, r0
 8007260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007262:	1a9b      	subs	r3, r3, r2
 8007264:	683a      	ldr	r2, [r7, #0]
 8007266:	18d3      	adds	r3, r2, r3
 8007268:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800726a:	f7fc fc0d 	bl	8003a88 <HAL_GetTick>
 800726e:	0003      	movs	r3, r0
 8007270:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	330c      	adds	r3, #12
 8007278:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800727a:	4b41      	ldr	r3, [pc, #260]	@ (8007380 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	0013      	movs	r3, r2
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	189b      	adds	r3, r3, r2
 8007284:	00da      	lsls	r2, r3, #3
 8007286:	1ad3      	subs	r3, r2, r3
 8007288:	0d1b      	lsrs	r3, r3, #20
 800728a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800728c:	4353      	muls	r3, r2
 800728e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007290:	e068      	b.n	8007364 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007292:	68ba      	ldr	r2, [r7, #8]
 8007294:	23c0      	movs	r3, #192	@ 0xc0
 8007296:	00db      	lsls	r3, r3, #3
 8007298:	429a      	cmp	r2, r3
 800729a:	d10a      	bne.n	80072b2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d107      	bne.n	80072b2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	b2da      	uxtb	r2, r3
 80072a8:	2117      	movs	r1, #23
 80072aa:	187b      	adds	r3, r7, r1
 80072ac:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80072ae:	187b      	adds	r3, r7, r1
 80072b0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	3301      	adds	r3, #1
 80072b6:	d055      	beq.n	8007364 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80072b8:	f7fc fbe6 	bl	8003a88 <HAL_GetTick>
 80072bc:	0002      	movs	r2, r0
 80072be:	6a3b      	ldr	r3, [r7, #32]
 80072c0:	1ad3      	subs	r3, r2, r3
 80072c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d902      	bls.n	80072ce <SPI_WaitFifoStateUntilTimeout+0x8a>
 80072c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d142      	bne.n	8007354 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	685a      	ldr	r2, [r3, #4]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	21e0      	movs	r1, #224	@ 0xe0
 80072da:	438a      	bics	r2, r1
 80072dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	685a      	ldr	r2, [r3, #4]
 80072e2:	2382      	movs	r3, #130	@ 0x82
 80072e4:	005b      	lsls	r3, r3, #1
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d113      	bne.n	8007312 <SPI_WaitFifoStateUntilTimeout+0xce>
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	689a      	ldr	r2, [r3, #8]
 80072ee:	2380      	movs	r3, #128	@ 0x80
 80072f0:	021b      	lsls	r3, r3, #8
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d005      	beq.n	8007302 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	689a      	ldr	r2, [r3, #8]
 80072fa:	2380      	movs	r3, #128	@ 0x80
 80072fc:	00db      	lsls	r3, r3, #3
 80072fe:	429a      	cmp	r2, r3
 8007300:	d107      	bne.n	8007312 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	2140      	movs	r1, #64	@ 0x40
 800730e:	438a      	bics	r2, r1
 8007310:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007316:	2380      	movs	r3, #128	@ 0x80
 8007318:	019b      	lsls	r3, r3, #6
 800731a:	429a      	cmp	r2, r3
 800731c:	d110      	bne.n	8007340 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4916      	ldr	r1, [pc, #88]	@ (8007384 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800732a:	400a      	ands	r2, r1
 800732c:	601a      	str	r2, [r3, #0]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	2180      	movs	r1, #128	@ 0x80
 800733a:	0189      	lsls	r1, r1, #6
 800733c:	430a      	orrs	r2, r1
 800733e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	225d      	movs	r2, #93	@ 0x5d
 8007344:	2101      	movs	r1, #1
 8007346:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	225c      	movs	r2, #92	@ 0x5c
 800734c:	2100      	movs	r1, #0
 800734e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007350:	2303      	movs	r3, #3
 8007352:	e010      	b.n	8007376 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007354:	69bb      	ldr	r3, [r7, #24]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d101      	bne.n	800735e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800735a:	2300      	movs	r3, #0
 800735c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800735e:	69bb      	ldr	r3, [r7, #24]
 8007360:	3b01      	subs	r3, #1
 8007362:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	68ba      	ldr	r2, [r7, #8]
 800736c:	4013      	ands	r3, r2
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	429a      	cmp	r2, r3
 8007372:	d18e      	bne.n	8007292 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8007374:	2300      	movs	r3, #0
}
 8007376:	0018      	movs	r0, r3
 8007378:	46bd      	mov	sp, r7
 800737a:	b00a      	add	sp, #40	@ 0x28
 800737c:	bd80      	pop	{r7, pc}
 800737e:	46c0      	nop			@ (mov r8, r8)
 8007380:	20000000 	.word	0x20000000
 8007384:	ffffdfff 	.word	0xffffdfff

08007388 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b086      	sub	sp, #24
 800738c:	af02      	add	r7, sp, #8
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007394:	68ba      	ldr	r2, [r7, #8]
 8007396:	23c0      	movs	r3, #192	@ 0xc0
 8007398:	0159      	lsls	r1, r3, #5
 800739a:	68f8      	ldr	r0, [r7, #12]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	9300      	str	r3, [sp, #0]
 80073a0:	0013      	movs	r3, r2
 80073a2:	2200      	movs	r2, #0
 80073a4:	f7ff ff4e 	bl	8007244 <SPI_WaitFifoStateUntilTimeout>
 80073a8:	1e03      	subs	r3, r0, #0
 80073aa:	d007      	beq.n	80073bc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073b0:	2220      	movs	r2, #32
 80073b2:	431a      	orrs	r2, r3
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80073b8:	2303      	movs	r3, #3
 80073ba:	e027      	b.n	800740c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80073bc:	68ba      	ldr	r2, [r7, #8]
 80073be:	68f8      	ldr	r0, [r7, #12]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	9300      	str	r3, [sp, #0]
 80073c4:	0013      	movs	r3, r2
 80073c6:	2200      	movs	r2, #0
 80073c8:	2180      	movs	r1, #128	@ 0x80
 80073ca:	f7ff fead 	bl	8007128 <SPI_WaitFlagStateUntilTimeout>
 80073ce:	1e03      	subs	r3, r0, #0
 80073d0:	d007      	beq.n	80073e2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073d6:	2220      	movs	r2, #32
 80073d8:	431a      	orrs	r2, r3
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80073de:	2303      	movs	r3, #3
 80073e0:	e014      	b.n	800740c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80073e2:	68ba      	ldr	r2, [r7, #8]
 80073e4:	23c0      	movs	r3, #192	@ 0xc0
 80073e6:	00d9      	lsls	r1, r3, #3
 80073e8:	68f8      	ldr	r0, [r7, #12]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	9300      	str	r3, [sp, #0]
 80073ee:	0013      	movs	r3, r2
 80073f0:	2200      	movs	r2, #0
 80073f2:	f7ff ff27 	bl	8007244 <SPI_WaitFifoStateUntilTimeout>
 80073f6:	1e03      	subs	r3, r0, #0
 80073f8:	d007      	beq.n	800740a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073fe:	2220      	movs	r2, #32
 8007400:	431a      	orrs	r2, r3
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007406:	2303      	movs	r3, #3
 8007408:	e000      	b.n	800740c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800740a:	2300      	movs	r3, #0
}
 800740c:	0018      	movs	r0, r3
 800740e:	46bd      	mov	sp, r7
 8007410:	b004      	add	sp, #16
 8007412:	bd80      	pop	{r7, pc}

08007414 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b082      	sub	sp, #8
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d101      	bne.n	8007426 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	e042      	b.n	80074ac <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	223d      	movs	r2, #61	@ 0x3d
 800742a:	5c9b      	ldrb	r3, [r3, r2]
 800742c:	b2db      	uxtb	r3, r3
 800742e:	2b00      	cmp	r3, #0
 8007430:	d107      	bne.n	8007442 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	223c      	movs	r2, #60	@ 0x3c
 8007436:	2100      	movs	r1, #0
 8007438:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	0018      	movs	r0, r3
 800743e:	f7fc f8c7 	bl	80035d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	223d      	movs	r2, #61	@ 0x3d
 8007446:	2102      	movs	r1, #2
 8007448:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	3304      	adds	r3, #4
 8007452:	0019      	movs	r1, r3
 8007454:	0010      	movs	r0, r2
 8007456:	f000 fc81 	bl	8007d5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2246      	movs	r2, #70	@ 0x46
 800745e:	2101      	movs	r1, #1
 8007460:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	223e      	movs	r2, #62	@ 0x3e
 8007466:	2101      	movs	r1, #1
 8007468:	5499      	strb	r1, [r3, r2]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	223f      	movs	r2, #63	@ 0x3f
 800746e:	2101      	movs	r1, #1
 8007470:	5499      	strb	r1, [r3, r2]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2240      	movs	r2, #64	@ 0x40
 8007476:	2101      	movs	r1, #1
 8007478:	5499      	strb	r1, [r3, r2]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2241      	movs	r2, #65	@ 0x41
 800747e:	2101      	movs	r1, #1
 8007480:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2242      	movs	r2, #66	@ 0x42
 8007486:	2101      	movs	r1, #1
 8007488:	5499      	strb	r1, [r3, r2]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2243      	movs	r2, #67	@ 0x43
 800748e:	2101      	movs	r1, #1
 8007490:	5499      	strb	r1, [r3, r2]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2244      	movs	r2, #68	@ 0x44
 8007496:	2101      	movs	r1, #1
 8007498:	5499      	strb	r1, [r3, r2]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2245      	movs	r2, #69	@ 0x45
 800749e:	2101      	movs	r1, #1
 80074a0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	223d      	movs	r2, #61	@ 0x3d
 80074a6:	2101      	movs	r1, #1
 80074a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	0018      	movs	r0, r3
 80074ae:	46bd      	mov	sp, r7
 80074b0:	b002      	add	sp, #8
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	223d      	movs	r2, #61	@ 0x3d
 80074c0:	5c9b      	ldrb	r3, [r3, r2]
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d001      	beq.n	80074cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	e035      	b.n	8007538 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	223d      	movs	r2, #61	@ 0x3d
 80074d0:	2102      	movs	r1, #2
 80074d2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	68da      	ldr	r2, [r3, #12]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	2101      	movs	r1, #1
 80074e0:	430a      	orrs	r2, r1
 80074e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a15      	ldr	r2, [pc, #84]	@ (8007540 <HAL_TIM_Base_Start_IT+0x8c>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d009      	beq.n	8007502 <HAL_TIM_Base_Start_IT+0x4e>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a14      	ldr	r2, [pc, #80]	@ (8007544 <HAL_TIM_Base_Start_IT+0x90>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d004      	beq.n	8007502 <HAL_TIM_Base_Start_IT+0x4e>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a12      	ldr	r2, [pc, #72]	@ (8007548 <HAL_TIM_Base_Start_IT+0x94>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d111      	bne.n	8007526 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	2207      	movs	r2, #7
 800750a:	4013      	ands	r3, r2
 800750c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2b06      	cmp	r3, #6
 8007512:	d010      	beq.n	8007536 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	2101      	movs	r1, #1
 8007520:	430a      	orrs	r2, r1
 8007522:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007524:	e007      	b.n	8007536 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2101      	movs	r1, #1
 8007532:	430a      	orrs	r2, r1
 8007534:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007536:	2300      	movs	r3, #0
}
 8007538:	0018      	movs	r0, r3
 800753a:	46bd      	mov	sp, r7
 800753c:	b004      	add	sp, #16
 800753e:	bd80      	pop	{r7, pc}
 8007540:	40012c00 	.word	0x40012c00
 8007544:	40000400 	.word	0x40000400
 8007548:	40014000 	.word	0x40014000

0800754c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	68da      	ldr	r2, [r3, #12]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2101      	movs	r1, #1
 8007560:	438a      	bics	r2, r1
 8007562:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	6a1b      	ldr	r3, [r3, #32]
 800756a:	4a0d      	ldr	r2, [pc, #52]	@ (80075a0 <HAL_TIM_Base_Stop_IT+0x54>)
 800756c:	4013      	ands	r3, r2
 800756e:	d10d      	bne.n	800758c <HAL_TIM_Base_Stop_IT+0x40>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	6a1b      	ldr	r3, [r3, #32]
 8007576:	4a0b      	ldr	r2, [pc, #44]	@ (80075a4 <HAL_TIM_Base_Stop_IT+0x58>)
 8007578:	4013      	ands	r3, r2
 800757a:	d107      	bne.n	800758c <HAL_TIM_Base_Stop_IT+0x40>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2101      	movs	r1, #1
 8007588:	438a      	bics	r2, r1
 800758a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	223d      	movs	r2, #61	@ 0x3d
 8007590:	2101      	movs	r1, #1
 8007592:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8007594:	2300      	movs	r3, #0
}
 8007596:	0018      	movs	r0, r3
 8007598:	46bd      	mov	sp, r7
 800759a:	b002      	add	sp, #8
 800759c:	bd80      	pop	{r7, pc}
 800759e:	46c0      	nop			@ (mov r8, r8)
 80075a0:	00001111 	.word	0x00001111
 80075a4:	00000444 	.word	0x00000444

080075a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d101      	bne.n	80075ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	e042      	b.n	8007640 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	223d      	movs	r2, #61	@ 0x3d
 80075be:	5c9b      	ldrb	r3, [r3, r2]
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d107      	bne.n	80075d6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	223c      	movs	r2, #60	@ 0x3c
 80075ca:	2100      	movs	r1, #0
 80075cc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	0018      	movs	r0, r3
 80075d2:	f000 f839 	bl	8007648 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	223d      	movs	r2, #61	@ 0x3d
 80075da:	2102      	movs	r1, #2
 80075dc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	3304      	adds	r3, #4
 80075e6:	0019      	movs	r1, r3
 80075e8:	0010      	movs	r0, r2
 80075ea:	f000 fbb7 	bl	8007d5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2246      	movs	r2, #70	@ 0x46
 80075f2:	2101      	movs	r1, #1
 80075f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	223e      	movs	r2, #62	@ 0x3e
 80075fa:	2101      	movs	r1, #1
 80075fc:	5499      	strb	r1, [r3, r2]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	223f      	movs	r2, #63	@ 0x3f
 8007602:	2101      	movs	r1, #1
 8007604:	5499      	strb	r1, [r3, r2]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2240      	movs	r2, #64	@ 0x40
 800760a:	2101      	movs	r1, #1
 800760c:	5499      	strb	r1, [r3, r2]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2241      	movs	r2, #65	@ 0x41
 8007612:	2101      	movs	r1, #1
 8007614:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2242      	movs	r2, #66	@ 0x42
 800761a:	2101      	movs	r1, #1
 800761c:	5499      	strb	r1, [r3, r2]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2243      	movs	r2, #67	@ 0x43
 8007622:	2101      	movs	r1, #1
 8007624:	5499      	strb	r1, [r3, r2]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2244      	movs	r2, #68	@ 0x44
 800762a:	2101      	movs	r1, #1
 800762c:	5499      	strb	r1, [r3, r2]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2245      	movs	r2, #69	@ 0x45
 8007632:	2101      	movs	r1, #1
 8007634:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	223d      	movs	r2, #61	@ 0x3d
 800763a:	2101      	movs	r1, #1
 800763c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800763e:	2300      	movs	r3, #0
}
 8007640:	0018      	movs	r0, r3
 8007642:	46bd      	mov	sp, r7
 8007644:	b002      	add	sp, #8
 8007646:	bd80      	pop	{r7, pc}

08007648 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007650:	46c0      	nop			@ (mov r8, r8)
 8007652:	46bd      	mov	sp, r7
 8007654:	b002      	add	sp, #8
 8007656:	bd80      	pop	{r7, pc}

08007658 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d108      	bne.n	800767a <HAL_TIM_PWM_Start+0x22>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	223e      	movs	r2, #62	@ 0x3e
 800766c:	5c9b      	ldrb	r3, [r3, r2]
 800766e:	b2db      	uxtb	r3, r3
 8007670:	3b01      	subs	r3, #1
 8007672:	1e5a      	subs	r2, r3, #1
 8007674:	4193      	sbcs	r3, r2
 8007676:	b2db      	uxtb	r3, r3
 8007678:	e01f      	b.n	80076ba <HAL_TIM_PWM_Start+0x62>
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	2b04      	cmp	r3, #4
 800767e:	d108      	bne.n	8007692 <HAL_TIM_PWM_Start+0x3a>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	223f      	movs	r2, #63	@ 0x3f
 8007684:	5c9b      	ldrb	r3, [r3, r2]
 8007686:	b2db      	uxtb	r3, r3
 8007688:	3b01      	subs	r3, #1
 800768a:	1e5a      	subs	r2, r3, #1
 800768c:	4193      	sbcs	r3, r2
 800768e:	b2db      	uxtb	r3, r3
 8007690:	e013      	b.n	80076ba <HAL_TIM_PWM_Start+0x62>
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	2b08      	cmp	r3, #8
 8007696:	d108      	bne.n	80076aa <HAL_TIM_PWM_Start+0x52>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2240      	movs	r2, #64	@ 0x40
 800769c:	5c9b      	ldrb	r3, [r3, r2]
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	3b01      	subs	r3, #1
 80076a2:	1e5a      	subs	r2, r3, #1
 80076a4:	4193      	sbcs	r3, r2
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	e007      	b.n	80076ba <HAL_TIM_PWM_Start+0x62>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2241      	movs	r2, #65	@ 0x41
 80076ae:	5c9b      	ldrb	r3, [r3, r2]
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	3b01      	subs	r3, #1
 80076b4:	1e5a      	subs	r2, r3, #1
 80076b6:	4193      	sbcs	r3, r2
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d001      	beq.n	80076c2 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	e06e      	b.n	80077a0 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d104      	bne.n	80076d2 <HAL_TIM_PWM_Start+0x7a>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	223e      	movs	r2, #62	@ 0x3e
 80076cc:	2102      	movs	r1, #2
 80076ce:	5499      	strb	r1, [r3, r2]
 80076d0:	e013      	b.n	80076fa <HAL_TIM_PWM_Start+0xa2>
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	2b04      	cmp	r3, #4
 80076d6:	d104      	bne.n	80076e2 <HAL_TIM_PWM_Start+0x8a>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	223f      	movs	r2, #63	@ 0x3f
 80076dc:	2102      	movs	r1, #2
 80076de:	5499      	strb	r1, [r3, r2]
 80076e0:	e00b      	b.n	80076fa <HAL_TIM_PWM_Start+0xa2>
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	2b08      	cmp	r3, #8
 80076e6:	d104      	bne.n	80076f2 <HAL_TIM_PWM_Start+0x9a>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2240      	movs	r2, #64	@ 0x40
 80076ec:	2102      	movs	r1, #2
 80076ee:	5499      	strb	r1, [r3, r2]
 80076f0:	e003      	b.n	80076fa <HAL_TIM_PWM_Start+0xa2>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2241      	movs	r2, #65	@ 0x41
 80076f6:	2102      	movs	r1, #2
 80076f8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	6839      	ldr	r1, [r7, #0]
 8007700:	2201      	movs	r2, #1
 8007702:	0018      	movs	r0, r3
 8007704:	f000 fe36 	bl	8008374 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a26      	ldr	r2, [pc, #152]	@ (80077a8 <HAL_TIM_PWM_Start+0x150>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d00e      	beq.n	8007730 <HAL_TIM_PWM_Start+0xd8>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a25      	ldr	r2, [pc, #148]	@ (80077ac <HAL_TIM_PWM_Start+0x154>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d009      	beq.n	8007730 <HAL_TIM_PWM_Start+0xd8>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a23      	ldr	r2, [pc, #140]	@ (80077b0 <HAL_TIM_PWM_Start+0x158>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d004      	beq.n	8007730 <HAL_TIM_PWM_Start+0xd8>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a22      	ldr	r2, [pc, #136]	@ (80077b4 <HAL_TIM_PWM_Start+0x15c>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d101      	bne.n	8007734 <HAL_TIM_PWM_Start+0xdc>
 8007730:	2301      	movs	r3, #1
 8007732:	e000      	b.n	8007736 <HAL_TIM_PWM_Start+0xde>
 8007734:	2300      	movs	r3, #0
 8007736:	2b00      	cmp	r3, #0
 8007738:	d008      	beq.n	800774c <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2180      	movs	r1, #128	@ 0x80
 8007746:	0209      	lsls	r1, r1, #8
 8007748:	430a      	orrs	r2, r1
 800774a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a15      	ldr	r2, [pc, #84]	@ (80077a8 <HAL_TIM_PWM_Start+0x150>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d009      	beq.n	800776a <HAL_TIM_PWM_Start+0x112>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a17      	ldr	r2, [pc, #92]	@ (80077b8 <HAL_TIM_PWM_Start+0x160>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d004      	beq.n	800776a <HAL_TIM_PWM_Start+0x112>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a11      	ldr	r2, [pc, #68]	@ (80077ac <HAL_TIM_PWM_Start+0x154>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d111      	bne.n	800778e <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	2207      	movs	r2, #7
 8007772:	4013      	ands	r3, r2
 8007774:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2b06      	cmp	r3, #6
 800777a:	d010      	beq.n	800779e <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	2101      	movs	r1, #1
 8007788:	430a      	orrs	r2, r1
 800778a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800778c:	e007      	b.n	800779e <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	2101      	movs	r1, #1
 800779a:	430a      	orrs	r2, r1
 800779c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800779e:	2300      	movs	r3, #0
}
 80077a0:	0018      	movs	r0, r3
 80077a2:	46bd      	mov	sp, r7
 80077a4:	b004      	add	sp, #16
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	40012c00 	.word	0x40012c00
 80077ac:	40014000 	.word	0x40014000
 80077b0:	40014400 	.word	0x40014400
 80077b4:	40014800 	.word	0x40014800
 80077b8:	40000400 	.word	0x40000400

080077bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b082      	sub	sp, #8
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	2202      	movs	r2, #2
 80077cc:	4013      	ands	r3, r2
 80077ce:	2b02      	cmp	r3, #2
 80077d0:	d124      	bne.n	800781c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	2202      	movs	r2, #2
 80077da:	4013      	ands	r3, r2
 80077dc:	2b02      	cmp	r3, #2
 80077de:	d11d      	bne.n	800781c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	2203      	movs	r2, #3
 80077e6:	4252      	negs	r2, r2
 80077e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2201      	movs	r2, #1
 80077ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	699b      	ldr	r3, [r3, #24]
 80077f6:	2203      	movs	r2, #3
 80077f8:	4013      	ands	r3, r2
 80077fa:	d004      	beq.n	8007806 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	0018      	movs	r0, r3
 8007800:	f000 fa94 	bl	8007d2c <HAL_TIM_IC_CaptureCallback>
 8007804:	e007      	b.n	8007816 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	0018      	movs	r0, r3
 800780a:	f000 fa87 	bl	8007d1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	0018      	movs	r0, r3
 8007812:	f000 fa93 	bl	8007d3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2200      	movs	r2, #0
 800781a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	691b      	ldr	r3, [r3, #16]
 8007822:	2204      	movs	r2, #4
 8007824:	4013      	ands	r3, r2
 8007826:	2b04      	cmp	r3, #4
 8007828:	d125      	bne.n	8007876 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	2204      	movs	r2, #4
 8007832:	4013      	ands	r3, r2
 8007834:	2b04      	cmp	r3, #4
 8007836:	d11e      	bne.n	8007876 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	2205      	movs	r2, #5
 800783e:	4252      	negs	r2, r2
 8007840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2202      	movs	r2, #2
 8007846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	699a      	ldr	r2, [r3, #24]
 800784e:	23c0      	movs	r3, #192	@ 0xc0
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	4013      	ands	r3, r2
 8007854:	d004      	beq.n	8007860 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	0018      	movs	r0, r3
 800785a:	f000 fa67 	bl	8007d2c <HAL_TIM_IC_CaptureCallback>
 800785e:	e007      	b.n	8007870 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	0018      	movs	r0, r3
 8007864:	f000 fa5a 	bl	8007d1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	0018      	movs	r0, r3
 800786c:	f000 fa66 	bl	8007d3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	691b      	ldr	r3, [r3, #16]
 800787c:	2208      	movs	r2, #8
 800787e:	4013      	ands	r3, r2
 8007880:	2b08      	cmp	r3, #8
 8007882:	d124      	bne.n	80078ce <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	2208      	movs	r2, #8
 800788c:	4013      	ands	r3, r2
 800788e:	2b08      	cmp	r3, #8
 8007890:	d11d      	bne.n	80078ce <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	2209      	movs	r2, #9
 8007898:	4252      	negs	r2, r2
 800789a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2204      	movs	r2, #4
 80078a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	69db      	ldr	r3, [r3, #28]
 80078a8:	2203      	movs	r2, #3
 80078aa:	4013      	ands	r3, r2
 80078ac:	d004      	beq.n	80078b8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	0018      	movs	r0, r3
 80078b2:	f000 fa3b 	bl	8007d2c <HAL_TIM_IC_CaptureCallback>
 80078b6:	e007      	b.n	80078c8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	0018      	movs	r0, r3
 80078bc:	f000 fa2e 	bl	8007d1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	0018      	movs	r0, r3
 80078c4:	f000 fa3a 	bl	8007d3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2200      	movs	r2, #0
 80078cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	691b      	ldr	r3, [r3, #16]
 80078d4:	2210      	movs	r2, #16
 80078d6:	4013      	ands	r3, r2
 80078d8:	2b10      	cmp	r3, #16
 80078da:	d125      	bne.n	8007928 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	2210      	movs	r2, #16
 80078e4:	4013      	ands	r3, r2
 80078e6:	2b10      	cmp	r3, #16
 80078e8:	d11e      	bne.n	8007928 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	2211      	movs	r2, #17
 80078f0:	4252      	negs	r2, r2
 80078f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2208      	movs	r2, #8
 80078f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	69da      	ldr	r2, [r3, #28]
 8007900:	23c0      	movs	r3, #192	@ 0xc0
 8007902:	009b      	lsls	r3, r3, #2
 8007904:	4013      	ands	r3, r2
 8007906:	d004      	beq.n	8007912 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	0018      	movs	r0, r3
 800790c:	f000 fa0e 	bl	8007d2c <HAL_TIM_IC_CaptureCallback>
 8007910:	e007      	b.n	8007922 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	0018      	movs	r0, r3
 8007916:	f000 fa01 	bl	8007d1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	0018      	movs	r0, r3
 800791e:	f000 fa0d 	bl	8007d3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2200      	movs	r2, #0
 8007926:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	691b      	ldr	r3, [r3, #16]
 800792e:	2201      	movs	r2, #1
 8007930:	4013      	ands	r3, r2
 8007932:	2b01      	cmp	r3, #1
 8007934:	d10f      	bne.n	8007956 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	2201      	movs	r2, #1
 800793e:	4013      	ands	r3, r2
 8007940:	2b01      	cmp	r3, #1
 8007942:	d108      	bne.n	8007956 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2202      	movs	r2, #2
 800794a:	4252      	negs	r2, r2
 800794c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	0018      	movs	r0, r3
 8007952:	f7fb f992 	bl	8002c7a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	691b      	ldr	r3, [r3, #16]
 800795c:	2280      	movs	r2, #128	@ 0x80
 800795e:	4013      	ands	r3, r2
 8007960:	2b80      	cmp	r3, #128	@ 0x80
 8007962:	d10f      	bne.n	8007984 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	68db      	ldr	r3, [r3, #12]
 800796a:	2280      	movs	r2, #128	@ 0x80
 800796c:	4013      	ands	r3, r2
 800796e:	2b80      	cmp	r3, #128	@ 0x80
 8007970:	d108      	bne.n	8007984 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	2281      	movs	r2, #129	@ 0x81
 8007978:	4252      	negs	r2, r2
 800797a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	0018      	movs	r0, r3
 8007980:	f000 fdda 	bl	8008538 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	2240      	movs	r2, #64	@ 0x40
 800798c:	4013      	ands	r3, r2
 800798e:	2b40      	cmp	r3, #64	@ 0x40
 8007990:	d10f      	bne.n	80079b2 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	68db      	ldr	r3, [r3, #12]
 8007998:	2240      	movs	r2, #64	@ 0x40
 800799a:	4013      	ands	r3, r2
 800799c:	2b40      	cmp	r3, #64	@ 0x40
 800799e:	d108      	bne.n	80079b2 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	2241      	movs	r2, #65	@ 0x41
 80079a6:	4252      	negs	r2, r2
 80079a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	0018      	movs	r0, r3
 80079ae:	f000 f9cd 	bl	8007d4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	691b      	ldr	r3, [r3, #16]
 80079b8:	2220      	movs	r2, #32
 80079ba:	4013      	ands	r3, r2
 80079bc:	2b20      	cmp	r3, #32
 80079be:	d10f      	bne.n	80079e0 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	68db      	ldr	r3, [r3, #12]
 80079c6:	2220      	movs	r2, #32
 80079c8:	4013      	ands	r3, r2
 80079ca:	2b20      	cmp	r3, #32
 80079cc:	d108      	bne.n	80079e0 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	2221      	movs	r2, #33	@ 0x21
 80079d4:	4252      	negs	r2, r2
 80079d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	0018      	movs	r0, r3
 80079dc:	f000 fda4 	bl	8008528 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80079e0:	46c0      	nop			@ (mov r8, r8)
 80079e2:	46bd      	mov	sp, r7
 80079e4:	b002      	add	sp, #8
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b086      	sub	sp, #24
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079f4:	2317      	movs	r3, #23
 80079f6:	18fb      	adds	r3, r7, r3
 80079f8:	2200      	movs	r2, #0
 80079fa:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	223c      	movs	r2, #60	@ 0x3c
 8007a00:	5c9b      	ldrb	r3, [r3, r2]
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	d101      	bne.n	8007a0a <HAL_TIM_PWM_ConfigChannel+0x22>
 8007a06:	2302      	movs	r3, #2
 8007a08:	e0ad      	b.n	8007b66 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	223c      	movs	r2, #60	@ 0x3c
 8007a0e:	2101      	movs	r1, #1
 8007a10:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2b0c      	cmp	r3, #12
 8007a16:	d100      	bne.n	8007a1a <HAL_TIM_PWM_ConfigChannel+0x32>
 8007a18:	e076      	b.n	8007b08 <HAL_TIM_PWM_ConfigChannel+0x120>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2b0c      	cmp	r3, #12
 8007a1e:	d900      	bls.n	8007a22 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8007a20:	e095      	b.n	8007b4e <HAL_TIM_PWM_ConfigChannel+0x166>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2b08      	cmp	r3, #8
 8007a26:	d04e      	beq.n	8007ac6 <HAL_TIM_PWM_ConfigChannel+0xde>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2b08      	cmp	r3, #8
 8007a2c:	d900      	bls.n	8007a30 <HAL_TIM_PWM_ConfigChannel+0x48>
 8007a2e:	e08e      	b.n	8007b4e <HAL_TIM_PWM_ConfigChannel+0x166>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d003      	beq.n	8007a3e <HAL_TIM_PWM_ConfigChannel+0x56>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2b04      	cmp	r3, #4
 8007a3a:	d021      	beq.n	8007a80 <HAL_TIM_PWM_ConfigChannel+0x98>
 8007a3c:	e087      	b.n	8007b4e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	68ba      	ldr	r2, [r7, #8]
 8007a44:	0011      	movs	r1, r2
 8007a46:	0018      	movs	r0, r3
 8007a48:	f000 f9fe 	bl	8007e48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	699a      	ldr	r2, [r3, #24]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2108      	movs	r1, #8
 8007a58:	430a      	orrs	r2, r1
 8007a5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	699a      	ldr	r2, [r3, #24]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	2104      	movs	r1, #4
 8007a68:	438a      	bics	r2, r1
 8007a6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	6999      	ldr	r1, [r3, #24]
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	691a      	ldr	r2, [r3, #16]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	430a      	orrs	r2, r1
 8007a7c:	619a      	str	r2, [r3, #24]
      break;
 8007a7e:	e06b      	b.n	8007b58 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	68ba      	ldr	r2, [r7, #8]
 8007a86:	0011      	movs	r1, r2
 8007a88:	0018      	movs	r0, r3
 8007a8a:	f000 fa65 	bl	8007f58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	699a      	ldr	r2, [r3, #24]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2180      	movs	r1, #128	@ 0x80
 8007a9a:	0109      	lsls	r1, r1, #4
 8007a9c:	430a      	orrs	r2, r1
 8007a9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	699a      	ldr	r2, [r3, #24]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4931      	ldr	r1, [pc, #196]	@ (8007b70 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8007aac:	400a      	ands	r2, r1
 8007aae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	6999      	ldr	r1, [r3, #24]
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	691b      	ldr	r3, [r3, #16]
 8007aba:	021a      	lsls	r2, r3, #8
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	430a      	orrs	r2, r1
 8007ac2:	619a      	str	r2, [r3, #24]
      break;
 8007ac4:	e048      	b.n	8007b58 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	68ba      	ldr	r2, [r7, #8]
 8007acc:	0011      	movs	r1, r2
 8007ace:	0018      	movs	r0, r3
 8007ad0:	f000 fac6 	bl	8008060 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	69da      	ldr	r2, [r3, #28]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2108      	movs	r1, #8
 8007ae0:	430a      	orrs	r2, r1
 8007ae2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	69da      	ldr	r2, [r3, #28]
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	2104      	movs	r1, #4
 8007af0:	438a      	bics	r2, r1
 8007af2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	69d9      	ldr	r1, [r3, #28]
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	691a      	ldr	r2, [r3, #16]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	430a      	orrs	r2, r1
 8007b04:	61da      	str	r2, [r3, #28]
      break;
 8007b06:	e027      	b.n	8007b58 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	68ba      	ldr	r2, [r7, #8]
 8007b0e:	0011      	movs	r1, r2
 8007b10:	0018      	movs	r0, r3
 8007b12:	f000 fb2b 	bl	800816c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	69da      	ldr	r2, [r3, #28]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	2180      	movs	r1, #128	@ 0x80
 8007b22:	0109      	lsls	r1, r1, #4
 8007b24:	430a      	orrs	r2, r1
 8007b26:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	69da      	ldr	r2, [r3, #28]
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	490f      	ldr	r1, [pc, #60]	@ (8007b70 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8007b34:	400a      	ands	r2, r1
 8007b36:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	69d9      	ldr	r1, [r3, #28]
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	691b      	ldr	r3, [r3, #16]
 8007b42:	021a      	lsls	r2, r3, #8
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	430a      	orrs	r2, r1
 8007b4a:	61da      	str	r2, [r3, #28]
      break;
 8007b4c:	e004      	b.n	8007b58 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8007b4e:	2317      	movs	r3, #23
 8007b50:	18fb      	adds	r3, r7, r3
 8007b52:	2201      	movs	r2, #1
 8007b54:	701a      	strb	r2, [r3, #0]
      break;
 8007b56:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	223c      	movs	r2, #60	@ 0x3c
 8007b5c:	2100      	movs	r1, #0
 8007b5e:	5499      	strb	r1, [r3, r2]

  return status;
 8007b60:	2317      	movs	r3, #23
 8007b62:	18fb      	adds	r3, r7, r3
 8007b64:	781b      	ldrb	r3, [r3, #0]
}
 8007b66:	0018      	movs	r0, r3
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	b006      	add	sp, #24
 8007b6c:	bd80      	pop	{r7, pc}
 8007b6e:	46c0      	nop			@ (mov r8, r8)
 8007b70:	fffffbff 	.word	0xfffffbff

08007b74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b7e:	230f      	movs	r3, #15
 8007b80:	18fb      	adds	r3, r7, r3
 8007b82:	2200      	movs	r2, #0
 8007b84:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	223c      	movs	r2, #60	@ 0x3c
 8007b8a:	5c9b      	ldrb	r3, [r3, r2]
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d101      	bne.n	8007b94 <HAL_TIM_ConfigClockSource+0x20>
 8007b90:	2302      	movs	r3, #2
 8007b92:	e0bc      	b.n	8007d0e <HAL_TIM_ConfigClockSource+0x19a>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	223c      	movs	r2, #60	@ 0x3c
 8007b98:	2101      	movs	r1, #1
 8007b9a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	223d      	movs	r2, #61	@ 0x3d
 8007ba0:	2102      	movs	r1, #2
 8007ba2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	2277      	movs	r2, #119	@ 0x77
 8007bb0:	4393      	bics	r3, r2
 8007bb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	4a58      	ldr	r2, [pc, #352]	@ (8007d18 <HAL_TIM_ConfigClockSource+0x1a4>)
 8007bb8:	4013      	ands	r3, r2
 8007bba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	68ba      	ldr	r2, [r7, #8]
 8007bc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2280      	movs	r2, #128	@ 0x80
 8007bca:	0192      	lsls	r2, r2, #6
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d040      	beq.n	8007c52 <HAL_TIM_ConfigClockSource+0xde>
 8007bd0:	2280      	movs	r2, #128	@ 0x80
 8007bd2:	0192      	lsls	r2, r2, #6
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d900      	bls.n	8007bda <HAL_TIM_ConfigClockSource+0x66>
 8007bd8:	e088      	b.n	8007cec <HAL_TIM_ConfigClockSource+0x178>
 8007bda:	2280      	movs	r2, #128	@ 0x80
 8007bdc:	0152      	lsls	r2, r2, #5
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d100      	bne.n	8007be4 <HAL_TIM_ConfigClockSource+0x70>
 8007be2:	e088      	b.n	8007cf6 <HAL_TIM_ConfigClockSource+0x182>
 8007be4:	2280      	movs	r2, #128	@ 0x80
 8007be6:	0152      	lsls	r2, r2, #5
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d900      	bls.n	8007bee <HAL_TIM_ConfigClockSource+0x7a>
 8007bec:	e07e      	b.n	8007cec <HAL_TIM_ConfigClockSource+0x178>
 8007bee:	2b70      	cmp	r3, #112	@ 0x70
 8007bf0:	d018      	beq.n	8007c24 <HAL_TIM_ConfigClockSource+0xb0>
 8007bf2:	d900      	bls.n	8007bf6 <HAL_TIM_ConfigClockSource+0x82>
 8007bf4:	e07a      	b.n	8007cec <HAL_TIM_ConfigClockSource+0x178>
 8007bf6:	2b60      	cmp	r3, #96	@ 0x60
 8007bf8:	d04f      	beq.n	8007c9a <HAL_TIM_ConfigClockSource+0x126>
 8007bfa:	d900      	bls.n	8007bfe <HAL_TIM_ConfigClockSource+0x8a>
 8007bfc:	e076      	b.n	8007cec <HAL_TIM_ConfigClockSource+0x178>
 8007bfe:	2b50      	cmp	r3, #80	@ 0x50
 8007c00:	d03b      	beq.n	8007c7a <HAL_TIM_ConfigClockSource+0x106>
 8007c02:	d900      	bls.n	8007c06 <HAL_TIM_ConfigClockSource+0x92>
 8007c04:	e072      	b.n	8007cec <HAL_TIM_ConfigClockSource+0x178>
 8007c06:	2b40      	cmp	r3, #64	@ 0x40
 8007c08:	d057      	beq.n	8007cba <HAL_TIM_ConfigClockSource+0x146>
 8007c0a:	d900      	bls.n	8007c0e <HAL_TIM_ConfigClockSource+0x9a>
 8007c0c:	e06e      	b.n	8007cec <HAL_TIM_ConfigClockSource+0x178>
 8007c0e:	2b30      	cmp	r3, #48	@ 0x30
 8007c10:	d063      	beq.n	8007cda <HAL_TIM_ConfigClockSource+0x166>
 8007c12:	d86b      	bhi.n	8007cec <HAL_TIM_ConfigClockSource+0x178>
 8007c14:	2b20      	cmp	r3, #32
 8007c16:	d060      	beq.n	8007cda <HAL_TIM_ConfigClockSource+0x166>
 8007c18:	d868      	bhi.n	8007cec <HAL_TIM_ConfigClockSource+0x178>
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d05d      	beq.n	8007cda <HAL_TIM_ConfigClockSource+0x166>
 8007c1e:	2b10      	cmp	r3, #16
 8007c20:	d05b      	beq.n	8007cda <HAL_TIM_ConfigClockSource+0x166>
 8007c22:	e063      	b.n	8007cec <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007c34:	f000 fb7e 	bl	8008334 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	2277      	movs	r2, #119	@ 0x77
 8007c44:	4313      	orrs	r3, r2
 8007c46:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	68ba      	ldr	r2, [r7, #8]
 8007c4e:	609a      	str	r2, [r3, #8]
      break;
 8007c50:	e052      	b.n	8007cf8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007c62:	f000 fb67 	bl	8008334 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	689a      	ldr	r2, [r3, #8]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2180      	movs	r1, #128	@ 0x80
 8007c72:	01c9      	lsls	r1, r1, #7
 8007c74:	430a      	orrs	r2, r1
 8007c76:	609a      	str	r2, [r3, #8]
      break;
 8007c78:	e03e      	b.n	8007cf8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c86:	001a      	movs	r2, r3
 8007c88:	f000 fada 	bl	8008240 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2150      	movs	r1, #80	@ 0x50
 8007c92:	0018      	movs	r0, r3
 8007c94:	f000 fb34 	bl	8008300 <TIM_ITRx_SetConfig>
      break;
 8007c98:	e02e      	b.n	8007cf8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ca6:	001a      	movs	r2, r3
 8007ca8:	f000 faf8 	bl	800829c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2160      	movs	r1, #96	@ 0x60
 8007cb2:	0018      	movs	r0, r3
 8007cb4:	f000 fb24 	bl	8008300 <TIM_ITRx_SetConfig>
      break;
 8007cb8:	e01e      	b.n	8007cf8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cc6:	001a      	movs	r2, r3
 8007cc8:	f000 faba 	bl	8008240 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	2140      	movs	r1, #64	@ 0x40
 8007cd2:	0018      	movs	r0, r3
 8007cd4:	f000 fb14 	bl	8008300 <TIM_ITRx_SetConfig>
      break;
 8007cd8:	e00e      	b.n	8007cf8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	0019      	movs	r1, r3
 8007ce4:	0010      	movs	r0, r2
 8007ce6:	f000 fb0b 	bl	8008300 <TIM_ITRx_SetConfig>
      break;
 8007cea:	e005      	b.n	8007cf8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8007cec:	230f      	movs	r3, #15
 8007cee:	18fb      	adds	r3, r7, r3
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	701a      	strb	r2, [r3, #0]
      break;
 8007cf4:	e000      	b.n	8007cf8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8007cf6:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	223d      	movs	r2, #61	@ 0x3d
 8007cfc:	2101      	movs	r1, #1
 8007cfe:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	223c      	movs	r2, #60	@ 0x3c
 8007d04:	2100      	movs	r1, #0
 8007d06:	5499      	strb	r1, [r3, r2]

  return status;
 8007d08:	230f      	movs	r3, #15
 8007d0a:	18fb      	adds	r3, r7, r3
 8007d0c:	781b      	ldrb	r3, [r3, #0]
}
 8007d0e:	0018      	movs	r0, r3
 8007d10:	46bd      	mov	sp, r7
 8007d12:	b004      	add	sp, #16
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	46c0      	nop			@ (mov r8, r8)
 8007d18:	ffff00ff 	.word	0xffff00ff

08007d1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d24:	46c0      	nop			@ (mov r8, r8)
 8007d26:	46bd      	mov	sp, r7
 8007d28:	b002      	add	sp, #8
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007d34:	46c0      	nop			@ (mov r8, r8)
 8007d36:	46bd      	mov	sp, r7
 8007d38:	b002      	add	sp, #8
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b082      	sub	sp, #8
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d44:	46c0      	nop			@ (mov r8, r8)
 8007d46:	46bd      	mov	sp, r7
 8007d48:	b002      	add	sp, #8
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b082      	sub	sp, #8
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d54:	46c0      	nop			@ (mov r8, r8)
 8007d56:	46bd      	mov	sp, r7
 8007d58:	b002      	add	sp, #8
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b084      	sub	sp, #16
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	4a2f      	ldr	r2, [pc, #188]	@ (8007e2c <TIM_Base_SetConfig+0xd0>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d003      	beq.n	8007d7c <TIM_Base_SetConfig+0x20>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	4a2e      	ldr	r2, [pc, #184]	@ (8007e30 <TIM_Base_SetConfig+0xd4>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d108      	bne.n	8007d8e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2270      	movs	r2, #112	@ 0x70
 8007d80:	4393      	bics	r3, r2
 8007d82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	68fa      	ldr	r2, [r7, #12]
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4a26      	ldr	r2, [pc, #152]	@ (8007e2c <TIM_Base_SetConfig+0xd0>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d013      	beq.n	8007dbe <TIM_Base_SetConfig+0x62>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	4a25      	ldr	r2, [pc, #148]	@ (8007e30 <TIM_Base_SetConfig+0xd4>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d00f      	beq.n	8007dbe <TIM_Base_SetConfig+0x62>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	4a24      	ldr	r2, [pc, #144]	@ (8007e34 <TIM_Base_SetConfig+0xd8>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d00b      	beq.n	8007dbe <TIM_Base_SetConfig+0x62>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4a23      	ldr	r2, [pc, #140]	@ (8007e38 <TIM_Base_SetConfig+0xdc>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d007      	beq.n	8007dbe <TIM_Base_SetConfig+0x62>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	4a22      	ldr	r2, [pc, #136]	@ (8007e3c <TIM_Base_SetConfig+0xe0>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d003      	beq.n	8007dbe <TIM_Base_SetConfig+0x62>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	4a21      	ldr	r2, [pc, #132]	@ (8007e40 <TIM_Base_SetConfig+0xe4>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d108      	bne.n	8007dd0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	4a20      	ldr	r2, [pc, #128]	@ (8007e44 <TIM_Base_SetConfig+0xe8>)
 8007dc2:	4013      	ands	r3, r2
 8007dc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	68fa      	ldr	r2, [r7, #12]
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2280      	movs	r2, #128	@ 0x80
 8007dd4:	4393      	bics	r3, r2
 8007dd6:	001a      	movs	r2, r3
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	695b      	ldr	r3, [r3, #20]
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	68fa      	ldr	r2, [r7, #12]
 8007de4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	689a      	ldr	r2, [r3, #8]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	4a0c      	ldr	r2, [pc, #48]	@ (8007e2c <TIM_Base_SetConfig+0xd0>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d00b      	beq.n	8007e16 <TIM_Base_SetConfig+0xba>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	4a0d      	ldr	r2, [pc, #52]	@ (8007e38 <TIM_Base_SetConfig+0xdc>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d007      	beq.n	8007e16 <TIM_Base_SetConfig+0xba>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	4a0c      	ldr	r2, [pc, #48]	@ (8007e3c <TIM_Base_SetConfig+0xe0>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d003      	beq.n	8007e16 <TIM_Base_SetConfig+0xba>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4a0b      	ldr	r2, [pc, #44]	@ (8007e40 <TIM_Base_SetConfig+0xe4>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d103      	bne.n	8007e1e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	691a      	ldr	r2, [r3, #16]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2201      	movs	r2, #1
 8007e22:	615a      	str	r2, [r3, #20]
}
 8007e24:	46c0      	nop			@ (mov r8, r8)
 8007e26:	46bd      	mov	sp, r7
 8007e28:	b004      	add	sp, #16
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	40012c00 	.word	0x40012c00
 8007e30:	40000400 	.word	0x40000400
 8007e34:	40002000 	.word	0x40002000
 8007e38:	40014000 	.word	0x40014000
 8007e3c:	40014400 	.word	0x40014400
 8007e40:	40014800 	.word	0x40014800
 8007e44:	fffffcff 	.word	0xfffffcff

08007e48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b086      	sub	sp, #24
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6a1b      	ldr	r3, [r3, #32]
 8007e56:	2201      	movs	r2, #1
 8007e58:	4393      	bics	r3, r2
 8007e5a:	001a      	movs	r2, r3
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6a1b      	ldr	r3, [r3, #32]
 8007e64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	699b      	ldr	r3, [r3, #24]
 8007e70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2270      	movs	r2, #112	@ 0x70
 8007e76:	4393      	bics	r3, r2
 8007e78:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2203      	movs	r2, #3
 8007e7e:	4393      	bics	r3, r2
 8007e80:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	68fa      	ldr	r2, [r7, #12]
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	2202      	movs	r2, #2
 8007e90:	4393      	bics	r3, r2
 8007e92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	697a      	ldr	r2, [r7, #20]
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	4a27      	ldr	r2, [pc, #156]	@ (8007f40 <TIM_OC1_SetConfig+0xf8>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d00b      	beq.n	8007ebe <TIM_OC1_SetConfig+0x76>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	4a26      	ldr	r2, [pc, #152]	@ (8007f44 <TIM_OC1_SetConfig+0xfc>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d007      	beq.n	8007ebe <TIM_OC1_SetConfig+0x76>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	4a25      	ldr	r2, [pc, #148]	@ (8007f48 <TIM_OC1_SetConfig+0x100>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d003      	beq.n	8007ebe <TIM_OC1_SetConfig+0x76>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	4a24      	ldr	r2, [pc, #144]	@ (8007f4c <TIM_OC1_SetConfig+0x104>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d10c      	bne.n	8007ed8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	2208      	movs	r2, #8
 8007ec2:	4393      	bics	r3, r2
 8007ec4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	697a      	ldr	r2, [r7, #20]
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	2204      	movs	r2, #4
 8007ed4:	4393      	bics	r3, r2
 8007ed6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	4a19      	ldr	r2, [pc, #100]	@ (8007f40 <TIM_OC1_SetConfig+0xf8>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d00b      	beq.n	8007ef8 <TIM_OC1_SetConfig+0xb0>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	4a18      	ldr	r2, [pc, #96]	@ (8007f44 <TIM_OC1_SetConfig+0xfc>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d007      	beq.n	8007ef8 <TIM_OC1_SetConfig+0xb0>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	4a17      	ldr	r2, [pc, #92]	@ (8007f48 <TIM_OC1_SetConfig+0x100>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d003      	beq.n	8007ef8 <TIM_OC1_SetConfig+0xb0>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	4a16      	ldr	r2, [pc, #88]	@ (8007f4c <TIM_OC1_SetConfig+0x104>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d111      	bne.n	8007f1c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	4a15      	ldr	r2, [pc, #84]	@ (8007f50 <TIM_OC1_SetConfig+0x108>)
 8007efc:	4013      	ands	r3, r2
 8007efe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	4a14      	ldr	r2, [pc, #80]	@ (8007f54 <TIM_OC1_SetConfig+0x10c>)
 8007f04:	4013      	ands	r3, r2
 8007f06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	695b      	ldr	r3, [r3, #20]
 8007f0c:	693a      	ldr	r2, [r7, #16]
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	699b      	ldr	r3, [r3, #24]
 8007f16:	693a      	ldr	r2, [r7, #16]
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	693a      	ldr	r2, [r7, #16]
 8007f20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	68fa      	ldr	r2, [r7, #12]
 8007f26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	685a      	ldr	r2, [r3, #4]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	697a      	ldr	r2, [r7, #20]
 8007f34:	621a      	str	r2, [r3, #32]
}
 8007f36:	46c0      	nop			@ (mov r8, r8)
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	b006      	add	sp, #24
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	46c0      	nop			@ (mov r8, r8)
 8007f40:	40012c00 	.word	0x40012c00
 8007f44:	40014000 	.word	0x40014000
 8007f48:	40014400 	.word	0x40014400
 8007f4c:	40014800 	.word	0x40014800
 8007f50:	fffffeff 	.word	0xfffffeff
 8007f54:	fffffdff 	.word	0xfffffdff

08007f58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b086      	sub	sp, #24
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6a1b      	ldr	r3, [r3, #32]
 8007f66:	2210      	movs	r2, #16
 8007f68:	4393      	bics	r3, r2
 8007f6a:	001a      	movs	r2, r3
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6a1b      	ldr	r3, [r3, #32]
 8007f74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	699b      	ldr	r3, [r3, #24]
 8007f80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	4a2e      	ldr	r2, [pc, #184]	@ (8008040 <TIM_OC2_SetConfig+0xe8>)
 8007f86:	4013      	ands	r3, r2
 8007f88:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	4a2d      	ldr	r2, [pc, #180]	@ (8008044 <TIM_OC2_SetConfig+0xec>)
 8007f8e:	4013      	ands	r3, r2
 8007f90:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	021b      	lsls	r3, r3, #8
 8007f98:	68fa      	ldr	r2, [r7, #12]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	2220      	movs	r2, #32
 8007fa2:	4393      	bics	r3, r2
 8007fa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	011b      	lsls	r3, r3, #4
 8007fac:	697a      	ldr	r2, [r7, #20]
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	4a24      	ldr	r2, [pc, #144]	@ (8008048 <TIM_OC2_SetConfig+0xf0>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d10d      	bne.n	8007fd6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	2280      	movs	r2, #128	@ 0x80
 8007fbe:	4393      	bics	r3, r2
 8007fc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	011b      	lsls	r3, r3, #4
 8007fc8:	697a      	ldr	r2, [r7, #20]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	2240      	movs	r2, #64	@ 0x40
 8007fd2:	4393      	bics	r3, r2
 8007fd4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4a1b      	ldr	r2, [pc, #108]	@ (8008048 <TIM_OC2_SetConfig+0xf0>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d00b      	beq.n	8007ff6 <TIM_OC2_SetConfig+0x9e>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4a1a      	ldr	r2, [pc, #104]	@ (800804c <TIM_OC2_SetConfig+0xf4>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d007      	beq.n	8007ff6 <TIM_OC2_SetConfig+0x9e>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	4a19      	ldr	r2, [pc, #100]	@ (8008050 <TIM_OC2_SetConfig+0xf8>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d003      	beq.n	8007ff6 <TIM_OC2_SetConfig+0x9e>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4a18      	ldr	r2, [pc, #96]	@ (8008054 <TIM_OC2_SetConfig+0xfc>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d113      	bne.n	800801e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	4a17      	ldr	r2, [pc, #92]	@ (8008058 <TIM_OC2_SetConfig+0x100>)
 8007ffa:	4013      	ands	r3, r2
 8007ffc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	4a16      	ldr	r2, [pc, #88]	@ (800805c <TIM_OC2_SetConfig+0x104>)
 8008002:	4013      	ands	r3, r2
 8008004:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	695b      	ldr	r3, [r3, #20]
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	693a      	ldr	r2, [r7, #16]
 800800e:	4313      	orrs	r3, r2
 8008010:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	699b      	ldr	r3, [r3, #24]
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	693a      	ldr	r2, [r7, #16]
 800801a:	4313      	orrs	r3, r2
 800801c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	693a      	ldr	r2, [r7, #16]
 8008022:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	68fa      	ldr	r2, [r7, #12]
 8008028:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	685a      	ldr	r2, [r3, #4]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	697a      	ldr	r2, [r7, #20]
 8008036:	621a      	str	r2, [r3, #32]
}
 8008038:	46c0      	nop			@ (mov r8, r8)
 800803a:	46bd      	mov	sp, r7
 800803c:	b006      	add	sp, #24
 800803e:	bd80      	pop	{r7, pc}
 8008040:	ffff8fff 	.word	0xffff8fff
 8008044:	fffffcff 	.word	0xfffffcff
 8008048:	40012c00 	.word	0x40012c00
 800804c:	40014000 	.word	0x40014000
 8008050:	40014400 	.word	0x40014400
 8008054:	40014800 	.word	0x40014800
 8008058:	fffffbff 	.word	0xfffffbff
 800805c:	fffff7ff 	.word	0xfffff7ff

08008060 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b086      	sub	sp, #24
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6a1b      	ldr	r3, [r3, #32]
 800806e:	4a35      	ldr	r2, [pc, #212]	@ (8008144 <TIM_OC3_SetConfig+0xe4>)
 8008070:	401a      	ands	r2, r3
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6a1b      	ldr	r3, [r3, #32]
 800807a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	69db      	ldr	r3, [r3, #28]
 8008086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2270      	movs	r2, #112	@ 0x70
 800808c:	4393      	bics	r3, r2
 800808e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2203      	movs	r2, #3
 8008094:	4393      	bics	r3, r2
 8008096:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	68fa      	ldr	r2, [r7, #12]
 800809e:	4313      	orrs	r3, r2
 80080a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	4a28      	ldr	r2, [pc, #160]	@ (8008148 <TIM_OC3_SetConfig+0xe8>)
 80080a6:	4013      	ands	r3, r2
 80080a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	021b      	lsls	r3, r3, #8
 80080b0:	697a      	ldr	r2, [r7, #20]
 80080b2:	4313      	orrs	r3, r2
 80080b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	4a24      	ldr	r2, [pc, #144]	@ (800814c <TIM_OC3_SetConfig+0xec>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d10d      	bne.n	80080da <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	4a23      	ldr	r2, [pc, #140]	@ (8008150 <TIM_OC3_SetConfig+0xf0>)
 80080c2:	4013      	ands	r3, r2
 80080c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	021b      	lsls	r3, r3, #8
 80080cc:	697a      	ldr	r2, [r7, #20]
 80080ce:	4313      	orrs	r3, r2
 80080d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	4a1f      	ldr	r2, [pc, #124]	@ (8008154 <TIM_OC3_SetConfig+0xf4>)
 80080d6:	4013      	ands	r3, r2
 80080d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	4a1b      	ldr	r2, [pc, #108]	@ (800814c <TIM_OC3_SetConfig+0xec>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d00b      	beq.n	80080fa <TIM_OC3_SetConfig+0x9a>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	4a1c      	ldr	r2, [pc, #112]	@ (8008158 <TIM_OC3_SetConfig+0xf8>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d007      	beq.n	80080fa <TIM_OC3_SetConfig+0x9a>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	4a1b      	ldr	r2, [pc, #108]	@ (800815c <TIM_OC3_SetConfig+0xfc>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d003      	beq.n	80080fa <TIM_OC3_SetConfig+0x9a>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	4a1a      	ldr	r2, [pc, #104]	@ (8008160 <TIM_OC3_SetConfig+0x100>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d113      	bne.n	8008122 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	4a19      	ldr	r2, [pc, #100]	@ (8008164 <TIM_OC3_SetConfig+0x104>)
 80080fe:	4013      	ands	r3, r2
 8008100:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	4a18      	ldr	r2, [pc, #96]	@ (8008168 <TIM_OC3_SetConfig+0x108>)
 8008106:	4013      	ands	r3, r2
 8008108:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	695b      	ldr	r3, [r3, #20]
 800810e:	011b      	lsls	r3, r3, #4
 8008110:	693a      	ldr	r2, [r7, #16]
 8008112:	4313      	orrs	r3, r2
 8008114:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	699b      	ldr	r3, [r3, #24]
 800811a:	011b      	lsls	r3, r3, #4
 800811c:	693a      	ldr	r2, [r7, #16]
 800811e:	4313      	orrs	r3, r2
 8008120:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	693a      	ldr	r2, [r7, #16]
 8008126:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	68fa      	ldr	r2, [r7, #12]
 800812c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	685a      	ldr	r2, [r3, #4]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	697a      	ldr	r2, [r7, #20]
 800813a:	621a      	str	r2, [r3, #32]
}
 800813c:	46c0      	nop			@ (mov r8, r8)
 800813e:	46bd      	mov	sp, r7
 8008140:	b006      	add	sp, #24
 8008142:	bd80      	pop	{r7, pc}
 8008144:	fffffeff 	.word	0xfffffeff
 8008148:	fffffdff 	.word	0xfffffdff
 800814c:	40012c00 	.word	0x40012c00
 8008150:	fffff7ff 	.word	0xfffff7ff
 8008154:	fffffbff 	.word	0xfffffbff
 8008158:	40014000 	.word	0x40014000
 800815c:	40014400 	.word	0x40014400
 8008160:	40014800 	.word	0x40014800
 8008164:	ffffefff 	.word	0xffffefff
 8008168:	ffffdfff 	.word	0xffffdfff

0800816c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b086      	sub	sp, #24
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6a1b      	ldr	r3, [r3, #32]
 800817a:	4a28      	ldr	r2, [pc, #160]	@ (800821c <TIM_OC4_SetConfig+0xb0>)
 800817c:	401a      	ands	r2, r3
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6a1b      	ldr	r3, [r3, #32]
 8008186:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	69db      	ldr	r3, [r3, #28]
 8008192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	4a22      	ldr	r2, [pc, #136]	@ (8008220 <TIM_OC4_SetConfig+0xb4>)
 8008198:	4013      	ands	r3, r2
 800819a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	4a21      	ldr	r2, [pc, #132]	@ (8008224 <TIM_OC4_SetConfig+0xb8>)
 80081a0:	4013      	ands	r3, r2
 80081a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	021b      	lsls	r3, r3, #8
 80081aa:	68fa      	ldr	r2, [r7, #12]
 80081ac:	4313      	orrs	r3, r2
 80081ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	4a1d      	ldr	r2, [pc, #116]	@ (8008228 <TIM_OC4_SetConfig+0xbc>)
 80081b4:	4013      	ands	r3, r2
 80081b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	689b      	ldr	r3, [r3, #8]
 80081bc:	031b      	lsls	r3, r3, #12
 80081be:	693a      	ldr	r2, [r7, #16]
 80081c0:	4313      	orrs	r3, r2
 80081c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	4a19      	ldr	r2, [pc, #100]	@ (800822c <TIM_OC4_SetConfig+0xc0>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d00b      	beq.n	80081e4 <TIM_OC4_SetConfig+0x78>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	4a18      	ldr	r2, [pc, #96]	@ (8008230 <TIM_OC4_SetConfig+0xc4>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d007      	beq.n	80081e4 <TIM_OC4_SetConfig+0x78>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	4a17      	ldr	r2, [pc, #92]	@ (8008234 <TIM_OC4_SetConfig+0xc8>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d003      	beq.n	80081e4 <TIM_OC4_SetConfig+0x78>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	4a16      	ldr	r2, [pc, #88]	@ (8008238 <TIM_OC4_SetConfig+0xcc>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d109      	bne.n	80081f8 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	4a15      	ldr	r2, [pc, #84]	@ (800823c <TIM_OC4_SetConfig+0xd0>)
 80081e8:	4013      	ands	r3, r2
 80081ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	695b      	ldr	r3, [r3, #20]
 80081f0:	019b      	lsls	r3, r3, #6
 80081f2:	697a      	ldr	r2, [r7, #20]
 80081f4:	4313      	orrs	r3, r2
 80081f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	697a      	ldr	r2, [r7, #20]
 80081fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	68fa      	ldr	r2, [r7, #12]
 8008202:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	685a      	ldr	r2, [r3, #4]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	693a      	ldr	r2, [r7, #16]
 8008210:	621a      	str	r2, [r3, #32]
}
 8008212:	46c0      	nop			@ (mov r8, r8)
 8008214:	46bd      	mov	sp, r7
 8008216:	b006      	add	sp, #24
 8008218:	bd80      	pop	{r7, pc}
 800821a:	46c0      	nop			@ (mov r8, r8)
 800821c:	ffffefff 	.word	0xffffefff
 8008220:	ffff8fff 	.word	0xffff8fff
 8008224:	fffffcff 	.word	0xfffffcff
 8008228:	ffffdfff 	.word	0xffffdfff
 800822c:	40012c00 	.word	0x40012c00
 8008230:	40014000 	.word	0x40014000
 8008234:	40014400 	.word	0x40014400
 8008238:	40014800 	.word	0x40014800
 800823c:	ffffbfff 	.word	0xffffbfff

08008240 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b086      	sub	sp, #24
 8008244:	af00      	add	r7, sp, #0
 8008246:	60f8      	str	r0, [r7, #12]
 8008248:	60b9      	str	r1, [r7, #8]
 800824a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	6a1b      	ldr	r3, [r3, #32]
 8008250:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	6a1b      	ldr	r3, [r3, #32]
 8008256:	2201      	movs	r2, #1
 8008258:	4393      	bics	r3, r2
 800825a:	001a      	movs	r2, r3
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	699b      	ldr	r3, [r3, #24]
 8008264:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	22f0      	movs	r2, #240	@ 0xf0
 800826a:	4393      	bics	r3, r2
 800826c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	011b      	lsls	r3, r3, #4
 8008272:	693a      	ldr	r2, [r7, #16]
 8008274:	4313      	orrs	r3, r2
 8008276:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	220a      	movs	r2, #10
 800827c:	4393      	bics	r3, r2
 800827e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008280:	697a      	ldr	r2, [r7, #20]
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	4313      	orrs	r3, r2
 8008286:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	693a      	ldr	r2, [r7, #16]
 800828c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	697a      	ldr	r2, [r7, #20]
 8008292:	621a      	str	r2, [r3, #32]
}
 8008294:	46c0      	nop			@ (mov r8, r8)
 8008296:	46bd      	mov	sp, r7
 8008298:	b006      	add	sp, #24
 800829a:	bd80      	pop	{r7, pc}

0800829c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b086      	sub	sp, #24
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	60f8      	str	r0, [r7, #12]
 80082a4:	60b9      	str	r1, [r7, #8]
 80082a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	6a1b      	ldr	r3, [r3, #32]
 80082ac:	2210      	movs	r2, #16
 80082ae:	4393      	bics	r3, r2
 80082b0:	001a      	movs	r2, r3
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	699b      	ldr	r3, [r3, #24]
 80082ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6a1b      	ldr	r3, [r3, #32]
 80082c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	4a0d      	ldr	r2, [pc, #52]	@ (80082fc <TIM_TI2_ConfigInputStage+0x60>)
 80082c6:	4013      	ands	r3, r2
 80082c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	031b      	lsls	r3, r3, #12
 80082ce:	697a      	ldr	r2, [r7, #20]
 80082d0:	4313      	orrs	r3, r2
 80082d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	22a0      	movs	r2, #160	@ 0xa0
 80082d8:	4393      	bics	r3, r2
 80082da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	011b      	lsls	r3, r3, #4
 80082e0:	693a      	ldr	r2, [r7, #16]
 80082e2:	4313      	orrs	r3, r2
 80082e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	697a      	ldr	r2, [r7, #20]
 80082ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	693a      	ldr	r2, [r7, #16]
 80082f0:	621a      	str	r2, [r3, #32]
}
 80082f2:	46c0      	nop			@ (mov r8, r8)
 80082f4:	46bd      	mov	sp, r7
 80082f6:	b006      	add	sp, #24
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	46c0      	nop			@ (mov r8, r8)
 80082fc:	ffff0fff 	.word	0xffff0fff

08008300 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2270      	movs	r2, #112	@ 0x70
 8008314:	4393      	bics	r3, r2
 8008316:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008318:	683a      	ldr	r2, [r7, #0]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	4313      	orrs	r3, r2
 800831e:	2207      	movs	r2, #7
 8008320:	4313      	orrs	r3, r2
 8008322:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	68fa      	ldr	r2, [r7, #12]
 8008328:	609a      	str	r2, [r3, #8]
}
 800832a:	46c0      	nop			@ (mov r8, r8)
 800832c:	46bd      	mov	sp, r7
 800832e:	b004      	add	sp, #16
 8008330:	bd80      	pop	{r7, pc}
	...

08008334 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b086      	sub	sp, #24
 8008338:	af00      	add	r7, sp, #0
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	60b9      	str	r1, [r7, #8]
 800833e:	607a      	str	r2, [r7, #4]
 8008340:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	4a09      	ldr	r2, [pc, #36]	@ (8008370 <TIM_ETR_SetConfig+0x3c>)
 800834c:	4013      	ands	r3, r2
 800834e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	021a      	lsls	r2, r3, #8
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	431a      	orrs	r2, r3
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	4313      	orrs	r3, r2
 800835c:	697a      	ldr	r2, [r7, #20]
 800835e:	4313      	orrs	r3, r2
 8008360:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	697a      	ldr	r2, [r7, #20]
 8008366:	609a      	str	r2, [r3, #8]
}
 8008368:	46c0      	nop			@ (mov r8, r8)
 800836a:	46bd      	mov	sp, r7
 800836c:	b006      	add	sp, #24
 800836e:	bd80      	pop	{r7, pc}
 8008370:	ffff00ff 	.word	0xffff00ff

08008374 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b086      	sub	sp, #24
 8008378:	af00      	add	r7, sp, #0
 800837a:	60f8      	str	r0, [r7, #12]
 800837c:	60b9      	str	r1, [r7, #8]
 800837e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	221f      	movs	r2, #31
 8008384:	4013      	ands	r3, r2
 8008386:	2201      	movs	r2, #1
 8008388:	409a      	lsls	r2, r3
 800838a:	0013      	movs	r3, r2
 800838c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	6a1b      	ldr	r3, [r3, #32]
 8008392:	697a      	ldr	r2, [r7, #20]
 8008394:	43d2      	mvns	r2, r2
 8008396:	401a      	ands	r2, r3
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	6a1a      	ldr	r2, [r3, #32]
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	211f      	movs	r1, #31
 80083a4:	400b      	ands	r3, r1
 80083a6:	6879      	ldr	r1, [r7, #4]
 80083a8:	4099      	lsls	r1, r3
 80083aa:	000b      	movs	r3, r1
 80083ac:	431a      	orrs	r2, r3
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	621a      	str	r2, [r3, #32]
}
 80083b2:	46c0      	nop			@ (mov r8, r8)
 80083b4:	46bd      	mov	sp, r7
 80083b6:	b006      	add	sp, #24
 80083b8:	bd80      	pop	{r7, pc}
	...

080083bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b084      	sub	sp, #16
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	223c      	movs	r2, #60	@ 0x3c
 80083ca:	5c9b      	ldrb	r3, [r3, r2]
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d101      	bne.n	80083d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80083d0:	2302      	movs	r3, #2
 80083d2:	e041      	b.n	8008458 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	223c      	movs	r2, #60	@ 0x3c
 80083d8:	2101      	movs	r1, #1
 80083da:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	223d      	movs	r2, #61	@ 0x3d
 80083e0:	2102      	movs	r1, #2
 80083e2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2270      	movs	r2, #112	@ 0x70
 80083f8:	4393      	bics	r3, r2
 80083fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	68fa      	ldr	r2, [r7, #12]
 8008402:	4313      	orrs	r3, r2
 8008404:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	68fa      	ldr	r2, [r7, #12]
 800840c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a13      	ldr	r2, [pc, #76]	@ (8008460 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d009      	beq.n	800842c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a11      	ldr	r2, [pc, #68]	@ (8008464 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d004      	beq.n	800842c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a10      	ldr	r2, [pc, #64]	@ (8008468 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d10c      	bne.n	8008446 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	2280      	movs	r2, #128	@ 0x80
 8008430:	4393      	bics	r3, r2
 8008432:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	68ba      	ldr	r2, [r7, #8]
 800843a:	4313      	orrs	r3, r2
 800843c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	68ba      	ldr	r2, [r7, #8]
 8008444:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	223d      	movs	r2, #61	@ 0x3d
 800844a:	2101      	movs	r1, #1
 800844c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	223c      	movs	r2, #60	@ 0x3c
 8008452:	2100      	movs	r1, #0
 8008454:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008456:	2300      	movs	r3, #0
}
 8008458:	0018      	movs	r0, r3
 800845a:	46bd      	mov	sp, r7
 800845c:	b004      	add	sp, #16
 800845e:	bd80      	pop	{r7, pc}
 8008460:	40012c00 	.word	0x40012c00
 8008464:	40000400 	.word	0x40000400
 8008468:	40014000 	.word	0x40014000

0800846c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008476:	2300      	movs	r3, #0
 8008478:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	223c      	movs	r2, #60	@ 0x3c
 800847e:	5c9b      	ldrb	r3, [r3, r2]
 8008480:	2b01      	cmp	r3, #1
 8008482:	d101      	bne.n	8008488 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008484:	2302      	movs	r3, #2
 8008486:	e03e      	b.n	8008506 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	223c      	movs	r2, #60	@ 0x3c
 800848c:	2101      	movs	r1, #1
 800848e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	22ff      	movs	r2, #255	@ 0xff
 8008494:	4393      	bics	r3, r2
 8008496:	001a      	movs	r2, r3
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	4313      	orrs	r3, r2
 800849e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	4a1b      	ldr	r2, [pc, #108]	@ (8008510 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80084a4:	401a      	ands	r2, r3
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	689b      	ldr	r3, [r3, #8]
 80084aa:	4313      	orrs	r3, r2
 80084ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	4a18      	ldr	r2, [pc, #96]	@ (8008514 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80084b2:	401a      	ands	r2, r3
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	4313      	orrs	r3, r2
 80084ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	4a16      	ldr	r2, [pc, #88]	@ (8008518 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80084c0:	401a      	ands	r2, r3
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4313      	orrs	r3, r2
 80084c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	4a13      	ldr	r2, [pc, #76]	@ (800851c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80084ce:	401a      	ands	r2, r3
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	691b      	ldr	r3, [r3, #16]
 80084d4:	4313      	orrs	r3, r2
 80084d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	4a11      	ldr	r2, [pc, #68]	@ (8008520 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80084dc:	401a      	ands	r2, r3
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	695b      	ldr	r3, [r3, #20]
 80084e2:	4313      	orrs	r3, r2
 80084e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	4a0e      	ldr	r2, [pc, #56]	@ (8008524 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80084ea:	401a      	ands	r2, r3
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	69db      	ldr	r3, [r3, #28]
 80084f0:	4313      	orrs	r3, r2
 80084f2:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	68fa      	ldr	r2, [r7, #12]
 80084fa:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	223c      	movs	r2, #60	@ 0x3c
 8008500:	2100      	movs	r1, #0
 8008502:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008504:	2300      	movs	r3, #0
}
 8008506:	0018      	movs	r0, r3
 8008508:	46bd      	mov	sp, r7
 800850a:	b004      	add	sp, #16
 800850c:	bd80      	pop	{r7, pc}
 800850e:	46c0      	nop			@ (mov r8, r8)
 8008510:	fffffcff 	.word	0xfffffcff
 8008514:	fffffbff 	.word	0xfffffbff
 8008518:	fffff7ff 	.word	0xfffff7ff
 800851c:	ffffefff 	.word	0xffffefff
 8008520:	ffffdfff 	.word	0xffffdfff
 8008524:	ffffbfff 	.word	0xffffbfff

08008528 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b082      	sub	sp, #8
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008530:	46c0      	nop			@ (mov r8, r8)
 8008532:	46bd      	mov	sp, r7
 8008534:	b002      	add	sp, #8
 8008536:	bd80      	pop	{r7, pc}

08008538 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008540:	46c0      	nop			@ (mov r8, r8)
 8008542:	46bd      	mov	sp, r7
 8008544:	b002      	add	sp, #8
 8008546:	bd80      	pop	{r7, pc}

08008548 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d101      	bne.n	800855a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008556:	2301      	movs	r3, #1
 8008558:	e044      	b.n	80085e4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800855e:	2b00      	cmp	r3, #0
 8008560:	d107      	bne.n	8008572 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2278      	movs	r2, #120	@ 0x78
 8008566:	2100      	movs	r1, #0
 8008568:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	0018      	movs	r0, r3
 800856e:	f7fb f8ed 	bl	800374c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2224      	movs	r2, #36	@ 0x24
 8008576:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	681a      	ldr	r2, [r3, #0]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	2101      	movs	r1, #1
 8008584:	438a      	bics	r2, r1
 8008586:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	0018      	movs	r0, r3
 800858c:	f000 fb14 	bl	8008bb8 <UART_SetConfig>
 8008590:	0003      	movs	r3, r0
 8008592:	2b01      	cmp	r3, #1
 8008594:	d101      	bne.n	800859a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	e024      	b.n	80085e4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d003      	beq.n	80085aa <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	0018      	movs	r0, r3
 80085a6:	f000 fc5f 	bl	8008e68 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	685a      	ldr	r2, [r3, #4]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	490d      	ldr	r1, [pc, #52]	@ (80085ec <HAL_UART_Init+0xa4>)
 80085b6:	400a      	ands	r2, r1
 80085b8:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	689a      	ldr	r2, [r3, #8]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	2108      	movs	r1, #8
 80085c6:	438a      	bics	r2, r1
 80085c8:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2101      	movs	r1, #1
 80085d6:	430a      	orrs	r2, r1
 80085d8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	0018      	movs	r0, r3
 80085de:	f000 fcf7 	bl	8008fd0 <UART_CheckIdleState>
 80085e2:	0003      	movs	r3, r0
}
 80085e4:	0018      	movs	r0, r3
 80085e6:	46bd      	mov	sp, r7
 80085e8:	b002      	add	sp, #8
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	fffff7ff 	.word	0xfffff7ff

080085f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80085f0:	b590      	push	{r4, r7, lr}
 80085f2:	b0ab      	sub	sp, #172	@ 0xac
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	69db      	ldr	r3, [r3, #28]
 80085fe:	22a4      	movs	r2, #164	@ 0xa4
 8008600:	18b9      	adds	r1, r7, r2
 8008602:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	20a0      	movs	r0, #160	@ 0xa0
 800860c:	1839      	adds	r1, r7, r0
 800860e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	219c      	movs	r1, #156	@ 0x9c
 8008618:	1879      	adds	r1, r7, r1
 800861a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800861c:	0011      	movs	r1, r2
 800861e:	18bb      	adds	r3, r7, r2
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a99      	ldr	r2, [pc, #612]	@ (8008888 <HAL_UART_IRQHandler+0x298>)
 8008624:	4013      	ands	r3, r2
 8008626:	2298      	movs	r2, #152	@ 0x98
 8008628:	18bc      	adds	r4, r7, r2
 800862a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800862c:	18bb      	adds	r3, r7, r2
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d114      	bne.n	800865e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008634:	187b      	adds	r3, r7, r1
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	2220      	movs	r2, #32
 800863a:	4013      	ands	r3, r2
 800863c:	d00f      	beq.n	800865e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800863e:	183b      	adds	r3, r7, r0
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	2220      	movs	r2, #32
 8008644:	4013      	ands	r3, r2
 8008646:	d00a      	beq.n	800865e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800864c:	2b00      	cmp	r3, #0
 800864e:	d100      	bne.n	8008652 <HAL_UART_IRQHandler+0x62>
 8008650:	e286      	b.n	8008b60 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	0010      	movs	r0, r2
 800865a:	4798      	blx	r3
      }
      return;
 800865c:	e280      	b.n	8008b60 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800865e:	2398      	movs	r3, #152	@ 0x98
 8008660:	18fb      	adds	r3, r7, r3
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d100      	bne.n	800866a <HAL_UART_IRQHandler+0x7a>
 8008668:	e114      	b.n	8008894 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800866a:	239c      	movs	r3, #156	@ 0x9c
 800866c:	18fb      	adds	r3, r7, r3
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	2201      	movs	r2, #1
 8008672:	4013      	ands	r3, r2
 8008674:	d106      	bne.n	8008684 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008676:	23a0      	movs	r3, #160	@ 0xa0
 8008678:	18fb      	adds	r3, r7, r3
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a83      	ldr	r2, [pc, #524]	@ (800888c <HAL_UART_IRQHandler+0x29c>)
 800867e:	4013      	ands	r3, r2
 8008680:	d100      	bne.n	8008684 <HAL_UART_IRQHandler+0x94>
 8008682:	e107      	b.n	8008894 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008684:	23a4      	movs	r3, #164	@ 0xa4
 8008686:	18fb      	adds	r3, r7, r3
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	2201      	movs	r2, #1
 800868c:	4013      	ands	r3, r2
 800868e:	d012      	beq.n	80086b6 <HAL_UART_IRQHandler+0xc6>
 8008690:	23a0      	movs	r3, #160	@ 0xa0
 8008692:	18fb      	adds	r3, r7, r3
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	2380      	movs	r3, #128	@ 0x80
 8008698:	005b      	lsls	r3, r3, #1
 800869a:	4013      	ands	r3, r2
 800869c:	d00b      	beq.n	80086b6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	2201      	movs	r2, #1
 80086a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2284      	movs	r2, #132	@ 0x84
 80086aa:	589b      	ldr	r3, [r3, r2]
 80086ac:	2201      	movs	r2, #1
 80086ae:	431a      	orrs	r2, r3
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2184      	movs	r1, #132	@ 0x84
 80086b4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80086b6:	23a4      	movs	r3, #164	@ 0xa4
 80086b8:	18fb      	adds	r3, r7, r3
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	2202      	movs	r2, #2
 80086be:	4013      	ands	r3, r2
 80086c0:	d011      	beq.n	80086e6 <HAL_UART_IRQHandler+0xf6>
 80086c2:	239c      	movs	r3, #156	@ 0x9c
 80086c4:	18fb      	adds	r3, r7, r3
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	2201      	movs	r2, #1
 80086ca:	4013      	ands	r3, r2
 80086cc:	d00b      	beq.n	80086e6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	2202      	movs	r2, #2
 80086d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2284      	movs	r2, #132	@ 0x84
 80086da:	589b      	ldr	r3, [r3, r2]
 80086dc:	2204      	movs	r2, #4
 80086de:	431a      	orrs	r2, r3
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2184      	movs	r1, #132	@ 0x84
 80086e4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80086e6:	23a4      	movs	r3, #164	@ 0xa4
 80086e8:	18fb      	adds	r3, r7, r3
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	2204      	movs	r2, #4
 80086ee:	4013      	ands	r3, r2
 80086f0:	d011      	beq.n	8008716 <HAL_UART_IRQHandler+0x126>
 80086f2:	239c      	movs	r3, #156	@ 0x9c
 80086f4:	18fb      	adds	r3, r7, r3
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	2201      	movs	r2, #1
 80086fa:	4013      	ands	r3, r2
 80086fc:	d00b      	beq.n	8008716 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	2204      	movs	r2, #4
 8008704:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2284      	movs	r2, #132	@ 0x84
 800870a:	589b      	ldr	r3, [r3, r2]
 800870c:	2202      	movs	r2, #2
 800870e:	431a      	orrs	r2, r3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2184      	movs	r1, #132	@ 0x84
 8008714:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008716:	23a4      	movs	r3, #164	@ 0xa4
 8008718:	18fb      	adds	r3, r7, r3
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2208      	movs	r2, #8
 800871e:	4013      	ands	r3, r2
 8008720:	d017      	beq.n	8008752 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008722:	23a0      	movs	r3, #160	@ 0xa0
 8008724:	18fb      	adds	r3, r7, r3
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	2220      	movs	r2, #32
 800872a:	4013      	ands	r3, r2
 800872c:	d105      	bne.n	800873a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800872e:	239c      	movs	r3, #156	@ 0x9c
 8008730:	18fb      	adds	r3, r7, r3
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	2201      	movs	r2, #1
 8008736:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008738:	d00b      	beq.n	8008752 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	2208      	movs	r2, #8
 8008740:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2284      	movs	r2, #132	@ 0x84
 8008746:	589b      	ldr	r3, [r3, r2]
 8008748:	2208      	movs	r2, #8
 800874a:	431a      	orrs	r2, r3
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2184      	movs	r1, #132	@ 0x84
 8008750:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008752:	23a4      	movs	r3, #164	@ 0xa4
 8008754:	18fb      	adds	r3, r7, r3
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	2380      	movs	r3, #128	@ 0x80
 800875a:	011b      	lsls	r3, r3, #4
 800875c:	4013      	ands	r3, r2
 800875e:	d013      	beq.n	8008788 <HAL_UART_IRQHandler+0x198>
 8008760:	23a0      	movs	r3, #160	@ 0xa0
 8008762:	18fb      	adds	r3, r7, r3
 8008764:	681a      	ldr	r2, [r3, #0]
 8008766:	2380      	movs	r3, #128	@ 0x80
 8008768:	04db      	lsls	r3, r3, #19
 800876a:	4013      	ands	r3, r2
 800876c:	d00c      	beq.n	8008788 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	2280      	movs	r2, #128	@ 0x80
 8008774:	0112      	lsls	r2, r2, #4
 8008776:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2284      	movs	r2, #132	@ 0x84
 800877c:	589b      	ldr	r3, [r3, r2]
 800877e:	2220      	movs	r2, #32
 8008780:	431a      	orrs	r2, r3
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2184      	movs	r1, #132	@ 0x84
 8008786:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2284      	movs	r2, #132	@ 0x84
 800878c:	589b      	ldr	r3, [r3, r2]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d100      	bne.n	8008794 <HAL_UART_IRQHandler+0x1a4>
 8008792:	e1e7      	b.n	8008b64 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008794:	23a4      	movs	r3, #164	@ 0xa4
 8008796:	18fb      	adds	r3, r7, r3
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	2220      	movs	r2, #32
 800879c:	4013      	ands	r3, r2
 800879e:	d00e      	beq.n	80087be <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80087a0:	23a0      	movs	r3, #160	@ 0xa0
 80087a2:	18fb      	adds	r3, r7, r3
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	2220      	movs	r2, #32
 80087a8:	4013      	ands	r3, r2
 80087aa:	d008      	beq.n	80087be <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d004      	beq.n	80087be <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	0010      	movs	r0, r2
 80087bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2284      	movs	r2, #132	@ 0x84
 80087c2:	589b      	ldr	r3, [r3, r2]
 80087c4:	2194      	movs	r1, #148	@ 0x94
 80087c6:	187a      	adds	r2, r7, r1
 80087c8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	689b      	ldr	r3, [r3, #8]
 80087d0:	2240      	movs	r2, #64	@ 0x40
 80087d2:	4013      	ands	r3, r2
 80087d4:	2b40      	cmp	r3, #64	@ 0x40
 80087d6:	d004      	beq.n	80087e2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80087d8:	187b      	adds	r3, r7, r1
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	2228      	movs	r2, #40	@ 0x28
 80087de:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80087e0:	d047      	beq.n	8008872 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	0018      	movs	r0, r3
 80087e6:	f000 fd05 	bl	80091f4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	2240      	movs	r2, #64	@ 0x40
 80087f2:	4013      	ands	r3, r2
 80087f4:	2b40      	cmp	r3, #64	@ 0x40
 80087f6:	d137      	bne.n	8008868 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087f8:	f3ef 8310 	mrs	r3, PRIMASK
 80087fc:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80087fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008800:	2090      	movs	r0, #144	@ 0x90
 8008802:	183a      	adds	r2, r7, r0
 8008804:	6013      	str	r3, [r2, #0]
 8008806:	2301      	movs	r3, #1
 8008808:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800880a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800880c:	f383 8810 	msr	PRIMASK, r3
}
 8008810:	46c0      	nop			@ (mov r8, r8)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	689a      	ldr	r2, [r3, #8]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	2140      	movs	r1, #64	@ 0x40
 800881e:	438a      	bics	r2, r1
 8008820:	609a      	str	r2, [r3, #8]
 8008822:	183b      	adds	r3, r7, r0
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008828:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800882a:	f383 8810 	msr	PRIMASK, r3
}
 800882e:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008834:	2b00      	cmp	r3, #0
 8008836:	d012      	beq.n	800885e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800883c:	4a14      	ldr	r2, [pc, #80]	@ (8008890 <HAL_UART_IRQHandler+0x2a0>)
 800883e:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008844:	0018      	movs	r0, r3
 8008846:	f7fb fc99 	bl	800417c <HAL_DMA_Abort_IT>
 800884a:	1e03      	subs	r3, r0, #0
 800884c:	d01a      	beq.n	8008884 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008852:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008858:	0018      	movs	r0, r3
 800885a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800885c:	e012      	b.n	8008884 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	0018      	movs	r0, r3
 8008862:	f000 f995 	bl	8008b90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008866:	e00d      	b.n	8008884 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	0018      	movs	r0, r3
 800886c:	f000 f990 	bl	8008b90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008870:	e008      	b.n	8008884 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	0018      	movs	r0, r3
 8008876:	f000 f98b 	bl	8008b90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2284      	movs	r2, #132	@ 0x84
 800887e:	2100      	movs	r1, #0
 8008880:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8008882:	e16f      	b.n	8008b64 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008884:	46c0      	nop			@ (mov r8, r8)
    return;
 8008886:	e16d      	b.n	8008b64 <HAL_UART_IRQHandler+0x574>
 8008888:	0000080f 	.word	0x0000080f
 800888c:	04000120 	.word	0x04000120
 8008890:	080092bd 	.word	0x080092bd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008898:	2b01      	cmp	r3, #1
 800889a:	d000      	beq.n	800889e <HAL_UART_IRQHandler+0x2ae>
 800889c:	e139      	b.n	8008b12 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800889e:	23a4      	movs	r3, #164	@ 0xa4
 80088a0:	18fb      	adds	r3, r7, r3
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	2210      	movs	r2, #16
 80088a6:	4013      	ands	r3, r2
 80088a8:	d100      	bne.n	80088ac <HAL_UART_IRQHandler+0x2bc>
 80088aa:	e132      	b.n	8008b12 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80088ac:	23a0      	movs	r3, #160	@ 0xa0
 80088ae:	18fb      	adds	r3, r7, r3
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	2210      	movs	r2, #16
 80088b4:	4013      	ands	r3, r2
 80088b6:	d100      	bne.n	80088ba <HAL_UART_IRQHandler+0x2ca>
 80088b8:	e12b      	b.n	8008b12 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	2210      	movs	r2, #16
 80088c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	689b      	ldr	r3, [r3, #8]
 80088c8:	2240      	movs	r2, #64	@ 0x40
 80088ca:	4013      	ands	r3, r2
 80088cc:	2b40      	cmp	r3, #64	@ 0x40
 80088ce:	d000      	beq.n	80088d2 <HAL_UART_IRQHandler+0x2e2>
 80088d0:	e09f      	b.n	8008a12 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	685a      	ldr	r2, [r3, #4]
 80088da:	217e      	movs	r1, #126	@ 0x7e
 80088dc:	187b      	adds	r3, r7, r1
 80088de:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80088e0:	187b      	adds	r3, r7, r1
 80088e2:	881b      	ldrh	r3, [r3, #0]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d100      	bne.n	80088ea <HAL_UART_IRQHandler+0x2fa>
 80088e8:	e13e      	b.n	8008b68 <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2258      	movs	r2, #88	@ 0x58
 80088ee:	5a9b      	ldrh	r3, [r3, r2]
 80088f0:	187a      	adds	r2, r7, r1
 80088f2:	8812      	ldrh	r2, [r2, #0]
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d300      	bcc.n	80088fa <HAL_UART_IRQHandler+0x30a>
 80088f8:	e136      	b.n	8008b68 <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	187a      	adds	r2, r7, r1
 80088fe:	215a      	movs	r1, #90	@ 0x5a
 8008900:	8812      	ldrh	r2, [r2, #0]
 8008902:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008908:	699b      	ldr	r3, [r3, #24]
 800890a:	2b20      	cmp	r3, #32
 800890c:	d06f      	beq.n	80089ee <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800890e:	f3ef 8310 	mrs	r3, PRIMASK
 8008912:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8008914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008916:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008918:	2301      	movs	r3, #1
 800891a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800891c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800891e:	f383 8810 	msr	PRIMASK, r3
}
 8008922:	46c0      	nop			@ (mov r8, r8)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4992      	ldr	r1, [pc, #584]	@ (8008b78 <HAL_UART_IRQHandler+0x588>)
 8008930:	400a      	ands	r2, r1
 8008932:	601a      	str	r2, [r3, #0]
 8008934:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008936:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800893a:	f383 8810 	msr	PRIMASK, r3
}
 800893e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008940:	f3ef 8310 	mrs	r3, PRIMASK
 8008944:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8008946:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008948:	677b      	str	r3, [r7, #116]	@ 0x74
 800894a:	2301      	movs	r3, #1
 800894c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800894e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008950:	f383 8810 	msr	PRIMASK, r3
}
 8008954:	46c0      	nop			@ (mov r8, r8)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	689a      	ldr	r2, [r3, #8]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	2101      	movs	r1, #1
 8008962:	438a      	bics	r2, r1
 8008964:	609a      	str	r2, [r3, #8]
 8008966:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008968:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800896a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800896c:	f383 8810 	msr	PRIMASK, r3
}
 8008970:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008972:	f3ef 8310 	mrs	r3, PRIMASK
 8008976:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8008978:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800897a:	673b      	str	r3, [r7, #112]	@ 0x70
 800897c:	2301      	movs	r3, #1
 800897e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008980:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008982:	f383 8810 	msr	PRIMASK, r3
}
 8008986:	46c0      	nop			@ (mov r8, r8)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	689a      	ldr	r2, [r3, #8]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	2140      	movs	r1, #64	@ 0x40
 8008994:	438a      	bics	r2, r1
 8008996:	609a      	str	r2, [r3, #8]
 8008998:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800899a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800899c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800899e:	f383 8810 	msr	PRIMASK, r3
}
 80089a2:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2280      	movs	r2, #128	@ 0x80
 80089a8:	2120      	movs	r1, #32
 80089aa:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2200      	movs	r2, #0
 80089b0:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089b2:	f3ef 8310 	mrs	r3, PRIMASK
 80089b6:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80089b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80089bc:	2301      	movs	r3, #1
 80089be:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80089c2:	f383 8810 	msr	PRIMASK, r3
}
 80089c6:	46c0      	nop			@ (mov r8, r8)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	681a      	ldr	r2, [r3, #0]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	2110      	movs	r1, #16
 80089d4:	438a      	bics	r2, r1
 80089d6:	601a      	str	r2, [r3, #0]
 80089d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80089da:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089de:	f383 8810 	msr	PRIMASK, r3
}
 80089e2:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80089e8:	0018      	movs	r0, r3
 80089ea:	f7fb fb8f 	bl	800410c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2202      	movs	r2, #2
 80089f2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2258      	movs	r2, #88	@ 0x58
 80089f8:	5a9a      	ldrh	r2, [r3, r2]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	215a      	movs	r1, #90	@ 0x5a
 80089fe:	5a5b      	ldrh	r3, [r3, r1]
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	1ad3      	subs	r3, r2, r3
 8008a04:	b29a      	uxth	r2, r3
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	0011      	movs	r1, r2
 8008a0a:	0018      	movs	r0, r3
 8008a0c:	f000 f8c8 	bl	8008ba0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008a10:	e0aa      	b.n	8008b68 <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2258      	movs	r2, #88	@ 0x58
 8008a16:	5a99      	ldrh	r1, [r3, r2]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	225a      	movs	r2, #90	@ 0x5a
 8008a1c:	5a9b      	ldrh	r3, [r3, r2]
 8008a1e:	b29a      	uxth	r2, r3
 8008a20:	208e      	movs	r0, #142	@ 0x8e
 8008a22:	183b      	adds	r3, r7, r0
 8008a24:	1a8a      	subs	r2, r1, r2
 8008a26:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	225a      	movs	r2, #90	@ 0x5a
 8008a2c:	5a9b      	ldrh	r3, [r3, r2]
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d100      	bne.n	8008a36 <HAL_UART_IRQHandler+0x446>
 8008a34:	e09a      	b.n	8008b6c <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 8008a36:	183b      	adds	r3, r7, r0
 8008a38:	881b      	ldrh	r3, [r3, #0]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d100      	bne.n	8008a40 <HAL_UART_IRQHandler+0x450>
 8008a3e:	e095      	b.n	8008b6c <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a40:	f3ef 8310 	mrs	r3, PRIMASK
 8008a44:	60fb      	str	r3, [r7, #12]
  return(result);
 8008a46:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a48:	2488      	movs	r4, #136	@ 0x88
 8008a4a:	193a      	adds	r2, r7, r4
 8008a4c:	6013      	str	r3, [r2, #0]
 8008a4e:	2301      	movs	r3, #1
 8008a50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	f383 8810 	msr	PRIMASK, r3
}
 8008a58:	46c0      	nop			@ (mov r8, r8)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	681a      	ldr	r2, [r3, #0]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4945      	ldr	r1, [pc, #276]	@ (8008b7c <HAL_UART_IRQHandler+0x58c>)
 8008a66:	400a      	ands	r2, r1
 8008a68:	601a      	str	r2, [r3, #0]
 8008a6a:	193b      	adds	r3, r7, r4
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	f383 8810 	msr	PRIMASK, r3
}
 8008a76:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a78:	f3ef 8310 	mrs	r3, PRIMASK
 8008a7c:	61bb      	str	r3, [r7, #24]
  return(result);
 8008a7e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a80:	2484      	movs	r4, #132	@ 0x84
 8008a82:	193a      	adds	r2, r7, r4
 8008a84:	6013      	str	r3, [r2, #0]
 8008a86:	2301      	movs	r3, #1
 8008a88:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a8a:	69fb      	ldr	r3, [r7, #28]
 8008a8c:	f383 8810 	msr	PRIMASK, r3
}
 8008a90:	46c0      	nop			@ (mov r8, r8)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	689a      	ldr	r2, [r3, #8]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	2101      	movs	r1, #1
 8008a9e:	438a      	bics	r2, r1
 8008aa0:	609a      	str	r2, [r3, #8]
 8008aa2:	193b      	adds	r3, r7, r4
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008aa8:	6a3b      	ldr	r3, [r7, #32]
 8008aaa:	f383 8810 	msr	PRIMASK, r3
}
 8008aae:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2280      	movs	r2, #128	@ 0x80
 8008ab4:	2120      	movs	r1, #32
 8008ab6:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2200      	movs	r2, #0
 8008abc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ac4:	f3ef 8310 	mrs	r3, PRIMASK
 8008ac8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8008aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008acc:	2480      	movs	r4, #128	@ 0x80
 8008ace:	193a      	adds	r2, r7, r4
 8008ad0:	6013      	str	r3, [r2, #0]
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ad8:	f383 8810 	msr	PRIMASK, r3
}
 8008adc:	46c0      	nop			@ (mov r8, r8)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	681a      	ldr	r2, [r3, #0]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	2110      	movs	r1, #16
 8008aea:	438a      	bics	r2, r1
 8008aec:	601a      	str	r2, [r3, #0]
 8008aee:	193b      	adds	r3, r7, r4
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008af4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008af6:	f383 8810 	msr	PRIMASK, r3
}
 8008afa:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2202      	movs	r2, #2
 8008b00:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008b02:	183b      	adds	r3, r7, r0
 8008b04:	881a      	ldrh	r2, [r3, #0]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	0011      	movs	r1, r2
 8008b0a:	0018      	movs	r0, r3
 8008b0c:	f000 f848 	bl	8008ba0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008b10:	e02c      	b.n	8008b6c <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008b12:	23a4      	movs	r3, #164	@ 0xa4
 8008b14:	18fb      	adds	r3, r7, r3
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	2280      	movs	r2, #128	@ 0x80
 8008b1a:	4013      	ands	r3, r2
 8008b1c:	d00f      	beq.n	8008b3e <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008b1e:	23a0      	movs	r3, #160	@ 0xa0
 8008b20:	18fb      	adds	r3, r7, r3
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	2280      	movs	r2, #128	@ 0x80
 8008b26:	4013      	ands	r3, r2
 8008b28:	d009      	beq.n	8008b3e <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d01e      	beq.n	8008b70 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b36:	687a      	ldr	r2, [r7, #4]
 8008b38:	0010      	movs	r0, r2
 8008b3a:	4798      	blx	r3
    }
    return;
 8008b3c:	e018      	b.n	8008b70 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008b3e:	23a4      	movs	r3, #164	@ 0xa4
 8008b40:	18fb      	adds	r3, r7, r3
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	2240      	movs	r2, #64	@ 0x40
 8008b46:	4013      	ands	r3, r2
 8008b48:	d013      	beq.n	8008b72 <HAL_UART_IRQHandler+0x582>
 8008b4a:	23a0      	movs	r3, #160	@ 0xa0
 8008b4c:	18fb      	adds	r3, r7, r3
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	2240      	movs	r2, #64	@ 0x40
 8008b52:	4013      	ands	r3, r2
 8008b54:	d00d      	beq.n	8008b72 <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	0018      	movs	r0, r3
 8008b5a:	f000 fbc6 	bl	80092ea <UART_EndTransmit_IT>
    return;
 8008b5e:	e008      	b.n	8008b72 <HAL_UART_IRQHandler+0x582>
      return;
 8008b60:	46c0      	nop			@ (mov r8, r8)
 8008b62:	e006      	b.n	8008b72 <HAL_UART_IRQHandler+0x582>
    return;
 8008b64:	46c0      	nop			@ (mov r8, r8)
 8008b66:	e004      	b.n	8008b72 <HAL_UART_IRQHandler+0x582>
      return;
 8008b68:	46c0      	nop			@ (mov r8, r8)
 8008b6a:	e002      	b.n	8008b72 <HAL_UART_IRQHandler+0x582>
      return;
 8008b6c:	46c0      	nop			@ (mov r8, r8)
 8008b6e:	e000      	b.n	8008b72 <HAL_UART_IRQHandler+0x582>
    return;
 8008b70:	46c0      	nop			@ (mov r8, r8)
  }

}
 8008b72:	46bd      	mov	sp, r7
 8008b74:	b02b      	add	sp, #172	@ 0xac
 8008b76:	bd90      	pop	{r4, r7, pc}
 8008b78:	fffffeff 	.word	0xfffffeff
 8008b7c:	fffffedf 	.word	0xfffffedf

08008b80 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b082      	sub	sp, #8
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008b88:	46c0      	nop			@ (mov r8, r8)
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	b002      	add	sp, #8
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b082      	sub	sp, #8
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008b98:	46c0      	nop			@ (mov r8, r8)
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	b002      	add	sp, #8
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b082      	sub	sp, #8
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	000a      	movs	r2, r1
 8008baa:	1cbb      	adds	r3, r7, #2
 8008bac:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008bae:	46c0      	nop			@ (mov r8, r8)
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	b002      	add	sp, #8
 8008bb4:	bd80      	pop	{r7, pc}
	...

08008bb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b088      	sub	sp, #32
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008bc0:	231e      	movs	r3, #30
 8008bc2:	18fb      	adds	r3, r7, r3
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	689a      	ldr	r2, [r3, #8]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	691b      	ldr	r3, [r3, #16]
 8008bd0:	431a      	orrs	r2, r3
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	695b      	ldr	r3, [r3, #20]
 8008bd6:	431a      	orrs	r2, r3
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	69db      	ldr	r3, [r3, #28]
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a97      	ldr	r2, [pc, #604]	@ (8008e44 <UART_SetConfig+0x28c>)
 8008be8:	4013      	ands	r3, r2
 8008bea:	0019      	movs	r1, r3
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	697a      	ldr	r2, [r7, #20]
 8008bf2:	430a      	orrs	r2, r1
 8008bf4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	4a92      	ldr	r2, [pc, #584]	@ (8008e48 <UART_SetConfig+0x290>)
 8008bfe:	4013      	ands	r3, r2
 8008c00:	0019      	movs	r1, r3
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	68da      	ldr	r2, [r3, #12]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	430a      	orrs	r2, r1
 8008c0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	699b      	ldr	r3, [r3, #24]
 8008c12:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6a1b      	ldr	r3, [r3, #32]
 8008c18:	697a      	ldr	r2, [r7, #20]
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	689b      	ldr	r3, [r3, #8]
 8008c24:	4a89      	ldr	r2, [pc, #548]	@ (8008e4c <UART_SetConfig+0x294>)
 8008c26:	4013      	ands	r3, r2
 8008c28:	0019      	movs	r1, r3
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	697a      	ldr	r2, [r7, #20]
 8008c30:	430a      	orrs	r2, r1
 8008c32:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4a85      	ldr	r2, [pc, #532]	@ (8008e50 <UART_SetConfig+0x298>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d127      	bne.n	8008c8e <UART_SetConfig+0xd6>
 8008c3e:	4b85      	ldr	r3, [pc, #532]	@ (8008e54 <UART_SetConfig+0x29c>)
 8008c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c42:	2203      	movs	r2, #3
 8008c44:	4013      	ands	r3, r2
 8008c46:	2b03      	cmp	r3, #3
 8008c48:	d00d      	beq.n	8008c66 <UART_SetConfig+0xae>
 8008c4a:	d81b      	bhi.n	8008c84 <UART_SetConfig+0xcc>
 8008c4c:	2b02      	cmp	r3, #2
 8008c4e:	d014      	beq.n	8008c7a <UART_SetConfig+0xc2>
 8008c50:	d818      	bhi.n	8008c84 <UART_SetConfig+0xcc>
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d002      	beq.n	8008c5c <UART_SetConfig+0xa4>
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d00a      	beq.n	8008c70 <UART_SetConfig+0xb8>
 8008c5a:	e013      	b.n	8008c84 <UART_SetConfig+0xcc>
 8008c5c:	231f      	movs	r3, #31
 8008c5e:	18fb      	adds	r3, r7, r3
 8008c60:	2200      	movs	r2, #0
 8008c62:	701a      	strb	r2, [r3, #0]
 8008c64:	e035      	b.n	8008cd2 <UART_SetConfig+0x11a>
 8008c66:	231f      	movs	r3, #31
 8008c68:	18fb      	adds	r3, r7, r3
 8008c6a:	2202      	movs	r2, #2
 8008c6c:	701a      	strb	r2, [r3, #0]
 8008c6e:	e030      	b.n	8008cd2 <UART_SetConfig+0x11a>
 8008c70:	231f      	movs	r3, #31
 8008c72:	18fb      	adds	r3, r7, r3
 8008c74:	2204      	movs	r2, #4
 8008c76:	701a      	strb	r2, [r3, #0]
 8008c78:	e02b      	b.n	8008cd2 <UART_SetConfig+0x11a>
 8008c7a:	231f      	movs	r3, #31
 8008c7c:	18fb      	adds	r3, r7, r3
 8008c7e:	2208      	movs	r2, #8
 8008c80:	701a      	strb	r2, [r3, #0]
 8008c82:	e026      	b.n	8008cd2 <UART_SetConfig+0x11a>
 8008c84:	231f      	movs	r3, #31
 8008c86:	18fb      	adds	r3, r7, r3
 8008c88:	2210      	movs	r2, #16
 8008c8a:	701a      	strb	r2, [r3, #0]
 8008c8c:	e021      	b.n	8008cd2 <UART_SetConfig+0x11a>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a71      	ldr	r2, [pc, #452]	@ (8008e58 <UART_SetConfig+0x2a0>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d104      	bne.n	8008ca2 <UART_SetConfig+0xea>
 8008c98:	231f      	movs	r3, #31
 8008c9a:	18fb      	adds	r3, r7, r3
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	701a      	strb	r2, [r3, #0]
 8008ca0:	e017      	b.n	8008cd2 <UART_SetConfig+0x11a>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a6d      	ldr	r2, [pc, #436]	@ (8008e5c <UART_SetConfig+0x2a4>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d104      	bne.n	8008cb6 <UART_SetConfig+0xfe>
 8008cac:	231f      	movs	r3, #31
 8008cae:	18fb      	adds	r3, r7, r3
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	701a      	strb	r2, [r3, #0]
 8008cb4:	e00d      	b.n	8008cd2 <UART_SetConfig+0x11a>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a69      	ldr	r2, [pc, #420]	@ (8008e60 <UART_SetConfig+0x2a8>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d104      	bne.n	8008cca <UART_SetConfig+0x112>
 8008cc0:	231f      	movs	r3, #31
 8008cc2:	18fb      	adds	r3, r7, r3
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	701a      	strb	r2, [r3, #0]
 8008cc8:	e003      	b.n	8008cd2 <UART_SetConfig+0x11a>
 8008cca:	231f      	movs	r3, #31
 8008ccc:	18fb      	adds	r3, r7, r3
 8008cce:	2210      	movs	r2, #16
 8008cd0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	69da      	ldr	r2, [r3, #28]
 8008cd6:	2380      	movs	r3, #128	@ 0x80
 8008cd8:	021b      	lsls	r3, r3, #8
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d15c      	bne.n	8008d98 <UART_SetConfig+0x1e0>
  {
    switch (clocksource)
 8008cde:	231f      	movs	r3, #31
 8008ce0:	18fb      	adds	r3, r7, r3
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	2b08      	cmp	r3, #8
 8008ce6:	d015      	beq.n	8008d14 <UART_SetConfig+0x15c>
 8008ce8:	dc18      	bgt.n	8008d1c <UART_SetConfig+0x164>
 8008cea:	2b04      	cmp	r3, #4
 8008cec:	d00d      	beq.n	8008d0a <UART_SetConfig+0x152>
 8008cee:	dc15      	bgt.n	8008d1c <UART_SetConfig+0x164>
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d002      	beq.n	8008cfa <UART_SetConfig+0x142>
 8008cf4:	2b02      	cmp	r3, #2
 8008cf6:	d005      	beq.n	8008d04 <UART_SetConfig+0x14c>
 8008cf8:	e010      	b.n	8008d1c <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008cfa:	f7fd ff09 	bl	8006b10 <HAL_RCC_GetPCLK1Freq>
 8008cfe:	0003      	movs	r3, r0
 8008d00:	61bb      	str	r3, [r7, #24]
        break;
 8008d02:	e012      	b.n	8008d2a <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d04:	4b57      	ldr	r3, [pc, #348]	@ (8008e64 <UART_SetConfig+0x2ac>)
 8008d06:	61bb      	str	r3, [r7, #24]
        break;
 8008d08:	e00f      	b.n	8008d2a <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d0a:	f7fd fe9d 	bl	8006a48 <HAL_RCC_GetSysClockFreq>
 8008d0e:	0003      	movs	r3, r0
 8008d10:	61bb      	str	r3, [r7, #24]
        break;
 8008d12:	e00a      	b.n	8008d2a <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d14:	2380      	movs	r3, #128	@ 0x80
 8008d16:	021b      	lsls	r3, r3, #8
 8008d18:	61bb      	str	r3, [r7, #24]
        break;
 8008d1a:	e006      	b.n	8008d2a <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008d20:	231e      	movs	r3, #30
 8008d22:	18fb      	adds	r3, r7, r3
 8008d24:	2201      	movs	r2, #1
 8008d26:	701a      	strb	r2, [r3, #0]
        break;
 8008d28:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008d2a:	69bb      	ldr	r3, [r7, #24]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d100      	bne.n	8008d32 <UART_SetConfig+0x17a>
 8008d30:	e07a      	b.n	8008e28 <UART_SetConfig+0x270>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008d32:	69bb      	ldr	r3, [r7, #24]
 8008d34:	005a      	lsls	r2, r3, #1
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	085b      	lsrs	r3, r3, #1
 8008d3c:	18d2      	adds	r2, r2, r3
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	0019      	movs	r1, r3
 8008d44:	0010      	movs	r0, r2
 8008d46:	f7f7 f9df 	bl	8000108 <__udivsi3>
 8008d4a:	0003      	movs	r3, r0
 8008d4c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	2b0f      	cmp	r3, #15
 8008d52:	d91c      	bls.n	8008d8e <UART_SetConfig+0x1d6>
 8008d54:	693a      	ldr	r2, [r7, #16]
 8008d56:	2380      	movs	r3, #128	@ 0x80
 8008d58:	025b      	lsls	r3, r3, #9
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	d217      	bcs.n	8008d8e <UART_SetConfig+0x1d6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	b29a      	uxth	r2, r3
 8008d62:	200e      	movs	r0, #14
 8008d64:	183b      	adds	r3, r7, r0
 8008d66:	210f      	movs	r1, #15
 8008d68:	438a      	bics	r2, r1
 8008d6a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	085b      	lsrs	r3, r3, #1
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	2207      	movs	r2, #7
 8008d74:	4013      	ands	r3, r2
 8008d76:	b299      	uxth	r1, r3
 8008d78:	183b      	adds	r3, r7, r0
 8008d7a:	183a      	adds	r2, r7, r0
 8008d7c:	8812      	ldrh	r2, [r2, #0]
 8008d7e:	430a      	orrs	r2, r1
 8008d80:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	183a      	adds	r2, r7, r0
 8008d88:	8812      	ldrh	r2, [r2, #0]
 8008d8a:	60da      	str	r2, [r3, #12]
 8008d8c:	e04c      	b.n	8008e28 <UART_SetConfig+0x270>
      }
      else
      {
        ret = HAL_ERROR;
 8008d8e:	231e      	movs	r3, #30
 8008d90:	18fb      	adds	r3, r7, r3
 8008d92:	2201      	movs	r2, #1
 8008d94:	701a      	strb	r2, [r3, #0]
 8008d96:	e047      	b.n	8008e28 <UART_SetConfig+0x270>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008d98:	231f      	movs	r3, #31
 8008d9a:	18fb      	adds	r3, r7, r3
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	2b08      	cmp	r3, #8
 8008da0:	d015      	beq.n	8008dce <UART_SetConfig+0x216>
 8008da2:	dc18      	bgt.n	8008dd6 <UART_SetConfig+0x21e>
 8008da4:	2b04      	cmp	r3, #4
 8008da6:	d00d      	beq.n	8008dc4 <UART_SetConfig+0x20c>
 8008da8:	dc15      	bgt.n	8008dd6 <UART_SetConfig+0x21e>
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d002      	beq.n	8008db4 <UART_SetConfig+0x1fc>
 8008dae:	2b02      	cmp	r3, #2
 8008db0:	d005      	beq.n	8008dbe <UART_SetConfig+0x206>
 8008db2:	e010      	b.n	8008dd6 <UART_SetConfig+0x21e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008db4:	f7fd feac 	bl	8006b10 <HAL_RCC_GetPCLK1Freq>
 8008db8:	0003      	movs	r3, r0
 8008dba:	61bb      	str	r3, [r7, #24]
        break;
 8008dbc:	e012      	b.n	8008de4 <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008dbe:	4b29      	ldr	r3, [pc, #164]	@ (8008e64 <UART_SetConfig+0x2ac>)
 8008dc0:	61bb      	str	r3, [r7, #24]
        break;
 8008dc2:	e00f      	b.n	8008de4 <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008dc4:	f7fd fe40 	bl	8006a48 <HAL_RCC_GetSysClockFreq>
 8008dc8:	0003      	movs	r3, r0
 8008dca:	61bb      	str	r3, [r7, #24]
        break;
 8008dcc:	e00a      	b.n	8008de4 <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008dce:	2380      	movs	r3, #128	@ 0x80
 8008dd0:	021b      	lsls	r3, r3, #8
 8008dd2:	61bb      	str	r3, [r7, #24]
        break;
 8008dd4:	e006      	b.n	8008de4 <UART_SetConfig+0x22c>
      default:
        pclk = 0U;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008dda:	231e      	movs	r3, #30
 8008ddc:	18fb      	adds	r3, r7, r3
 8008dde:	2201      	movs	r2, #1
 8008de0:	701a      	strb	r2, [r3, #0]
        break;
 8008de2:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8008de4:	69bb      	ldr	r3, [r7, #24]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d01e      	beq.n	8008e28 <UART_SetConfig+0x270>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	685b      	ldr	r3, [r3, #4]
 8008dee:	085a      	lsrs	r2, r3, #1
 8008df0:	69bb      	ldr	r3, [r7, #24]
 8008df2:	18d2      	adds	r2, r2, r3
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	0019      	movs	r1, r3
 8008dfa:	0010      	movs	r0, r2
 8008dfc:	f7f7 f984 	bl	8000108 <__udivsi3>
 8008e00:	0003      	movs	r3, r0
 8008e02:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	2b0f      	cmp	r3, #15
 8008e08:	d90a      	bls.n	8008e20 <UART_SetConfig+0x268>
 8008e0a:	693a      	ldr	r2, [r7, #16]
 8008e0c:	2380      	movs	r3, #128	@ 0x80
 8008e0e:	025b      	lsls	r3, r3, #9
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d205      	bcs.n	8008e20 <UART_SetConfig+0x268>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	b29a      	uxth	r2, r3
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	60da      	str	r2, [r3, #12]
 8008e1e:	e003      	b.n	8008e28 <UART_SetConfig+0x270>
      }
      else
      {
        ret = HAL_ERROR;
 8008e20:	231e      	movs	r3, #30
 8008e22:	18fb      	adds	r3, r7, r3
 8008e24:	2201      	movs	r2, #1
 8008e26:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2200      	movs	r2, #0
 8008e32:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008e34:	231e      	movs	r3, #30
 8008e36:	18fb      	adds	r3, r7, r3
 8008e38:	781b      	ldrb	r3, [r3, #0]
}
 8008e3a:	0018      	movs	r0, r3
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	b008      	add	sp, #32
 8008e40:	bd80      	pop	{r7, pc}
 8008e42:	46c0      	nop			@ (mov r8, r8)
 8008e44:	efff69f3 	.word	0xefff69f3
 8008e48:	ffffcfff 	.word	0xffffcfff
 8008e4c:	fffff4ff 	.word	0xfffff4ff
 8008e50:	40013800 	.word	0x40013800
 8008e54:	40021000 	.word	0x40021000
 8008e58:	40004400 	.word	0x40004400
 8008e5c:	40004800 	.word	0x40004800
 8008e60:	40004c00 	.word	0x40004c00
 8008e64:	007a1200 	.word	0x007a1200

08008e68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e74:	2201      	movs	r2, #1
 8008e76:	4013      	ands	r3, r2
 8008e78:	d00b      	beq.n	8008e92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	4a4a      	ldr	r2, [pc, #296]	@ (8008fac <UART_AdvFeatureConfig+0x144>)
 8008e82:	4013      	ands	r3, r2
 8008e84:	0019      	movs	r1, r3
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	430a      	orrs	r2, r1
 8008e90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e96:	2202      	movs	r2, #2
 8008e98:	4013      	ands	r3, r2
 8008e9a:	d00b      	beq.n	8008eb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	4a43      	ldr	r2, [pc, #268]	@ (8008fb0 <UART_AdvFeatureConfig+0x148>)
 8008ea4:	4013      	ands	r3, r2
 8008ea6:	0019      	movs	r1, r3
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	430a      	orrs	r2, r1
 8008eb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eb8:	2204      	movs	r2, #4
 8008eba:	4013      	ands	r3, r2
 8008ebc:	d00b      	beq.n	8008ed6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	4a3b      	ldr	r2, [pc, #236]	@ (8008fb4 <UART_AdvFeatureConfig+0x14c>)
 8008ec6:	4013      	ands	r3, r2
 8008ec8:	0019      	movs	r1, r3
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	430a      	orrs	r2, r1
 8008ed4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eda:	2208      	movs	r2, #8
 8008edc:	4013      	ands	r3, r2
 8008ede:	d00b      	beq.n	8008ef8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	4a34      	ldr	r2, [pc, #208]	@ (8008fb8 <UART_AdvFeatureConfig+0x150>)
 8008ee8:	4013      	ands	r3, r2
 8008eea:	0019      	movs	r1, r3
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	430a      	orrs	r2, r1
 8008ef6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008efc:	2210      	movs	r2, #16
 8008efe:	4013      	ands	r3, r2
 8008f00:	d00b      	beq.n	8008f1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	689b      	ldr	r3, [r3, #8]
 8008f08:	4a2c      	ldr	r2, [pc, #176]	@ (8008fbc <UART_AdvFeatureConfig+0x154>)
 8008f0a:	4013      	ands	r3, r2
 8008f0c:	0019      	movs	r1, r3
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	430a      	orrs	r2, r1
 8008f18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f1e:	2220      	movs	r2, #32
 8008f20:	4013      	ands	r3, r2
 8008f22:	d00b      	beq.n	8008f3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	4a25      	ldr	r2, [pc, #148]	@ (8008fc0 <UART_AdvFeatureConfig+0x158>)
 8008f2c:	4013      	ands	r3, r2
 8008f2e:	0019      	movs	r1, r3
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	430a      	orrs	r2, r1
 8008f3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f40:	2240      	movs	r2, #64	@ 0x40
 8008f42:	4013      	ands	r3, r2
 8008f44:	d01d      	beq.n	8008f82 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	4a1d      	ldr	r2, [pc, #116]	@ (8008fc4 <UART_AdvFeatureConfig+0x15c>)
 8008f4e:	4013      	ands	r3, r2
 8008f50:	0019      	movs	r1, r3
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	430a      	orrs	r2, r1
 8008f5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008f62:	2380      	movs	r3, #128	@ 0x80
 8008f64:	035b      	lsls	r3, r3, #13
 8008f66:	429a      	cmp	r2, r3
 8008f68:	d10b      	bne.n	8008f82 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	4a15      	ldr	r2, [pc, #84]	@ (8008fc8 <UART_AdvFeatureConfig+0x160>)
 8008f72:	4013      	ands	r3, r2
 8008f74:	0019      	movs	r1, r3
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	430a      	orrs	r2, r1
 8008f80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f86:	2280      	movs	r2, #128	@ 0x80
 8008f88:	4013      	ands	r3, r2
 8008f8a:	d00b      	beq.n	8008fa4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	4a0e      	ldr	r2, [pc, #56]	@ (8008fcc <UART_AdvFeatureConfig+0x164>)
 8008f94:	4013      	ands	r3, r2
 8008f96:	0019      	movs	r1, r3
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	430a      	orrs	r2, r1
 8008fa2:	605a      	str	r2, [r3, #4]
  }
}
 8008fa4:	46c0      	nop			@ (mov r8, r8)
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	b002      	add	sp, #8
 8008faa:	bd80      	pop	{r7, pc}
 8008fac:	fffdffff 	.word	0xfffdffff
 8008fb0:	fffeffff 	.word	0xfffeffff
 8008fb4:	fffbffff 	.word	0xfffbffff
 8008fb8:	ffff7fff 	.word	0xffff7fff
 8008fbc:	ffffefff 	.word	0xffffefff
 8008fc0:	ffffdfff 	.word	0xffffdfff
 8008fc4:	ffefffff 	.word	0xffefffff
 8008fc8:	ff9fffff 	.word	0xff9fffff
 8008fcc:	fff7ffff 	.word	0xfff7ffff

08008fd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b092      	sub	sp, #72	@ 0x48
 8008fd4:	af02      	add	r7, sp, #8
 8008fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2284      	movs	r2, #132	@ 0x84
 8008fdc:	2100      	movs	r1, #0
 8008fde:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008fe0:	f7fa fd52 	bl	8003a88 <HAL_GetTick>
 8008fe4:	0003      	movs	r3, r0
 8008fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	2208      	movs	r2, #8
 8008ff0:	4013      	ands	r3, r2
 8008ff2:	2b08      	cmp	r3, #8
 8008ff4:	d12c      	bne.n	8009050 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ff6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ff8:	2280      	movs	r2, #128	@ 0x80
 8008ffa:	0391      	lsls	r1, r2, #14
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	4a46      	ldr	r2, [pc, #280]	@ (8009118 <UART_CheckIdleState+0x148>)
 8009000:	9200      	str	r2, [sp, #0]
 8009002:	2200      	movs	r2, #0
 8009004:	f000 f88c 	bl	8009120 <UART_WaitOnFlagUntilTimeout>
 8009008:	1e03      	subs	r3, r0, #0
 800900a:	d021      	beq.n	8009050 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800900c:	f3ef 8310 	mrs	r3, PRIMASK
 8009010:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8009012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009014:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009016:	2301      	movs	r3, #1
 8009018:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800901a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800901c:	f383 8810 	msr	PRIMASK, r3
}
 8009020:	46c0      	nop			@ (mov r8, r8)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	681a      	ldr	r2, [r3, #0]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	2180      	movs	r1, #128	@ 0x80
 800902e:	438a      	bics	r2, r1
 8009030:	601a      	str	r2, [r3, #0]
 8009032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009034:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009038:	f383 8810 	msr	PRIMASK, r3
}
 800903c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2220      	movs	r2, #32
 8009042:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2278      	movs	r2, #120	@ 0x78
 8009048:	2100      	movs	r1, #0
 800904a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800904c:	2303      	movs	r3, #3
 800904e:	e05f      	b.n	8009110 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	2204      	movs	r2, #4
 8009058:	4013      	ands	r3, r2
 800905a:	2b04      	cmp	r3, #4
 800905c:	d146      	bne.n	80090ec <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800905e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009060:	2280      	movs	r2, #128	@ 0x80
 8009062:	03d1      	lsls	r1, r2, #15
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	4a2c      	ldr	r2, [pc, #176]	@ (8009118 <UART_CheckIdleState+0x148>)
 8009068:	9200      	str	r2, [sp, #0]
 800906a:	2200      	movs	r2, #0
 800906c:	f000 f858 	bl	8009120 <UART_WaitOnFlagUntilTimeout>
 8009070:	1e03      	subs	r3, r0, #0
 8009072:	d03b      	beq.n	80090ec <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009074:	f3ef 8310 	mrs	r3, PRIMASK
 8009078:	60fb      	str	r3, [r7, #12]
  return(result);
 800907a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800907c:	637b      	str	r3, [r7, #52]	@ 0x34
 800907e:	2301      	movs	r3, #1
 8009080:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	f383 8810 	msr	PRIMASK, r3
}
 8009088:	46c0      	nop			@ (mov r8, r8)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	681a      	ldr	r2, [r3, #0]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4921      	ldr	r1, [pc, #132]	@ (800911c <UART_CheckIdleState+0x14c>)
 8009096:	400a      	ands	r2, r1
 8009098:	601a      	str	r2, [r3, #0]
 800909a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800909c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	f383 8810 	msr	PRIMASK, r3
}
 80090a4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090a6:	f3ef 8310 	mrs	r3, PRIMASK
 80090aa:	61bb      	str	r3, [r7, #24]
  return(result);
 80090ac:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80090b0:	2301      	movs	r3, #1
 80090b2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090b4:	69fb      	ldr	r3, [r7, #28]
 80090b6:	f383 8810 	msr	PRIMASK, r3
}
 80090ba:	46c0      	nop			@ (mov r8, r8)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	689a      	ldr	r2, [r3, #8]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	2101      	movs	r1, #1
 80090c8:	438a      	bics	r2, r1
 80090ca:	609a      	str	r2, [r3, #8]
 80090cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ce:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090d0:	6a3b      	ldr	r3, [r7, #32]
 80090d2:	f383 8810 	msr	PRIMASK, r3
}
 80090d6:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2280      	movs	r2, #128	@ 0x80
 80090dc:	2120      	movs	r1, #32
 80090de:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2278      	movs	r2, #120	@ 0x78
 80090e4:	2100      	movs	r1, #0
 80090e6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090e8:	2303      	movs	r3, #3
 80090ea:	e011      	b.n	8009110 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2220      	movs	r2, #32
 80090f0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2280      	movs	r2, #128	@ 0x80
 80090f6:	2120      	movs	r1, #32
 80090f8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2200      	movs	r2, #0
 80090fe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2278      	movs	r2, #120	@ 0x78
 800910a:	2100      	movs	r1, #0
 800910c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800910e:	2300      	movs	r3, #0
}
 8009110:	0018      	movs	r0, r3
 8009112:	46bd      	mov	sp, r7
 8009114:	b010      	add	sp, #64	@ 0x40
 8009116:	bd80      	pop	{r7, pc}
 8009118:	01ffffff 	.word	0x01ffffff
 800911c:	fffffedf 	.word	0xfffffedf

08009120 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
 8009126:	60f8      	str	r0, [r7, #12]
 8009128:	60b9      	str	r1, [r7, #8]
 800912a:	603b      	str	r3, [r7, #0]
 800912c:	1dfb      	adds	r3, r7, #7
 800912e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009130:	e04b      	b.n	80091ca <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009132:	69bb      	ldr	r3, [r7, #24]
 8009134:	3301      	adds	r3, #1
 8009136:	d048      	beq.n	80091ca <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009138:	f7fa fca6 	bl	8003a88 <HAL_GetTick>
 800913c:	0002      	movs	r2, r0
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	1ad3      	subs	r3, r2, r3
 8009142:	69ba      	ldr	r2, [r7, #24]
 8009144:	429a      	cmp	r2, r3
 8009146:	d302      	bcc.n	800914e <UART_WaitOnFlagUntilTimeout+0x2e>
 8009148:	69bb      	ldr	r3, [r7, #24]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d101      	bne.n	8009152 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800914e:	2303      	movs	r3, #3
 8009150:	e04b      	b.n	80091ea <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	2204      	movs	r2, #4
 800915a:	4013      	ands	r3, r2
 800915c:	d035      	beq.n	80091ca <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	69db      	ldr	r3, [r3, #28]
 8009164:	2208      	movs	r2, #8
 8009166:	4013      	ands	r3, r2
 8009168:	2b08      	cmp	r3, #8
 800916a:	d111      	bne.n	8009190 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	2208      	movs	r2, #8
 8009172:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	0018      	movs	r0, r3
 8009178:	f000 f83c 	bl	80091f4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2284      	movs	r2, #132	@ 0x84
 8009180:	2108      	movs	r1, #8
 8009182:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2278      	movs	r2, #120	@ 0x78
 8009188:	2100      	movs	r1, #0
 800918a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800918c:	2301      	movs	r3, #1
 800918e:	e02c      	b.n	80091ea <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	69da      	ldr	r2, [r3, #28]
 8009196:	2380      	movs	r3, #128	@ 0x80
 8009198:	011b      	lsls	r3, r3, #4
 800919a:	401a      	ands	r2, r3
 800919c:	2380      	movs	r3, #128	@ 0x80
 800919e:	011b      	lsls	r3, r3, #4
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d112      	bne.n	80091ca <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	2280      	movs	r2, #128	@ 0x80
 80091aa:	0112      	lsls	r2, r2, #4
 80091ac:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	0018      	movs	r0, r3
 80091b2:	f000 f81f 	bl	80091f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	2284      	movs	r2, #132	@ 0x84
 80091ba:	2120      	movs	r1, #32
 80091bc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	2278      	movs	r2, #120	@ 0x78
 80091c2:	2100      	movs	r1, #0
 80091c4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80091c6:	2303      	movs	r3, #3
 80091c8:	e00f      	b.n	80091ea <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	69db      	ldr	r3, [r3, #28]
 80091d0:	68ba      	ldr	r2, [r7, #8]
 80091d2:	4013      	ands	r3, r2
 80091d4:	68ba      	ldr	r2, [r7, #8]
 80091d6:	1ad3      	subs	r3, r2, r3
 80091d8:	425a      	negs	r2, r3
 80091da:	4153      	adcs	r3, r2
 80091dc:	b2db      	uxtb	r3, r3
 80091de:	001a      	movs	r2, r3
 80091e0:	1dfb      	adds	r3, r7, #7
 80091e2:	781b      	ldrb	r3, [r3, #0]
 80091e4:	429a      	cmp	r2, r3
 80091e6:	d0a4      	beq.n	8009132 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80091e8:	2300      	movs	r3, #0
}
 80091ea:	0018      	movs	r0, r3
 80091ec:	46bd      	mov	sp, r7
 80091ee:	b004      	add	sp, #16
 80091f0:	bd80      	pop	{r7, pc}
	...

080091f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b08e      	sub	sp, #56	@ 0x38
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091fc:	f3ef 8310 	mrs	r3, PRIMASK
 8009200:	617b      	str	r3, [r7, #20]
  return(result);
 8009202:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009204:	637b      	str	r3, [r7, #52]	@ 0x34
 8009206:	2301      	movs	r3, #1
 8009208:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800920a:	69bb      	ldr	r3, [r7, #24]
 800920c:	f383 8810 	msr	PRIMASK, r3
}
 8009210:	46c0      	nop			@ (mov r8, r8)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	681a      	ldr	r2, [r3, #0]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4926      	ldr	r1, [pc, #152]	@ (80092b8 <UART_EndRxTransfer+0xc4>)
 800921e:	400a      	ands	r2, r1
 8009220:	601a      	str	r2, [r3, #0]
 8009222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009224:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009226:	69fb      	ldr	r3, [r7, #28]
 8009228:	f383 8810 	msr	PRIMASK, r3
}
 800922c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800922e:	f3ef 8310 	mrs	r3, PRIMASK
 8009232:	623b      	str	r3, [r7, #32]
  return(result);
 8009234:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009236:	633b      	str	r3, [r7, #48]	@ 0x30
 8009238:	2301      	movs	r3, #1
 800923a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800923c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800923e:	f383 8810 	msr	PRIMASK, r3
}
 8009242:	46c0      	nop			@ (mov r8, r8)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	689a      	ldr	r2, [r3, #8]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	2101      	movs	r1, #1
 8009250:	438a      	bics	r2, r1
 8009252:	609a      	str	r2, [r3, #8]
 8009254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009256:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800925a:	f383 8810 	msr	PRIMASK, r3
}
 800925e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009264:	2b01      	cmp	r3, #1
 8009266:	d118      	bne.n	800929a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009268:	f3ef 8310 	mrs	r3, PRIMASK
 800926c:	60bb      	str	r3, [r7, #8]
  return(result);
 800926e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009270:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009272:	2301      	movs	r3, #1
 8009274:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	f383 8810 	msr	PRIMASK, r3
}
 800927c:	46c0      	nop			@ (mov r8, r8)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	681a      	ldr	r2, [r3, #0]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	2110      	movs	r1, #16
 800928a:	438a      	bics	r2, r1
 800928c:	601a      	str	r2, [r3, #0]
 800928e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009290:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	f383 8810 	msr	PRIMASK, r3
}
 8009298:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2280      	movs	r2, #128	@ 0x80
 800929e:	2120      	movs	r1, #32
 80092a0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2200      	movs	r2, #0
 80092ac:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80092ae:	46c0      	nop			@ (mov r8, r8)
 80092b0:	46bd      	mov	sp, r7
 80092b2:	b00e      	add	sp, #56	@ 0x38
 80092b4:	bd80      	pop	{r7, pc}
 80092b6:	46c0      	nop			@ (mov r8, r8)
 80092b8:	fffffedf 	.word	0xfffffedf

080092bc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b084      	sub	sp, #16
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	225a      	movs	r2, #90	@ 0x5a
 80092ce:	2100      	movs	r1, #0
 80092d0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2252      	movs	r2, #82	@ 0x52
 80092d6:	2100      	movs	r1, #0
 80092d8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	0018      	movs	r0, r3
 80092de:	f7ff fc57 	bl	8008b90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092e2:	46c0      	nop			@ (mov r8, r8)
 80092e4:	46bd      	mov	sp, r7
 80092e6:	b004      	add	sp, #16
 80092e8:	bd80      	pop	{r7, pc}

080092ea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80092ea:	b580      	push	{r7, lr}
 80092ec:	b086      	sub	sp, #24
 80092ee:	af00      	add	r7, sp, #0
 80092f0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092f2:	f3ef 8310 	mrs	r3, PRIMASK
 80092f6:	60bb      	str	r3, [r7, #8]
  return(result);
 80092f8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80092fa:	617b      	str	r3, [r7, #20]
 80092fc:	2301      	movs	r3, #1
 80092fe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f383 8810 	msr	PRIMASK, r3
}
 8009306:	46c0      	nop			@ (mov r8, r8)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	681a      	ldr	r2, [r3, #0]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	2140      	movs	r1, #64	@ 0x40
 8009314:	438a      	bics	r2, r1
 8009316:	601a      	str	r2, [r3, #0]
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	f383 8810 	msr	PRIMASK, r3
}
 8009322:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2220      	movs	r2, #32
 8009328:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2200      	movs	r2, #0
 800932e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	0018      	movs	r0, r3
 8009334:	f7ff fc24 	bl	8008b80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009338:	46c0      	nop			@ (mov r8, r8)
 800933a:	46bd      	mov	sp, r7
 800933c:	b006      	add	sp, #24
 800933e:	bd80      	pop	{r7, pc}

08009340 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b084      	sub	sp, #16
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2244      	movs	r2, #68	@ 0x44
 800934c:	2100      	movs	r1, #0
 800934e:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009350:	4b05      	ldr	r3, [pc, #20]	@ (8009368 <USB_EnableGlobalInt+0x28>)
 8009352:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	b299      	uxth	r1, r3
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2240      	movs	r2, #64	@ 0x40
 800935c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800935e:	2300      	movs	r3, #0
}
 8009360:	0018      	movs	r0, r3
 8009362:	46bd      	mov	sp, r7
 8009364:	b004      	add	sp, #16
 8009366:	bd80      	pop	{r7, pc}
 8009368:	0000bf80 	.word	0x0000bf80

0800936c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009374:	4b09      	ldr	r3, [pc, #36]	@ (800939c <USB_DisableGlobalInt+0x30>)
 8009376:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2240      	movs	r2, #64	@ 0x40
 800937c:	5a9b      	ldrh	r3, [r3, r2]
 800937e:	b29b      	uxth	r3, r3
 8009380:	68fa      	ldr	r2, [r7, #12]
 8009382:	b292      	uxth	r2, r2
 8009384:	43d2      	mvns	r2, r2
 8009386:	b292      	uxth	r2, r2
 8009388:	4013      	ands	r3, r2
 800938a:	b299      	uxth	r1, r3
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2240      	movs	r2, #64	@ 0x40
 8009390:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8009392:	2300      	movs	r3, #0
}
 8009394:	0018      	movs	r0, r3
 8009396:	46bd      	mov	sp, r7
 8009398:	b004      	add	sp, #16
 800939a:	bd80      	pop	{r7, pc}
 800939c:	0000bf80 	.word	0x0000bf80

080093a0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80093a0:	b084      	sub	sp, #16
 80093a2:	b590      	push	{r4, r7, lr}
 80093a4:	b083      	sub	sp, #12
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	6078      	str	r0, [r7, #4]
 80093aa:	2004      	movs	r0, #4
 80093ac:	2410      	movs	r4, #16
 80093ae:	1900      	adds	r0, r0, r4
 80093b0:	2408      	movs	r4, #8
 80093b2:	46a4      	mov	ip, r4
 80093b4:	44bc      	add	ip, r7
 80093b6:	4460      	add	r0, ip
 80093b8:	6001      	str	r1, [r0, #0]
 80093ba:	6042      	str	r2, [r0, #4]
 80093bc:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2240      	movs	r2, #64	@ 0x40
 80093c2:	2101      	movs	r1, #1
 80093c4:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2240      	movs	r2, #64	@ 0x40
 80093ca:	2100      	movs	r1, #0
 80093cc:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2244      	movs	r2, #68	@ 0x44
 80093d2:	2100      	movs	r1, #0
 80093d4:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2250      	movs	r2, #80	@ 0x50
 80093da:	2100      	movs	r1, #0
 80093dc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80093de:	2300      	movs	r3, #0
}
 80093e0:	0018      	movs	r0, r3
 80093e2:	46bd      	mov	sp, r7
 80093e4:	b003      	add	sp, #12
 80093e6:	bc90      	pop	{r4, r7}
 80093e8:	bc08      	pop	{r3}
 80093ea:	b004      	add	sp, #16
 80093ec:	4718      	bx	r3
	...

080093f0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b09c      	sub	sp, #112	@ 0x70
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80093fa:	236f      	movs	r3, #111	@ 0x6f
 80093fc:	18fb      	adds	r3, r7, r3
 80093fe:	2200      	movs	r2, #0
 8009400:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	009b      	lsls	r3, r3, #2
 800940a:	18d3      	adds	r3, r2, r3
 800940c:	881b      	ldrh	r3, [r3, #0]
 800940e:	b29a      	uxth	r2, r3
 8009410:	236c      	movs	r3, #108	@ 0x6c
 8009412:	18fb      	adds	r3, r7, r3
 8009414:	49a3      	ldr	r1, [pc, #652]	@ (80096a4 <USB_ActivateEndpoint+0x2b4>)
 8009416:	400a      	ands	r2, r1
 8009418:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	78db      	ldrb	r3, [r3, #3]
 800941e:	2b03      	cmp	r3, #3
 8009420:	d017      	beq.n	8009452 <USB_ActivateEndpoint+0x62>
 8009422:	dc28      	bgt.n	8009476 <USB_ActivateEndpoint+0x86>
 8009424:	2b02      	cmp	r3, #2
 8009426:	d00e      	beq.n	8009446 <USB_ActivateEndpoint+0x56>
 8009428:	dc25      	bgt.n	8009476 <USB_ActivateEndpoint+0x86>
 800942a:	2b00      	cmp	r3, #0
 800942c:	d002      	beq.n	8009434 <USB_ActivateEndpoint+0x44>
 800942e:	2b01      	cmp	r3, #1
 8009430:	d018      	beq.n	8009464 <USB_ActivateEndpoint+0x74>
 8009432:	e020      	b.n	8009476 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009434:	226c      	movs	r2, #108	@ 0x6c
 8009436:	18bb      	adds	r3, r7, r2
 8009438:	18ba      	adds	r2, r7, r2
 800943a:	8812      	ldrh	r2, [r2, #0]
 800943c:	2180      	movs	r1, #128	@ 0x80
 800943e:	0089      	lsls	r1, r1, #2
 8009440:	430a      	orrs	r2, r1
 8009442:	801a      	strh	r2, [r3, #0]
      break;
 8009444:	e01c      	b.n	8009480 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8009446:	226c      	movs	r2, #108	@ 0x6c
 8009448:	18bb      	adds	r3, r7, r2
 800944a:	18ba      	adds	r2, r7, r2
 800944c:	8812      	ldrh	r2, [r2, #0]
 800944e:	801a      	strh	r2, [r3, #0]
      break;
 8009450:	e016      	b.n	8009480 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8009452:	226c      	movs	r2, #108	@ 0x6c
 8009454:	18bb      	adds	r3, r7, r2
 8009456:	18ba      	adds	r2, r7, r2
 8009458:	8812      	ldrh	r2, [r2, #0]
 800945a:	21c0      	movs	r1, #192	@ 0xc0
 800945c:	00c9      	lsls	r1, r1, #3
 800945e:	430a      	orrs	r2, r1
 8009460:	801a      	strh	r2, [r3, #0]
      break;
 8009462:	e00d      	b.n	8009480 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009464:	226c      	movs	r2, #108	@ 0x6c
 8009466:	18bb      	adds	r3, r7, r2
 8009468:	18ba      	adds	r2, r7, r2
 800946a:	8812      	ldrh	r2, [r2, #0]
 800946c:	2180      	movs	r1, #128	@ 0x80
 800946e:	00c9      	lsls	r1, r1, #3
 8009470:	430a      	orrs	r2, r1
 8009472:	801a      	strh	r2, [r3, #0]
      break;
 8009474:	e004      	b.n	8009480 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8009476:	236f      	movs	r3, #111	@ 0x6f
 8009478:	18fb      	adds	r3, r7, r3
 800947a:	2201      	movs	r2, #1
 800947c:	701a      	strb	r2, [r3, #0]
      break;
 800947e:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009480:	687a      	ldr	r2, [r7, #4]
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	781b      	ldrb	r3, [r3, #0]
 8009486:	009b      	lsls	r3, r3, #2
 8009488:	18d3      	adds	r3, r2, r3
 800948a:	226c      	movs	r2, #108	@ 0x6c
 800948c:	18ba      	adds	r2, r7, r2
 800948e:	8812      	ldrh	r2, [r2, #0]
 8009490:	4985      	ldr	r1, [pc, #532]	@ (80096a8 <USB_ActivateEndpoint+0x2b8>)
 8009492:	430a      	orrs	r2, r1
 8009494:	b292      	uxth	r2, r2
 8009496:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009498:	687a      	ldr	r2, [r7, #4]
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	009b      	lsls	r3, r3, #2
 80094a0:	18d3      	adds	r3, r2, r3
 80094a2:	881b      	ldrh	r3, [r3, #0]
 80094a4:	b29b      	uxth	r3, r3
 80094a6:	b21b      	sxth	r3, r3
 80094a8:	4a80      	ldr	r2, [pc, #512]	@ (80096ac <USB_ActivateEndpoint+0x2bc>)
 80094aa:	4013      	ands	r3, r2
 80094ac:	b21a      	sxth	r2, r3
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	781b      	ldrb	r3, [r3, #0]
 80094b2:	b21b      	sxth	r3, r3
 80094b4:	4313      	orrs	r3, r2
 80094b6:	b21a      	sxth	r2, r3
 80094b8:	2166      	movs	r1, #102	@ 0x66
 80094ba:	187b      	adds	r3, r7, r1
 80094bc:	801a      	strh	r2, [r3, #0]
 80094be:	687a      	ldr	r2, [r7, #4]
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	781b      	ldrb	r3, [r3, #0]
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	18d3      	adds	r3, r2, r3
 80094c8:	187a      	adds	r2, r7, r1
 80094ca:	8812      	ldrh	r2, [r2, #0]
 80094cc:	4976      	ldr	r1, [pc, #472]	@ (80096a8 <USB_ActivateEndpoint+0x2b8>)
 80094ce:	430a      	orrs	r2, r1
 80094d0:	b292      	uxth	r2, r2
 80094d2:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	7b1b      	ldrb	r3, [r3, #12]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d000      	beq.n	80094de <USB_ActivateEndpoint+0xee>
 80094dc:	e178      	b.n	80097d0 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	785b      	ldrb	r3, [r3, #1]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d100      	bne.n	80094e8 <USB_ActivateEndpoint+0xf8>
 80094e6:	e07a      	b.n	80095de <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	61bb      	str	r3, [r7, #24]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2250      	movs	r2, #80	@ 0x50
 80094f0:	5a9b      	ldrh	r3, [r3, r2]
 80094f2:	b29b      	uxth	r3, r3
 80094f4:	001a      	movs	r2, r3
 80094f6:	69bb      	ldr	r3, [r7, #24]
 80094f8:	189b      	adds	r3, r3, r2
 80094fa:	61bb      	str	r3, [r7, #24]
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	781b      	ldrb	r3, [r3, #0]
 8009500:	00da      	lsls	r2, r3, #3
 8009502:	69bb      	ldr	r3, [r7, #24]
 8009504:	18d3      	adds	r3, r2, r3
 8009506:	2280      	movs	r2, #128	@ 0x80
 8009508:	00d2      	lsls	r2, r2, #3
 800950a:	4694      	mov	ip, r2
 800950c:	4463      	add	r3, ip
 800950e:	617b      	str	r3, [r7, #20]
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	88db      	ldrh	r3, [r3, #6]
 8009514:	085b      	lsrs	r3, r3, #1
 8009516:	b29b      	uxth	r3, r3
 8009518:	18db      	adds	r3, r3, r3
 800951a:	b29a      	uxth	r2, r3
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009520:	687a      	ldr	r2, [r7, #4]
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	781b      	ldrb	r3, [r3, #0]
 8009526:	009b      	lsls	r3, r3, #2
 8009528:	18d2      	adds	r2, r2, r3
 800952a:	2112      	movs	r1, #18
 800952c:	187b      	adds	r3, r7, r1
 800952e:	8812      	ldrh	r2, [r2, #0]
 8009530:	801a      	strh	r2, [r3, #0]
 8009532:	187b      	adds	r3, r7, r1
 8009534:	881b      	ldrh	r3, [r3, #0]
 8009536:	2240      	movs	r2, #64	@ 0x40
 8009538:	4013      	ands	r3, r2
 800953a:	d016      	beq.n	800956a <USB_ActivateEndpoint+0x17a>
 800953c:	687a      	ldr	r2, [r7, #4]
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	781b      	ldrb	r3, [r3, #0]
 8009542:	009b      	lsls	r3, r3, #2
 8009544:	18d3      	adds	r3, r2, r3
 8009546:	881b      	ldrh	r3, [r3, #0]
 8009548:	b29a      	uxth	r2, r3
 800954a:	2010      	movs	r0, #16
 800954c:	183b      	adds	r3, r7, r0
 800954e:	4957      	ldr	r1, [pc, #348]	@ (80096ac <USB_ActivateEndpoint+0x2bc>)
 8009550:	400a      	ands	r2, r1
 8009552:	801a      	strh	r2, [r3, #0]
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	781b      	ldrb	r3, [r3, #0]
 800955a:	009b      	lsls	r3, r3, #2
 800955c:	18d3      	adds	r3, r2, r3
 800955e:	183a      	adds	r2, r7, r0
 8009560:	8812      	ldrh	r2, [r2, #0]
 8009562:	4953      	ldr	r1, [pc, #332]	@ (80096b0 <USB_ActivateEndpoint+0x2c0>)
 8009564:	430a      	orrs	r2, r1
 8009566:	b292      	uxth	r2, r2
 8009568:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	78db      	ldrb	r3, [r3, #3]
 800956e:	2b01      	cmp	r3, #1
 8009570:	d01d      	beq.n	80095ae <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009572:	687a      	ldr	r2, [r7, #4]
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	781b      	ldrb	r3, [r3, #0]
 8009578:	009b      	lsls	r3, r3, #2
 800957a:	18d3      	adds	r3, r2, r3
 800957c:	881b      	ldrh	r3, [r3, #0]
 800957e:	b29a      	uxth	r2, r3
 8009580:	200c      	movs	r0, #12
 8009582:	183b      	adds	r3, r7, r0
 8009584:	494b      	ldr	r1, [pc, #300]	@ (80096b4 <USB_ActivateEndpoint+0x2c4>)
 8009586:	400a      	ands	r2, r1
 8009588:	801a      	strh	r2, [r3, #0]
 800958a:	183b      	adds	r3, r7, r0
 800958c:	183a      	adds	r2, r7, r0
 800958e:	8812      	ldrh	r2, [r2, #0]
 8009590:	2120      	movs	r1, #32
 8009592:	404a      	eors	r2, r1
 8009594:	801a      	strh	r2, [r3, #0]
 8009596:	687a      	ldr	r2, [r7, #4]
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	009b      	lsls	r3, r3, #2
 800959e:	18d3      	adds	r3, r2, r3
 80095a0:	183a      	adds	r2, r7, r0
 80095a2:	8812      	ldrh	r2, [r2, #0]
 80095a4:	4940      	ldr	r1, [pc, #256]	@ (80096a8 <USB_ActivateEndpoint+0x2b8>)
 80095a6:	430a      	orrs	r2, r1
 80095a8:	b292      	uxth	r2, r2
 80095aa:	801a      	strh	r2, [r3, #0]
 80095ac:	e2b4      	b.n	8009b18 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80095ae:	687a      	ldr	r2, [r7, #4]
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	781b      	ldrb	r3, [r3, #0]
 80095b4:	009b      	lsls	r3, r3, #2
 80095b6:	18d3      	adds	r3, r2, r3
 80095b8:	881b      	ldrh	r3, [r3, #0]
 80095ba:	b29a      	uxth	r2, r3
 80095bc:	200e      	movs	r0, #14
 80095be:	183b      	adds	r3, r7, r0
 80095c0:	493c      	ldr	r1, [pc, #240]	@ (80096b4 <USB_ActivateEndpoint+0x2c4>)
 80095c2:	400a      	ands	r2, r1
 80095c4:	801a      	strh	r2, [r3, #0]
 80095c6:	687a      	ldr	r2, [r7, #4]
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	781b      	ldrb	r3, [r3, #0]
 80095cc:	009b      	lsls	r3, r3, #2
 80095ce:	18d3      	adds	r3, r2, r3
 80095d0:	183a      	adds	r2, r7, r0
 80095d2:	8812      	ldrh	r2, [r2, #0]
 80095d4:	4934      	ldr	r1, [pc, #208]	@ (80096a8 <USB_ActivateEndpoint+0x2b8>)
 80095d6:	430a      	orrs	r2, r1
 80095d8:	b292      	uxth	r2, r2
 80095da:	801a      	strh	r2, [r3, #0]
 80095dc:	e29c      	b.n	8009b18 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2250      	movs	r2, #80	@ 0x50
 80095e6:	5a9b      	ldrh	r3, [r3, r2]
 80095e8:	b29b      	uxth	r3, r3
 80095ea:	001a      	movs	r2, r3
 80095ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ee:	189b      	adds	r3, r3, r2
 80095f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	00da      	lsls	r2, r3, #3
 80095f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095fa:	18d3      	adds	r3, r2, r3
 80095fc:	4a2e      	ldr	r2, [pc, #184]	@ (80096b8 <USB_ActivateEndpoint+0x2c8>)
 80095fe:	4694      	mov	ip, r2
 8009600:	4463      	add	r3, ip
 8009602:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	88db      	ldrh	r3, [r3, #6]
 8009608:	085b      	lsrs	r3, r3, #1
 800960a:	b29b      	uxth	r3, r3
 800960c:	18db      	adds	r3, r3, r3
 800960e:	b29a      	uxth	r2, r3
 8009610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009612:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2250      	movs	r2, #80	@ 0x50
 800961c:	5a9b      	ldrh	r3, [r3, r2]
 800961e:	b29b      	uxth	r3, r3
 8009620:	001a      	movs	r2, r3
 8009622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009624:	189b      	adds	r3, r3, r2
 8009626:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	00da      	lsls	r2, r3, #3
 800962e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009630:	18d3      	adds	r3, r2, r3
 8009632:	4a22      	ldr	r2, [pc, #136]	@ (80096bc <USB_ActivateEndpoint+0x2cc>)
 8009634:	4694      	mov	ip, r2
 8009636:	4463      	add	r3, ip
 8009638:	627b      	str	r3, [r7, #36]	@ 0x24
 800963a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800963c:	881b      	ldrh	r3, [r3, #0]
 800963e:	b29b      	uxth	r3, r3
 8009640:	059b      	lsls	r3, r3, #22
 8009642:	0d9b      	lsrs	r3, r3, #22
 8009644:	b29a      	uxth	r2, r3
 8009646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009648:	801a      	strh	r2, [r3, #0]
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	691b      	ldr	r3, [r3, #16]
 800964e:	2b3e      	cmp	r3, #62	@ 0x3e
 8009650:	d91a      	bls.n	8009688 <USB_ActivateEndpoint+0x298>
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	691b      	ldr	r3, [r3, #16]
 8009656:	095b      	lsrs	r3, r3, #5
 8009658:	66bb      	str	r3, [r7, #104]	@ 0x68
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	691b      	ldr	r3, [r3, #16]
 800965e:	221f      	movs	r2, #31
 8009660:	4013      	ands	r3, r2
 8009662:	d102      	bne.n	800966a <USB_ActivateEndpoint+0x27a>
 8009664:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009666:	3b01      	subs	r3, #1
 8009668:	66bb      	str	r3, [r7, #104]	@ 0x68
 800966a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800966c:	881b      	ldrh	r3, [r3, #0]
 800966e:	b29a      	uxth	r2, r3
 8009670:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009672:	b29b      	uxth	r3, r3
 8009674:	029b      	lsls	r3, r3, #10
 8009676:	b29b      	uxth	r3, r3
 8009678:	4313      	orrs	r3, r2
 800967a:	b29b      	uxth	r3, r3
 800967c:	4a10      	ldr	r2, [pc, #64]	@ (80096c0 <USB_ActivateEndpoint+0x2d0>)
 800967e:	4313      	orrs	r3, r2
 8009680:	b29a      	uxth	r2, r3
 8009682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009684:	801a      	strh	r2, [r3, #0]
 8009686:	e034      	b.n	80096f2 <USB_ActivateEndpoint+0x302>
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	691b      	ldr	r3, [r3, #16]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d119      	bne.n	80096c4 <USB_ActivateEndpoint+0x2d4>
 8009690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009692:	881b      	ldrh	r3, [r3, #0]
 8009694:	b29b      	uxth	r3, r3
 8009696:	4a0a      	ldr	r2, [pc, #40]	@ (80096c0 <USB_ActivateEndpoint+0x2d0>)
 8009698:	4313      	orrs	r3, r2
 800969a:	b29a      	uxth	r2, r3
 800969c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800969e:	801a      	strh	r2, [r3, #0]
 80096a0:	e027      	b.n	80096f2 <USB_ActivateEndpoint+0x302>
 80096a2:	46c0      	nop			@ (mov r8, r8)
 80096a4:	ffff898f 	.word	0xffff898f
 80096a8:	ffff8080 	.word	0xffff8080
 80096ac:	ffff8f8f 	.word	0xffff8f8f
 80096b0:	ffff80c0 	.word	0xffff80c0
 80096b4:	ffff8fbf 	.word	0xffff8fbf
 80096b8:	00000404 	.word	0x00000404
 80096bc:	00000406 	.word	0x00000406
 80096c0:	ffff8000 	.word	0xffff8000
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	691b      	ldr	r3, [r3, #16]
 80096c8:	085b      	lsrs	r3, r3, #1
 80096ca:	66bb      	str	r3, [r7, #104]	@ 0x68
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	691b      	ldr	r3, [r3, #16]
 80096d0:	2201      	movs	r2, #1
 80096d2:	4013      	ands	r3, r2
 80096d4:	d002      	beq.n	80096dc <USB_ActivateEndpoint+0x2ec>
 80096d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80096d8:	3301      	adds	r3, #1
 80096da:	66bb      	str	r3, [r7, #104]	@ 0x68
 80096dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096de:	881b      	ldrh	r3, [r3, #0]
 80096e0:	b29a      	uxth	r2, r3
 80096e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80096e4:	b29b      	uxth	r3, r3
 80096e6:	029b      	lsls	r3, r3, #10
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	4313      	orrs	r3, r2
 80096ec:	b29a      	uxth	r2, r3
 80096ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096f0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80096f2:	687a      	ldr	r2, [r7, #4]
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	781b      	ldrb	r3, [r3, #0]
 80096f8:	009b      	lsls	r3, r3, #2
 80096fa:	18d2      	adds	r2, r2, r3
 80096fc:	2122      	movs	r1, #34	@ 0x22
 80096fe:	187b      	adds	r3, r7, r1
 8009700:	8812      	ldrh	r2, [r2, #0]
 8009702:	801a      	strh	r2, [r3, #0]
 8009704:	187b      	adds	r3, r7, r1
 8009706:	881a      	ldrh	r2, [r3, #0]
 8009708:	2380      	movs	r3, #128	@ 0x80
 800970a:	01db      	lsls	r3, r3, #7
 800970c:	4013      	ands	r3, r2
 800970e:	d016      	beq.n	800973e <USB_ActivateEndpoint+0x34e>
 8009710:	687a      	ldr	r2, [r7, #4]
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	781b      	ldrb	r3, [r3, #0]
 8009716:	009b      	lsls	r3, r3, #2
 8009718:	18d3      	adds	r3, r2, r3
 800971a:	881b      	ldrh	r3, [r3, #0]
 800971c:	b29a      	uxth	r2, r3
 800971e:	2020      	movs	r0, #32
 8009720:	183b      	adds	r3, r7, r0
 8009722:	49dd      	ldr	r1, [pc, #884]	@ (8009a98 <USB_ActivateEndpoint+0x6a8>)
 8009724:	400a      	ands	r2, r1
 8009726:	801a      	strh	r2, [r3, #0]
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	009b      	lsls	r3, r3, #2
 8009730:	18d3      	adds	r3, r2, r3
 8009732:	183a      	adds	r2, r7, r0
 8009734:	8812      	ldrh	r2, [r2, #0]
 8009736:	49d9      	ldr	r1, [pc, #868]	@ (8009a9c <USB_ActivateEndpoint+0x6ac>)
 8009738:	430a      	orrs	r2, r1
 800973a:	b292      	uxth	r2, r2
 800973c:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	781b      	ldrb	r3, [r3, #0]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d125      	bne.n	8009792 <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009746:	687a      	ldr	r2, [r7, #4]
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	18d3      	adds	r3, r2, r3
 8009750:	881b      	ldrh	r3, [r3, #0]
 8009752:	b29a      	uxth	r2, r3
 8009754:	201c      	movs	r0, #28
 8009756:	183b      	adds	r3, r7, r0
 8009758:	49d1      	ldr	r1, [pc, #836]	@ (8009aa0 <USB_ActivateEndpoint+0x6b0>)
 800975a:	400a      	ands	r2, r1
 800975c:	801a      	strh	r2, [r3, #0]
 800975e:	183b      	adds	r3, r7, r0
 8009760:	183a      	adds	r2, r7, r0
 8009762:	8812      	ldrh	r2, [r2, #0]
 8009764:	2180      	movs	r1, #128	@ 0x80
 8009766:	0149      	lsls	r1, r1, #5
 8009768:	404a      	eors	r2, r1
 800976a:	801a      	strh	r2, [r3, #0]
 800976c:	183b      	adds	r3, r7, r0
 800976e:	183a      	adds	r2, r7, r0
 8009770:	8812      	ldrh	r2, [r2, #0]
 8009772:	2180      	movs	r1, #128	@ 0x80
 8009774:	0189      	lsls	r1, r1, #6
 8009776:	404a      	eors	r2, r1
 8009778:	801a      	strh	r2, [r3, #0]
 800977a:	687a      	ldr	r2, [r7, #4]
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	781b      	ldrb	r3, [r3, #0]
 8009780:	009b      	lsls	r3, r3, #2
 8009782:	18d3      	adds	r3, r2, r3
 8009784:	183a      	adds	r2, r7, r0
 8009786:	8812      	ldrh	r2, [r2, #0]
 8009788:	49c6      	ldr	r1, [pc, #792]	@ (8009aa4 <USB_ActivateEndpoint+0x6b4>)
 800978a:	430a      	orrs	r2, r1
 800978c:	b292      	uxth	r2, r2
 800978e:	801a      	strh	r2, [r3, #0]
 8009790:	e1c2      	b.n	8009b18 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8009792:	687a      	ldr	r2, [r7, #4]
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	781b      	ldrb	r3, [r3, #0]
 8009798:	009b      	lsls	r3, r3, #2
 800979a:	18d3      	adds	r3, r2, r3
 800979c:	881b      	ldrh	r3, [r3, #0]
 800979e:	b29a      	uxth	r2, r3
 80097a0:	201e      	movs	r0, #30
 80097a2:	183b      	adds	r3, r7, r0
 80097a4:	49be      	ldr	r1, [pc, #760]	@ (8009aa0 <USB_ActivateEndpoint+0x6b0>)
 80097a6:	400a      	ands	r2, r1
 80097a8:	801a      	strh	r2, [r3, #0]
 80097aa:	183b      	adds	r3, r7, r0
 80097ac:	183a      	adds	r2, r7, r0
 80097ae:	8812      	ldrh	r2, [r2, #0]
 80097b0:	2180      	movs	r1, #128	@ 0x80
 80097b2:	0189      	lsls	r1, r1, #6
 80097b4:	404a      	eors	r2, r1
 80097b6:	801a      	strh	r2, [r3, #0]
 80097b8:	687a      	ldr	r2, [r7, #4]
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	781b      	ldrb	r3, [r3, #0]
 80097be:	009b      	lsls	r3, r3, #2
 80097c0:	18d3      	adds	r3, r2, r3
 80097c2:	183a      	adds	r2, r7, r0
 80097c4:	8812      	ldrh	r2, [r2, #0]
 80097c6:	49b7      	ldr	r1, [pc, #732]	@ (8009aa4 <USB_ActivateEndpoint+0x6b4>)
 80097c8:	430a      	orrs	r2, r1
 80097ca:	b292      	uxth	r2, r2
 80097cc:	801a      	strh	r2, [r3, #0]
 80097ce:	e1a3      	b.n	8009b18 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	78db      	ldrb	r3, [r3, #3]
 80097d4:	2b02      	cmp	r3, #2
 80097d6:	d117      	bne.n	8009808 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80097d8:	687a      	ldr	r2, [r7, #4]
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	009b      	lsls	r3, r3, #2
 80097e0:	18d3      	adds	r3, r2, r3
 80097e2:	881b      	ldrh	r3, [r3, #0]
 80097e4:	b29a      	uxth	r2, r3
 80097e6:	2062      	movs	r0, #98	@ 0x62
 80097e8:	183b      	adds	r3, r7, r0
 80097ea:	49ab      	ldr	r1, [pc, #684]	@ (8009a98 <USB_ActivateEndpoint+0x6a8>)
 80097ec:	400a      	ands	r2, r1
 80097ee:	801a      	strh	r2, [r3, #0]
 80097f0:	687a      	ldr	r2, [r7, #4]
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	781b      	ldrb	r3, [r3, #0]
 80097f6:	009b      	lsls	r3, r3, #2
 80097f8:	18d3      	adds	r3, r2, r3
 80097fa:	183a      	adds	r2, r7, r0
 80097fc:	8812      	ldrh	r2, [r2, #0]
 80097fe:	49aa      	ldr	r1, [pc, #680]	@ (8009aa8 <USB_ActivateEndpoint+0x6b8>)
 8009800:	430a      	orrs	r2, r1
 8009802:	b292      	uxth	r2, r2
 8009804:	801a      	strh	r2, [r3, #0]
 8009806:	e016      	b.n	8009836 <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009808:	687a      	ldr	r2, [r7, #4]
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	009b      	lsls	r3, r3, #2
 8009810:	18d3      	adds	r3, r2, r3
 8009812:	881b      	ldrh	r3, [r3, #0]
 8009814:	b29a      	uxth	r2, r3
 8009816:	2064      	movs	r0, #100	@ 0x64
 8009818:	183b      	adds	r3, r7, r0
 800981a:	49a4      	ldr	r1, [pc, #656]	@ (8009aac <USB_ActivateEndpoint+0x6bc>)
 800981c:	400a      	ands	r2, r1
 800981e:	801a      	strh	r2, [r3, #0]
 8009820:	687a      	ldr	r2, [r7, #4]
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	009b      	lsls	r3, r3, #2
 8009828:	18d3      	adds	r3, r2, r3
 800982a:	183a      	adds	r2, r7, r0
 800982c:	8812      	ldrh	r2, [r2, #0]
 800982e:	499d      	ldr	r1, [pc, #628]	@ (8009aa4 <USB_ActivateEndpoint+0x6b4>)
 8009830:	430a      	orrs	r2, r1
 8009832:	b292      	uxth	r2, r2
 8009834:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2250      	movs	r2, #80	@ 0x50
 800983e:	5a9b      	ldrh	r3, [r3, r2]
 8009840:	b29b      	uxth	r3, r3
 8009842:	001a      	movs	r2, r3
 8009844:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009846:	189b      	adds	r3, r3, r2
 8009848:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	781b      	ldrb	r3, [r3, #0]
 800984e:	00da      	lsls	r2, r3, #3
 8009850:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009852:	18d3      	adds	r3, r2, r3
 8009854:	2280      	movs	r2, #128	@ 0x80
 8009856:	00d2      	lsls	r2, r2, #3
 8009858:	4694      	mov	ip, r2
 800985a:	4463      	add	r3, ip
 800985c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	891b      	ldrh	r3, [r3, #8]
 8009862:	085b      	lsrs	r3, r3, #1
 8009864:	b29b      	uxth	r3, r3
 8009866:	18db      	adds	r3, r3, r3
 8009868:	b29a      	uxth	r2, r3
 800986a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800986c:	801a      	strh	r2, [r3, #0]
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	657b      	str	r3, [r7, #84]	@ 0x54
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2250      	movs	r2, #80	@ 0x50
 8009876:	5a9b      	ldrh	r3, [r3, r2]
 8009878:	b29b      	uxth	r3, r3
 800987a:	001a      	movs	r2, r3
 800987c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800987e:	189b      	adds	r3, r3, r2
 8009880:	657b      	str	r3, [r7, #84]	@ 0x54
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	781b      	ldrb	r3, [r3, #0]
 8009886:	00da      	lsls	r2, r3, #3
 8009888:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800988a:	18d3      	adds	r3, r2, r3
 800988c:	4a88      	ldr	r2, [pc, #544]	@ (8009ab0 <USB_ActivateEndpoint+0x6c0>)
 800988e:	4694      	mov	ip, r2
 8009890:	4463      	add	r3, ip
 8009892:	653b      	str	r3, [r7, #80]	@ 0x50
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	895b      	ldrh	r3, [r3, #10]
 8009898:	085b      	lsrs	r3, r3, #1
 800989a:	b29b      	uxth	r3, r3
 800989c:	18db      	adds	r3, r3, r3
 800989e:	b29a      	uxth	r2, r3
 80098a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80098a2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	785b      	ldrb	r3, [r3, #1]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d000      	beq.n	80098ae <USB_ActivateEndpoint+0x4be>
 80098ac:	e087      	b.n	80099be <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80098ae:	687a      	ldr	r2, [r7, #4]
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	781b      	ldrb	r3, [r3, #0]
 80098b4:	009b      	lsls	r3, r3, #2
 80098b6:	18d2      	adds	r2, r2, r3
 80098b8:	2140      	movs	r1, #64	@ 0x40
 80098ba:	187b      	adds	r3, r7, r1
 80098bc:	8812      	ldrh	r2, [r2, #0]
 80098be:	801a      	strh	r2, [r3, #0]
 80098c0:	187b      	adds	r3, r7, r1
 80098c2:	881a      	ldrh	r2, [r3, #0]
 80098c4:	2380      	movs	r3, #128	@ 0x80
 80098c6:	01db      	lsls	r3, r3, #7
 80098c8:	4013      	ands	r3, r2
 80098ca:	d016      	beq.n	80098fa <USB_ActivateEndpoint+0x50a>
 80098cc:	687a      	ldr	r2, [r7, #4]
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	009b      	lsls	r3, r3, #2
 80098d4:	18d3      	adds	r3, r2, r3
 80098d6:	881b      	ldrh	r3, [r3, #0]
 80098d8:	b29a      	uxth	r2, r3
 80098da:	203e      	movs	r0, #62	@ 0x3e
 80098dc:	183b      	adds	r3, r7, r0
 80098de:	496e      	ldr	r1, [pc, #440]	@ (8009a98 <USB_ActivateEndpoint+0x6a8>)
 80098e0:	400a      	ands	r2, r1
 80098e2:	801a      	strh	r2, [r3, #0]
 80098e4:	687a      	ldr	r2, [r7, #4]
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	781b      	ldrb	r3, [r3, #0]
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	18d3      	adds	r3, r2, r3
 80098ee:	183a      	adds	r2, r7, r0
 80098f0:	8812      	ldrh	r2, [r2, #0]
 80098f2:	496a      	ldr	r1, [pc, #424]	@ (8009a9c <USB_ActivateEndpoint+0x6ac>)
 80098f4:	430a      	orrs	r2, r1
 80098f6:	b292      	uxth	r2, r2
 80098f8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	18d2      	adds	r2, r2, r3
 8009904:	213c      	movs	r1, #60	@ 0x3c
 8009906:	187b      	adds	r3, r7, r1
 8009908:	8812      	ldrh	r2, [r2, #0]
 800990a:	801a      	strh	r2, [r3, #0]
 800990c:	187b      	adds	r3, r7, r1
 800990e:	881b      	ldrh	r3, [r3, #0]
 8009910:	2240      	movs	r2, #64	@ 0x40
 8009912:	4013      	ands	r3, r2
 8009914:	d016      	beq.n	8009944 <USB_ActivateEndpoint+0x554>
 8009916:	687a      	ldr	r2, [r7, #4]
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	781b      	ldrb	r3, [r3, #0]
 800991c:	009b      	lsls	r3, r3, #2
 800991e:	18d3      	adds	r3, r2, r3
 8009920:	881b      	ldrh	r3, [r3, #0]
 8009922:	b29a      	uxth	r2, r3
 8009924:	203a      	movs	r0, #58	@ 0x3a
 8009926:	183b      	adds	r3, r7, r0
 8009928:	495b      	ldr	r1, [pc, #364]	@ (8009a98 <USB_ActivateEndpoint+0x6a8>)
 800992a:	400a      	ands	r2, r1
 800992c:	801a      	strh	r2, [r3, #0]
 800992e:	687a      	ldr	r2, [r7, #4]
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	781b      	ldrb	r3, [r3, #0]
 8009934:	009b      	lsls	r3, r3, #2
 8009936:	18d3      	adds	r3, r2, r3
 8009938:	183a      	adds	r2, r7, r0
 800993a:	8812      	ldrh	r2, [r2, #0]
 800993c:	495d      	ldr	r1, [pc, #372]	@ (8009ab4 <USB_ActivateEndpoint+0x6c4>)
 800993e:	430a      	orrs	r2, r1
 8009940:	b292      	uxth	r2, r2
 8009942:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009944:	687a      	ldr	r2, [r7, #4]
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	781b      	ldrb	r3, [r3, #0]
 800994a:	009b      	lsls	r3, r3, #2
 800994c:	18d3      	adds	r3, r2, r3
 800994e:	881b      	ldrh	r3, [r3, #0]
 8009950:	b29a      	uxth	r2, r3
 8009952:	2038      	movs	r0, #56	@ 0x38
 8009954:	183b      	adds	r3, r7, r0
 8009956:	4952      	ldr	r1, [pc, #328]	@ (8009aa0 <USB_ActivateEndpoint+0x6b0>)
 8009958:	400a      	ands	r2, r1
 800995a:	801a      	strh	r2, [r3, #0]
 800995c:	183b      	adds	r3, r7, r0
 800995e:	183a      	adds	r2, r7, r0
 8009960:	8812      	ldrh	r2, [r2, #0]
 8009962:	2180      	movs	r1, #128	@ 0x80
 8009964:	0149      	lsls	r1, r1, #5
 8009966:	404a      	eors	r2, r1
 8009968:	801a      	strh	r2, [r3, #0]
 800996a:	183b      	adds	r3, r7, r0
 800996c:	183a      	adds	r2, r7, r0
 800996e:	8812      	ldrh	r2, [r2, #0]
 8009970:	2180      	movs	r1, #128	@ 0x80
 8009972:	0189      	lsls	r1, r1, #6
 8009974:	404a      	eors	r2, r1
 8009976:	801a      	strh	r2, [r3, #0]
 8009978:	687a      	ldr	r2, [r7, #4]
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	009b      	lsls	r3, r3, #2
 8009980:	18d3      	adds	r3, r2, r3
 8009982:	183a      	adds	r2, r7, r0
 8009984:	8812      	ldrh	r2, [r2, #0]
 8009986:	4947      	ldr	r1, [pc, #284]	@ (8009aa4 <USB_ActivateEndpoint+0x6b4>)
 8009988:	430a      	orrs	r2, r1
 800998a:	b292      	uxth	r2, r2
 800998c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800998e:	687a      	ldr	r2, [r7, #4]
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	009b      	lsls	r3, r3, #2
 8009996:	18d3      	adds	r3, r2, r3
 8009998:	881b      	ldrh	r3, [r3, #0]
 800999a:	b29a      	uxth	r2, r3
 800999c:	2036      	movs	r0, #54	@ 0x36
 800999e:	183b      	adds	r3, r7, r0
 80099a0:	4945      	ldr	r1, [pc, #276]	@ (8009ab8 <USB_ActivateEndpoint+0x6c8>)
 80099a2:	400a      	ands	r2, r1
 80099a4:	801a      	strh	r2, [r3, #0]
 80099a6:	687a      	ldr	r2, [r7, #4]
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	781b      	ldrb	r3, [r3, #0]
 80099ac:	009b      	lsls	r3, r3, #2
 80099ae:	18d3      	adds	r3, r2, r3
 80099b0:	183a      	adds	r2, r7, r0
 80099b2:	8812      	ldrh	r2, [r2, #0]
 80099b4:	493b      	ldr	r1, [pc, #236]	@ (8009aa4 <USB_ActivateEndpoint+0x6b4>)
 80099b6:	430a      	orrs	r2, r1
 80099b8:	b292      	uxth	r2, r2
 80099ba:	801a      	strh	r2, [r3, #0]
 80099bc:	e0ac      	b.n	8009b18 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	781b      	ldrb	r3, [r3, #0]
 80099c4:	009b      	lsls	r3, r3, #2
 80099c6:	18d2      	adds	r2, r2, r3
 80099c8:	214e      	movs	r1, #78	@ 0x4e
 80099ca:	187b      	adds	r3, r7, r1
 80099cc:	8812      	ldrh	r2, [r2, #0]
 80099ce:	801a      	strh	r2, [r3, #0]
 80099d0:	187b      	adds	r3, r7, r1
 80099d2:	881a      	ldrh	r2, [r3, #0]
 80099d4:	2380      	movs	r3, #128	@ 0x80
 80099d6:	01db      	lsls	r3, r3, #7
 80099d8:	4013      	ands	r3, r2
 80099da:	d016      	beq.n	8009a0a <USB_ActivateEndpoint+0x61a>
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	781b      	ldrb	r3, [r3, #0]
 80099e2:	009b      	lsls	r3, r3, #2
 80099e4:	18d3      	adds	r3, r2, r3
 80099e6:	881b      	ldrh	r3, [r3, #0]
 80099e8:	b29a      	uxth	r2, r3
 80099ea:	204c      	movs	r0, #76	@ 0x4c
 80099ec:	183b      	adds	r3, r7, r0
 80099ee:	492a      	ldr	r1, [pc, #168]	@ (8009a98 <USB_ActivateEndpoint+0x6a8>)
 80099f0:	400a      	ands	r2, r1
 80099f2:	801a      	strh	r2, [r3, #0]
 80099f4:	687a      	ldr	r2, [r7, #4]
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	781b      	ldrb	r3, [r3, #0]
 80099fa:	009b      	lsls	r3, r3, #2
 80099fc:	18d3      	adds	r3, r2, r3
 80099fe:	183a      	adds	r2, r7, r0
 8009a00:	8812      	ldrh	r2, [r2, #0]
 8009a02:	4926      	ldr	r1, [pc, #152]	@ (8009a9c <USB_ActivateEndpoint+0x6ac>)
 8009a04:	430a      	orrs	r2, r1
 8009a06:	b292      	uxth	r2, r2
 8009a08:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009a0a:	687a      	ldr	r2, [r7, #4]
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	781b      	ldrb	r3, [r3, #0]
 8009a10:	009b      	lsls	r3, r3, #2
 8009a12:	18d2      	adds	r2, r2, r3
 8009a14:	214a      	movs	r1, #74	@ 0x4a
 8009a16:	187b      	adds	r3, r7, r1
 8009a18:	8812      	ldrh	r2, [r2, #0]
 8009a1a:	801a      	strh	r2, [r3, #0]
 8009a1c:	187b      	adds	r3, r7, r1
 8009a1e:	881b      	ldrh	r3, [r3, #0]
 8009a20:	2240      	movs	r2, #64	@ 0x40
 8009a22:	4013      	ands	r3, r2
 8009a24:	d016      	beq.n	8009a54 <USB_ActivateEndpoint+0x664>
 8009a26:	687a      	ldr	r2, [r7, #4]
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	781b      	ldrb	r3, [r3, #0]
 8009a2c:	009b      	lsls	r3, r3, #2
 8009a2e:	18d3      	adds	r3, r2, r3
 8009a30:	881b      	ldrh	r3, [r3, #0]
 8009a32:	b29a      	uxth	r2, r3
 8009a34:	2048      	movs	r0, #72	@ 0x48
 8009a36:	183b      	adds	r3, r7, r0
 8009a38:	4917      	ldr	r1, [pc, #92]	@ (8009a98 <USB_ActivateEndpoint+0x6a8>)
 8009a3a:	400a      	ands	r2, r1
 8009a3c:	801a      	strh	r2, [r3, #0]
 8009a3e:	687a      	ldr	r2, [r7, #4]
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	781b      	ldrb	r3, [r3, #0]
 8009a44:	009b      	lsls	r3, r3, #2
 8009a46:	18d3      	adds	r3, r2, r3
 8009a48:	183a      	adds	r2, r7, r0
 8009a4a:	8812      	ldrh	r2, [r2, #0]
 8009a4c:	4919      	ldr	r1, [pc, #100]	@ (8009ab4 <USB_ActivateEndpoint+0x6c4>)
 8009a4e:	430a      	orrs	r2, r1
 8009a50:	b292      	uxth	r2, r2
 8009a52:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	78db      	ldrb	r3, [r3, #3]
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d02f      	beq.n	8009abc <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009a5c:	687a      	ldr	r2, [r7, #4]
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	781b      	ldrb	r3, [r3, #0]
 8009a62:	009b      	lsls	r3, r3, #2
 8009a64:	18d3      	adds	r3, r2, r3
 8009a66:	881b      	ldrh	r3, [r3, #0]
 8009a68:	b29a      	uxth	r2, r3
 8009a6a:	2044      	movs	r0, #68	@ 0x44
 8009a6c:	183b      	adds	r3, r7, r0
 8009a6e:	4912      	ldr	r1, [pc, #72]	@ (8009ab8 <USB_ActivateEndpoint+0x6c8>)
 8009a70:	400a      	ands	r2, r1
 8009a72:	801a      	strh	r2, [r3, #0]
 8009a74:	183b      	adds	r3, r7, r0
 8009a76:	183a      	adds	r2, r7, r0
 8009a78:	8812      	ldrh	r2, [r2, #0]
 8009a7a:	2120      	movs	r1, #32
 8009a7c:	404a      	eors	r2, r1
 8009a7e:	801a      	strh	r2, [r3, #0]
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	781b      	ldrb	r3, [r3, #0]
 8009a86:	009b      	lsls	r3, r3, #2
 8009a88:	18d3      	adds	r3, r2, r3
 8009a8a:	183a      	adds	r2, r7, r0
 8009a8c:	8812      	ldrh	r2, [r2, #0]
 8009a8e:	4905      	ldr	r1, [pc, #20]	@ (8009aa4 <USB_ActivateEndpoint+0x6b4>)
 8009a90:	430a      	orrs	r2, r1
 8009a92:	b292      	uxth	r2, r2
 8009a94:	801a      	strh	r2, [r3, #0]
 8009a96:	e028      	b.n	8009aea <USB_ActivateEndpoint+0x6fa>
 8009a98:	ffff8f8f 	.word	0xffff8f8f
 8009a9c:	ffffc080 	.word	0xffffc080
 8009aa0:	ffffbf8f 	.word	0xffffbf8f
 8009aa4:	ffff8080 	.word	0xffff8080
 8009aa8:	ffff8180 	.word	0xffff8180
 8009aac:	ffff8e8f 	.word	0xffff8e8f
 8009ab0:	00000404 	.word	0x00000404
 8009ab4:	ffff80c0 	.word	0xffff80c0
 8009ab8:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009abc:	687a      	ldr	r2, [r7, #4]
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	781b      	ldrb	r3, [r3, #0]
 8009ac2:	009b      	lsls	r3, r3, #2
 8009ac4:	18d3      	adds	r3, r2, r3
 8009ac6:	881b      	ldrh	r3, [r3, #0]
 8009ac8:	b29a      	uxth	r2, r3
 8009aca:	2046      	movs	r0, #70	@ 0x46
 8009acc:	183b      	adds	r3, r7, r0
 8009ace:	4916      	ldr	r1, [pc, #88]	@ (8009b28 <USB_ActivateEndpoint+0x738>)
 8009ad0:	400a      	ands	r2, r1
 8009ad2:	801a      	strh	r2, [r3, #0]
 8009ad4:	687a      	ldr	r2, [r7, #4]
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	009b      	lsls	r3, r3, #2
 8009adc:	18d3      	adds	r3, r2, r3
 8009ade:	183a      	adds	r2, r7, r0
 8009ae0:	8812      	ldrh	r2, [r2, #0]
 8009ae2:	4912      	ldr	r1, [pc, #72]	@ (8009b2c <USB_ActivateEndpoint+0x73c>)
 8009ae4:	430a      	orrs	r2, r1
 8009ae6:	b292      	uxth	r2, r2
 8009ae8:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009aea:	687a      	ldr	r2, [r7, #4]
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	781b      	ldrb	r3, [r3, #0]
 8009af0:	009b      	lsls	r3, r3, #2
 8009af2:	18d3      	adds	r3, r2, r3
 8009af4:	881b      	ldrh	r3, [r3, #0]
 8009af6:	b29a      	uxth	r2, r3
 8009af8:	2042      	movs	r0, #66	@ 0x42
 8009afa:	183b      	adds	r3, r7, r0
 8009afc:	490c      	ldr	r1, [pc, #48]	@ (8009b30 <USB_ActivateEndpoint+0x740>)
 8009afe:	400a      	ands	r2, r1
 8009b00:	801a      	strh	r2, [r3, #0]
 8009b02:	687a      	ldr	r2, [r7, #4]
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	781b      	ldrb	r3, [r3, #0]
 8009b08:	009b      	lsls	r3, r3, #2
 8009b0a:	18d3      	adds	r3, r2, r3
 8009b0c:	183a      	adds	r2, r7, r0
 8009b0e:	8812      	ldrh	r2, [r2, #0]
 8009b10:	4906      	ldr	r1, [pc, #24]	@ (8009b2c <USB_ActivateEndpoint+0x73c>)
 8009b12:	430a      	orrs	r2, r1
 8009b14:	b292      	uxth	r2, r2
 8009b16:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8009b18:	236f      	movs	r3, #111	@ 0x6f
 8009b1a:	18fb      	adds	r3, r7, r3
 8009b1c:	781b      	ldrb	r3, [r3, #0]
}
 8009b1e:	0018      	movs	r0, r3
 8009b20:	46bd      	mov	sp, r7
 8009b22:	b01c      	add	sp, #112	@ 0x70
 8009b24:	bd80      	pop	{r7, pc}
 8009b26:	46c0      	nop			@ (mov r8, r8)
 8009b28:	ffff8fbf 	.word	0xffff8fbf
 8009b2c:	ffff8080 	.word	0xffff8080
 8009b30:	ffffbf8f 	.word	0xffffbf8f

08009b34 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b08c      	sub	sp, #48	@ 0x30
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	7b1b      	ldrb	r3, [r3, #12]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d000      	beq.n	8009b48 <USB_DeactivateEndpoint+0x14>
 8009b46:	e07e      	b.n	8009c46 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	785b      	ldrb	r3, [r3, #1]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d03c      	beq.n	8009bca <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009b50:	687a      	ldr	r2, [r7, #4]
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	781b      	ldrb	r3, [r3, #0]
 8009b56:	009b      	lsls	r3, r3, #2
 8009b58:	18d2      	adds	r2, r2, r3
 8009b5a:	210c      	movs	r1, #12
 8009b5c:	187b      	adds	r3, r7, r1
 8009b5e:	8812      	ldrh	r2, [r2, #0]
 8009b60:	801a      	strh	r2, [r3, #0]
 8009b62:	187b      	adds	r3, r7, r1
 8009b64:	881b      	ldrh	r3, [r3, #0]
 8009b66:	2240      	movs	r2, #64	@ 0x40
 8009b68:	4013      	ands	r3, r2
 8009b6a:	d016      	beq.n	8009b9a <USB_DeactivateEndpoint+0x66>
 8009b6c:	687a      	ldr	r2, [r7, #4]
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	781b      	ldrb	r3, [r3, #0]
 8009b72:	009b      	lsls	r3, r3, #2
 8009b74:	18d3      	adds	r3, r2, r3
 8009b76:	881b      	ldrh	r3, [r3, #0]
 8009b78:	b29a      	uxth	r2, r3
 8009b7a:	200a      	movs	r0, #10
 8009b7c:	183b      	adds	r3, r7, r0
 8009b7e:	49c7      	ldr	r1, [pc, #796]	@ (8009e9c <USB_DeactivateEndpoint+0x368>)
 8009b80:	400a      	ands	r2, r1
 8009b82:	801a      	strh	r2, [r3, #0]
 8009b84:	687a      	ldr	r2, [r7, #4]
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	781b      	ldrb	r3, [r3, #0]
 8009b8a:	009b      	lsls	r3, r3, #2
 8009b8c:	18d3      	adds	r3, r2, r3
 8009b8e:	183a      	adds	r2, r7, r0
 8009b90:	8812      	ldrh	r2, [r2, #0]
 8009b92:	49c3      	ldr	r1, [pc, #780]	@ (8009ea0 <USB_DeactivateEndpoint+0x36c>)
 8009b94:	430a      	orrs	r2, r1
 8009b96:	b292      	uxth	r2, r2
 8009b98:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009b9a:	687a      	ldr	r2, [r7, #4]
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	781b      	ldrb	r3, [r3, #0]
 8009ba0:	009b      	lsls	r3, r3, #2
 8009ba2:	18d3      	adds	r3, r2, r3
 8009ba4:	881b      	ldrh	r3, [r3, #0]
 8009ba6:	b29a      	uxth	r2, r3
 8009ba8:	2008      	movs	r0, #8
 8009baa:	183b      	adds	r3, r7, r0
 8009bac:	49bd      	ldr	r1, [pc, #756]	@ (8009ea4 <USB_DeactivateEndpoint+0x370>)
 8009bae:	400a      	ands	r2, r1
 8009bb0:	801a      	strh	r2, [r3, #0]
 8009bb2:	687a      	ldr	r2, [r7, #4]
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	781b      	ldrb	r3, [r3, #0]
 8009bb8:	009b      	lsls	r3, r3, #2
 8009bba:	18d3      	adds	r3, r2, r3
 8009bbc:	183a      	adds	r2, r7, r0
 8009bbe:	8812      	ldrh	r2, [r2, #0]
 8009bc0:	49b9      	ldr	r1, [pc, #740]	@ (8009ea8 <USB_DeactivateEndpoint+0x374>)
 8009bc2:	430a      	orrs	r2, r1
 8009bc4:	b292      	uxth	r2, r2
 8009bc6:	801a      	strh	r2, [r3, #0]
 8009bc8:	e163      	b.n	8009e92 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009bca:	687a      	ldr	r2, [r7, #4]
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	781b      	ldrb	r3, [r3, #0]
 8009bd0:	009b      	lsls	r3, r3, #2
 8009bd2:	18d2      	adds	r2, r2, r3
 8009bd4:	2112      	movs	r1, #18
 8009bd6:	187b      	adds	r3, r7, r1
 8009bd8:	8812      	ldrh	r2, [r2, #0]
 8009bda:	801a      	strh	r2, [r3, #0]
 8009bdc:	187b      	adds	r3, r7, r1
 8009bde:	881a      	ldrh	r2, [r3, #0]
 8009be0:	2380      	movs	r3, #128	@ 0x80
 8009be2:	01db      	lsls	r3, r3, #7
 8009be4:	4013      	ands	r3, r2
 8009be6:	d016      	beq.n	8009c16 <USB_DeactivateEndpoint+0xe2>
 8009be8:	687a      	ldr	r2, [r7, #4]
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	781b      	ldrb	r3, [r3, #0]
 8009bee:	009b      	lsls	r3, r3, #2
 8009bf0:	18d3      	adds	r3, r2, r3
 8009bf2:	881b      	ldrh	r3, [r3, #0]
 8009bf4:	b29a      	uxth	r2, r3
 8009bf6:	2010      	movs	r0, #16
 8009bf8:	183b      	adds	r3, r7, r0
 8009bfa:	49a8      	ldr	r1, [pc, #672]	@ (8009e9c <USB_DeactivateEndpoint+0x368>)
 8009bfc:	400a      	ands	r2, r1
 8009bfe:	801a      	strh	r2, [r3, #0]
 8009c00:	687a      	ldr	r2, [r7, #4]
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	781b      	ldrb	r3, [r3, #0]
 8009c06:	009b      	lsls	r3, r3, #2
 8009c08:	18d3      	adds	r3, r2, r3
 8009c0a:	183a      	adds	r2, r7, r0
 8009c0c:	8812      	ldrh	r2, [r2, #0]
 8009c0e:	49a7      	ldr	r1, [pc, #668]	@ (8009eac <USB_DeactivateEndpoint+0x378>)
 8009c10:	430a      	orrs	r2, r1
 8009c12:	b292      	uxth	r2, r2
 8009c14:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009c16:	687a      	ldr	r2, [r7, #4]
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	781b      	ldrb	r3, [r3, #0]
 8009c1c:	009b      	lsls	r3, r3, #2
 8009c1e:	18d3      	adds	r3, r2, r3
 8009c20:	881b      	ldrh	r3, [r3, #0]
 8009c22:	b29a      	uxth	r2, r3
 8009c24:	200e      	movs	r0, #14
 8009c26:	183b      	adds	r3, r7, r0
 8009c28:	49a1      	ldr	r1, [pc, #644]	@ (8009eb0 <USB_DeactivateEndpoint+0x37c>)
 8009c2a:	400a      	ands	r2, r1
 8009c2c:	801a      	strh	r2, [r3, #0]
 8009c2e:	687a      	ldr	r2, [r7, #4]
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	781b      	ldrb	r3, [r3, #0]
 8009c34:	009b      	lsls	r3, r3, #2
 8009c36:	18d3      	adds	r3, r2, r3
 8009c38:	183a      	adds	r2, r7, r0
 8009c3a:	8812      	ldrh	r2, [r2, #0]
 8009c3c:	499a      	ldr	r1, [pc, #616]	@ (8009ea8 <USB_DeactivateEndpoint+0x374>)
 8009c3e:	430a      	orrs	r2, r1
 8009c40:	b292      	uxth	r2, r2
 8009c42:	801a      	strh	r2, [r3, #0]
 8009c44:	e125      	b.n	8009e92 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	785b      	ldrb	r3, [r3, #1]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d000      	beq.n	8009c50 <USB_DeactivateEndpoint+0x11c>
 8009c4e:	e090      	b.n	8009d72 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009c50:	687a      	ldr	r2, [r7, #4]
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	781b      	ldrb	r3, [r3, #0]
 8009c56:	009b      	lsls	r3, r3, #2
 8009c58:	18d2      	adds	r2, r2, r3
 8009c5a:	2120      	movs	r1, #32
 8009c5c:	187b      	adds	r3, r7, r1
 8009c5e:	8812      	ldrh	r2, [r2, #0]
 8009c60:	801a      	strh	r2, [r3, #0]
 8009c62:	187b      	adds	r3, r7, r1
 8009c64:	881a      	ldrh	r2, [r3, #0]
 8009c66:	2380      	movs	r3, #128	@ 0x80
 8009c68:	01db      	lsls	r3, r3, #7
 8009c6a:	4013      	ands	r3, r2
 8009c6c:	d016      	beq.n	8009c9c <USB_DeactivateEndpoint+0x168>
 8009c6e:	687a      	ldr	r2, [r7, #4]
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	781b      	ldrb	r3, [r3, #0]
 8009c74:	009b      	lsls	r3, r3, #2
 8009c76:	18d3      	adds	r3, r2, r3
 8009c78:	881b      	ldrh	r3, [r3, #0]
 8009c7a:	b29a      	uxth	r2, r3
 8009c7c:	201e      	movs	r0, #30
 8009c7e:	183b      	adds	r3, r7, r0
 8009c80:	4986      	ldr	r1, [pc, #536]	@ (8009e9c <USB_DeactivateEndpoint+0x368>)
 8009c82:	400a      	ands	r2, r1
 8009c84:	801a      	strh	r2, [r3, #0]
 8009c86:	687a      	ldr	r2, [r7, #4]
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	781b      	ldrb	r3, [r3, #0]
 8009c8c:	009b      	lsls	r3, r3, #2
 8009c8e:	18d3      	adds	r3, r2, r3
 8009c90:	183a      	adds	r2, r7, r0
 8009c92:	8812      	ldrh	r2, [r2, #0]
 8009c94:	4985      	ldr	r1, [pc, #532]	@ (8009eac <USB_DeactivateEndpoint+0x378>)
 8009c96:	430a      	orrs	r2, r1
 8009c98:	b292      	uxth	r2, r2
 8009c9a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009c9c:	687a      	ldr	r2, [r7, #4]
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	781b      	ldrb	r3, [r3, #0]
 8009ca2:	009b      	lsls	r3, r3, #2
 8009ca4:	18d2      	adds	r2, r2, r3
 8009ca6:	211c      	movs	r1, #28
 8009ca8:	187b      	adds	r3, r7, r1
 8009caa:	8812      	ldrh	r2, [r2, #0]
 8009cac:	801a      	strh	r2, [r3, #0]
 8009cae:	187b      	adds	r3, r7, r1
 8009cb0:	881b      	ldrh	r3, [r3, #0]
 8009cb2:	2240      	movs	r2, #64	@ 0x40
 8009cb4:	4013      	ands	r3, r2
 8009cb6:	d016      	beq.n	8009ce6 <USB_DeactivateEndpoint+0x1b2>
 8009cb8:	687a      	ldr	r2, [r7, #4]
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	781b      	ldrb	r3, [r3, #0]
 8009cbe:	009b      	lsls	r3, r3, #2
 8009cc0:	18d3      	adds	r3, r2, r3
 8009cc2:	881b      	ldrh	r3, [r3, #0]
 8009cc4:	b29a      	uxth	r2, r3
 8009cc6:	201a      	movs	r0, #26
 8009cc8:	183b      	adds	r3, r7, r0
 8009cca:	4974      	ldr	r1, [pc, #464]	@ (8009e9c <USB_DeactivateEndpoint+0x368>)
 8009ccc:	400a      	ands	r2, r1
 8009cce:	801a      	strh	r2, [r3, #0]
 8009cd0:	687a      	ldr	r2, [r7, #4]
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	781b      	ldrb	r3, [r3, #0]
 8009cd6:	009b      	lsls	r3, r3, #2
 8009cd8:	18d3      	adds	r3, r2, r3
 8009cda:	183a      	adds	r2, r7, r0
 8009cdc:	8812      	ldrh	r2, [r2, #0]
 8009cde:	4970      	ldr	r1, [pc, #448]	@ (8009ea0 <USB_DeactivateEndpoint+0x36c>)
 8009ce0:	430a      	orrs	r2, r1
 8009ce2:	b292      	uxth	r2, r2
 8009ce4:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009ce6:	687a      	ldr	r2, [r7, #4]
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	781b      	ldrb	r3, [r3, #0]
 8009cec:	009b      	lsls	r3, r3, #2
 8009cee:	18d3      	adds	r3, r2, r3
 8009cf0:	881b      	ldrh	r3, [r3, #0]
 8009cf2:	b29a      	uxth	r2, r3
 8009cf4:	2018      	movs	r0, #24
 8009cf6:	183b      	adds	r3, r7, r0
 8009cf8:	4968      	ldr	r1, [pc, #416]	@ (8009e9c <USB_DeactivateEndpoint+0x368>)
 8009cfa:	400a      	ands	r2, r1
 8009cfc:	801a      	strh	r2, [r3, #0]
 8009cfe:	687a      	ldr	r2, [r7, #4]
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	781b      	ldrb	r3, [r3, #0]
 8009d04:	009b      	lsls	r3, r3, #2
 8009d06:	18d3      	adds	r3, r2, r3
 8009d08:	183a      	adds	r2, r7, r0
 8009d0a:	8812      	ldrh	r2, [r2, #0]
 8009d0c:	4964      	ldr	r1, [pc, #400]	@ (8009ea0 <USB_DeactivateEndpoint+0x36c>)
 8009d0e:	430a      	orrs	r2, r1
 8009d10:	b292      	uxth	r2, r2
 8009d12:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009d14:	687a      	ldr	r2, [r7, #4]
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	781b      	ldrb	r3, [r3, #0]
 8009d1a:	009b      	lsls	r3, r3, #2
 8009d1c:	18d3      	adds	r3, r2, r3
 8009d1e:	881b      	ldrh	r3, [r3, #0]
 8009d20:	b29a      	uxth	r2, r3
 8009d22:	2016      	movs	r0, #22
 8009d24:	183b      	adds	r3, r7, r0
 8009d26:	4962      	ldr	r1, [pc, #392]	@ (8009eb0 <USB_DeactivateEndpoint+0x37c>)
 8009d28:	400a      	ands	r2, r1
 8009d2a:	801a      	strh	r2, [r3, #0]
 8009d2c:	687a      	ldr	r2, [r7, #4]
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	009b      	lsls	r3, r3, #2
 8009d34:	18d3      	adds	r3, r2, r3
 8009d36:	183a      	adds	r2, r7, r0
 8009d38:	8812      	ldrh	r2, [r2, #0]
 8009d3a:	495b      	ldr	r1, [pc, #364]	@ (8009ea8 <USB_DeactivateEndpoint+0x374>)
 8009d3c:	430a      	orrs	r2, r1
 8009d3e:	b292      	uxth	r2, r2
 8009d40:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009d42:	687a      	ldr	r2, [r7, #4]
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	781b      	ldrb	r3, [r3, #0]
 8009d48:	009b      	lsls	r3, r3, #2
 8009d4a:	18d3      	adds	r3, r2, r3
 8009d4c:	881b      	ldrh	r3, [r3, #0]
 8009d4e:	b29a      	uxth	r2, r3
 8009d50:	2014      	movs	r0, #20
 8009d52:	183b      	adds	r3, r7, r0
 8009d54:	4953      	ldr	r1, [pc, #332]	@ (8009ea4 <USB_DeactivateEndpoint+0x370>)
 8009d56:	400a      	ands	r2, r1
 8009d58:	801a      	strh	r2, [r3, #0]
 8009d5a:	687a      	ldr	r2, [r7, #4]
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	781b      	ldrb	r3, [r3, #0]
 8009d60:	009b      	lsls	r3, r3, #2
 8009d62:	18d3      	adds	r3, r2, r3
 8009d64:	183a      	adds	r2, r7, r0
 8009d66:	8812      	ldrh	r2, [r2, #0]
 8009d68:	494f      	ldr	r1, [pc, #316]	@ (8009ea8 <USB_DeactivateEndpoint+0x374>)
 8009d6a:	430a      	orrs	r2, r1
 8009d6c:	b292      	uxth	r2, r2
 8009d6e:	801a      	strh	r2, [r3, #0]
 8009d70:	e08f      	b.n	8009e92 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	781b      	ldrb	r3, [r3, #0]
 8009d78:	009b      	lsls	r3, r3, #2
 8009d7a:	18d2      	adds	r2, r2, r3
 8009d7c:	212e      	movs	r1, #46	@ 0x2e
 8009d7e:	187b      	adds	r3, r7, r1
 8009d80:	8812      	ldrh	r2, [r2, #0]
 8009d82:	801a      	strh	r2, [r3, #0]
 8009d84:	187b      	adds	r3, r7, r1
 8009d86:	881a      	ldrh	r2, [r3, #0]
 8009d88:	2380      	movs	r3, #128	@ 0x80
 8009d8a:	01db      	lsls	r3, r3, #7
 8009d8c:	4013      	ands	r3, r2
 8009d8e:	d016      	beq.n	8009dbe <USB_DeactivateEndpoint+0x28a>
 8009d90:	687a      	ldr	r2, [r7, #4]
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	009b      	lsls	r3, r3, #2
 8009d98:	18d3      	adds	r3, r2, r3
 8009d9a:	881b      	ldrh	r3, [r3, #0]
 8009d9c:	b29a      	uxth	r2, r3
 8009d9e:	202c      	movs	r0, #44	@ 0x2c
 8009da0:	183b      	adds	r3, r7, r0
 8009da2:	493e      	ldr	r1, [pc, #248]	@ (8009e9c <USB_DeactivateEndpoint+0x368>)
 8009da4:	400a      	ands	r2, r1
 8009da6:	801a      	strh	r2, [r3, #0]
 8009da8:	687a      	ldr	r2, [r7, #4]
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	781b      	ldrb	r3, [r3, #0]
 8009dae:	009b      	lsls	r3, r3, #2
 8009db0:	18d3      	adds	r3, r2, r3
 8009db2:	183a      	adds	r2, r7, r0
 8009db4:	8812      	ldrh	r2, [r2, #0]
 8009db6:	493d      	ldr	r1, [pc, #244]	@ (8009eac <USB_DeactivateEndpoint+0x378>)
 8009db8:	430a      	orrs	r2, r1
 8009dba:	b292      	uxth	r2, r2
 8009dbc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	781b      	ldrb	r3, [r3, #0]
 8009dc4:	009b      	lsls	r3, r3, #2
 8009dc6:	18d2      	adds	r2, r2, r3
 8009dc8:	212a      	movs	r1, #42	@ 0x2a
 8009dca:	187b      	adds	r3, r7, r1
 8009dcc:	8812      	ldrh	r2, [r2, #0]
 8009dce:	801a      	strh	r2, [r3, #0]
 8009dd0:	187b      	adds	r3, r7, r1
 8009dd2:	881b      	ldrh	r3, [r3, #0]
 8009dd4:	2240      	movs	r2, #64	@ 0x40
 8009dd6:	4013      	ands	r3, r2
 8009dd8:	d016      	beq.n	8009e08 <USB_DeactivateEndpoint+0x2d4>
 8009dda:	687a      	ldr	r2, [r7, #4]
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	781b      	ldrb	r3, [r3, #0]
 8009de0:	009b      	lsls	r3, r3, #2
 8009de2:	18d3      	adds	r3, r2, r3
 8009de4:	881b      	ldrh	r3, [r3, #0]
 8009de6:	b29a      	uxth	r2, r3
 8009de8:	2028      	movs	r0, #40	@ 0x28
 8009dea:	183b      	adds	r3, r7, r0
 8009dec:	492b      	ldr	r1, [pc, #172]	@ (8009e9c <USB_DeactivateEndpoint+0x368>)
 8009dee:	400a      	ands	r2, r1
 8009df0:	801a      	strh	r2, [r3, #0]
 8009df2:	687a      	ldr	r2, [r7, #4]
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	781b      	ldrb	r3, [r3, #0]
 8009df8:	009b      	lsls	r3, r3, #2
 8009dfa:	18d3      	adds	r3, r2, r3
 8009dfc:	183a      	adds	r2, r7, r0
 8009dfe:	8812      	ldrh	r2, [r2, #0]
 8009e00:	4927      	ldr	r1, [pc, #156]	@ (8009ea0 <USB_DeactivateEndpoint+0x36c>)
 8009e02:	430a      	orrs	r2, r1
 8009e04:	b292      	uxth	r2, r2
 8009e06:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009e08:	687a      	ldr	r2, [r7, #4]
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	781b      	ldrb	r3, [r3, #0]
 8009e0e:	009b      	lsls	r3, r3, #2
 8009e10:	18d3      	adds	r3, r2, r3
 8009e12:	881b      	ldrh	r3, [r3, #0]
 8009e14:	b29a      	uxth	r2, r3
 8009e16:	2026      	movs	r0, #38	@ 0x26
 8009e18:	183b      	adds	r3, r7, r0
 8009e1a:	4920      	ldr	r1, [pc, #128]	@ (8009e9c <USB_DeactivateEndpoint+0x368>)
 8009e1c:	400a      	ands	r2, r1
 8009e1e:	801a      	strh	r2, [r3, #0]
 8009e20:	687a      	ldr	r2, [r7, #4]
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	781b      	ldrb	r3, [r3, #0]
 8009e26:	009b      	lsls	r3, r3, #2
 8009e28:	18d3      	adds	r3, r2, r3
 8009e2a:	183a      	adds	r2, r7, r0
 8009e2c:	8812      	ldrh	r2, [r2, #0]
 8009e2e:	491f      	ldr	r1, [pc, #124]	@ (8009eac <USB_DeactivateEndpoint+0x378>)
 8009e30:	430a      	orrs	r2, r1
 8009e32:	b292      	uxth	r2, r2
 8009e34:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009e36:	687a      	ldr	r2, [r7, #4]
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	781b      	ldrb	r3, [r3, #0]
 8009e3c:	009b      	lsls	r3, r3, #2
 8009e3e:	18d3      	adds	r3, r2, r3
 8009e40:	881b      	ldrh	r3, [r3, #0]
 8009e42:	b29a      	uxth	r2, r3
 8009e44:	2024      	movs	r0, #36	@ 0x24
 8009e46:	183b      	adds	r3, r7, r0
 8009e48:	4916      	ldr	r1, [pc, #88]	@ (8009ea4 <USB_DeactivateEndpoint+0x370>)
 8009e4a:	400a      	ands	r2, r1
 8009e4c:	801a      	strh	r2, [r3, #0]
 8009e4e:	687a      	ldr	r2, [r7, #4]
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	781b      	ldrb	r3, [r3, #0]
 8009e54:	009b      	lsls	r3, r3, #2
 8009e56:	18d3      	adds	r3, r2, r3
 8009e58:	183a      	adds	r2, r7, r0
 8009e5a:	8812      	ldrh	r2, [r2, #0]
 8009e5c:	4912      	ldr	r1, [pc, #72]	@ (8009ea8 <USB_DeactivateEndpoint+0x374>)
 8009e5e:	430a      	orrs	r2, r1
 8009e60:	b292      	uxth	r2, r2
 8009e62:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009e64:	687a      	ldr	r2, [r7, #4]
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	781b      	ldrb	r3, [r3, #0]
 8009e6a:	009b      	lsls	r3, r3, #2
 8009e6c:	18d3      	adds	r3, r2, r3
 8009e6e:	881b      	ldrh	r3, [r3, #0]
 8009e70:	b29a      	uxth	r2, r3
 8009e72:	2022      	movs	r0, #34	@ 0x22
 8009e74:	183b      	adds	r3, r7, r0
 8009e76:	490e      	ldr	r1, [pc, #56]	@ (8009eb0 <USB_DeactivateEndpoint+0x37c>)
 8009e78:	400a      	ands	r2, r1
 8009e7a:	801a      	strh	r2, [r3, #0]
 8009e7c:	687a      	ldr	r2, [r7, #4]
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	781b      	ldrb	r3, [r3, #0]
 8009e82:	009b      	lsls	r3, r3, #2
 8009e84:	18d3      	adds	r3, r2, r3
 8009e86:	183a      	adds	r2, r7, r0
 8009e88:	8812      	ldrh	r2, [r2, #0]
 8009e8a:	4907      	ldr	r1, [pc, #28]	@ (8009ea8 <USB_DeactivateEndpoint+0x374>)
 8009e8c:	430a      	orrs	r2, r1
 8009e8e:	b292      	uxth	r2, r2
 8009e90:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009e92:	2300      	movs	r3, #0
}
 8009e94:	0018      	movs	r0, r3
 8009e96:	46bd      	mov	sp, r7
 8009e98:	b00c      	add	sp, #48	@ 0x30
 8009e9a:	bd80      	pop	{r7, pc}
 8009e9c:	ffff8f8f 	.word	0xffff8f8f
 8009ea0:	ffff80c0 	.word	0xffff80c0
 8009ea4:	ffff8fbf 	.word	0xffff8fbf
 8009ea8:	ffff8080 	.word	0xffff8080
 8009eac:	ffffc080 	.word	0xffffc080
 8009eb0:	ffffbf8f 	.word	0xffffbf8f

08009eb4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009eb4:	b590      	push	{r4, r7, lr}
 8009eb6:	b0c3      	sub	sp, #268	@ 0x10c
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
 8009ebc:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	785b      	ldrb	r3, [r3, #1]
 8009ec2:	2b01      	cmp	r3, #1
 8009ec4:	d001      	beq.n	8009eca <USB_EPStartXfer+0x16>
 8009ec6:	f000 fd2d 	bl	800a924 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	699a      	ldr	r2, [r3, #24]
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	691b      	ldr	r3, [r3, #16]
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d905      	bls.n	8009ee2 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	691b      	ldr	r3, [r3, #16]
 8009eda:	1d7a      	adds	r2, r7, #5
 8009edc:	32ff      	adds	r2, #255	@ 0xff
 8009ede:	6013      	str	r3, [r2, #0]
 8009ee0:	e004      	b.n	8009eec <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	699b      	ldr	r3, [r3, #24]
 8009ee6:	1d7a      	adds	r2, r7, #5
 8009ee8:	32ff      	adds	r2, #255	@ 0xff
 8009eea:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	7b1b      	ldrb	r3, [r3, #12]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d125      	bne.n	8009f40 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	6959      	ldr	r1, [r3, #20]
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	88da      	ldrh	r2, [r3, #6]
 8009efc:	1d7b      	adds	r3, r7, #5
 8009efe:	33ff      	adds	r3, #255	@ 0xff
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	b29b      	uxth	r3, r3
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f001 fa47 	bl	800b398 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	613b      	str	r3, [r7, #16]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2250      	movs	r2, #80	@ 0x50
 8009f12:	5a9b      	ldrh	r3, [r3, r2]
 8009f14:	b29b      	uxth	r3, r3
 8009f16:	001a      	movs	r2, r3
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	189b      	adds	r3, r3, r2
 8009f1c:	613b      	str	r3, [r7, #16]
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	781b      	ldrb	r3, [r3, #0]
 8009f22:	00da      	lsls	r2, r3, #3
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	18d3      	adds	r3, r2, r3
 8009f28:	4ad7      	ldr	r2, [pc, #860]	@ (800a288 <USB_EPStartXfer+0x3d4>)
 8009f2a:	4694      	mov	ip, r2
 8009f2c:	4463      	add	r3, ip
 8009f2e:	60fb      	str	r3, [r7, #12]
 8009f30:	1d7b      	adds	r3, r7, #5
 8009f32:	33ff      	adds	r3, #255	@ 0xff
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	b29a      	uxth	r2, r3
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	801a      	strh	r2, [r3, #0]
 8009f3c:	f000 fccd 	bl	800a8da <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	78db      	ldrb	r3, [r3, #3]
 8009f44:	2b02      	cmp	r3, #2
 8009f46:	d000      	beq.n	8009f4a <USB_EPStartXfer+0x96>
 8009f48:	e362      	b.n	800a610 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	6a1a      	ldr	r2, [r3, #32]
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	691b      	ldr	r3, [r3, #16]
 8009f52:	429a      	cmp	r2, r3
 8009f54:	d800      	bhi.n	8009f58 <USB_EPStartXfer+0xa4>
 8009f56:	e309      	b.n	800a56c <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009f58:	687a      	ldr	r2, [r7, #4]
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	781b      	ldrb	r3, [r3, #0]
 8009f5e:	009b      	lsls	r3, r3, #2
 8009f60:	18d3      	adds	r3, r2, r3
 8009f62:	881b      	ldrh	r3, [r3, #0]
 8009f64:	b29a      	uxth	r2, r3
 8009f66:	2056      	movs	r0, #86	@ 0x56
 8009f68:	183b      	adds	r3, r7, r0
 8009f6a:	49c8      	ldr	r1, [pc, #800]	@ (800a28c <USB_EPStartXfer+0x3d8>)
 8009f6c:	400a      	ands	r2, r1
 8009f6e:	801a      	strh	r2, [r3, #0]
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	781b      	ldrb	r3, [r3, #0]
 8009f76:	009b      	lsls	r3, r3, #2
 8009f78:	18d3      	adds	r3, r2, r3
 8009f7a:	183a      	adds	r2, r7, r0
 8009f7c:	8812      	ldrh	r2, [r2, #0]
 8009f7e:	49c4      	ldr	r1, [pc, #784]	@ (800a290 <USB_EPStartXfer+0x3dc>)
 8009f80:	430a      	orrs	r2, r1
 8009f82:	b292      	uxth	r2, r2
 8009f84:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	6a1a      	ldr	r2, [r3, #32]
 8009f8a:	1d7b      	adds	r3, r7, #5
 8009f8c:	33ff      	adds	r3, #255	@ 0xff
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	1ad2      	subs	r2, r2, r3
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009f96:	687a      	ldr	r2, [r7, #4]
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	781b      	ldrb	r3, [r3, #0]
 8009f9c:	009b      	lsls	r3, r3, #2
 8009f9e:	18d3      	adds	r3, r2, r3
 8009fa0:	881b      	ldrh	r3, [r3, #0]
 8009fa2:	b29b      	uxth	r3, r3
 8009fa4:	001a      	movs	r2, r3
 8009fa6:	2340      	movs	r3, #64	@ 0x40
 8009fa8:	4013      	ands	r3, r2
 8009faa:	d100      	bne.n	8009fae <USB_EPStartXfer+0xfa>
 8009fac:	e176      	b.n	800a29c <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	785b      	ldrb	r3, [r3, #1]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d000      	beq.n	8009fbc <USB_EPStartXfer+0x108>
 8009fba:	e074      	b.n	800a0a6 <USB_EPStartXfer+0x1f2>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2250      	movs	r2, #80	@ 0x50
 8009fc4:	5a9b      	ldrh	r3, [r3, r2]
 8009fc6:	b29b      	uxth	r3, r3
 8009fc8:	001a      	movs	r2, r3
 8009fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fcc:	189b      	adds	r3, r3, r2
 8009fce:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	781b      	ldrb	r3, [r3, #0]
 8009fd4:	00da      	lsls	r2, r3, #3
 8009fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fd8:	18d3      	adds	r3, r2, r3
 8009fda:	4aae      	ldr	r2, [pc, #696]	@ (800a294 <USB_EPStartXfer+0x3e0>)
 8009fdc:	4694      	mov	ip, r2
 8009fde:	4463      	add	r3, ip
 8009fe0:	627b      	str	r3, [r7, #36]	@ 0x24
 8009fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fe4:	881b      	ldrh	r3, [r3, #0]
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	059b      	lsls	r3, r3, #22
 8009fea:	0d9b      	lsrs	r3, r3, #22
 8009fec:	b29a      	uxth	r2, r3
 8009fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ff0:	801a      	strh	r2, [r3, #0]
 8009ff2:	1d7b      	adds	r3, r7, #5
 8009ff4:	33ff      	adds	r3, #255	@ 0xff
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	2b3e      	cmp	r3, #62	@ 0x3e
 8009ffa:	d924      	bls.n	800a046 <USB_EPStartXfer+0x192>
 8009ffc:	1d7b      	adds	r3, r7, #5
 8009ffe:	33ff      	adds	r3, #255	@ 0xff
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	095b      	lsrs	r3, r3, #5
 800a004:	1c7a      	adds	r2, r7, #1
 800a006:	32ff      	adds	r2, #255	@ 0xff
 800a008:	6013      	str	r3, [r2, #0]
 800a00a:	1d7b      	adds	r3, r7, #5
 800a00c:	33ff      	adds	r3, #255	@ 0xff
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	221f      	movs	r2, #31
 800a012:	4013      	ands	r3, r2
 800a014:	d106      	bne.n	800a024 <USB_EPStartXfer+0x170>
 800a016:	1c7b      	adds	r3, r7, #1
 800a018:	33ff      	adds	r3, #255	@ 0xff
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	3b01      	subs	r3, #1
 800a01e:	1c7a      	adds	r2, r7, #1
 800a020:	32ff      	adds	r2, #255	@ 0xff
 800a022:	6013      	str	r3, [r2, #0]
 800a024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a026:	881b      	ldrh	r3, [r3, #0]
 800a028:	b29a      	uxth	r2, r3
 800a02a:	1c7b      	adds	r3, r7, #1
 800a02c:	33ff      	adds	r3, #255	@ 0xff
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	b29b      	uxth	r3, r3
 800a032:	029b      	lsls	r3, r3, #10
 800a034:	b29b      	uxth	r3, r3
 800a036:	4313      	orrs	r3, r2
 800a038:	b29b      	uxth	r3, r3
 800a03a:	4a97      	ldr	r2, [pc, #604]	@ (800a298 <USB_EPStartXfer+0x3e4>)
 800a03c:	4313      	orrs	r3, r2
 800a03e:	b29a      	uxth	r2, r3
 800a040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a042:	801a      	strh	r2, [r3, #0]
 800a044:	e04a      	b.n	800a0dc <USB_EPStartXfer+0x228>
 800a046:	1d7b      	adds	r3, r7, #5
 800a048:	33ff      	adds	r3, #255	@ 0xff
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d108      	bne.n	800a062 <USB_EPStartXfer+0x1ae>
 800a050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a052:	881b      	ldrh	r3, [r3, #0]
 800a054:	b29b      	uxth	r3, r3
 800a056:	4a90      	ldr	r2, [pc, #576]	@ (800a298 <USB_EPStartXfer+0x3e4>)
 800a058:	4313      	orrs	r3, r2
 800a05a:	b29a      	uxth	r2, r3
 800a05c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a05e:	801a      	strh	r2, [r3, #0]
 800a060:	e03c      	b.n	800a0dc <USB_EPStartXfer+0x228>
 800a062:	1d7b      	adds	r3, r7, #5
 800a064:	33ff      	adds	r3, #255	@ 0xff
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	085b      	lsrs	r3, r3, #1
 800a06a:	1c7a      	adds	r2, r7, #1
 800a06c:	32ff      	adds	r2, #255	@ 0xff
 800a06e:	6013      	str	r3, [r2, #0]
 800a070:	1d7b      	adds	r3, r7, #5
 800a072:	33ff      	adds	r3, #255	@ 0xff
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	2201      	movs	r2, #1
 800a078:	4013      	ands	r3, r2
 800a07a:	d006      	beq.n	800a08a <USB_EPStartXfer+0x1d6>
 800a07c:	1c7b      	adds	r3, r7, #1
 800a07e:	33ff      	adds	r3, #255	@ 0xff
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	3301      	adds	r3, #1
 800a084:	1c7a      	adds	r2, r7, #1
 800a086:	32ff      	adds	r2, #255	@ 0xff
 800a088:	6013      	str	r3, [r2, #0]
 800a08a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a08c:	881b      	ldrh	r3, [r3, #0]
 800a08e:	b29a      	uxth	r2, r3
 800a090:	1c7b      	adds	r3, r7, #1
 800a092:	33ff      	adds	r3, #255	@ 0xff
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	b29b      	uxth	r3, r3
 800a098:	029b      	lsls	r3, r3, #10
 800a09a:	b29b      	uxth	r3, r3
 800a09c:	4313      	orrs	r3, r2
 800a09e:	b29a      	uxth	r2, r3
 800a0a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0a2:	801a      	strh	r2, [r3, #0]
 800a0a4:	e01a      	b.n	800a0dc <USB_EPStartXfer+0x228>
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	785b      	ldrb	r3, [r3, #1]
 800a0aa:	2b01      	cmp	r3, #1
 800a0ac:	d116      	bne.n	800a0dc <USB_EPStartXfer+0x228>
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2250      	movs	r2, #80	@ 0x50
 800a0b2:	5a9b      	ldrh	r3, [r3, r2]
 800a0b4:	b29b      	uxth	r3, r3
 800a0b6:	001a      	movs	r2, r3
 800a0b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ba:	189b      	adds	r3, r3, r2
 800a0bc:	633b      	str	r3, [r7, #48]	@ 0x30
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	781b      	ldrb	r3, [r3, #0]
 800a0c2:	00da      	lsls	r2, r3, #3
 800a0c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0c6:	18d3      	adds	r3, r2, r3
 800a0c8:	4a72      	ldr	r2, [pc, #456]	@ (800a294 <USB_EPStartXfer+0x3e0>)
 800a0ca:	4694      	mov	ip, r2
 800a0cc:	4463      	add	r3, ip
 800a0ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a0d0:	1d7b      	adds	r3, r7, #5
 800a0d2:	33ff      	adds	r3, #255	@ 0xff
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	b29a      	uxth	r2, r3
 800a0d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0da:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a0dc:	2076      	movs	r0, #118	@ 0x76
 800a0de:	183b      	adds	r3, r7, r0
 800a0e0:	683a      	ldr	r2, [r7, #0]
 800a0e2:	8952      	ldrh	r2, [r2, #10]
 800a0e4:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	6959      	ldr	r1, [r3, #20]
 800a0ea:	1d7b      	adds	r3, r7, #5
 800a0ec:	33ff      	adds	r3, #255	@ 0xff
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	b29c      	uxth	r4, r3
 800a0f2:	183b      	adds	r3, r7, r0
 800a0f4:	881a      	ldrh	r2, [r3, #0]
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	0023      	movs	r3, r4
 800a0fa:	f001 f94d 	bl	800b398 <USB_WritePMA>
            ep->xfer_buff += len;
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	695a      	ldr	r2, [r3, #20]
 800a102:	1d7b      	adds	r3, r7, #5
 800a104:	33ff      	adds	r3, #255	@ 0xff
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	18d2      	adds	r2, r2, r3
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	6a1a      	ldr	r2, [r3, #32]
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	691b      	ldr	r3, [r3, #16]
 800a116:	429a      	cmp	r2, r3
 800a118:	d908      	bls.n	800a12c <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	6a1a      	ldr	r2, [r3, #32]
 800a11e:	1d7b      	adds	r3, r7, #5
 800a120:	33ff      	adds	r3, #255	@ 0xff
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	1ad2      	subs	r2, r2, r3
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	621a      	str	r2, [r3, #32]
 800a12a:	e007      	b.n	800a13c <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	6a1b      	ldr	r3, [r3, #32]
 800a130:	1d7a      	adds	r2, r7, #5
 800a132:	32ff      	adds	r2, #255	@ 0xff
 800a134:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	2200      	movs	r2, #0
 800a13a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	785b      	ldrb	r3, [r3, #1]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d000      	beq.n	800a146 <USB_EPStartXfer+0x292>
 800a144:	e070      	b.n	800a228 <USB_EPStartXfer+0x374>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	61bb      	str	r3, [r7, #24]
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2250      	movs	r2, #80	@ 0x50
 800a14e:	5a9b      	ldrh	r3, [r3, r2]
 800a150:	b29b      	uxth	r3, r3
 800a152:	001a      	movs	r2, r3
 800a154:	69bb      	ldr	r3, [r7, #24]
 800a156:	189b      	adds	r3, r3, r2
 800a158:	61bb      	str	r3, [r7, #24]
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	00da      	lsls	r2, r3, #3
 800a160:	69bb      	ldr	r3, [r7, #24]
 800a162:	18d3      	adds	r3, r2, r3
 800a164:	4a48      	ldr	r2, [pc, #288]	@ (800a288 <USB_EPStartXfer+0x3d4>)
 800a166:	4694      	mov	ip, r2
 800a168:	4463      	add	r3, ip
 800a16a:	617b      	str	r3, [r7, #20]
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	881b      	ldrh	r3, [r3, #0]
 800a170:	b29b      	uxth	r3, r3
 800a172:	059b      	lsls	r3, r3, #22
 800a174:	0d9b      	lsrs	r3, r3, #22
 800a176:	b29a      	uxth	r2, r3
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	801a      	strh	r2, [r3, #0]
 800a17c:	1d7b      	adds	r3, r7, #5
 800a17e:	33ff      	adds	r3, #255	@ 0xff
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	2b3e      	cmp	r3, #62	@ 0x3e
 800a184:	d922      	bls.n	800a1cc <USB_EPStartXfer+0x318>
 800a186:	1d7b      	adds	r3, r7, #5
 800a188:	33ff      	adds	r3, #255	@ 0xff
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	095b      	lsrs	r3, r3, #5
 800a18e:	21fc      	movs	r1, #252	@ 0xfc
 800a190:	187a      	adds	r2, r7, r1
 800a192:	6013      	str	r3, [r2, #0]
 800a194:	1d7b      	adds	r3, r7, #5
 800a196:	33ff      	adds	r3, #255	@ 0xff
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	221f      	movs	r2, #31
 800a19c:	4013      	ands	r3, r2
 800a19e:	d104      	bne.n	800a1aa <USB_EPStartXfer+0x2f6>
 800a1a0:	187b      	adds	r3, r7, r1
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	3b01      	subs	r3, #1
 800a1a6:	187a      	adds	r2, r7, r1
 800a1a8:	6013      	str	r3, [r2, #0]
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	881b      	ldrh	r3, [r3, #0]
 800a1ae:	b29a      	uxth	r2, r3
 800a1b0:	23fc      	movs	r3, #252	@ 0xfc
 800a1b2:	18fb      	adds	r3, r7, r3
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	b29b      	uxth	r3, r3
 800a1b8:	029b      	lsls	r3, r3, #10
 800a1ba:	b29b      	uxth	r3, r3
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	b29b      	uxth	r3, r3
 800a1c0:	4a35      	ldr	r2, [pc, #212]	@ (800a298 <USB_EPStartXfer+0x3e4>)
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	b29a      	uxth	r2, r3
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	801a      	strh	r2, [r3, #0]
 800a1ca:	e04a      	b.n	800a262 <USB_EPStartXfer+0x3ae>
 800a1cc:	1d7b      	adds	r3, r7, #5
 800a1ce:	33ff      	adds	r3, #255	@ 0xff
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d108      	bne.n	800a1e8 <USB_EPStartXfer+0x334>
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	881b      	ldrh	r3, [r3, #0]
 800a1da:	b29b      	uxth	r3, r3
 800a1dc:	4a2e      	ldr	r2, [pc, #184]	@ (800a298 <USB_EPStartXfer+0x3e4>)
 800a1de:	4313      	orrs	r3, r2
 800a1e0:	b29a      	uxth	r2, r3
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	801a      	strh	r2, [r3, #0]
 800a1e6:	e03c      	b.n	800a262 <USB_EPStartXfer+0x3ae>
 800a1e8:	1d7b      	adds	r3, r7, #5
 800a1ea:	33ff      	adds	r3, #255	@ 0xff
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	085b      	lsrs	r3, r3, #1
 800a1f0:	21fc      	movs	r1, #252	@ 0xfc
 800a1f2:	187a      	adds	r2, r7, r1
 800a1f4:	6013      	str	r3, [r2, #0]
 800a1f6:	1d7b      	adds	r3, r7, #5
 800a1f8:	33ff      	adds	r3, #255	@ 0xff
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	2201      	movs	r2, #1
 800a1fe:	4013      	ands	r3, r2
 800a200:	d004      	beq.n	800a20c <USB_EPStartXfer+0x358>
 800a202:	187b      	adds	r3, r7, r1
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	3301      	adds	r3, #1
 800a208:	187a      	adds	r2, r7, r1
 800a20a:	6013      	str	r3, [r2, #0]
 800a20c:	697b      	ldr	r3, [r7, #20]
 800a20e:	881b      	ldrh	r3, [r3, #0]
 800a210:	b29a      	uxth	r2, r3
 800a212:	23fc      	movs	r3, #252	@ 0xfc
 800a214:	18fb      	adds	r3, r7, r3
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	b29b      	uxth	r3, r3
 800a21a:	029b      	lsls	r3, r3, #10
 800a21c:	b29b      	uxth	r3, r3
 800a21e:	4313      	orrs	r3, r2
 800a220:	b29a      	uxth	r2, r3
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	801a      	strh	r2, [r3, #0]
 800a226:	e01c      	b.n	800a262 <USB_EPStartXfer+0x3ae>
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	785b      	ldrb	r3, [r3, #1]
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	d118      	bne.n	800a262 <USB_EPStartXfer+0x3ae>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	623b      	str	r3, [r7, #32]
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2250      	movs	r2, #80	@ 0x50
 800a238:	5a9b      	ldrh	r3, [r3, r2]
 800a23a:	b29b      	uxth	r3, r3
 800a23c:	001a      	movs	r2, r3
 800a23e:	6a3b      	ldr	r3, [r7, #32]
 800a240:	189b      	adds	r3, r3, r2
 800a242:	623b      	str	r3, [r7, #32]
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	781b      	ldrb	r3, [r3, #0]
 800a248:	00da      	lsls	r2, r3, #3
 800a24a:	6a3b      	ldr	r3, [r7, #32]
 800a24c:	18d3      	adds	r3, r2, r3
 800a24e:	4a0e      	ldr	r2, [pc, #56]	@ (800a288 <USB_EPStartXfer+0x3d4>)
 800a250:	4694      	mov	ip, r2
 800a252:	4463      	add	r3, ip
 800a254:	61fb      	str	r3, [r7, #28]
 800a256:	1d7b      	adds	r3, r7, #5
 800a258:	33ff      	adds	r3, #255	@ 0xff
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	b29a      	uxth	r2, r3
 800a25e:	69fb      	ldr	r3, [r7, #28]
 800a260:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a262:	2076      	movs	r0, #118	@ 0x76
 800a264:	183b      	adds	r3, r7, r0
 800a266:	683a      	ldr	r2, [r7, #0]
 800a268:	8912      	ldrh	r2, [r2, #8]
 800a26a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	6959      	ldr	r1, [r3, #20]
 800a270:	1d7b      	adds	r3, r7, #5
 800a272:	33ff      	adds	r3, #255	@ 0xff
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	b29c      	uxth	r4, r3
 800a278:	183b      	adds	r3, r7, r0
 800a27a:	881a      	ldrh	r2, [r3, #0]
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	0023      	movs	r3, r4
 800a280:	f001 f88a 	bl	800b398 <USB_WritePMA>
 800a284:	e329      	b.n	800a8da <USB_EPStartXfer+0xa26>
 800a286:	46c0      	nop			@ (mov r8, r8)
 800a288:	00000402 	.word	0x00000402
 800a28c:	ffff8f8f 	.word	0xffff8f8f
 800a290:	ffff8180 	.word	0xffff8180
 800a294:	00000406 	.word	0x00000406
 800a298:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	785b      	ldrb	r3, [r3, #1]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d000      	beq.n	800a2a6 <USB_EPStartXfer+0x3f2>
 800a2a4:	e070      	b.n	800a388 <USB_EPStartXfer+0x4d4>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2250      	movs	r2, #80	@ 0x50
 800a2ae:	5a9b      	ldrh	r3, [r3, r2]
 800a2b0:	b29b      	uxth	r3, r3
 800a2b2:	001a      	movs	r2, r3
 800a2b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a2b6:	189b      	adds	r3, r3, r2
 800a2b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	781b      	ldrb	r3, [r3, #0]
 800a2be:	00da      	lsls	r2, r3, #3
 800a2c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a2c2:	18d3      	adds	r3, r2, r3
 800a2c4:	4acd      	ldr	r2, [pc, #820]	@ (800a5fc <USB_EPStartXfer+0x748>)
 800a2c6:	4694      	mov	ip, r2
 800a2c8:	4463      	add	r3, ip
 800a2ca:	647b      	str	r3, [r7, #68]	@ 0x44
 800a2cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a2ce:	881b      	ldrh	r3, [r3, #0]
 800a2d0:	b29b      	uxth	r3, r3
 800a2d2:	059b      	lsls	r3, r3, #22
 800a2d4:	0d9b      	lsrs	r3, r3, #22
 800a2d6:	b29a      	uxth	r2, r3
 800a2d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a2da:	801a      	strh	r2, [r3, #0]
 800a2dc:	1d7b      	adds	r3, r7, #5
 800a2de:	33ff      	adds	r3, #255	@ 0xff
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	2b3e      	cmp	r3, #62	@ 0x3e
 800a2e4:	d922      	bls.n	800a32c <USB_EPStartXfer+0x478>
 800a2e6:	1d7b      	adds	r3, r7, #5
 800a2e8:	33ff      	adds	r3, #255	@ 0xff
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	095b      	lsrs	r3, r3, #5
 800a2ee:	21f8      	movs	r1, #248	@ 0xf8
 800a2f0:	187a      	adds	r2, r7, r1
 800a2f2:	6013      	str	r3, [r2, #0]
 800a2f4:	1d7b      	adds	r3, r7, #5
 800a2f6:	33ff      	adds	r3, #255	@ 0xff
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	221f      	movs	r2, #31
 800a2fc:	4013      	ands	r3, r2
 800a2fe:	d104      	bne.n	800a30a <USB_EPStartXfer+0x456>
 800a300:	187b      	adds	r3, r7, r1
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	3b01      	subs	r3, #1
 800a306:	187a      	adds	r2, r7, r1
 800a308:	6013      	str	r3, [r2, #0]
 800a30a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a30c:	881b      	ldrh	r3, [r3, #0]
 800a30e:	b29a      	uxth	r2, r3
 800a310:	23f8      	movs	r3, #248	@ 0xf8
 800a312:	18fb      	adds	r3, r7, r3
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	b29b      	uxth	r3, r3
 800a318:	029b      	lsls	r3, r3, #10
 800a31a:	b29b      	uxth	r3, r3
 800a31c:	4313      	orrs	r3, r2
 800a31e:	b29b      	uxth	r3, r3
 800a320:	4ab7      	ldr	r2, [pc, #732]	@ (800a600 <USB_EPStartXfer+0x74c>)
 800a322:	4313      	orrs	r3, r2
 800a324:	b29a      	uxth	r2, r3
 800a326:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a328:	801a      	strh	r2, [r3, #0]
 800a32a:	e04a      	b.n	800a3c2 <USB_EPStartXfer+0x50e>
 800a32c:	1d7b      	adds	r3, r7, #5
 800a32e:	33ff      	adds	r3, #255	@ 0xff
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d108      	bne.n	800a348 <USB_EPStartXfer+0x494>
 800a336:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a338:	881b      	ldrh	r3, [r3, #0]
 800a33a:	b29b      	uxth	r3, r3
 800a33c:	4ab0      	ldr	r2, [pc, #704]	@ (800a600 <USB_EPStartXfer+0x74c>)
 800a33e:	4313      	orrs	r3, r2
 800a340:	b29a      	uxth	r2, r3
 800a342:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a344:	801a      	strh	r2, [r3, #0]
 800a346:	e03c      	b.n	800a3c2 <USB_EPStartXfer+0x50e>
 800a348:	1d7b      	adds	r3, r7, #5
 800a34a:	33ff      	adds	r3, #255	@ 0xff
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	085b      	lsrs	r3, r3, #1
 800a350:	21f8      	movs	r1, #248	@ 0xf8
 800a352:	187a      	adds	r2, r7, r1
 800a354:	6013      	str	r3, [r2, #0]
 800a356:	1d7b      	adds	r3, r7, #5
 800a358:	33ff      	adds	r3, #255	@ 0xff
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	2201      	movs	r2, #1
 800a35e:	4013      	ands	r3, r2
 800a360:	d004      	beq.n	800a36c <USB_EPStartXfer+0x4b8>
 800a362:	187b      	adds	r3, r7, r1
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	3301      	adds	r3, #1
 800a368:	187a      	adds	r2, r7, r1
 800a36a:	6013      	str	r3, [r2, #0]
 800a36c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a36e:	881b      	ldrh	r3, [r3, #0]
 800a370:	b29a      	uxth	r2, r3
 800a372:	23f8      	movs	r3, #248	@ 0xf8
 800a374:	18fb      	adds	r3, r7, r3
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	b29b      	uxth	r3, r3
 800a37a:	029b      	lsls	r3, r3, #10
 800a37c:	b29b      	uxth	r3, r3
 800a37e:	4313      	orrs	r3, r2
 800a380:	b29a      	uxth	r2, r3
 800a382:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a384:	801a      	strh	r2, [r3, #0]
 800a386:	e01c      	b.n	800a3c2 <USB_EPStartXfer+0x50e>
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	785b      	ldrb	r3, [r3, #1]
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	d118      	bne.n	800a3c2 <USB_EPStartXfer+0x50e>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	653b      	str	r3, [r7, #80]	@ 0x50
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2250      	movs	r2, #80	@ 0x50
 800a398:	5a9b      	ldrh	r3, [r3, r2]
 800a39a:	b29b      	uxth	r3, r3
 800a39c:	001a      	movs	r2, r3
 800a39e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a3a0:	189b      	adds	r3, r3, r2
 800a3a2:	653b      	str	r3, [r7, #80]	@ 0x50
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	781b      	ldrb	r3, [r3, #0]
 800a3a8:	00da      	lsls	r2, r3, #3
 800a3aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a3ac:	18d3      	adds	r3, r2, r3
 800a3ae:	4a93      	ldr	r2, [pc, #588]	@ (800a5fc <USB_EPStartXfer+0x748>)
 800a3b0:	4694      	mov	ip, r2
 800a3b2:	4463      	add	r3, ip
 800a3b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a3b6:	1d7b      	adds	r3, r7, #5
 800a3b8:	33ff      	adds	r3, #255	@ 0xff
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	b29a      	uxth	r2, r3
 800a3be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3c0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a3c2:	2076      	movs	r0, #118	@ 0x76
 800a3c4:	183b      	adds	r3, r7, r0
 800a3c6:	683a      	ldr	r2, [r7, #0]
 800a3c8:	8912      	ldrh	r2, [r2, #8]
 800a3ca:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	6959      	ldr	r1, [r3, #20]
 800a3d0:	1d7b      	adds	r3, r7, #5
 800a3d2:	33ff      	adds	r3, #255	@ 0xff
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	b29c      	uxth	r4, r3
 800a3d8:	183b      	adds	r3, r7, r0
 800a3da:	881a      	ldrh	r2, [r3, #0]
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	0023      	movs	r3, r4
 800a3e0:	f000 ffda 	bl	800b398 <USB_WritePMA>
            ep->xfer_buff += len;
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	695a      	ldr	r2, [r3, #20]
 800a3e8:	1d7b      	adds	r3, r7, #5
 800a3ea:	33ff      	adds	r3, #255	@ 0xff
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	18d2      	adds	r2, r2, r3
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	6a1a      	ldr	r2, [r3, #32]
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	691b      	ldr	r3, [r3, #16]
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d908      	bls.n	800a412 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	6a1a      	ldr	r2, [r3, #32]
 800a404:	1d7b      	adds	r3, r7, #5
 800a406:	33ff      	adds	r3, #255	@ 0xff
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	1ad2      	subs	r2, r2, r3
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	621a      	str	r2, [r3, #32]
 800a410:	e007      	b.n	800a422 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	6a1b      	ldr	r3, [r3, #32]
 800a416:	1d7a      	adds	r2, r7, #5
 800a418:	32ff      	adds	r2, #255	@ 0xff
 800a41a:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	2200      	movs	r2, #0
 800a420:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	643b      	str	r3, [r7, #64]	@ 0x40
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	785b      	ldrb	r3, [r3, #1]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d000      	beq.n	800a430 <USB_EPStartXfer+0x57c>
 800a42e:	e070      	b.n	800a512 <USB_EPStartXfer+0x65e>
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2250      	movs	r2, #80	@ 0x50
 800a438:	5a9b      	ldrh	r3, [r3, r2]
 800a43a:	b29b      	uxth	r3, r3
 800a43c:	001a      	movs	r2, r3
 800a43e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a440:	189b      	adds	r3, r3, r2
 800a442:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	781b      	ldrb	r3, [r3, #0]
 800a448:	00da      	lsls	r2, r3, #3
 800a44a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a44c:	18d3      	adds	r3, r2, r3
 800a44e:	4a6d      	ldr	r2, [pc, #436]	@ (800a604 <USB_EPStartXfer+0x750>)
 800a450:	4694      	mov	ip, r2
 800a452:	4463      	add	r3, ip
 800a454:	637b      	str	r3, [r7, #52]	@ 0x34
 800a456:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a458:	881b      	ldrh	r3, [r3, #0]
 800a45a:	b29b      	uxth	r3, r3
 800a45c:	059b      	lsls	r3, r3, #22
 800a45e:	0d9b      	lsrs	r3, r3, #22
 800a460:	b29a      	uxth	r2, r3
 800a462:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a464:	801a      	strh	r2, [r3, #0]
 800a466:	1d7b      	adds	r3, r7, #5
 800a468:	33ff      	adds	r3, #255	@ 0xff
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	2b3e      	cmp	r3, #62	@ 0x3e
 800a46e:	d922      	bls.n	800a4b6 <USB_EPStartXfer+0x602>
 800a470:	1d7b      	adds	r3, r7, #5
 800a472:	33ff      	adds	r3, #255	@ 0xff
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	095b      	lsrs	r3, r3, #5
 800a478:	21f4      	movs	r1, #244	@ 0xf4
 800a47a:	187a      	adds	r2, r7, r1
 800a47c:	6013      	str	r3, [r2, #0]
 800a47e:	1d7b      	adds	r3, r7, #5
 800a480:	33ff      	adds	r3, #255	@ 0xff
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	221f      	movs	r2, #31
 800a486:	4013      	ands	r3, r2
 800a488:	d104      	bne.n	800a494 <USB_EPStartXfer+0x5e0>
 800a48a:	187b      	adds	r3, r7, r1
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	3b01      	subs	r3, #1
 800a490:	187a      	adds	r2, r7, r1
 800a492:	6013      	str	r3, [r2, #0]
 800a494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a496:	881b      	ldrh	r3, [r3, #0]
 800a498:	b29a      	uxth	r2, r3
 800a49a:	23f4      	movs	r3, #244	@ 0xf4
 800a49c:	18fb      	adds	r3, r7, r3
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	b29b      	uxth	r3, r3
 800a4a2:	029b      	lsls	r3, r3, #10
 800a4a4:	b29b      	uxth	r3, r3
 800a4a6:	4313      	orrs	r3, r2
 800a4a8:	b29b      	uxth	r3, r3
 800a4aa:	4a55      	ldr	r2, [pc, #340]	@ (800a600 <USB_EPStartXfer+0x74c>)
 800a4ac:	4313      	orrs	r3, r2
 800a4ae:	b29a      	uxth	r2, r3
 800a4b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4b2:	801a      	strh	r2, [r3, #0]
 800a4b4:	e048      	b.n	800a548 <USB_EPStartXfer+0x694>
 800a4b6:	1d7b      	adds	r3, r7, #5
 800a4b8:	33ff      	adds	r3, #255	@ 0xff
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d108      	bne.n	800a4d2 <USB_EPStartXfer+0x61e>
 800a4c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4c2:	881b      	ldrh	r3, [r3, #0]
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	4a4e      	ldr	r2, [pc, #312]	@ (800a600 <USB_EPStartXfer+0x74c>)
 800a4c8:	4313      	orrs	r3, r2
 800a4ca:	b29a      	uxth	r2, r3
 800a4cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4ce:	801a      	strh	r2, [r3, #0]
 800a4d0:	e03a      	b.n	800a548 <USB_EPStartXfer+0x694>
 800a4d2:	1d7b      	adds	r3, r7, #5
 800a4d4:	33ff      	adds	r3, #255	@ 0xff
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	085b      	lsrs	r3, r3, #1
 800a4da:	21f4      	movs	r1, #244	@ 0xf4
 800a4dc:	187a      	adds	r2, r7, r1
 800a4de:	6013      	str	r3, [r2, #0]
 800a4e0:	1d7b      	adds	r3, r7, #5
 800a4e2:	33ff      	adds	r3, #255	@ 0xff
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	4013      	ands	r3, r2
 800a4ea:	d004      	beq.n	800a4f6 <USB_EPStartXfer+0x642>
 800a4ec:	187b      	adds	r3, r7, r1
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	3301      	adds	r3, #1
 800a4f2:	187a      	adds	r2, r7, r1
 800a4f4:	6013      	str	r3, [r2, #0]
 800a4f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4f8:	881b      	ldrh	r3, [r3, #0]
 800a4fa:	b29a      	uxth	r2, r3
 800a4fc:	23f4      	movs	r3, #244	@ 0xf4
 800a4fe:	18fb      	adds	r3, r7, r3
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	b29b      	uxth	r3, r3
 800a504:	029b      	lsls	r3, r3, #10
 800a506:	b29b      	uxth	r3, r3
 800a508:	4313      	orrs	r3, r2
 800a50a:	b29a      	uxth	r2, r3
 800a50c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a50e:	801a      	strh	r2, [r3, #0]
 800a510:	e01a      	b.n	800a548 <USB_EPStartXfer+0x694>
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	785b      	ldrb	r3, [r3, #1]
 800a516:	2b01      	cmp	r3, #1
 800a518:	d116      	bne.n	800a548 <USB_EPStartXfer+0x694>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2250      	movs	r2, #80	@ 0x50
 800a51e:	5a9b      	ldrh	r3, [r3, r2]
 800a520:	b29b      	uxth	r3, r3
 800a522:	001a      	movs	r2, r3
 800a524:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a526:	189b      	adds	r3, r3, r2
 800a528:	643b      	str	r3, [r7, #64]	@ 0x40
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	781b      	ldrb	r3, [r3, #0]
 800a52e:	00da      	lsls	r2, r3, #3
 800a530:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a532:	18d3      	adds	r3, r2, r3
 800a534:	4a33      	ldr	r2, [pc, #204]	@ (800a604 <USB_EPStartXfer+0x750>)
 800a536:	4694      	mov	ip, r2
 800a538:	4463      	add	r3, ip
 800a53a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a53c:	1d7b      	adds	r3, r7, #5
 800a53e:	33ff      	adds	r3, #255	@ 0xff
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	b29a      	uxth	r2, r3
 800a544:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a546:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a548:	2076      	movs	r0, #118	@ 0x76
 800a54a:	183b      	adds	r3, r7, r0
 800a54c:	683a      	ldr	r2, [r7, #0]
 800a54e:	8952      	ldrh	r2, [r2, #10]
 800a550:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	6959      	ldr	r1, [r3, #20]
 800a556:	1d7b      	adds	r3, r7, #5
 800a558:	33ff      	adds	r3, #255	@ 0xff
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	b29c      	uxth	r4, r3
 800a55e:	183b      	adds	r3, r7, r0
 800a560:	881a      	ldrh	r2, [r3, #0]
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	0023      	movs	r3, r4
 800a566:	f000 ff17 	bl	800b398 <USB_WritePMA>
 800a56a:	e1b6      	b.n	800a8da <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	6a1b      	ldr	r3, [r3, #32]
 800a570:	1d7a      	adds	r2, r7, #5
 800a572:	32ff      	adds	r2, #255	@ 0xff
 800a574:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800a576:	687a      	ldr	r2, [r7, #4]
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	781b      	ldrb	r3, [r3, #0]
 800a57c:	009b      	lsls	r3, r3, #2
 800a57e:	18d3      	adds	r3, r2, r3
 800a580:	881b      	ldrh	r3, [r3, #0]
 800a582:	b29a      	uxth	r2, r3
 800a584:	2062      	movs	r0, #98	@ 0x62
 800a586:	183b      	adds	r3, r7, r0
 800a588:	491f      	ldr	r1, [pc, #124]	@ (800a608 <USB_EPStartXfer+0x754>)
 800a58a:	400a      	ands	r2, r1
 800a58c:	801a      	strh	r2, [r3, #0]
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	781b      	ldrb	r3, [r3, #0]
 800a594:	009b      	lsls	r3, r3, #2
 800a596:	18d3      	adds	r3, r2, r3
 800a598:	183a      	adds	r2, r7, r0
 800a59a:	8812      	ldrh	r2, [r2, #0]
 800a59c:	491b      	ldr	r1, [pc, #108]	@ (800a60c <USB_EPStartXfer+0x758>)
 800a59e:	430a      	orrs	r2, r1
 800a5a0:	b292      	uxth	r2, r2
 800a5a2:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2250      	movs	r2, #80	@ 0x50
 800a5ac:	5a9b      	ldrh	r3, [r3, r2]
 800a5ae:	b29b      	uxth	r3, r3
 800a5b0:	001a      	movs	r2, r3
 800a5b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a5b4:	189b      	adds	r3, r3, r2
 800a5b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	781b      	ldrb	r3, [r3, #0]
 800a5bc:	00da      	lsls	r2, r3, #3
 800a5be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a5c0:	18d3      	adds	r3, r2, r3
 800a5c2:	4a0e      	ldr	r2, [pc, #56]	@ (800a5fc <USB_EPStartXfer+0x748>)
 800a5c4:	4694      	mov	ip, r2
 800a5c6:	4463      	add	r3, ip
 800a5c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a5ca:	1d7b      	adds	r3, r7, #5
 800a5cc:	33ff      	adds	r3, #255	@ 0xff
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	b29a      	uxth	r2, r3
 800a5d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a5d4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a5d6:	2076      	movs	r0, #118	@ 0x76
 800a5d8:	183b      	adds	r3, r7, r0
 800a5da:	683a      	ldr	r2, [r7, #0]
 800a5dc:	8912      	ldrh	r2, [r2, #8]
 800a5de:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	6959      	ldr	r1, [r3, #20]
 800a5e4:	1d7b      	adds	r3, r7, #5
 800a5e6:	33ff      	adds	r3, #255	@ 0xff
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	b29c      	uxth	r4, r3
 800a5ec:	183b      	adds	r3, r7, r0
 800a5ee:	881a      	ldrh	r2, [r3, #0]
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	0023      	movs	r3, r4
 800a5f4:	f000 fed0 	bl	800b398 <USB_WritePMA>
 800a5f8:	e16f      	b.n	800a8da <USB_EPStartXfer+0xa26>
 800a5fa:	46c0      	nop			@ (mov r8, r8)
 800a5fc:	00000402 	.word	0x00000402
 800a600:	ffff8000 	.word	0xffff8000
 800a604:	00000406 	.word	0x00000406
 800a608:	ffff8e8f 	.word	0xffff8e8f
 800a60c:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	6a1a      	ldr	r2, [r3, #32]
 800a614:	1d7b      	adds	r3, r7, #5
 800a616:	33ff      	adds	r3, #255	@ 0xff
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	1ad2      	subs	r2, r2, r3
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a620:	687a      	ldr	r2, [r7, #4]
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	781b      	ldrb	r3, [r3, #0]
 800a626:	009b      	lsls	r3, r3, #2
 800a628:	18d3      	adds	r3, r2, r3
 800a62a:	881b      	ldrh	r3, [r3, #0]
 800a62c:	b29b      	uxth	r3, r3
 800a62e:	001a      	movs	r2, r3
 800a630:	2340      	movs	r3, #64	@ 0x40
 800a632:	4013      	ands	r3, r2
 800a634:	d100      	bne.n	800a638 <USB_EPStartXfer+0x784>
 800a636:	e0a4      	b.n	800a782 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	673b      	str	r3, [r7, #112]	@ 0x70
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	785b      	ldrb	r3, [r3, #1]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d000      	beq.n	800a646 <USB_EPStartXfer+0x792>
 800a644:	e070      	b.n	800a728 <USB_EPStartXfer+0x874>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2250      	movs	r2, #80	@ 0x50
 800a64e:	5a9b      	ldrh	r3, [r3, r2]
 800a650:	b29b      	uxth	r3, r3
 800a652:	001a      	movs	r2, r3
 800a654:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a656:	189b      	adds	r3, r3, r2
 800a658:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	781b      	ldrb	r3, [r3, #0]
 800a65e:	00da      	lsls	r2, r3, #3
 800a660:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a662:	18d3      	adds	r3, r2, r3
 800a664:	4abc      	ldr	r2, [pc, #752]	@ (800a958 <USB_EPStartXfer+0xaa4>)
 800a666:	4694      	mov	ip, r2
 800a668:	4463      	add	r3, ip
 800a66a:	667b      	str	r3, [r7, #100]	@ 0x64
 800a66c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a66e:	881b      	ldrh	r3, [r3, #0]
 800a670:	b29b      	uxth	r3, r3
 800a672:	059b      	lsls	r3, r3, #22
 800a674:	0d9b      	lsrs	r3, r3, #22
 800a676:	b29a      	uxth	r2, r3
 800a678:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a67a:	801a      	strh	r2, [r3, #0]
 800a67c:	1d7b      	adds	r3, r7, #5
 800a67e:	33ff      	adds	r3, #255	@ 0xff
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	2b3e      	cmp	r3, #62	@ 0x3e
 800a684:	d922      	bls.n	800a6cc <USB_EPStartXfer+0x818>
 800a686:	1d7b      	adds	r3, r7, #5
 800a688:	33ff      	adds	r3, #255	@ 0xff
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	095b      	lsrs	r3, r3, #5
 800a68e:	21f0      	movs	r1, #240	@ 0xf0
 800a690:	187a      	adds	r2, r7, r1
 800a692:	6013      	str	r3, [r2, #0]
 800a694:	1d7b      	adds	r3, r7, #5
 800a696:	33ff      	adds	r3, #255	@ 0xff
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	221f      	movs	r2, #31
 800a69c:	4013      	ands	r3, r2
 800a69e:	d104      	bne.n	800a6aa <USB_EPStartXfer+0x7f6>
 800a6a0:	187b      	adds	r3, r7, r1
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	3b01      	subs	r3, #1
 800a6a6:	187a      	adds	r2, r7, r1
 800a6a8:	6013      	str	r3, [r2, #0]
 800a6aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a6ac:	881b      	ldrh	r3, [r3, #0]
 800a6ae:	b29a      	uxth	r2, r3
 800a6b0:	23f0      	movs	r3, #240	@ 0xf0
 800a6b2:	18fb      	adds	r3, r7, r3
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	b29b      	uxth	r3, r3
 800a6b8:	029b      	lsls	r3, r3, #10
 800a6ba:	b29b      	uxth	r3, r3
 800a6bc:	4313      	orrs	r3, r2
 800a6be:	b29b      	uxth	r3, r3
 800a6c0:	4aa6      	ldr	r2, [pc, #664]	@ (800a95c <USB_EPStartXfer+0xaa8>)
 800a6c2:	4313      	orrs	r3, r2
 800a6c4:	b29a      	uxth	r2, r3
 800a6c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a6c8:	801a      	strh	r2, [r3, #0]
 800a6ca:	e048      	b.n	800a75e <USB_EPStartXfer+0x8aa>
 800a6cc:	1d7b      	adds	r3, r7, #5
 800a6ce:	33ff      	adds	r3, #255	@ 0xff
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d108      	bne.n	800a6e8 <USB_EPStartXfer+0x834>
 800a6d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a6d8:	881b      	ldrh	r3, [r3, #0]
 800a6da:	b29b      	uxth	r3, r3
 800a6dc:	4a9f      	ldr	r2, [pc, #636]	@ (800a95c <USB_EPStartXfer+0xaa8>)
 800a6de:	4313      	orrs	r3, r2
 800a6e0:	b29a      	uxth	r2, r3
 800a6e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a6e4:	801a      	strh	r2, [r3, #0]
 800a6e6:	e03a      	b.n	800a75e <USB_EPStartXfer+0x8aa>
 800a6e8:	1d7b      	adds	r3, r7, #5
 800a6ea:	33ff      	adds	r3, #255	@ 0xff
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	085b      	lsrs	r3, r3, #1
 800a6f0:	21f0      	movs	r1, #240	@ 0xf0
 800a6f2:	187a      	adds	r2, r7, r1
 800a6f4:	6013      	str	r3, [r2, #0]
 800a6f6:	1d7b      	adds	r3, r7, #5
 800a6f8:	33ff      	adds	r3, #255	@ 0xff
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	2201      	movs	r2, #1
 800a6fe:	4013      	ands	r3, r2
 800a700:	d004      	beq.n	800a70c <USB_EPStartXfer+0x858>
 800a702:	187b      	adds	r3, r7, r1
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	3301      	adds	r3, #1
 800a708:	187a      	adds	r2, r7, r1
 800a70a:	6013      	str	r3, [r2, #0]
 800a70c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a70e:	881b      	ldrh	r3, [r3, #0]
 800a710:	b29a      	uxth	r2, r3
 800a712:	23f0      	movs	r3, #240	@ 0xf0
 800a714:	18fb      	adds	r3, r7, r3
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	b29b      	uxth	r3, r3
 800a71a:	029b      	lsls	r3, r3, #10
 800a71c:	b29b      	uxth	r3, r3
 800a71e:	4313      	orrs	r3, r2
 800a720:	b29a      	uxth	r2, r3
 800a722:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a724:	801a      	strh	r2, [r3, #0]
 800a726:	e01a      	b.n	800a75e <USB_EPStartXfer+0x8aa>
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	785b      	ldrb	r3, [r3, #1]
 800a72c:	2b01      	cmp	r3, #1
 800a72e:	d116      	bne.n	800a75e <USB_EPStartXfer+0x8aa>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2250      	movs	r2, #80	@ 0x50
 800a734:	5a9b      	ldrh	r3, [r3, r2]
 800a736:	b29b      	uxth	r3, r3
 800a738:	001a      	movs	r2, r3
 800a73a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a73c:	189b      	adds	r3, r3, r2
 800a73e:	673b      	str	r3, [r7, #112]	@ 0x70
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	781b      	ldrb	r3, [r3, #0]
 800a744:	00da      	lsls	r2, r3, #3
 800a746:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a748:	18d3      	adds	r3, r2, r3
 800a74a:	4a83      	ldr	r2, [pc, #524]	@ (800a958 <USB_EPStartXfer+0xaa4>)
 800a74c:	4694      	mov	ip, r2
 800a74e:	4463      	add	r3, ip
 800a750:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a752:	1d7b      	adds	r3, r7, #5
 800a754:	33ff      	adds	r3, #255	@ 0xff
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	b29a      	uxth	r2, r3
 800a75a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a75c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a75e:	2076      	movs	r0, #118	@ 0x76
 800a760:	183b      	adds	r3, r7, r0
 800a762:	683a      	ldr	r2, [r7, #0]
 800a764:	8952      	ldrh	r2, [r2, #10]
 800a766:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	6959      	ldr	r1, [r3, #20]
 800a76c:	1d7b      	adds	r3, r7, #5
 800a76e:	33ff      	adds	r3, #255	@ 0xff
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	b29c      	uxth	r4, r3
 800a774:	183b      	adds	r3, r7, r0
 800a776:	881a      	ldrh	r2, [r3, #0]
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	0023      	movs	r3, r4
 800a77c:	f000 fe0c 	bl	800b398 <USB_WritePMA>
 800a780:	e0ab      	b.n	800a8da <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	785b      	ldrb	r3, [r3, #1]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d000      	beq.n	800a78c <USB_EPStartXfer+0x8d8>
 800a78a:	e070      	b.n	800a86e <USB_EPStartXfer+0x9ba>
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2250      	movs	r2, #80	@ 0x50
 800a794:	5a9b      	ldrh	r3, [r3, r2]
 800a796:	b29b      	uxth	r3, r3
 800a798:	001a      	movs	r2, r3
 800a79a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a79c:	189b      	adds	r3, r3, r2
 800a79e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	781b      	ldrb	r3, [r3, #0]
 800a7a4:	00da      	lsls	r2, r3, #3
 800a7a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a7a8:	18d3      	adds	r3, r2, r3
 800a7aa:	4a6d      	ldr	r2, [pc, #436]	@ (800a960 <USB_EPStartXfer+0xaac>)
 800a7ac:	4694      	mov	ip, r2
 800a7ae:	4463      	add	r3, ip
 800a7b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a7b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a7b4:	881b      	ldrh	r3, [r3, #0]
 800a7b6:	b29b      	uxth	r3, r3
 800a7b8:	059b      	lsls	r3, r3, #22
 800a7ba:	0d9b      	lsrs	r3, r3, #22
 800a7bc:	b29a      	uxth	r2, r3
 800a7be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a7c0:	801a      	strh	r2, [r3, #0]
 800a7c2:	1d7b      	adds	r3, r7, #5
 800a7c4:	33ff      	adds	r3, #255	@ 0xff
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	2b3e      	cmp	r3, #62	@ 0x3e
 800a7ca:	d922      	bls.n	800a812 <USB_EPStartXfer+0x95e>
 800a7cc:	1d7b      	adds	r3, r7, #5
 800a7ce:	33ff      	adds	r3, #255	@ 0xff
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	095b      	lsrs	r3, r3, #5
 800a7d4:	21ec      	movs	r1, #236	@ 0xec
 800a7d6:	187a      	adds	r2, r7, r1
 800a7d8:	6013      	str	r3, [r2, #0]
 800a7da:	1d7b      	adds	r3, r7, #5
 800a7dc:	33ff      	adds	r3, #255	@ 0xff
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	221f      	movs	r2, #31
 800a7e2:	4013      	ands	r3, r2
 800a7e4:	d104      	bne.n	800a7f0 <USB_EPStartXfer+0x93c>
 800a7e6:	187b      	adds	r3, r7, r1
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	3b01      	subs	r3, #1
 800a7ec:	187a      	adds	r2, r7, r1
 800a7ee:	6013      	str	r3, [r2, #0]
 800a7f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a7f2:	881b      	ldrh	r3, [r3, #0]
 800a7f4:	b29a      	uxth	r2, r3
 800a7f6:	23ec      	movs	r3, #236	@ 0xec
 800a7f8:	18fb      	adds	r3, r7, r3
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	b29b      	uxth	r3, r3
 800a7fe:	029b      	lsls	r3, r3, #10
 800a800:	b29b      	uxth	r3, r3
 800a802:	4313      	orrs	r3, r2
 800a804:	b29b      	uxth	r3, r3
 800a806:	4a55      	ldr	r2, [pc, #340]	@ (800a95c <USB_EPStartXfer+0xaa8>)
 800a808:	4313      	orrs	r3, r2
 800a80a:	b29a      	uxth	r2, r3
 800a80c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a80e:	801a      	strh	r2, [r3, #0]
 800a810:	e052      	b.n	800a8b8 <USB_EPStartXfer+0xa04>
 800a812:	1d7b      	adds	r3, r7, #5
 800a814:	33ff      	adds	r3, #255	@ 0xff
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d108      	bne.n	800a82e <USB_EPStartXfer+0x97a>
 800a81c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a81e:	881b      	ldrh	r3, [r3, #0]
 800a820:	b29b      	uxth	r3, r3
 800a822:	4a4e      	ldr	r2, [pc, #312]	@ (800a95c <USB_EPStartXfer+0xaa8>)
 800a824:	4313      	orrs	r3, r2
 800a826:	b29a      	uxth	r2, r3
 800a828:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a82a:	801a      	strh	r2, [r3, #0]
 800a82c:	e044      	b.n	800a8b8 <USB_EPStartXfer+0xa04>
 800a82e:	1d7b      	adds	r3, r7, #5
 800a830:	33ff      	adds	r3, #255	@ 0xff
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	085b      	lsrs	r3, r3, #1
 800a836:	21ec      	movs	r1, #236	@ 0xec
 800a838:	187a      	adds	r2, r7, r1
 800a83a:	6013      	str	r3, [r2, #0]
 800a83c:	1d7b      	adds	r3, r7, #5
 800a83e:	33ff      	adds	r3, #255	@ 0xff
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	2201      	movs	r2, #1
 800a844:	4013      	ands	r3, r2
 800a846:	d004      	beq.n	800a852 <USB_EPStartXfer+0x99e>
 800a848:	187b      	adds	r3, r7, r1
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	3301      	adds	r3, #1
 800a84e:	187a      	adds	r2, r7, r1
 800a850:	6013      	str	r3, [r2, #0]
 800a852:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a854:	881b      	ldrh	r3, [r3, #0]
 800a856:	b29a      	uxth	r2, r3
 800a858:	23ec      	movs	r3, #236	@ 0xec
 800a85a:	18fb      	adds	r3, r7, r3
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	b29b      	uxth	r3, r3
 800a860:	029b      	lsls	r3, r3, #10
 800a862:	b29b      	uxth	r3, r3
 800a864:	4313      	orrs	r3, r2
 800a866:	b29a      	uxth	r2, r3
 800a868:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a86a:	801a      	strh	r2, [r3, #0]
 800a86c:	e024      	b.n	800a8b8 <USB_EPStartXfer+0xa04>
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	785b      	ldrb	r3, [r3, #1]
 800a872:	2b01      	cmp	r3, #1
 800a874:	d120      	bne.n	800a8b8 <USB_EPStartXfer+0xa04>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2184      	movs	r1, #132	@ 0x84
 800a87a:	187a      	adds	r2, r7, r1
 800a87c:	6013      	str	r3, [r2, #0]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2250      	movs	r2, #80	@ 0x50
 800a882:	5a9b      	ldrh	r3, [r3, r2]
 800a884:	b29b      	uxth	r3, r3
 800a886:	001a      	movs	r2, r3
 800a888:	187b      	adds	r3, r7, r1
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	189b      	adds	r3, r3, r2
 800a88e:	187a      	adds	r2, r7, r1
 800a890:	6013      	str	r3, [r2, #0]
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	781b      	ldrb	r3, [r3, #0]
 800a896:	00da      	lsls	r2, r3, #3
 800a898:	187b      	adds	r3, r7, r1
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	18d3      	adds	r3, r2, r3
 800a89e:	4a30      	ldr	r2, [pc, #192]	@ (800a960 <USB_EPStartXfer+0xaac>)
 800a8a0:	4694      	mov	ip, r2
 800a8a2:	4463      	add	r3, ip
 800a8a4:	2180      	movs	r1, #128	@ 0x80
 800a8a6:	187a      	adds	r2, r7, r1
 800a8a8:	6013      	str	r3, [r2, #0]
 800a8aa:	1d7b      	adds	r3, r7, #5
 800a8ac:	33ff      	adds	r3, #255	@ 0xff
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	b29a      	uxth	r2, r3
 800a8b2:	187b      	adds	r3, r7, r1
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a8b8:	2076      	movs	r0, #118	@ 0x76
 800a8ba:	183b      	adds	r3, r7, r0
 800a8bc:	683a      	ldr	r2, [r7, #0]
 800a8be:	8912      	ldrh	r2, [r2, #8]
 800a8c0:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	6959      	ldr	r1, [r3, #20]
 800a8c6:	1d7b      	adds	r3, r7, #5
 800a8c8:	33ff      	adds	r3, #255	@ 0xff
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	b29c      	uxth	r4, r3
 800a8ce:	183b      	adds	r3, r7, r0
 800a8d0:	881a      	ldrh	r2, [r3, #0]
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	0023      	movs	r3, r4
 800a8d6:	f000 fd5f 	bl	800b398 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a8da:	687a      	ldr	r2, [r7, #4]
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	781b      	ldrb	r3, [r3, #0]
 800a8e0:	009b      	lsls	r3, r3, #2
 800a8e2:	18d3      	adds	r3, r2, r3
 800a8e4:	881b      	ldrh	r3, [r3, #0]
 800a8e6:	b29a      	uxth	r2, r3
 800a8e8:	200a      	movs	r0, #10
 800a8ea:	183b      	adds	r3, r7, r0
 800a8ec:	491d      	ldr	r1, [pc, #116]	@ (800a964 <USB_EPStartXfer+0xab0>)
 800a8ee:	400a      	ands	r2, r1
 800a8f0:	801a      	strh	r2, [r3, #0]
 800a8f2:	183b      	adds	r3, r7, r0
 800a8f4:	183a      	adds	r2, r7, r0
 800a8f6:	8812      	ldrh	r2, [r2, #0]
 800a8f8:	2110      	movs	r1, #16
 800a8fa:	404a      	eors	r2, r1
 800a8fc:	801a      	strh	r2, [r3, #0]
 800a8fe:	183b      	adds	r3, r7, r0
 800a900:	183a      	adds	r2, r7, r0
 800a902:	8812      	ldrh	r2, [r2, #0]
 800a904:	2120      	movs	r1, #32
 800a906:	404a      	eors	r2, r1
 800a908:	801a      	strh	r2, [r3, #0]
 800a90a:	687a      	ldr	r2, [r7, #4]
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	781b      	ldrb	r3, [r3, #0]
 800a910:	009b      	lsls	r3, r3, #2
 800a912:	18d3      	adds	r3, r2, r3
 800a914:	183a      	adds	r2, r7, r0
 800a916:	8812      	ldrh	r2, [r2, #0]
 800a918:	4913      	ldr	r1, [pc, #76]	@ (800a968 <USB_EPStartXfer+0xab4>)
 800a91a:	430a      	orrs	r2, r1
 800a91c:	b292      	uxth	r2, r2
 800a91e:	801a      	strh	r2, [r3, #0]
 800a920:	f000 fbf4 	bl	800b10c <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	7b1b      	ldrb	r3, [r3, #12]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d000      	beq.n	800a92e <USB_EPStartXfer+0xa7a>
 800a92c:	e0a9      	b.n	800aa82 <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	699a      	ldr	r2, [r3, #24]
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	691b      	ldr	r3, [r3, #16]
 800a936:	429a      	cmp	r2, r3
 800a938:	d918      	bls.n	800a96c <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	691b      	ldr	r3, [r3, #16]
 800a93e:	1d7a      	adds	r2, r7, #5
 800a940:	32ff      	adds	r2, #255	@ 0xff
 800a942:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	699a      	ldr	r2, [r3, #24]
 800a948:	1d7b      	adds	r3, r7, #5
 800a94a:	33ff      	adds	r3, #255	@ 0xff
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	1ad2      	subs	r2, r2, r3
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	619a      	str	r2, [r3, #24]
 800a954:	e012      	b.n	800a97c <USB_EPStartXfer+0xac8>
 800a956:	46c0      	nop			@ (mov r8, r8)
 800a958:	00000406 	.word	0x00000406
 800a95c:	ffff8000 	.word	0xffff8000
 800a960:	00000402 	.word	0x00000402
 800a964:	ffff8fbf 	.word	0xffff8fbf
 800a968:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	699b      	ldr	r3, [r3, #24]
 800a970:	1d7a      	adds	r2, r7, #5
 800a972:	32ff      	adds	r2, #255	@ 0xff
 800a974:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	2200      	movs	r2, #0
 800a97a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2190      	movs	r1, #144	@ 0x90
 800a980:	187a      	adds	r2, r7, r1
 800a982:	6013      	str	r3, [r2, #0]
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2250      	movs	r2, #80	@ 0x50
 800a988:	5a9b      	ldrh	r3, [r3, r2]
 800a98a:	b29b      	uxth	r3, r3
 800a98c:	001a      	movs	r2, r3
 800a98e:	187b      	adds	r3, r7, r1
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	189b      	adds	r3, r3, r2
 800a994:	187a      	adds	r2, r7, r1
 800a996:	6013      	str	r3, [r2, #0]
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	781b      	ldrb	r3, [r3, #0]
 800a99c:	00da      	lsls	r2, r3, #3
 800a99e:	187b      	adds	r3, r7, r1
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	18d3      	adds	r3, r2, r3
 800a9a4:	4acf      	ldr	r2, [pc, #828]	@ (800ace4 <USB_EPStartXfer+0xe30>)
 800a9a6:	4694      	mov	ip, r2
 800a9a8:	4463      	add	r3, ip
 800a9aa:	218c      	movs	r1, #140	@ 0x8c
 800a9ac:	187a      	adds	r2, r7, r1
 800a9ae:	6013      	str	r3, [r2, #0]
 800a9b0:	187b      	adds	r3, r7, r1
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	881b      	ldrh	r3, [r3, #0]
 800a9b6:	b29b      	uxth	r3, r3
 800a9b8:	059b      	lsls	r3, r3, #22
 800a9ba:	0d9b      	lsrs	r3, r3, #22
 800a9bc:	b29a      	uxth	r2, r3
 800a9be:	187b      	adds	r3, r7, r1
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	801a      	strh	r2, [r3, #0]
 800a9c4:	1d7b      	adds	r3, r7, #5
 800a9c6:	33ff      	adds	r3, #255	@ 0xff
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	2b3e      	cmp	r3, #62	@ 0x3e
 800a9cc:	d925      	bls.n	800aa1a <USB_EPStartXfer+0xb66>
 800a9ce:	1d7b      	adds	r3, r7, #5
 800a9d0:	33ff      	adds	r3, #255	@ 0xff
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	095b      	lsrs	r3, r3, #5
 800a9d6:	21e8      	movs	r1, #232	@ 0xe8
 800a9d8:	187a      	adds	r2, r7, r1
 800a9da:	6013      	str	r3, [r2, #0]
 800a9dc:	1d7b      	adds	r3, r7, #5
 800a9de:	33ff      	adds	r3, #255	@ 0xff
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	221f      	movs	r2, #31
 800a9e4:	4013      	ands	r3, r2
 800a9e6:	d104      	bne.n	800a9f2 <USB_EPStartXfer+0xb3e>
 800a9e8:	187b      	adds	r3, r7, r1
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	3b01      	subs	r3, #1
 800a9ee:	187a      	adds	r2, r7, r1
 800a9f0:	6013      	str	r3, [r2, #0]
 800a9f2:	218c      	movs	r1, #140	@ 0x8c
 800a9f4:	187b      	adds	r3, r7, r1
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	881b      	ldrh	r3, [r3, #0]
 800a9fa:	b29a      	uxth	r2, r3
 800a9fc:	23e8      	movs	r3, #232	@ 0xe8
 800a9fe:	18fb      	adds	r3, r7, r3
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	b29b      	uxth	r3, r3
 800aa04:	029b      	lsls	r3, r3, #10
 800aa06:	b29b      	uxth	r3, r3
 800aa08:	4313      	orrs	r3, r2
 800aa0a:	b29b      	uxth	r3, r3
 800aa0c:	4ab6      	ldr	r2, [pc, #728]	@ (800ace8 <USB_EPStartXfer+0xe34>)
 800aa0e:	4313      	orrs	r3, r2
 800aa10:	b29a      	uxth	r2, r3
 800aa12:	187b      	adds	r3, r7, r1
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	801a      	strh	r2, [r3, #0]
 800aa18:	e353      	b.n	800b0c2 <USB_EPStartXfer+0x120e>
 800aa1a:	1d7b      	adds	r3, r7, #5
 800aa1c:	33ff      	adds	r3, #255	@ 0xff
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d10b      	bne.n	800aa3c <USB_EPStartXfer+0xb88>
 800aa24:	218c      	movs	r1, #140	@ 0x8c
 800aa26:	187b      	adds	r3, r7, r1
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	881b      	ldrh	r3, [r3, #0]
 800aa2c:	b29b      	uxth	r3, r3
 800aa2e:	4aae      	ldr	r2, [pc, #696]	@ (800ace8 <USB_EPStartXfer+0xe34>)
 800aa30:	4313      	orrs	r3, r2
 800aa32:	b29a      	uxth	r2, r3
 800aa34:	187b      	adds	r3, r7, r1
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	801a      	strh	r2, [r3, #0]
 800aa3a:	e342      	b.n	800b0c2 <USB_EPStartXfer+0x120e>
 800aa3c:	1d7b      	adds	r3, r7, #5
 800aa3e:	33ff      	adds	r3, #255	@ 0xff
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	085b      	lsrs	r3, r3, #1
 800aa44:	21e8      	movs	r1, #232	@ 0xe8
 800aa46:	187a      	adds	r2, r7, r1
 800aa48:	6013      	str	r3, [r2, #0]
 800aa4a:	1d7b      	adds	r3, r7, #5
 800aa4c:	33ff      	adds	r3, #255	@ 0xff
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	2201      	movs	r2, #1
 800aa52:	4013      	ands	r3, r2
 800aa54:	d004      	beq.n	800aa60 <USB_EPStartXfer+0xbac>
 800aa56:	187b      	adds	r3, r7, r1
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	3301      	adds	r3, #1
 800aa5c:	187a      	adds	r2, r7, r1
 800aa5e:	6013      	str	r3, [r2, #0]
 800aa60:	218c      	movs	r1, #140	@ 0x8c
 800aa62:	187b      	adds	r3, r7, r1
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	881b      	ldrh	r3, [r3, #0]
 800aa68:	b29a      	uxth	r2, r3
 800aa6a:	23e8      	movs	r3, #232	@ 0xe8
 800aa6c:	18fb      	adds	r3, r7, r3
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	b29b      	uxth	r3, r3
 800aa72:	029b      	lsls	r3, r3, #10
 800aa74:	b29b      	uxth	r3, r3
 800aa76:	4313      	orrs	r3, r2
 800aa78:	b29a      	uxth	r2, r3
 800aa7a:	187b      	adds	r3, r7, r1
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	801a      	strh	r2, [r3, #0]
 800aa80:	e31f      	b.n	800b0c2 <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	78db      	ldrb	r3, [r3, #3]
 800aa86:	2b02      	cmp	r3, #2
 800aa88:	d000      	beq.n	800aa8c <USB_EPStartXfer+0xbd8>
 800aa8a:	e191      	b.n	800adb0 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	785b      	ldrb	r3, [r3, #1]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d000      	beq.n	800aa96 <USB_EPStartXfer+0xbe2>
 800aa94:	e07c      	b.n	800ab90 <USB_EPStartXfer+0xcdc>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	21ac      	movs	r1, #172	@ 0xac
 800aa9a:	187a      	adds	r2, r7, r1
 800aa9c:	6013      	str	r3, [r2, #0]
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2250      	movs	r2, #80	@ 0x50
 800aaa2:	5a9b      	ldrh	r3, [r3, r2]
 800aaa4:	b29b      	uxth	r3, r3
 800aaa6:	001a      	movs	r2, r3
 800aaa8:	187b      	adds	r3, r7, r1
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	189b      	adds	r3, r3, r2
 800aaae:	187a      	adds	r2, r7, r1
 800aab0:	6013      	str	r3, [r2, #0]
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	781b      	ldrb	r3, [r3, #0]
 800aab6:	00da      	lsls	r2, r3, #3
 800aab8:	187b      	adds	r3, r7, r1
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	18d3      	adds	r3, r2, r3
 800aabe:	4a8b      	ldr	r2, [pc, #556]	@ (800acec <USB_EPStartXfer+0xe38>)
 800aac0:	4694      	mov	ip, r2
 800aac2:	4463      	add	r3, ip
 800aac4:	21a8      	movs	r1, #168	@ 0xa8
 800aac6:	187a      	adds	r2, r7, r1
 800aac8:	6013      	str	r3, [r2, #0]
 800aaca:	187b      	adds	r3, r7, r1
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	881b      	ldrh	r3, [r3, #0]
 800aad0:	b29b      	uxth	r3, r3
 800aad2:	059b      	lsls	r3, r3, #22
 800aad4:	0d9b      	lsrs	r3, r3, #22
 800aad6:	b29a      	uxth	r2, r3
 800aad8:	187b      	adds	r3, r7, r1
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	801a      	strh	r2, [r3, #0]
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	691b      	ldr	r3, [r3, #16]
 800aae2:	2b3e      	cmp	r3, #62	@ 0x3e
 800aae4:	d923      	bls.n	800ab2e <USB_EPStartXfer+0xc7a>
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	691b      	ldr	r3, [r3, #16]
 800aaea:	095b      	lsrs	r3, r3, #5
 800aaec:	21e4      	movs	r1, #228	@ 0xe4
 800aaee:	187a      	adds	r2, r7, r1
 800aaf0:	6013      	str	r3, [r2, #0]
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	691b      	ldr	r3, [r3, #16]
 800aaf6:	221f      	movs	r2, #31
 800aaf8:	4013      	ands	r3, r2
 800aafa:	d104      	bne.n	800ab06 <USB_EPStartXfer+0xc52>
 800aafc:	187b      	adds	r3, r7, r1
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	3b01      	subs	r3, #1
 800ab02:	187a      	adds	r2, r7, r1
 800ab04:	6013      	str	r3, [r2, #0]
 800ab06:	21a8      	movs	r1, #168	@ 0xa8
 800ab08:	187b      	adds	r3, r7, r1
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	881b      	ldrh	r3, [r3, #0]
 800ab0e:	b29a      	uxth	r2, r3
 800ab10:	23e4      	movs	r3, #228	@ 0xe4
 800ab12:	18fb      	adds	r3, r7, r3
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	b29b      	uxth	r3, r3
 800ab18:	029b      	lsls	r3, r3, #10
 800ab1a:	b29b      	uxth	r3, r3
 800ab1c:	4313      	orrs	r3, r2
 800ab1e:	b29b      	uxth	r3, r3
 800ab20:	4a71      	ldr	r2, [pc, #452]	@ (800ace8 <USB_EPStartXfer+0xe34>)
 800ab22:	4313      	orrs	r3, r2
 800ab24:	b29a      	uxth	r2, r3
 800ab26:	187b      	adds	r3, r7, r1
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	801a      	strh	r2, [r3, #0]
 800ab2c:	e054      	b.n	800abd8 <USB_EPStartXfer+0xd24>
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	691b      	ldr	r3, [r3, #16]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d10b      	bne.n	800ab4e <USB_EPStartXfer+0xc9a>
 800ab36:	21a8      	movs	r1, #168	@ 0xa8
 800ab38:	187b      	adds	r3, r7, r1
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	881b      	ldrh	r3, [r3, #0]
 800ab3e:	b29b      	uxth	r3, r3
 800ab40:	4a69      	ldr	r2, [pc, #420]	@ (800ace8 <USB_EPStartXfer+0xe34>)
 800ab42:	4313      	orrs	r3, r2
 800ab44:	b29a      	uxth	r2, r3
 800ab46:	187b      	adds	r3, r7, r1
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	801a      	strh	r2, [r3, #0]
 800ab4c:	e044      	b.n	800abd8 <USB_EPStartXfer+0xd24>
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	691b      	ldr	r3, [r3, #16]
 800ab52:	085b      	lsrs	r3, r3, #1
 800ab54:	21e4      	movs	r1, #228	@ 0xe4
 800ab56:	187a      	adds	r2, r7, r1
 800ab58:	6013      	str	r3, [r2, #0]
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	691b      	ldr	r3, [r3, #16]
 800ab5e:	2201      	movs	r2, #1
 800ab60:	4013      	ands	r3, r2
 800ab62:	d004      	beq.n	800ab6e <USB_EPStartXfer+0xcba>
 800ab64:	187b      	adds	r3, r7, r1
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	3301      	adds	r3, #1
 800ab6a:	187a      	adds	r2, r7, r1
 800ab6c:	6013      	str	r3, [r2, #0]
 800ab6e:	21a8      	movs	r1, #168	@ 0xa8
 800ab70:	187b      	adds	r3, r7, r1
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	881b      	ldrh	r3, [r3, #0]
 800ab76:	b29a      	uxth	r2, r3
 800ab78:	23e4      	movs	r3, #228	@ 0xe4
 800ab7a:	18fb      	adds	r3, r7, r3
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	b29b      	uxth	r3, r3
 800ab80:	029b      	lsls	r3, r3, #10
 800ab82:	b29b      	uxth	r3, r3
 800ab84:	4313      	orrs	r3, r2
 800ab86:	b29a      	uxth	r2, r3
 800ab88:	187b      	adds	r3, r7, r1
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	801a      	strh	r2, [r3, #0]
 800ab8e:	e023      	b.n	800abd8 <USB_EPStartXfer+0xd24>
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	785b      	ldrb	r3, [r3, #1]
 800ab94:	2b01      	cmp	r3, #1
 800ab96:	d11f      	bne.n	800abd8 <USB_EPStartXfer+0xd24>
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	21b4      	movs	r1, #180	@ 0xb4
 800ab9c:	187a      	adds	r2, r7, r1
 800ab9e:	6013      	str	r3, [r2, #0]
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2250      	movs	r2, #80	@ 0x50
 800aba4:	5a9b      	ldrh	r3, [r3, r2]
 800aba6:	b29b      	uxth	r3, r3
 800aba8:	001a      	movs	r2, r3
 800abaa:	187b      	adds	r3, r7, r1
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	189b      	adds	r3, r3, r2
 800abb0:	187a      	adds	r2, r7, r1
 800abb2:	6013      	str	r3, [r2, #0]
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	781b      	ldrb	r3, [r3, #0]
 800abb8:	00da      	lsls	r2, r3, #3
 800abba:	187b      	adds	r3, r7, r1
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	18d3      	adds	r3, r2, r3
 800abc0:	4a4a      	ldr	r2, [pc, #296]	@ (800acec <USB_EPStartXfer+0xe38>)
 800abc2:	4694      	mov	ip, r2
 800abc4:	4463      	add	r3, ip
 800abc6:	21b0      	movs	r1, #176	@ 0xb0
 800abc8:	187a      	adds	r2, r7, r1
 800abca:	6013      	str	r3, [r2, #0]
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	691b      	ldr	r3, [r3, #16]
 800abd0:	b29a      	uxth	r2, r3
 800abd2:	187b      	adds	r3, r7, r1
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	801a      	strh	r2, [r3, #0]
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	22a4      	movs	r2, #164	@ 0xa4
 800abdc:	18ba      	adds	r2, r7, r2
 800abde:	6013      	str	r3, [r2, #0]
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	785b      	ldrb	r3, [r3, #1]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d000      	beq.n	800abea <USB_EPStartXfer+0xd36>
 800abe8:	e082      	b.n	800acf0 <USB_EPStartXfer+0xe3c>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	219c      	movs	r1, #156	@ 0x9c
 800abee:	187a      	adds	r2, r7, r1
 800abf0:	6013      	str	r3, [r2, #0]
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2250      	movs	r2, #80	@ 0x50
 800abf6:	5a9b      	ldrh	r3, [r3, r2]
 800abf8:	b29b      	uxth	r3, r3
 800abfa:	001a      	movs	r2, r3
 800abfc:	187b      	adds	r3, r7, r1
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	189b      	adds	r3, r3, r2
 800ac02:	187a      	adds	r2, r7, r1
 800ac04:	6013      	str	r3, [r2, #0]
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	781b      	ldrb	r3, [r3, #0]
 800ac0a:	00da      	lsls	r2, r3, #3
 800ac0c:	187b      	adds	r3, r7, r1
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	18d3      	adds	r3, r2, r3
 800ac12:	4a34      	ldr	r2, [pc, #208]	@ (800ace4 <USB_EPStartXfer+0xe30>)
 800ac14:	4694      	mov	ip, r2
 800ac16:	4463      	add	r3, ip
 800ac18:	2198      	movs	r1, #152	@ 0x98
 800ac1a:	187a      	adds	r2, r7, r1
 800ac1c:	6013      	str	r3, [r2, #0]
 800ac1e:	187b      	adds	r3, r7, r1
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	881b      	ldrh	r3, [r3, #0]
 800ac24:	b29b      	uxth	r3, r3
 800ac26:	059b      	lsls	r3, r3, #22
 800ac28:	0d9b      	lsrs	r3, r3, #22
 800ac2a:	b29a      	uxth	r2, r3
 800ac2c:	187b      	adds	r3, r7, r1
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	801a      	strh	r2, [r3, #0]
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	691b      	ldr	r3, [r3, #16]
 800ac36:	2b3e      	cmp	r3, #62	@ 0x3e
 800ac38:	d923      	bls.n	800ac82 <USB_EPStartXfer+0xdce>
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	691b      	ldr	r3, [r3, #16]
 800ac3e:	095b      	lsrs	r3, r3, #5
 800ac40:	21e0      	movs	r1, #224	@ 0xe0
 800ac42:	187a      	adds	r2, r7, r1
 800ac44:	6013      	str	r3, [r2, #0]
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	691b      	ldr	r3, [r3, #16]
 800ac4a:	221f      	movs	r2, #31
 800ac4c:	4013      	ands	r3, r2
 800ac4e:	d104      	bne.n	800ac5a <USB_EPStartXfer+0xda6>
 800ac50:	187b      	adds	r3, r7, r1
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	3b01      	subs	r3, #1
 800ac56:	187a      	adds	r2, r7, r1
 800ac58:	6013      	str	r3, [r2, #0]
 800ac5a:	2198      	movs	r1, #152	@ 0x98
 800ac5c:	187b      	adds	r3, r7, r1
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	881b      	ldrh	r3, [r3, #0]
 800ac62:	b29a      	uxth	r2, r3
 800ac64:	23e0      	movs	r3, #224	@ 0xe0
 800ac66:	18fb      	adds	r3, r7, r3
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	b29b      	uxth	r3, r3
 800ac6c:	029b      	lsls	r3, r3, #10
 800ac6e:	b29b      	uxth	r3, r3
 800ac70:	4313      	orrs	r3, r2
 800ac72:	b29b      	uxth	r3, r3
 800ac74:	4a1c      	ldr	r2, [pc, #112]	@ (800ace8 <USB_EPStartXfer+0xe34>)
 800ac76:	4313      	orrs	r3, r2
 800ac78:	b29a      	uxth	r2, r3
 800ac7a:	187b      	adds	r3, r7, r1
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	801a      	strh	r2, [r3, #0]
 800ac80:	e057      	b.n	800ad32 <USB_EPStartXfer+0xe7e>
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	691b      	ldr	r3, [r3, #16]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d10b      	bne.n	800aca2 <USB_EPStartXfer+0xdee>
 800ac8a:	2198      	movs	r1, #152	@ 0x98
 800ac8c:	187b      	adds	r3, r7, r1
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	881b      	ldrh	r3, [r3, #0]
 800ac92:	b29b      	uxth	r3, r3
 800ac94:	4a14      	ldr	r2, [pc, #80]	@ (800ace8 <USB_EPStartXfer+0xe34>)
 800ac96:	4313      	orrs	r3, r2
 800ac98:	b29a      	uxth	r2, r3
 800ac9a:	187b      	adds	r3, r7, r1
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	801a      	strh	r2, [r3, #0]
 800aca0:	e047      	b.n	800ad32 <USB_EPStartXfer+0xe7e>
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	691b      	ldr	r3, [r3, #16]
 800aca6:	085b      	lsrs	r3, r3, #1
 800aca8:	21e0      	movs	r1, #224	@ 0xe0
 800acaa:	187a      	adds	r2, r7, r1
 800acac:	6013      	str	r3, [r2, #0]
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	691b      	ldr	r3, [r3, #16]
 800acb2:	2201      	movs	r2, #1
 800acb4:	4013      	ands	r3, r2
 800acb6:	d004      	beq.n	800acc2 <USB_EPStartXfer+0xe0e>
 800acb8:	187b      	adds	r3, r7, r1
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	3301      	adds	r3, #1
 800acbe:	187a      	adds	r2, r7, r1
 800acc0:	6013      	str	r3, [r2, #0]
 800acc2:	2198      	movs	r1, #152	@ 0x98
 800acc4:	187b      	adds	r3, r7, r1
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	881b      	ldrh	r3, [r3, #0]
 800acca:	b29a      	uxth	r2, r3
 800accc:	23e0      	movs	r3, #224	@ 0xe0
 800acce:	18fb      	adds	r3, r7, r3
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	b29b      	uxth	r3, r3
 800acd4:	029b      	lsls	r3, r3, #10
 800acd6:	b29b      	uxth	r3, r3
 800acd8:	4313      	orrs	r3, r2
 800acda:	b29a      	uxth	r2, r3
 800acdc:	187b      	adds	r3, r7, r1
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	801a      	strh	r2, [r3, #0]
 800ace2:	e026      	b.n	800ad32 <USB_EPStartXfer+0xe7e>
 800ace4:	00000406 	.word	0x00000406
 800ace8:	ffff8000 	.word	0xffff8000
 800acec:	00000402 	.word	0x00000402
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	785b      	ldrb	r3, [r3, #1]
 800acf4:	2b01      	cmp	r3, #1
 800acf6:	d11c      	bne.n	800ad32 <USB_EPStartXfer+0xe7e>
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2250      	movs	r2, #80	@ 0x50
 800acfc:	5a9b      	ldrh	r3, [r3, r2]
 800acfe:	b29b      	uxth	r3, r3
 800ad00:	001a      	movs	r2, r3
 800ad02:	21a4      	movs	r1, #164	@ 0xa4
 800ad04:	187b      	adds	r3, r7, r1
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	189b      	adds	r3, r3, r2
 800ad0a:	187a      	adds	r2, r7, r1
 800ad0c:	6013      	str	r3, [r2, #0]
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	781b      	ldrb	r3, [r3, #0]
 800ad12:	00da      	lsls	r2, r3, #3
 800ad14:	187b      	adds	r3, r7, r1
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	18d3      	adds	r3, r2, r3
 800ad1a:	4ad2      	ldr	r2, [pc, #840]	@ (800b064 <USB_EPStartXfer+0x11b0>)
 800ad1c:	4694      	mov	ip, r2
 800ad1e:	4463      	add	r3, ip
 800ad20:	21a0      	movs	r1, #160	@ 0xa0
 800ad22:	187a      	adds	r2, r7, r1
 800ad24:	6013      	str	r3, [r2, #0]
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	691b      	ldr	r3, [r3, #16]
 800ad2a:	b29a      	uxth	r2, r3
 800ad2c:	187b      	adds	r3, r7, r1
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	69db      	ldr	r3, [r3, #28]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d100      	bne.n	800ad3c <USB_EPStartXfer+0xe88>
 800ad3a:	e1c2      	b.n	800b0c2 <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800ad3c:	687a      	ldr	r2, [r7, #4]
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	781b      	ldrb	r3, [r3, #0]
 800ad42:	009b      	lsls	r3, r3, #2
 800ad44:	18d2      	adds	r2, r2, r3
 800ad46:	2196      	movs	r1, #150	@ 0x96
 800ad48:	187b      	adds	r3, r7, r1
 800ad4a:	8812      	ldrh	r2, [r2, #0]
 800ad4c:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ad4e:	187b      	adds	r3, r7, r1
 800ad50:	881a      	ldrh	r2, [r3, #0]
 800ad52:	2380      	movs	r3, #128	@ 0x80
 800ad54:	01db      	lsls	r3, r3, #7
 800ad56:	4013      	ands	r3, r2
 800ad58:	d004      	beq.n	800ad64 <USB_EPStartXfer+0xeb0>
 800ad5a:	187b      	adds	r3, r7, r1
 800ad5c:	881b      	ldrh	r3, [r3, #0]
 800ad5e:	2240      	movs	r2, #64	@ 0x40
 800ad60:	4013      	ands	r3, r2
 800ad62:	d10d      	bne.n	800ad80 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ad64:	2196      	movs	r1, #150	@ 0x96
 800ad66:	187b      	adds	r3, r7, r1
 800ad68:	881a      	ldrh	r2, [r3, #0]
 800ad6a:	2380      	movs	r3, #128	@ 0x80
 800ad6c:	01db      	lsls	r3, r3, #7
 800ad6e:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ad70:	d000      	beq.n	800ad74 <USB_EPStartXfer+0xec0>
 800ad72:	e1a6      	b.n	800b0c2 <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ad74:	187b      	adds	r3, r7, r1
 800ad76:	881b      	ldrh	r3, [r3, #0]
 800ad78:	2240      	movs	r2, #64	@ 0x40
 800ad7a:	4013      	ands	r3, r2
 800ad7c:	d000      	beq.n	800ad80 <USB_EPStartXfer+0xecc>
 800ad7e:	e1a0      	b.n	800b0c2 <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800ad80:	687a      	ldr	r2, [r7, #4]
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	781b      	ldrb	r3, [r3, #0]
 800ad86:	009b      	lsls	r3, r3, #2
 800ad88:	18d3      	adds	r3, r2, r3
 800ad8a:	881b      	ldrh	r3, [r3, #0]
 800ad8c:	b29a      	uxth	r2, r3
 800ad8e:	2094      	movs	r0, #148	@ 0x94
 800ad90:	183b      	adds	r3, r7, r0
 800ad92:	49b5      	ldr	r1, [pc, #724]	@ (800b068 <USB_EPStartXfer+0x11b4>)
 800ad94:	400a      	ands	r2, r1
 800ad96:	801a      	strh	r2, [r3, #0]
 800ad98:	687a      	ldr	r2, [r7, #4]
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	781b      	ldrb	r3, [r3, #0]
 800ad9e:	009b      	lsls	r3, r3, #2
 800ada0:	18d3      	adds	r3, r2, r3
 800ada2:	183a      	adds	r2, r7, r0
 800ada4:	8812      	ldrh	r2, [r2, #0]
 800ada6:	49b1      	ldr	r1, [pc, #708]	@ (800b06c <USB_EPStartXfer+0x11b8>)
 800ada8:	430a      	orrs	r2, r1
 800adaa:	b292      	uxth	r2, r2
 800adac:	801a      	strh	r2, [r3, #0]
 800adae:	e188      	b.n	800b0c2 <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	78db      	ldrb	r3, [r3, #3]
 800adb4:	2b01      	cmp	r3, #1
 800adb6:	d000      	beq.n	800adba <USB_EPStartXfer+0xf06>
 800adb8:	e181      	b.n	800b0be <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	699a      	ldr	r2, [r3, #24]
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	691b      	ldr	r3, [r3, #16]
 800adc2:	429a      	cmp	r2, r3
 800adc4:	d90d      	bls.n	800ade2 <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	691b      	ldr	r3, [r3, #16]
 800adca:	1d7a      	adds	r2, r7, #5
 800adcc:	32ff      	adds	r2, #255	@ 0xff
 800adce:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	699a      	ldr	r2, [r3, #24]
 800add4:	1d7b      	adds	r3, r7, #5
 800add6:	33ff      	adds	r3, #255	@ 0xff
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	1ad2      	subs	r2, r2, r3
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	619a      	str	r2, [r3, #24]
 800ade0:	e007      	b.n	800adf2 <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	699b      	ldr	r3, [r3, #24]
 800ade6:	1d7a      	adds	r2, r7, #5
 800ade8:	32ff      	adds	r2, #255	@ 0xff
 800adea:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	2200      	movs	r2, #0
 800adf0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	785b      	ldrb	r3, [r3, #1]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d000      	beq.n	800adfc <USB_EPStartXfer+0xf48>
 800adfa:	e082      	b.n	800af02 <USB_EPStartXfer+0x104e>
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	21cc      	movs	r1, #204	@ 0xcc
 800ae00:	187a      	adds	r2, r7, r1
 800ae02:	6013      	str	r3, [r2, #0]
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2250      	movs	r2, #80	@ 0x50
 800ae08:	5a9b      	ldrh	r3, [r3, r2]
 800ae0a:	b29b      	uxth	r3, r3
 800ae0c:	001a      	movs	r2, r3
 800ae0e:	187b      	adds	r3, r7, r1
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	189b      	adds	r3, r3, r2
 800ae14:	187a      	adds	r2, r7, r1
 800ae16:	6013      	str	r3, [r2, #0]
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	781b      	ldrb	r3, [r3, #0]
 800ae1c:	00da      	lsls	r2, r3, #3
 800ae1e:	187b      	adds	r3, r7, r1
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	18d3      	adds	r3, r2, r3
 800ae24:	4a92      	ldr	r2, [pc, #584]	@ (800b070 <USB_EPStartXfer+0x11bc>)
 800ae26:	4694      	mov	ip, r2
 800ae28:	4463      	add	r3, ip
 800ae2a:	21c8      	movs	r1, #200	@ 0xc8
 800ae2c:	187a      	adds	r2, r7, r1
 800ae2e:	6013      	str	r3, [r2, #0]
 800ae30:	187b      	adds	r3, r7, r1
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	881b      	ldrh	r3, [r3, #0]
 800ae36:	b29b      	uxth	r3, r3
 800ae38:	059b      	lsls	r3, r3, #22
 800ae3a:	0d9b      	lsrs	r3, r3, #22
 800ae3c:	b29a      	uxth	r2, r3
 800ae3e:	187b      	adds	r3, r7, r1
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	801a      	strh	r2, [r3, #0]
 800ae44:	1d7b      	adds	r3, r7, #5
 800ae46:	33ff      	adds	r3, #255	@ 0xff
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	2b3e      	cmp	r3, #62	@ 0x3e
 800ae4c:	d925      	bls.n	800ae9a <USB_EPStartXfer+0xfe6>
 800ae4e:	1d7b      	adds	r3, r7, #5
 800ae50:	33ff      	adds	r3, #255	@ 0xff
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	095b      	lsrs	r3, r3, #5
 800ae56:	21dc      	movs	r1, #220	@ 0xdc
 800ae58:	187a      	adds	r2, r7, r1
 800ae5a:	6013      	str	r3, [r2, #0]
 800ae5c:	1d7b      	adds	r3, r7, #5
 800ae5e:	33ff      	adds	r3, #255	@ 0xff
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	221f      	movs	r2, #31
 800ae64:	4013      	ands	r3, r2
 800ae66:	d104      	bne.n	800ae72 <USB_EPStartXfer+0xfbe>
 800ae68:	187b      	adds	r3, r7, r1
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	3b01      	subs	r3, #1
 800ae6e:	187a      	adds	r2, r7, r1
 800ae70:	6013      	str	r3, [r2, #0]
 800ae72:	21c8      	movs	r1, #200	@ 0xc8
 800ae74:	187b      	adds	r3, r7, r1
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	881b      	ldrh	r3, [r3, #0]
 800ae7a:	b29a      	uxth	r2, r3
 800ae7c:	23dc      	movs	r3, #220	@ 0xdc
 800ae7e:	18fb      	adds	r3, r7, r3
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	b29b      	uxth	r3, r3
 800ae84:	029b      	lsls	r3, r3, #10
 800ae86:	b29b      	uxth	r3, r3
 800ae88:	4313      	orrs	r3, r2
 800ae8a:	b29b      	uxth	r3, r3
 800ae8c:	4a79      	ldr	r2, [pc, #484]	@ (800b074 <USB_EPStartXfer+0x11c0>)
 800ae8e:	4313      	orrs	r3, r2
 800ae90:	b29a      	uxth	r2, r3
 800ae92:	187b      	adds	r3, r7, r1
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	801a      	strh	r2, [r3, #0]
 800ae98:	e058      	b.n	800af4c <USB_EPStartXfer+0x1098>
 800ae9a:	1d7b      	adds	r3, r7, #5
 800ae9c:	33ff      	adds	r3, #255	@ 0xff
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d10b      	bne.n	800aebc <USB_EPStartXfer+0x1008>
 800aea4:	21c8      	movs	r1, #200	@ 0xc8
 800aea6:	187b      	adds	r3, r7, r1
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	881b      	ldrh	r3, [r3, #0]
 800aeac:	b29b      	uxth	r3, r3
 800aeae:	4a71      	ldr	r2, [pc, #452]	@ (800b074 <USB_EPStartXfer+0x11c0>)
 800aeb0:	4313      	orrs	r3, r2
 800aeb2:	b29a      	uxth	r2, r3
 800aeb4:	187b      	adds	r3, r7, r1
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	801a      	strh	r2, [r3, #0]
 800aeba:	e047      	b.n	800af4c <USB_EPStartXfer+0x1098>
 800aebc:	1d7b      	adds	r3, r7, #5
 800aebe:	33ff      	adds	r3, #255	@ 0xff
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	085b      	lsrs	r3, r3, #1
 800aec4:	21dc      	movs	r1, #220	@ 0xdc
 800aec6:	187a      	adds	r2, r7, r1
 800aec8:	6013      	str	r3, [r2, #0]
 800aeca:	1d7b      	adds	r3, r7, #5
 800aecc:	33ff      	adds	r3, #255	@ 0xff
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	2201      	movs	r2, #1
 800aed2:	4013      	ands	r3, r2
 800aed4:	d004      	beq.n	800aee0 <USB_EPStartXfer+0x102c>
 800aed6:	187b      	adds	r3, r7, r1
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	3301      	adds	r3, #1
 800aedc:	187a      	adds	r2, r7, r1
 800aede:	6013      	str	r3, [r2, #0]
 800aee0:	21c8      	movs	r1, #200	@ 0xc8
 800aee2:	187b      	adds	r3, r7, r1
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	881b      	ldrh	r3, [r3, #0]
 800aee8:	b29a      	uxth	r2, r3
 800aeea:	23dc      	movs	r3, #220	@ 0xdc
 800aeec:	18fb      	adds	r3, r7, r3
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	b29b      	uxth	r3, r3
 800aef2:	029b      	lsls	r3, r3, #10
 800aef4:	b29b      	uxth	r3, r3
 800aef6:	4313      	orrs	r3, r2
 800aef8:	b29a      	uxth	r2, r3
 800aefa:	187b      	adds	r3, r7, r1
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	801a      	strh	r2, [r3, #0]
 800af00:	e024      	b.n	800af4c <USB_EPStartXfer+0x1098>
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	785b      	ldrb	r3, [r3, #1]
 800af06:	2b01      	cmp	r3, #1
 800af08:	d120      	bne.n	800af4c <USB_EPStartXfer+0x1098>
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	21d4      	movs	r1, #212	@ 0xd4
 800af0e:	187a      	adds	r2, r7, r1
 800af10:	6013      	str	r3, [r2, #0]
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2250      	movs	r2, #80	@ 0x50
 800af16:	5a9b      	ldrh	r3, [r3, r2]
 800af18:	b29b      	uxth	r3, r3
 800af1a:	001a      	movs	r2, r3
 800af1c:	187b      	adds	r3, r7, r1
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	189b      	adds	r3, r3, r2
 800af22:	187a      	adds	r2, r7, r1
 800af24:	6013      	str	r3, [r2, #0]
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	781b      	ldrb	r3, [r3, #0]
 800af2a:	00da      	lsls	r2, r3, #3
 800af2c:	187b      	adds	r3, r7, r1
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	18d3      	adds	r3, r2, r3
 800af32:	4a4f      	ldr	r2, [pc, #316]	@ (800b070 <USB_EPStartXfer+0x11bc>)
 800af34:	4694      	mov	ip, r2
 800af36:	4463      	add	r3, ip
 800af38:	21d0      	movs	r1, #208	@ 0xd0
 800af3a:	187a      	adds	r2, r7, r1
 800af3c:	6013      	str	r3, [r2, #0]
 800af3e:	1d7b      	adds	r3, r7, #5
 800af40:	33ff      	adds	r3, #255	@ 0xff
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	b29a      	uxth	r2, r3
 800af46:	187b      	adds	r3, r7, r1
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	801a      	strh	r2, [r3, #0]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	22c4      	movs	r2, #196	@ 0xc4
 800af50:	18ba      	adds	r2, r7, r2
 800af52:	6013      	str	r3, [r2, #0]
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	785b      	ldrb	r3, [r3, #1]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d000      	beq.n	800af5e <USB_EPStartXfer+0x10aa>
 800af5c:	e08c      	b.n	800b078 <USB_EPStartXfer+0x11c4>
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	21bc      	movs	r1, #188	@ 0xbc
 800af62:	187a      	adds	r2, r7, r1
 800af64:	6013      	str	r3, [r2, #0]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2250      	movs	r2, #80	@ 0x50
 800af6a:	5a9b      	ldrh	r3, [r3, r2]
 800af6c:	b29b      	uxth	r3, r3
 800af6e:	001a      	movs	r2, r3
 800af70:	187b      	adds	r3, r7, r1
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	189b      	adds	r3, r3, r2
 800af76:	187a      	adds	r2, r7, r1
 800af78:	6013      	str	r3, [r2, #0]
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	781b      	ldrb	r3, [r3, #0]
 800af7e:	00da      	lsls	r2, r3, #3
 800af80:	187b      	adds	r3, r7, r1
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	18d3      	adds	r3, r2, r3
 800af86:	4a37      	ldr	r2, [pc, #220]	@ (800b064 <USB_EPStartXfer+0x11b0>)
 800af88:	4694      	mov	ip, r2
 800af8a:	4463      	add	r3, ip
 800af8c:	21b8      	movs	r1, #184	@ 0xb8
 800af8e:	187a      	adds	r2, r7, r1
 800af90:	6013      	str	r3, [r2, #0]
 800af92:	187b      	adds	r3, r7, r1
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	881b      	ldrh	r3, [r3, #0]
 800af98:	b29b      	uxth	r3, r3
 800af9a:	059b      	lsls	r3, r3, #22
 800af9c:	0d9b      	lsrs	r3, r3, #22
 800af9e:	b29a      	uxth	r2, r3
 800afa0:	187b      	adds	r3, r7, r1
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	801a      	strh	r2, [r3, #0]
 800afa6:	1d7b      	adds	r3, r7, #5
 800afa8:	33ff      	adds	r3, #255	@ 0xff
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	2b3e      	cmp	r3, #62	@ 0x3e
 800afae:	d925      	bls.n	800affc <USB_EPStartXfer+0x1148>
 800afb0:	1d7b      	adds	r3, r7, #5
 800afb2:	33ff      	adds	r3, #255	@ 0xff
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	095b      	lsrs	r3, r3, #5
 800afb8:	21d8      	movs	r1, #216	@ 0xd8
 800afba:	187a      	adds	r2, r7, r1
 800afbc:	6013      	str	r3, [r2, #0]
 800afbe:	1d7b      	adds	r3, r7, #5
 800afc0:	33ff      	adds	r3, #255	@ 0xff
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	221f      	movs	r2, #31
 800afc6:	4013      	ands	r3, r2
 800afc8:	d104      	bne.n	800afd4 <USB_EPStartXfer+0x1120>
 800afca:	187b      	adds	r3, r7, r1
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	3b01      	subs	r3, #1
 800afd0:	187a      	adds	r2, r7, r1
 800afd2:	6013      	str	r3, [r2, #0]
 800afd4:	21b8      	movs	r1, #184	@ 0xb8
 800afd6:	187b      	adds	r3, r7, r1
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	881b      	ldrh	r3, [r3, #0]
 800afdc:	b29a      	uxth	r2, r3
 800afde:	23d8      	movs	r3, #216	@ 0xd8
 800afe0:	18fb      	adds	r3, r7, r3
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	b29b      	uxth	r3, r3
 800afe6:	029b      	lsls	r3, r3, #10
 800afe8:	b29b      	uxth	r3, r3
 800afea:	4313      	orrs	r3, r2
 800afec:	b29b      	uxth	r3, r3
 800afee:	4a21      	ldr	r2, [pc, #132]	@ (800b074 <USB_EPStartXfer+0x11c0>)
 800aff0:	4313      	orrs	r3, r2
 800aff2:	b29a      	uxth	r2, r3
 800aff4:	187b      	adds	r3, r7, r1
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	801a      	strh	r2, [r3, #0]
 800affa:	e062      	b.n	800b0c2 <USB_EPStartXfer+0x120e>
 800affc:	1d7b      	adds	r3, r7, #5
 800affe:	33ff      	adds	r3, #255	@ 0xff
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d10b      	bne.n	800b01e <USB_EPStartXfer+0x116a>
 800b006:	21b8      	movs	r1, #184	@ 0xb8
 800b008:	187b      	adds	r3, r7, r1
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	881b      	ldrh	r3, [r3, #0]
 800b00e:	b29b      	uxth	r3, r3
 800b010:	4a18      	ldr	r2, [pc, #96]	@ (800b074 <USB_EPStartXfer+0x11c0>)
 800b012:	4313      	orrs	r3, r2
 800b014:	b29a      	uxth	r2, r3
 800b016:	187b      	adds	r3, r7, r1
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	801a      	strh	r2, [r3, #0]
 800b01c:	e051      	b.n	800b0c2 <USB_EPStartXfer+0x120e>
 800b01e:	1d7b      	adds	r3, r7, #5
 800b020:	33ff      	adds	r3, #255	@ 0xff
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	085b      	lsrs	r3, r3, #1
 800b026:	21d8      	movs	r1, #216	@ 0xd8
 800b028:	187a      	adds	r2, r7, r1
 800b02a:	6013      	str	r3, [r2, #0]
 800b02c:	1d7b      	adds	r3, r7, #5
 800b02e:	33ff      	adds	r3, #255	@ 0xff
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	2201      	movs	r2, #1
 800b034:	4013      	ands	r3, r2
 800b036:	d004      	beq.n	800b042 <USB_EPStartXfer+0x118e>
 800b038:	187b      	adds	r3, r7, r1
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	3301      	adds	r3, #1
 800b03e:	187a      	adds	r2, r7, r1
 800b040:	6013      	str	r3, [r2, #0]
 800b042:	21b8      	movs	r1, #184	@ 0xb8
 800b044:	187b      	adds	r3, r7, r1
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	881b      	ldrh	r3, [r3, #0]
 800b04a:	b29a      	uxth	r2, r3
 800b04c:	23d8      	movs	r3, #216	@ 0xd8
 800b04e:	18fb      	adds	r3, r7, r3
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	b29b      	uxth	r3, r3
 800b054:	029b      	lsls	r3, r3, #10
 800b056:	b29b      	uxth	r3, r3
 800b058:	4313      	orrs	r3, r2
 800b05a:	b29a      	uxth	r2, r3
 800b05c:	187b      	adds	r3, r7, r1
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	801a      	strh	r2, [r3, #0]
 800b062:	e02e      	b.n	800b0c2 <USB_EPStartXfer+0x120e>
 800b064:	00000406 	.word	0x00000406
 800b068:	ffff8f8f 	.word	0xffff8f8f
 800b06c:	ffff80c0 	.word	0xffff80c0
 800b070:	00000402 	.word	0x00000402
 800b074:	ffff8000 	.word	0xffff8000
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	785b      	ldrb	r3, [r3, #1]
 800b07c:	2b01      	cmp	r3, #1
 800b07e:	d120      	bne.n	800b0c2 <USB_EPStartXfer+0x120e>
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2250      	movs	r2, #80	@ 0x50
 800b084:	5a9b      	ldrh	r3, [r3, r2]
 800b086:	b29b      	uxth	r3, r3
 800b088:	001a      	movs	r2, r3
 800b08a:	21c4      	movs	r1, #196	@ 0xc4
 800b08c:	187b      	adds	r3, r7, r1
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	189b      	adds	r3, r3, r2
 800b092:	187a      	adds	r2, r7, r1
 800b094:	6013      	str	r3, [r2, #0]
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	781b      	ldrb	r3, [r3, #0]
 800b09a:	00da      	lsls	r2, r3, #3
 800b09c:	187b      	adds	r3, r7, r1
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	18d3      	adds	r3, r2, r3
 800b0a2:	4a1d      	ldr	r2, [pc, #116]	@ (800b118 <USB_EPStartXfer+0x1264>)
 800b0a4:	4694      	mov	ip, r2
 800b0a6:	4463      	add	r3, ip
 800b0a8:	21c0      	movs	r1, #192	@ 0xc0
 800b0aa:	187a      	adds	r2, r7, r1
 800b0ac:	6013      	str	r3, [r2, #0]
 800b0ae:	1d7b      	adds	r3, r7, #5
 800b0b0:	33ff      	adds	r3, #255	@ 0xff
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	b29a      	uxth	r2, r3
 800b0b6:	187b      	adds	r3, r7, r1
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	801a      	strh	r2, [r3, #0]
 800b0bc:	e001      	b.n	800b0c2 <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 800b0be:	2301      	movs	r3, #1
 800b0c0:	e025      	b.n	800b10e <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b0c2:	687a      	ldr	r2, [r7, #4]
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	781b      	ldrb	r3, [r3, #0]
 800b0c8:	009b      	lsls	r3, r3, #2
 800b0ca:	18d3      	adds	r3, r2, r3
 800b0cc:	881b      	ldrh	r3, [r3, #0]
 800b0ce:	b29a      	uxth	r2, r3
 800b0d0:	208a      	movs	r0, #138	@ 0x8a
 800b0d2:	183b      	adds	r3, r7, r0
 800b0d4:	4911      	ldr	r1, [pc, #68]	@ (800b11c <USB_EPStartXfer+0x1268>)
 800b0d6:	400a      	ands	r2, r1
 800b0d8:	801a      	strh	r2, [r3, #0]
 800b0da:	183b      	adds	r3, r7, r0
 800b0dc:	183a      	adds	r2, r7, r0
 800b0de:	8812      	ldrh	r2, [r2, #0]
 800b0e0:	2180      	movs	r1, #128	@ 0x80
 800b0e2:	0149      	lsls	r1, r1, #5
 800b0e4:	404a      	eors	r2, r1
 800b0e6:	801a      	strh	r2, [r3, #0]
 800b0e8:	183b      	adds	r3, r7, r0
 800b0ea:	183a      	adds	r2, r7, r0
 800b0ec:	8812      	ldrh	r2, [r2, #0]
 800b0ee:	2180      	movs	r1, #128	@ 0x80
 800b0f0:	0189      	lsls	r1, r1, #6
 800b0f2:	404a      	eors	r2, r1
 800b0f4:	801a      	strh	r2, [r3, #0]
 800b0f6:	687a      	ldr	r2, [r7, #4]
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	781b      	ldrb	r3, [r3, #0]
 800b0fc:	009b      	lsls	r3, r3, #2
 800b0fe:	18d3      	adds	r3, r2, r3
 800b100:	183a      	adds	r2, r7, r0
 800b102:	8812      	ldrh	r2, [r2, #0]
 800b104:	4906      	ldr	r1, [pc, #24]	@ (800b120 <USB_EPStartXfer+0x126c>)
 800b106:	430a      	orrs	r2, r1
 800b108:	b292      	uxth	r2, r2
 800b10a:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800b10c:	2300      	movs	r3, #0
}
 800b10e:	0018      	movs	r0, r3
 800b110:	46bd      	mov	sp, r7
 800b112:	b043      	add	sp, #268	@ 0x10c
 800b114:	bd90      	pop	{r4, r7, pc}
 800b116:	46c0      	nop			@ (mov r8, r8)
 800b118:	00000406 	.word	0x00000406
 800b11c:	ffffbf8f 	.word	0xffffbf8f
 800b120:	ffff8080 	.word	0xffff8080

0800b124 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b084      	sub	sp, #16
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
 800b12c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	785b      	ldrb	r3, [r3, #1]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d01d      	beq.n	800b172 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b136:	687a      	ldr	r2, [r7, #4]
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	009b      	lsls	r3, r3, #2
 800b13e:	18d3      	adds	r3, r2, r3
 800b140:	881b      	ldrh	r3, [r3, #0]
 800b142:	b29a      	uxth	r2, r3
 800b144:	200c      	movs	r0, #12
 800b146:	183b      	adds	r3, r7, r0
 800b148:	491b      	ldr	r1, [pc, #108]	@ (800b1b8 <USB_EPSetStall+0x94>)
 800b14a:	400a      	ands	r2, r1
 800b14c:	801a      	strh	r2, [r3, #0]
 800b14e:	183b      	adds	r3, r7, r0
 800b150:	183a      	adds	r2, r7, r0
 800b152:	8812      	ldrh	r2, [r2, #0]
 800b154:	2110      	movs	r1, #16
 800b156:	404a      	eors	r2, r1
 800b158:	801a      	strh	r2, [r3, #0]
 800b15a:	687a      	ldr	r2, [r7, #4]
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	781b      	ldrb	r3, [r3, #0]
 800b160:	009b      	lsls	r3, r3, #2
 800b162:	18d3      	adds	r3, r2, r3
 800b164:	183a      	adds	r2, r7, r0
 800b166:	8812      	ldrh	r2, [r2, #0]
 800b168:	4914      	ldr	r1, [pc, #80]	@ (800b1bc <USB_EPSetStall+0x98>)
 800b16a:	430a      	orrs	r2, r1
 800b16c:	b292      	uxth	r2, r2
 800b16e:	801a      	strh	r2, [r3, #0]
 800b170:	e01d      	b.n	800b1ae <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b172:	687a      	ldr	r2, [r7, #4]
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	781b      	ldrb	r3, [r3, #0]
 800b178:	009b      	lsls	r3, r3, #2
 800b17a:	18d3      	adds	r3, r2, r3
 800b17c:	881b      	ldrh	r3, [r3, #0]
 800b17e:	b29a      	uxth	r2, r3
 800b180:	200e      	movs	r0, #14
 800b182:	183b      	adds	r3, r7, r0
 800b184:	490e      	ldr	r1, [pc, #56]	@ (800b1c0 <USB_EPSetStall+0x9c>)
 800b186:	400a      	ands	r2, r1
 800b188:	801a      	strh	r2, [r3, #0]
 800b18a:	183b      	adds	r3, r7, r0
 800b18c:	183a      	adds	r2, r7, r0
 800b18e:	8812      	ldrh	r2, [r2, #0]
 800b190:	2180      	movs	r1, #128	@ 0x80
 800b192:	0149      	lsls	r1, r1, #5
 800b194:	404a      	eors	r2, r1
 800b196:	801a      	strh	r2, [r3, #0]
 800b198:	687a      	ldr	r2, [r7, #4]
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	781b      	ldrb	r3, [r3, #0]
 800b19e:	009b      	lsls	r3, r3, #2
 800b1a0:	18d3      	adds	r3, r2, r3
 800b1a2:	183a      	adds	r2, r7, r0
 800b1a4:	8812      	ldrh	r2, [r2, #0]
 800b1a6:	4905      	ldr	r1, [pc, #20]	@ (800b1bc <USB_EPSetStall+0x98>)
 800b1a8:	430a      	orrs	r2, r1
 800b1aa:	b292      	uxth	r2, r2
 800b1ac:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800b1ae:	2300      	movs	r3, #0
}
 800b1b0:	0018      	movs	r0, r3
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	b004      	add	sp, #16
 800b1b6:	bd80      	pop	{r7, pc}
 800b1b8:	ffff8fbf 	.word	0xffff8fbf
 800b1bc:	ffff8080 	.word	0xffff8080
 800b1c0:	ffffbf8f 	.word	0xffffbf8f

0800b1c4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b086      	sub	sp, #24
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
 800b1cc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	7b1b      	ldrb	r3, [r3, #12]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d000      	beq.n	800b1d8 <USB_EPClearStall+0x14>
 800b1d6:	e095      	b.n	800b304 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	785b      	ldrb	r3, [r3, #1]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d046      	beq.n	800b26e <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b1e0:	687a      	ldr	r2, [r7, #4]
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	781b      	ldrb	r3, [r3, #0]
 800b1e6:	009b      	lsls	r3, r3, #2
 800b1e8:	18d2      	adds	r2, r2, r3
 800b1ea:	2110      	movs	r1, #16
 800b1ec:	187b      	adds	r3, r7, r1
 800b1ee:	8812      	ldrh	r2, [r2, #0]
 800b1f0:	801a      	strh	r2, [r3, #0]
 800b1f2:	187b      	adds	r3, r7, r1
 800b1f4:	881b      	ldrh	r3, [r3, #0]
 800b1f6:	2240      	movs	r2, #64	@ 0x40
 800b1f8:	4013      	ands	r3, r2
 800b1fa:	d016      	beq.n	800b22a <USB_EPClearStall+0x66>
 800b1fc:	687a      	ldr	r2, [r7, #4]
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	781b      	ldrb	r3, [r3, #0]
 800b202:	009b      	lsls	r3, r3, #2
 800b204:	18d3      	adds	r3, r2, r3
 800b206:	881b      	ldrh	r3, [r3, #0]
 800b208:	b29a      	uxth	r2, r3
 800b20a:	200e      	movs	r0, #14
 800b20c:	183b      	adds	r3, r7, r0
 800b20e:	4940      	ldr	r1, [pc, #256]	@ (800b310 <USB_EPClearStall+0x14c>)
 800b210:	400a      	ands	r2, r1
 800b212:	801a      	strh	r2, [r3, #0]
 800b214:	687a      	ldr	r2, [r7, #4]
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	781b      	ldrb	r3, [r3, #0]
 800b21a:	009b      	lsls	r3, r3, #2
 800b21c:	18d3      	adds	r3, r2, r3
 800b21e:	183a      	adds	r2, r7, r0
 800b220:	8812      	ldrh	r2, [r2, #0]
 800b222:	493c      	ldr	r1, [pc, #240]	@ (800b314 <USB_EPClearStall+0x150>)
 800b224:	430a      	orrs	r2, r1
 800b226:	b292      	uxth	r2, r2
 800b228:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	78db      	ldrb	r3, [r3, #3]
 800b22e:	2b01      	cmp	r3, #1
 800b230:	d068      	beq.n	800b304 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b232:	687a      	ldr	r2, [r7, #4]
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	781b      	ldrb	r3, [r3, #0]
 800b238:	009b      	lsls	r3, r3, #2
 800b23a:	18d3      	adds	r3, r2, r3
 800b23c:	881b      	ldrh	r3, [r3, #0]
 800b23e:	b29a      	uxth	r2, r3
 800b240:	200c      	movs	r0, #12
 800b242:	183b      	adds	r3, r7, r0
 800b244:	4934      	ldr	r1, [pc, #208]	@ (800b318 <USB_EPClearStall+0x154>)
 800b246:	400a      	ands	r2, r1
 800b248:	801a      	strh	r2, [r3, #0]
 800b24a:	183b      	adds	r3, r7, r0
 800b24c:	183a      	adds	r2, r7, r0
 800b24e:	8812      	ldrh	r2, [r2, #0]
 800b250:	2120      	movs	r1, #32
 800b252:	404a      	eors	r2, r1
 800b254:	801a      	strh	r2, [r3, #0]
 800b256:	687a      	ldr	r2, [r7, #4]
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	781b      	ldrb	r3, [r3, #0]
 800b25c:	009b      	lsls	r3, r3, #2
 800b25e:	18d3      	adds	r3, r2, r3
 800b260:	183a      	adds	r2, r7, r0
 800b262:	8812      	ldrh	r2, [r2, #0]
 800b264:	492d      	ldr	r1, [pc, #180]	@ (800b31c <USB_EPClearStall+0x158>)
 800b266:	430a      	orrs	r2, r1
 800b268:	b292      	uxth	r2, r2
 800b26a:	801a      	strh	r2, [r3, #0]
 800b26c:	e04a      	b.n	800b304 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b26e:	687a      	ldr	r2, [r7, #4]
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	781b      	ldrb	r3, [r3, #0]
 800b274:	009b      	lsls	r3, r3, #2
 800b276:	18d2      	adds	r2, r2, r3
 800b278:	2116      	movs	r1, #22
 800b27a:	187b      	adds	r3, r7, r1
 800b27c:	8812      	ldrh	r2, [r2, #0]
 800b27e:	801a      	strh	r2, [r3, #0]
 800b280:	187b      	adds	r3, r7, r1
 800b282:	881a      	ldrh	r2, [r3, #0]
 800b284:	2380      	movs	r3, #128	@ 0x80
 800b286:	01db      	lsls	r3, r3, #7
 800b288:	4013      	ands	r3, r2
 800b28a:	d016      	beq.n	800b2ba <USB_EPClearStall+0xf6>
 800b28c:	687a      	ldr	r2, [r7, #4]
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	781b      	ldrb	r3, [r3, #0]
 800b292:	009b      	lsls	r3, r3, #2
 800b294:	18d3      	adds	r3, r2, r3
 800b296:	881b      	ldrh	r3, [r3, #0]
 800b298:	b29a      	uxth	r2, r3
 800b29a:	2014      	movs	r0, #20
 800b29c:	183b      	adds	r3, r7, r0
 800b29e:	491c      	ldr	r1, [pc, #112]	@ (800b310 <USB_EPClearStall+0x14c>)
 800b2a0:	400a      	ands	r2, r1
 800b2a2:	801a      	strh	r2, [r3, #0]
 800b2a4:	687a      	ldr	r2, [r7, #4]
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	781b      	ldrb	r3, [r3, #0]
 800b2aa:	009b      	lsls	r3, r3, #2
 800b2ac:	18d3      	adds	r3, r2, r3
 800b2ae:	183a      	adds	r2, r7, r0
 800b2b0:	8812      	ldrh	r2, [r2, #0]
 800b2b2:	491b      	ldr	r1, [pc, #108]	@ (800b320 <USB_EPClearStall+0x15c>)
 800b2b4:	430a      	orrs	r2, r1
 800b2b6:	b292      	uxth	r2, r2
 800b2b8:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b2ba:	687a      	ldr	r2, [r7, #4]
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	781b      	ldrb	r3, [r3, #0]
 800b2c0:	009b      	lsls	r3, r3, #2
 800b2c2:	18d3      	adds	r3, r2, r3
 800b2c4:	881b      	ldrh	r3, [r3, #0]
 800b2c6:	b29a      	uxth	r2, r3
 800b2c8:	2012      	movs	r0, #18
 800b2ca:	183b      	adds	r3, r7, r0
 800b2cc:	4915      	ldr	r1, [pc, #84]	@ (800b324 <USB_EPClearStall+0x160>)
 800b2ce:	400a      	ands	r2, r1
 800b2d0:	801a      	strh	r2, [r3, #0]
 800b2d2:	183b      	adds	r3, r7, r0
 800b2d4:	183a      	adds	r2, r7, r0
 800b2d6:	8812      	ldrh	r2, [r2, #0]
 800b2d8:	2180      	movs	r1, #128	@ 0x80
 800b2da:	0149      	lsls	r1, r1, #5
 800b2dc:	404a      	eors	r2, r1
 800b2de:	801a      	strh	r2, [r3, #0]
 800b2e0:	183b      	adds	r3, r7, r0
 800b2e2:	183a      	adds	r2, r7, r0
 800b2e4:	8812      	ldrh	r2, [r2, #0]
 800b2e6:	2180      	movs	r1, #128	@ 0x80
 800b2e8:	0189      	lsls	r1, r1, #6
 800b2ea:	404a      	eors	r2, r1
 800b2ec:	801a      	strh	r2, [r3, #0]
 800b2ee:	687a      	ldr	r2, [r7, #4]
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	781b      	ldrb	r3, [r3, #0]
 800b2f4:	009b      	lsls	r3, r3, #2
 800b2f6:	18d3      	adds	r3, r2, r3
 800b2f8:	183a      	adds	r2, r7, r0
 800b2fa:	8812      	ldrh	r2, [r2, #0]
 800b2fc:	4907      	ldr	r1, [pc, #28]	@ (800b31c <USB_EPClearStall+0x158>)
 800b2fe:	430a      	orrs	r2, r1
 800b300:	b292      	uxth	r2, r2
 800b302:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800b304:	2300      	movs	r3, #0
}
 800b306:	0018      	movs	r0, r3
 800b308:	46bd      	mov	sp, r7
 800b30a:	b006      	add	sp, #24
 800b30c:	bd80      	pop	{r7, pc}
 800b30e:	46c0      	nop			@ (mov r8, r8)
 800b310:	ffff8f8f 	.word	0xffff8f8f
 800b314:	ffff80c0 	.word	0xffff80c0
 800b318:	ffff8fbf 	.word	0xffff8fbf
 800b31c:	ffff8080 	.word	0xffff8080
 800b320:	ffffc080 	.word	0xffffc080
 800b324:	ffffbf8f 	.word	0xffffbf8f

0800b328 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b082      	sub	sp, #8
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
 800b330:	000a      	movs	r2, r1
 800b332:	1cfb      	adds	r3, r7, #3
 800b334:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800b336:	1cfb      	adds	r3, r7, #3
 800b338:	781b      	ldrb	r3, [r3, #0]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d103      	bne.n	800b346 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	224c      	movs	r2, #76	@ 0x4c
 800b342:	2180      	movs	r1, #128	@ 0x80
 800b344:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800b346:	2300      	movs	r3, #0
}
 800b348:	0018      	movs	r0, r3
 800b34a:	46bd      	mov	sp, r7
 800b34c:	b002      	add	sp, #8
 800b34e:	bd80      	pop	{r7, pc}

0800b350 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b082      	sub	sp, #8
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2258      	movs	r2, #88	@ 0x58
 800b35c:	5a9b      	ldrh	r3, [r3, r2]
 800b35e:	b29b      	uxth	r3, r3
 800b360:	4a05      	ldr	r2, [pc, #20]	@ (800b378 <USB_DevConnect+0x28>)
 800b362:	4313      	orrs	r3, r2
 800b364:	b299      	uxth	r1, r3
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2258      	movs	r2, #88	@ 0x58
 800b36a:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800b36c:	2300      	movs	r3, #0
}
 800b36e:	0018      	movs	r0, r3
 800b370:	46bd      	mov	sp, r7
 800b372:	b002      	add	sp, #8
 800b374:	bd80      	pop	{r7, pc}
 800b376:	46c0      	nop			@ (mov r8, r8)
 800b378:	ffff8000 	.word	0xffff8000

0800b37c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b084      	sub	sp, #16
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2244      	movs	r2, #68	@ 0x44
 800b388:	5a9b      	ldrh	r3, [r3, r2]
 800b38a:	b29b      	uxth	r3, r3
 800b38c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b38e:	68fb      	ldr	r3, [r7, #12]
}
 800b390:	0018      	movs	r0, r3
 800b392:	46bd      	mov	sp, r7
 800b394:	b004      	add	sp, #16
 800b396:	bd80      	pop	{r7, pc}

0800b398 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b08a      	sub	sp, #40	@ 0x28
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	60f8      	str	r0, [r7, #12]
 800b3a0:	60b9      	str	r1, [r7, #8]
 800b3a2:	0019      	movs	r1, r3
 800b3a4:	1dbb      	adds	r3, r7, #6
 800b3a6:	801a      	strh	r2, [r3, #0]
 800b3a8:	1d3b      	adds	r3, r7, #4
 800b3aa:	1c0a      	adds	r2, r1, #0
 800b3ac:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b3ae:	1d3b      	adds	r3, r7, #4
 800b3b0:	881b      	ldrh	r3, [r3, #0]
 800b3b2:	3301      	adds	r3, #1
 800b3b4:	085b      	lsrs	r3, r3, #1
 800b3b6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b3c0:	1dbb      	adds	r3, r7, #6
 800b3c2:	881a      	ldrh	r2, [r3, #0]
 800b3c4:	697b      	ldr	r3, [r7, #20]
 800b3c6:	18d3      	adds	r3, r2, r3
 800b3c8:	2280      	movs	r2, #128	@ 0x80
 800b3ca:	00d2      	lsls	r2, r2, #3
 800b3cc:	4694      	mov	ip, r2
 800b3ce:	4463      	add	r3, ip
 800b3d0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b3d2:	69bb      	ldr	r3, [r7, #24]
 800b3d4:	627b      	str	r3, [r7, #36]	@ 0x24
 800b3d6:	e020      	b.n	800b41a <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 800b3d8:	69fb      	ldr	r3, [r7, #28]
 800b3da:	781a      	ldrb	r2, [r3, #0]
 800b3dc:	2112      	movs	r1, #18
 800b3de:	187b      	adds	r3, r7, r1
 800b3e0:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800b3e2:	69fb      	ldr	r3, [r7, #28]
 800b3e4:	3301      	adds	r3, #1
 800b3e6:	781b      	ldrb	r3, [r3, #0]
 800b3e8:	021b      	lsls	r3, r3, #8
 800b3ea:	b21a      	sxth	r2, r3
 800b3ec:	187b      	adds	r3, r7, r1
 800b3ee:	2000      	movs	r0, #0
 800b3f0:	5e1b      	ldrsh	r3, [r3, r0]
 800b3f2:	4313      	orrs	r3, r2
 800b3f4:	b21a      	sxth	r2, r3
 800b3f6:	187b      	adds	r3, r7, r1
 800b3f8:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 800b3fa:	6a3b      	ldr	r3, [r7, #32]
 800b3fc:	187a      	adds	r2, r7, r1
 800b3fe:	8812      	ldrh	r2, [r2, #0]
 800b400:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b402:	6a3b      	ldr	r3, [r7, #32]
 800b404:	3302      	adds	r3, #2
 800b406:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800b408:	69fb      	ldr	r3, [r7, #28]
 800b40a:	3301      	adds	r3, #1
 800b40c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800b40e:	69fb      	ldr	r3, [r7, #28]
 800b410:	3301      	adds	r3, #1
 800b412:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b416:	3b01      	subs	r3, #1
 800b418:	627b      	str	r3, [r7, #36]	@ 0x24
 800b41a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d1db      	bne.n	800b3d8 <USB_WritePMA+0x40>
  }
}
 800b420:	46c0      	nop			@ (mov r8, r8)
 800b422:	46c0      	nop			@ (mov r8, r8)
 800b424:	46bd      	mov	sp, r7
 800b426:	b00a      	add	sp, #40	@ 0x28
 800b428:	bd80      	pop	{r7, pc}

0800b42a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b42a:	b580      	push	{r7, lr}
 800b42c:	b08a      	sub	sp, #40	@ 0x28
 800b42e:	af00      	add	r7, sp, #0
 800b430:	60f8      	str	r0, [r7, #12]
 800b432:	60b9      	str	r1, [r7, #8]
 800b434:	0019      	movs	r1, r3
 800b436:	1dbb      	adds	r3, r7, #6
 800b438:	801a      	strh	r2, [r3, #0]
 800b43a:	1d3b      	adds	r3, r7, #4
 800b43c:	1c0a      	adds	r2, r1, #0
 800b43e:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b440:	1d3b      	adds	r3, r7, #4
 800b442:	881b      	ldrh	r3, [r3, #0]
 800b444:	085b      	lsrs	r3, r3, #1
 800b446:	b29b      	uxth	r3, r3
 800b448:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b452:	1dbb      	adds	r3, r7, #6
 800b454:	881a      	ldrh	r2, [r3, #0]
 800b456:	697b      	ldr	r3, [r7, #20]
 800b458:	18d3      	adds	r3, r2, r3
 800b45a:	2280      	movs	r2, #128	@ 0x80
 800b45c:	00d2      	lsls	r2, r2, #3
 800b45e:	4694      	mov	ip, r2
 800b460:	4463      	add	r3, ip
 800b462:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b464:	69bb      	ldr	r3, [r7, #24]
 800b466:	627b      	str	r3, [r7, #36]	@ 0x24
 800b468:	e018      	b.n	800b49c <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800b46a:	6a3b      	ldr	r3, [r7, #32]
 800b46c:	881b      	ldrh	r3, [r3, #0]
 800b46e:	b29b      	uxth	r3, r3
 800b470:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b472:	6a3b      	ldr	r3, [r7, #32]
 800b474:	3302      	adds	r3, #2
 800b476:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b478:	693b      	ldr	r3, [r7, #16]
 800b47a:	b2da      	uxtb	r2, r3
 800b47c:	69fb      	ldr	r3, [r7, #28]
 800b47e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b480:	69fb      	ldr	r3, [r7, #28]
 800b482:	3301      	adds	r3, #1
 800b484:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800b486:	693b      	ldr	r3, [r7, #16]
 800b488:	0a1b      	lsrs	r3, r3, #8
 800b48a:	b2da      	uxtb	r2, r3
 800b48c:	69fb      	ldr	r3, [r7, #28]
 800b48e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b490:	69fb      	ldr	r3, [r7, #28]
 800b492:	3301      	adds	r3, #1
 800b494:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b498:	3b01      	subs	r3, #1
 800b49a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b49c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d1e3      	bne.n	800b46a <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800b4a2:	1d3b      	adds	r3, r7, #4
 800b4a4:	881b      	ldrh	r3, [r3, #0]
 800b4a6:	2201      	movs	r2, #1
 800b4a8:	4013      	ands	r3, r2
 800b4aa:	b29b      	uxth	r3, r3
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d007      	beq.n	800b4c0 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 800b4b0:	6a3b      	ldr	r3, [r7, #32]
 800b4b2:	881b      	ldrh	r3, [r3, #0]
 800b4b4:	b29b      	uxth	r3, r3
 800b4b6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b4b8:	693b      	ldr	r3, [r7, #16]
 800b4ba:	b2da      	uxtb	r2, r3
 800b4bc:	69fb      	ldr	r3, [r7, #28]
 800b4be:	701a      	strb	r2, [r3, #0]
  }
}
 800b4c0:	46c0      	nop			@ (mov r8, r8)
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	b00a      	add	sp, #40	@ 0x28
 800b4c6:	bd80      	pop	{r7, pc}

0800b4c8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b084      	sub	sp, #16
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
 800b4d0:	000a      	movs	r2, r1
 800b4d2:	1cfb      	adds	r3, r7, #3
 800b4d4:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800b4d6:	230f      	movs	r3, #15
 800b4d8:	18fb      	adds	r3, r7, r3
 800b4da:	2200      	movs	r2, #0
 800b4dc:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	7c1b      	ldrb	r3, [r3, #16]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d116      	bne.n	800b514 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b4e6:	2380      	movs	r3, #128	@ 0x80
 800b4e8:	009b      	lsls	r3, r3, #2
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	2202      	movs	r2, #2
 800b4ee:	2181      	movs	r1, #129	@ 0x81
 800b4f0:	f002 f8c5 	bl	800d67e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2201      	movs	r2, #1
 800b4f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b4fa:	2380      	movs	r3, #128	@ 0x80
 800b4fc:	009b      	lsls	r3, r3, #2
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	2202      	movs	r2, #2
 800b502:	2101      	movs	r1, #1
 800b504:	f002 f8bb 	bl	800d67e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b508:	687a      	ldr	r2, [r7, #4]
 800b50a:	23b6      	movs	r3, #182	@ 0xb6
 800b50c:	005b      	lsls	r3, r3, #1
 800b50e:	2101      	movs	r1, #1
 800b510:	50d1      	str	r1, [r2, r3]
 800b512:	e013      	b.n	800b53c <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	2340      	movs	r3, #64	@ 0x40
 800b518:	2202      	movs	r2, #2
 800b51a:	2181      	movs	r1, #129	@ 0x81
 800b51c:	f002 f8af 	bl	800d67e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2201      	movs	r2, #1
 800b524:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	2340      	movs	r3, #64	@ 0x40
 800b52a:	2202      	movs	r2, #2
 800b52c:	2101      	movs	r1, #1
 800b52e:	f002 f8a6 	bl	800d67e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b532:	687a      	ldr	r2, [r7, #4]
 800b534:	23b6      	movs	r3, #182	@ 0xb6
 800b536:	005b      	lsls	r3, r3, #1
 800b538:	2101      	movs	r1, #1
 800b53a:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	2308      	movs	r3, #8
 800b540:	2203      	movs	r2, #3
 800b542:	2182      	movs	r1, #130	@ 0x82
 800b544:	f002 f89b 	bl	800d67e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2201      	movs	r2, #1
 800b54c:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b54e:	2387      	movs	r3, #135	@ 0x87
 800b550:	009b      	lsls	r3, r3, #2
 800b552:	0018      	movs	r0, r3
 800b554:	f002 fa2c 	bl	800d9b0 <USBD_static_malloc>
 800b558:	0001      	movs	r1, r0
 800b55a:	687a      	ldr	r2, [r7, #4]
 800b55c:	23ae      	movs	r3, #174	@ 0xae
 800b55e:	009b      	lsls	r3, r3, #2
 800b560:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 800b562:	687a      	ldr	r2, [r7, #4]
 800b564:	23ae      	movs	r3, #174	@ 0xae
 800b566:	009b      	lsls	r3, r3, #2
 800b568:	58d3      	ldr	r3, [r2, r3]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d104      	bne.n	800b578 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 800b56e:	230f      	movs	r3, #15
 800b570:	18fb      	adds	r3, r7, r3
 800b572:	2201      	movs	r2, #1
 800b574:	701a      	strb	r2, [r3, #0]
 800b576:	e02c      	b.n	800b5d2 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b578:	687a      	ldr	r2, [r7, #4]
 800b57a:	23ae      	movs	r3, #174	@ 0xae
 800b57c:	009b      	lsls	r3, r3, #2
 800b57e:	58d3      	ldr	r3, [r2, r3]
 800b580:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b582:	687a      	ldr	r2, [r7, #4]
 800b584:	23af      	movs	r3, #175	@ 0xaf
 800b586:	009b      	lsls	r3, r3, #2
 800b588:	58d3      	ldr	r3, [r2, r3]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800b58e:	68ba      	ldr	r2, [r7, #8]
 800b590:	2385      	movs	r3, #133	@ 0x85
 800b592:	009b      	lsls	r3, r3, #2
 800b594:	2100      	movs	r1, #0
 800b596:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 800b598:	68ba      	ldr	r2, [r7, #8]
 800b59a:	2386      	movs	r3, #134	@ 0x86
 800b59c:	009b      	lsls	r3, r3, #2
 800b59e:	2100      	movs	r1, #0
 800b5a0:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	7c1b      	ldrb	r3, [r3, #16]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d10a      	bne.n	800b5c0 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b5aa:	68ba      	ldr	r2, [r7, #8]
 800b5ac:	2381      	movs	r3, #129	@ 0x81
 800b5ae:	009b      	lsls	r3, r3, #2
 800b5b0:	58d2      	ldr	r2, [r2, r3]
 800b5b2:	2380      	movs	r3, #128	@ 0x80
 800b5b4:	009b      	lsls	r3, r3, #2
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	2101      	movs	r1, #1
 800b5ba:	f002 f9ab 	bl	800d914 <USBD_LL_PrepareReceive>
 800b5be:	e008      	b.n	800b5d2 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b5c0:	68ba      	ldr	r2, [r7, #8]
 800b5c2:	2381      	movs	r3, #129	@ 0x81
 800b5c4:	009b      	lsls	r3, r3, #2
 800b5c6:	58d2      	ldr	r2, [r2, r3]
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	2340      	movs	r3, #64	@ 0x40
 800b5cc:	2101      	movs	r1, #1
 800b5ce:	f002 f9a1 	bl	800d914 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800b5d2:	230f      	movs	r3, #15
 800b5d4:	18fb      	adds	r3, r7, r3
 800b5d6:	781b      	ldrb	r3, [r3, #0]
}
 800b5d8:	0018      	movs	r0, r3
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	b004      	add	sp, #16
 800b5de:	bd80      	pop	{r7, pc}

0800b5e0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b084      	sub	sp, #16
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
 800b5e8:	000a      	movs	r2, r1
 800b5ea:	1cfb      	adds	r3, r7, #3
 800b5ec:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800b5ee:	230f      	movs	r3, #15
 800b5f0:	18fb      	adds	r3, r7, r3
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2181      	movs	r1, #129	@ 0x81
 800b5fa:	0018      	movs	r0, r3
 800b5fc:	f002 f876 	bl	800d6ec <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2200      	movs	r2, #0
 800b604:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2101      	movs	r1, #1
 800b60a:	0018      	movs	r0, r3
 800b60c:	f002 f86e 	bl	800d6ec <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b610:	687a      	ldr	r2, [r7, #4]
 800b612:	23b6      	movs	r3, #182	@ 0xb6
 800b614:	005b      	lsls	r3, r3, #1
 800b616:	2100      	movs	r1, #0
 800b618:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2182      	movs	r1, #130	@ 0x82
 800b61e:	0018      	movs	r0, r3
 800b620:	f002 f864 	bl	800d6ec <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2200      	movs	r2, #0
 800b628:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b62a:	687a      	ldr	r2, [r7, #4]
 800b62c:	23ae      	movs	r3, #174	@ 0xae
 800b62e:	009b      	lsls	r3, r3, #2
 800b630:	58d3      	ldr	r3, [r2, r3]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d011      	beq.n	800b65a <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b636:	687a      	ldr	r2, [r7, #4]
 800b638:	23af      	movs	r3, #175	@ 0xaf
 800b63a:	009b      	lsls	r3, r3, #2
 800b63c:	58d3      	ldr	r3, [r2, r3]
 800b63e:	685b      	ldr	r3, [r3, #4]
 800b640:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b642:	687a      	ldr	r2, [r7, #4]
 800b644:	23ae      	movs	r3, #174	@ 0xae
 800b646:	009b      	lsls	r3, r3, #2
 800b648:	58d3      	ldr	r3, [r2, r3]
 800b64a:	0018      	movs	r0, r3
 800b64c:	f002 f9bc 	bl	800d9c8 <USBD_static_free>
    pdev->pClassData = NULL;
 800b650:	687a      	ldr	r2, [r7, #4]
 800b652:	23ae      	movs	r3, #174	@ 0xae
 800b654:	009b      	lsls	r3, r3, #2
 800b656:	2100      	movs	r1, #0
 800b658:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 800b65a:	230f      	movs	r3, #15
 800b65c:	18fb      	adds	r3, r7, r3
 800b65e:	781b      	ldrb	r3, [r3, #0]
}
 800b660:	0018      	movs	r0, r3
 800b662:	46bd      	mov	sp, r7
 800b664:	b004      	add	sp, #16
 800b666:	bd80      	pop	{r7, pc}

0800b668 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b086      	sub	sp, #24
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
 800b670:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b672:	687a      	ldr	r2, [r7, #4]
 800b674:	23ae      	movs	r3, #174	@ 0xae
 800b676:	009b      	lsls	r3, r3, #2
 800b678:	58d3      	ldr	r3, [r2, r3]
 800b67a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b67c:	230f      	movs	r3, #15
 800b67e:	18fb      	adds	r3, r7, r3
 800b680:	2200      	movs	r2, #0
 800b682:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 800b684:	230c      	movs	r3, #12
 800b686:	18fb      	adds	r3, r7, r3
 800b688:	2200      	movs	r2, #0
 800b68a:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 800b68c:	2317      	movs	r3, #23
 800b68e:	18fb      	adds	r3, r7, r3
 800b690:	2200      	movs	r2, #0
 800b692:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	781b      	ldrb	r3, [r3, #0]
 800b698:	001a      	movs	r2, r3
 800b69a:	2360      	movs	r3, #96	@ 0x60
 800b69c:	4013      	ands	r3, r2
 800b69e:	d03d      	beq.n	800b71c <USBD_CDC_Setup+0xb4>
 800b6a0:	2b20      	cmp	r3, #32
 800b6a2:	d000      	beq.n	800b6a6 <USBD_CDC_Setup+0x3e>
 800b6a4:	e094      	b.n	800b7d0 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	88db      	ldrh	r3, [r3, #6]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d02b      	beq.n	800b706 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	b25b      	sxtb	r3, r3
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	da12      	bge.n	800b6de <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b6b8:	687a      	ldr	r2, [r7, #4]
 800b6ba:	23af      	movs	r3, #175	@ 0xaf
 800b6bc:	009b      	lsls	r3, r3, #2
 800b6be:	58d3      	ldr	r3, [r2, r3]
 800b6c0:	689b      	ldr	r3, [r3, #8]
 800b6c2:	683a      	ldr	r2, [r7, #0]
 800b6c4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800b6c6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b6c8:	683a      	ldr	r2, [r7, #0]
 800b6ca:	88d2      	ldrh	r2, [r2, #6]
 800b6cc:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b6ce:	6939      	ldr	r1, [r7, #16]
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	88da      	ldrh	r2, [r3, #6]
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	0018      	movs	r0, r3
 800b6d8:	f001 fbaf 	bl	800ce3a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800b6dc:	e083      	b.n	800b7e6 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	7859      	ldrb	r1, [r3, #1]
 800b6e2:	693a      	ldr	r2, [r7, #16]
 800b6e4:	2380      	movs	r3, #128	@ 0x80
 800b6e6:	009b      	lsls	r3, r3, #2
 800b6e8:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	88db      	ldrh	r3, [r3, #6]
 800b6ee:	b2d9      	uxtb	r1, r3
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	4a40      	ldr	r2, [pc, #256]	@ (800b7f4 <USBD_CDC_Setup+0x18c>)
 800b6f4:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b6f6:	6939      	ldr	r1, [r7, #16]
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	88da      	ldrh	r2, [r3, #6]
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	0018      	movs	r0, r3
 800b700:	f001 fbce 	bl	800cea0 <USBD_CtlPrepareRx>
      break;
 800b704:	e06f      	b.n	800b7e6 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b706:	687a      	ldr	r2, [r7, #4]
 800b708:	23af      	movs	r3, #175	@ 0xaf
 800b70a:	009b      	lsls	r3, r3, #2
 800b70c:	58d3      	ldr	r3, [r2, r3]
 800b70e:	689b      	ldr	r3, [r3, #8]
 800b710:	683a      	ldr	r2, [r7, #0]
 800b712:	7850      	ldrb	r0, [r2, #1]
 800b714:	6839      	ldr	r1, [r7, #0]
 800b716:	2200      	movs	r2, #0
 800b718:	4798      	blx	r3
      break;
 800b71a:	e064      	b.n	800b7e6 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	785b      	ldrb	r3, [r3, #1]
 800b720:	2b0b      	cmp	r3, #11
 800b722:	d037      	beq.n	800b794 <USBD_CDC_Setup+0x12c>
 800b724:	dc47      	bgt.n	800b7b6 <USBD_CDC_Setup+0x14e>
 800b726:	2b00      	cmp	r3, #0
 800b728:	d002      	beq.n	800b730 <USBD_CDC_Setup+0xc8>
 800b72a:	2b0a      	cmp	r3, #10
 800b72c:	d019      	beq.n	800b762 <USBD_CDC_Setup+0xfa>
 800b72e:	e042      	b.n	800b7b6 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b730:	687a      	ldr	r2, [r7, #4]
 800b732:	23a7      	movs	r3, #167	@ 0xa7
 800b734:	009b      	lsls	r3, r3, #2
 800b736:	5cd3      	ldrb	r3, [r2, r3]
 800b738:	2b03      	cmp	r3, #3
 800b73a:	d107      	bne.n	800b74c <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800b73c:	230c      	movs	r3, #12
 800b73e:	18f9      	adds	r1, r7, r3
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2202      	movs	r2, #2
 800b744:	0018      	movs	r0, r3
 800b746:	f001 fb78 	bl	800ce3a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b74a:	e040      	b.n	800b7ce <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800b74c:	683a      	ldr	r2, [r7, #0]
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	0011      	movs	r1, r2
 800b752:	0018      	movs	r0, r3
 800b754:	f001 faf3 	bl	800cd3e <USBD_CtlError>
            ret = USBD_FAIL;
 800b758:	2317      	movs	r3, #23
 800b75a:	18fb      	adds	r3, r7, r3
 800b75c:	2202      	movs	r2, #2
 800b75e:	701a      	strb	r2, [r3, #0]
          break;
 800b760:	e035      	b.n	800b7ce <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b762:	687a      	ldr	r2, [r7, #4]
 800b764:	23a7      	movs	r3, #167	@ 0xa7
 800b766:	009b      	lsls	r3, r3, #2
 800b768:	5cd3      	ldrb	r3, [r2, r3]
 800b76a:	2b03      	cmp	r3, #3
 800b76c:	d107      	bne.n	800b77e <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800b76e:	230f      	movs	r3, #15
 800b770:	18f9      	adds	r1, r7, r3
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2201      	movs	r2, #1
 800b776:	0018      	movs	r0, r3
 800b778:	f001 fb5f 	bl	800ce3a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b77c:	e027      	b.n	800b7ce <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800b77e:	683a      	ldr	r2, [r7, #0]
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	0011      	movs	r1, r2
 800b784:	0018      	movs	r0, r3
 800b786:	f001 fada 	bl	800cd3e <USBD_CtlError>
            ret = USBD_FAIL;
 800b78a:	2317      	movs	r3, #23
 800b78c:	18fb      	adds	r3, r7, r3
 800b78e:	2202      	movs	r2, #2
 800b790:	701a      	strb	r2, [r3, #0]
          break;
 800b792:	e01c      	b.n	800b7ce <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b794:	687a      	ldr	r2, [r7, #4]
 800b796:	23a7      	movs	r3, #167	@ 0xa7
 800b798:	009b      	lsls	r3, r3, #2
 800b79a:	5cd3      	ldrb	r3, [r2, r3]
 800b79c:	2b03      	cmp	r3, #3
 800b79e:	d015      	beq.n	800b7cc <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 800b7a0:	683a      	ldr	r2, [r7, #0]
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	0011      	movs	r1, r2
 800b7a6:	0018      	movs	r0, r3
 800b7a8:	f001 fac9 	bl	800cd3e <USBD_CtlError>
            ret = USBD_FAIL;
 800b7ac:	2317      	movs	r3, #23
 800b7ae:	18fb      	adds	r3, r7, r3
 800b7b0:	2202      	movs	r2, #2
 800b7b2:	701a      	strb	r2, [r3, #0]
          }
          break;
 800b7b4:	e00a      	b.n	800b7cc <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 800b7b6:	683a      	ldr	r2, [r7, #0]
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	0011      	movs	r1, r2
 800b7bc:	0018      	movs	r0, r3
 800b7be:	f001 fabe 	bl	800cd3e <USBD_CtlError>
          ret = USBD_FAIL;
 800b7c2:	2317      	movs	r3, #23
 800b7c4:	18fb      	adds	r3, r7, r3
 800b7c6:	2202      	movs	r2, #2
 800b7c8:	701a      	strb	r2, [r3, #0]
          break;
 800b7ca:	e000      	b.n	800b7ce <USBD_CDC_Setup+0x166>
          break;
 800b7cc:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800b7ce:	e00a      	b.n	800b7e6 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 800b7d0:	683a      	ldr	r2, [r7, #0]
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	0011      	movs	r1, r2
 800b7d6:	0018      	movs	r0, r3
 800b7d8:	f001 fab1 	bl	800cd3e <USBD_CtlError>
      ret = USBD_FAIL;
 800b7dc:	2317      	movs	r3, #23
 800b7de:	18fb      	adds	r3, r7, r3
 800b7e0:	2202      	movs	r2, #2
 800b7e2:	701a      	strb	r2, [r3, #0]
      break;
 800b7e4:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800b7e6:	2317      	movs	r3, #23
 800b7e8:	18fb      	adds	r3, r7, r3
 800b7ea:	781b      	ldrb	r3, [r3, #0]
}
 800b7ec:	0018      	movs	r0, r3
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	b006      	add	sp, #24
 800b7f2:	bd80      	pop	{r7, pc}
 800b7f4:	00000201 	.word	0x00000201

0800b7f8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b084      	sub	sp, #16
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
 800b800:	000a      	movs	r2, r1
 800b802:	1cfb      	adds	r3, r7, #3
 800b804:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b806:	687a      	ldr	r2, [r7, #4]
 800b808:	23ae      	movs	r3, #174	@ 0xae
 800b80a:	009b      	lsls	r3, r3, #2
 800b80c:	58d3      	ldr	r3, [r2, r3]
 800b80e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b810:	687a      	ldr	r2, [r7, #4]
 800b812:	23b0      	movs	r3, #176	@ 0xb0
 800b814:	009b      	lsls	r3, r3, #2
 800b816:	58d3      	ldr	r3, [r2, r3]
 800b818:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800b81a:	687a      	ldr	r2, [r7, #4]
 800b81c:	23ae      	movs	r3, #174	@ 0xae
 800b81e:	009b      	lsls	r3, r3, #2
 800b820:	58d3      	ldr	r3, [r2, r3]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d03e      	beq.n	800b8a4 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b826:	1cfb      	adds	r3, r7, #3
 800b828:	781a      	ldrb	r2, [r3, #0]
 800b82a:	6879      	ldr	r1, [r7, #4]
 800b82c:	0013      	movs	r3, r2
 800b82e:	009b      	lsls	r3, r3, #2
 800b830:	189b      	adds	r3, r3, r2
 800b832:	009b      	lsls	r3, r3, #2
 800b834:	18cb      	adds	r3, r1, r3
 800b836:	331c      	adds	r3, #28
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d02b      	beq.n	800b896 <USBD_CDC_DataIn+0x9e>
 800b83e:	1cfb      	adds	r3, r7, #3
 800b840:	781a      	ldrb	r2, [r3, #0]
 800b842:	6879      	ldr	r1, [r7, #4]
 800b844:	0013      	movs	r3, r2
 800b846:	009b      	lsls	r3, r3, #2
 800b848:	189b      	adds	r3, r3, r2
 800b84a:	009b      	lsls	r3, r3, #2
 800b84c:	18cb      	adds	r3, r1, r3
 800b84e:	331c      	adds	r3, #28
 800b850:	6818      	ldr	r0, [r3, #0]
 800b852:	1cfb      	adds	r3, r7, #3
 800b854:	781a      	ldrb	r2, [r3, #0]
 800b856:	68b9      	ldr	r1, [r7, #8]
 800b858:	0013      	movs	r3, r2
 800b85a:	009b      	lsls	r3, r3, #2
 800b85c:	189b      	adds	r3, r3, r2
 800b85e:	00db      	lsls	r3, r3, #3
 800b860:	18cb      	adds	r3, r1, r3
 800b862:	3338      	adds	r3, #56	@ 0x38
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	0019      	movs	r1, r3
 800b868:	f7f4 fcd4 	bl	8000214 <__aeabi_uidivmod>
 800b86c:	1e0b      	subs	r3, r1, #0
 800b86e:	d112      	bne.n	800b896 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800b870:	1cfb      	adds	r3, r7, #3
 800b872:	781a      	ldrb	r2, [r3, #0]
 800b874:	6879      	ldr	r1, [r7, #4]
 800b876:	0013      	movs	r3, r2
 800b878:	009b      	lsls	r3, r3, #2
 800b87a:	189b      	adds	r3, r3, r2
 800b87c:	009b      	lsls	r3, r3, #2
 800b87e:	18cb      	adds	r3, r1, r3
 800b880:	331c      	adds	r3, #28
 800b882:	2200      	movs	r2, #0
 800b884:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b886:	1cfb      	adds	r3, r7, #3
 800b888:	7819      	ldrb	r1, [r3, #0]
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	2300      	movs	r3, #0
 800b88e:	2200      	movs	r2, #0
 800b890:	f002 f809 	bl	800d8a6 <USBD_LL_Transmit>
 800b894:	e004      	b.n	800b8a0 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 800b896:	68fa      	ldr	r2, [r7, #12]
 800b898:	2385      	movs	r3, #133	@ 0x85
 800b89a:	009b      	lsls	r3, r3, #2
 800b89c:	2100      	movs	r1, #0
 800b89e:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	e000      	b.n	800b8a6 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 800b8a4:	2302      	movs	r3, #2
  }
}
 800b8a6:	0018      	movs	r0, r3
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	b004      	add	sp, #16
 800b8ac:	bd80      	pop	{r7, pc}

0800b8ae <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b8ae:	b580      	push	{r7, lr}
 800b8b0:	b084      	sub	sp, #16
 800b8b2:	af00      	add	r7, sp, #0
 800b8b4:	6078      	str	r0, [r7, #4]
 800b8b6:	000a      	movs	r2, r1
 800b8b8:	1cfb      	adds	r3, r7, #3
 800b8ba:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b8bc:	687a      	ldr	r2, [r7, #4]
 800b8be:	23ae      	movs	r3, #174	@ 0xae
 800b8c0:	009b      	lsls	r3, r3, #2
 800b8c2:	58d3      	ldr	r3, [r2, r3]
 800b8c4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b8c6:	1cfb      	adds	r3, r7, #3
 800b8c8:	781a      	ldrb	r2, [r3, #0]
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	0011      	movs	r1, r2
 800b8ce:	0018      	movs	r0, r3
 800b8d0:	f002 f857 	bl	800d982 <USBD_LL_GetRxDataSize>
 800b8d4:	0001      	movs	r1, r0
 800b8d6:	68fa      	ldr	r2, [r7, #12]
 800b8d8:	2383      	movs	r3, #131	@ 0x83
 800b8da:	009b      	lsls	r3, r3, #2
 800b8dc:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800b8de:	687a      	ldr	r2, [r7, #4]
 800b8e0:	23ae      	movs	r3, #174	@ 0xae
 800b8e2:	009b      	lsls	r3, r3, #2
 800b8e4:	58d3      	ldr	r3, [r2, r3]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d011      	beq.n	800b90e <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b8ea:	687a      	ldr	r2, [r7, #4]
 800b8ec:	23af      	movs	r3, #175	@ 0xaf
 800b8ee:	009b      	lsls	r3, r3, #2
 800b8f0:	58d3      	ldr	r3, [r2, r3]
 800b8f2:	68da      	ldr	r2, [r3, #12]
 800b8f4:	68f9      	ldr	r1, [r7, #12]
 800b8f6:	2381      	movs	r3, #129	@ 0x81
 800b8f8:	009b      	lsls	r3, r3, #2
 800b8fa:	58c8      	ldr	r0, [r1, r3]
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	2183      	movs	r1, #131	@ 0x83
 800b900:	0089      	lsls	r1, r1, #2
 800b902:	468c      	mov	ip, r1
 800b904:	4463      	add	r3, ip
 800b906:	0019      	movs	r1, r3
 800b908:	4790      	blx	r2

    return USBD_OK;
 800b90a:	2300      	movs	r3, #0
 800b90c:	e000      	b.n	800b910 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 800b90e:	2302      	movs	r3, #2
  }
}
 800b910:	0018      	movs	r0, r3
 800b912:	46bd      	mov	sp, r7
 800b914:	b004      	add	sp, #16
 800b916:	bd80      	pop	{r7, pc}

0800b918 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b918:	b590      	push	{r4, r7, lr}
 800b91a:	b085      	sub	sp, #20
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b920:	687a      	ldr	r2, [r7, #4]
 800b922:	23ae      	movs	r3, #174	@ 0xae
 800b924:	009b      	lsls	r3, r3, #2
 800b926:	58d3      	ldr	r3, [r2, r3]
 800b928:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b92a:	687a      	ldr	r2, [r7, #4]
 800b92c:	23af      	movs	r3, #175	@ 0xaf
 800b92e:	009b      	lsls	r3, r3, #2
 800b930:	58d3      	ldr	r3, [r2, r3]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d018      	beq.n	800b968 <USBD_CDC_EP0_RxReady+0x50>
 800b936:	68fa      	ldr	r2, [r7, #12]
 800b938:	2380      	movs	r3, #128	@ 0x80
 800b93a:	009b      	lsls	r3, r3, #2
 800b93c:	5cd3      	ldrb	r3, [r2, r3]
 800b93e:	2bff      	cmp	r3, #255	@ 0xff
 800b940:	d012      	beq.n	800b968 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b942:	687a      	ldr	r2, [r7, #4]
 800b944:	23af      	movs	r3, #175	@ 0xaf
 800b946:	009b      	lsls	r3, r3, #2
 800b948:	58d3      	ldr	r3, [r2, r3]
 800b94a:	689b      	ldr	r3, [r3, #8]
 800b94c:	68f9      	ldr	r1, [r7, #12]
 800b94e:	2280      	movs	r2, #128	@ 0x80
 800b950:	0092      	lsls	r2, r2, #2
 800b952:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 800b954:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b956:	68fa      	ldr	r2, [r7, #12]
 800b958:	4c06      	ldr	r4, [pc, #24]	@ (800b974 <USBD_CDC_EP0_RxReady+0x5c>)
 800b95a:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b95c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b95e:	68fa      	ldr	r2, [r7, #12]
 800b960:	2380      	movs	r3, #128	@ 0x80
 800b962:	009b      	lsls	r3, r3, #2
 800b964:	21ff      	movs	r1, #255	@ 0xff
 800b966:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 800b968:	2300      	movs	r3, #0
}
 800b96a:	0018      	movs	r0, r3
 800b96c:	46bd      	mov	sp, r7
 800b96e:	b005      	add	sp, #20
 800b970:	bd90      	pop	{r4, r7, pc}
 800b972:	46c0      	nop			@ (mov r8, r8)
 800b974:	00000201 	.word	0x00000201

0800b978 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b082      	sub	sp, #8
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2243      	movs	r2, #67	@ 0x43
 800b984:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b986:	4b02      	ldr	r3, [pc, #8]	@ (800b990 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 800b988:	0018      	movs	r0, r3
 800b98a:	46bd      	mov	sp, r7
 800b98c:	b002      	add	sp, #8
 800b98e:	bd80      	pop	{r7, pc}
 800b990:	20000094 	.word	0x20000094

0800b994 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b082      	sub	sp, #8
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2243      	movs	r2, #67	@ 0x43
 800b9a0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b9a2:	4b02      	ldr	r3, [pc, #8]	@ (800b9ac <USBD_CDC_GetHSCfgDesc+0x18>)
}
 800b9a4:	0018      	movs	r0, r3
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	b002      	add	sp, #8
 800b9aa:	bd80      	pop	{r7, pc}
 800b9ac:	20000050 	.word	0x20000050

0800b9b0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b082      	sub	sp, #8
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2243      	movs	r2, #67	@ 0x43
 800b9bc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b9be:	4b02      	ldr	r3, [pc, #8]	@ (800b9c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 800b9c0:	0018      	movs	r0, r3
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	b002      	add	sp, #8
 800b9c6:	bd80      	pop	{r7, pc}
 800b9c8:	200000d8 	.word	0x200000d8

0800b9cc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b082      	sub	sp, #8
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	220a      	movs	r2, #10
 800b9d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800b9da:	4b02      	ldr	r3, [pc, #8]	@ (800b9e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 800b9dc:	0018      	movs	r0, r3
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	b002      	add	sp, #8
 800b9e2:	bd80      	pop	{r7, pc}
 800b9e4:	2000000c 	.word	0x2000000c

0800b9e8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b084      	sub	sp, #16
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
 800b9f0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b9f2:	200f      	movs	r0, #15
 800b9f4:	183b      	adds	r3, r7, r0
 800b9f6:	2202      	movs	r2, #2
 800b9f8:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d007      	beq.n	800ba10 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 800ba00:	687a      	ldr	r2, [r7, #4]
 800ba02:	23af      	movs	r3, #175	@ 0xaf
 800ba04:	009b      	lsls	r3, r3, #2
 800ba06:	6839      	ldr	r1, [r7, #0]
 800ba08:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 800ba0a:	183b      	adds	r3, r7, r0
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800ba10:	230f      	movs	r3, #15
 800ba12:	18fb      	adds	r3, r7, r3
 800ba14:	781b      	ldrb	r3, [r3, #0]
}
 800ba16:	0018      	movs	r0, r3
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	b004      	add	sp, #16
 800ba1c:	bd80      	pop	{r7, pc}

0800ba1e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800ba1e:	b580      	push	{r7, lr}
 800ba20:	b086      	sub	sp, #24
 800ba22:	af00      	add	r7, sp, #0
 800ba24:	60f8      	str	r0, [r7, #12]
 800ba26:	60b9      	str	r1, [r7, #8]
 800ba28:	1dbb      	adds	r3, r7, #6
 800ba2a:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ba2c:	68fa      	ldr	r2, [r7, #12]
 800ba2e:	23ae      	movs	r3, #174	@ 0xae
 800ba30:	009b      	lsls	r3, r3, #2
 800ba32:	58d3      	ldr	r3, [r2, r3]
 800ba34:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800ba36:	697a      	ldr	r2, [r7, #20]
 800ba38:	2382      	movs	r3, #130	@ 0x82
 800ba3a:	009b      	lsls	r3, r3, #2
 800ba3c:	68b9      	ldr	r1, [r7, #8]
 800ba3e:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 800ba40:	1dbb      	adds	r3, r7, #6
 800ba42:	8819      	ldrh	r1, [r3, #0]
 800ba44:	697a      	ldr	r2, [r7, #20]
 800ba46:	2384      	movs	r3, #132	@ 0x84
 800ba48:	009b      	lsls	r3, r3, #2
 800ba4a:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800ba4c:	2300      	movs	r3, #0
}
 800ba4e:	0018      	movs	r0, r3
 800ba50:	46bd      	mov	sp, r7
 800ba52:	b006      	add	sp, #24
 800ba54:	bd80      	pop	{r7, pc}

0800ba56 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800ba56:	b580      	push	{r7, lr}
 800ba58:	b084      	sub	sp, #16
 800ba5a:	af00      	add	r7, sp, #0
 800ba5c:	6078      	str	r0, [r7, #4]
 800ba5e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ba60:	687a      	ldr	r2, [r7, #4]
 800ba62:	23ae      	movs	r3, #174	@ 0xae
 800ba64:	009b      	lsls	r3, r3, #2
 800ba66:	58d3      	ldr	r3, [r2, r3]
 800ba68:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800ba6a:	68fa      	ldr	r2, [r7, #12]
 800ba6c:	2381      	movs	r3, #129	@ 0x81
 800ba6e:	009b      	lsls	r3, r3, #2
 800ba70:	6839      	ldr	r1, [r7, #0]
 800ba72:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800ba74:	2300      	movs	r3, #0
}
 800ba76:	0018      	movs	r0, r3
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	b004      	add	sp, #16
 800ba7c:	bd80      	pop	{r7, pc}

0800ba7e <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ba7e:	b580      	push	{r7, lr}
 800ba80:	b084      	sub	sp, #16
 800ba82:	af00      	add	r7, sp, #0
 800ba84:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ba86:	687a      	ldr	r2, [r7, #4]
 800ba88:	23ae      	movs	r3, #174	@ 0xae
 800ba8a:	009b      	lsls	r3, r3, #2
 800ba8c:	58d3      	ldr	r3, [r2, r3]
 800ba8e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800ba90:	687a      	ldr	r2, [r7, #4]
 800ba92:	23ae      	movs	r3, #174	@ 0xae
 800ba94:	009b      	lsls	r3, r3, #2
 800ba96:	58d3      	ldr	r3, [r2, r3]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d022      	beq.n	800bae2 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 800ba9c:	68fa      	ldr	r2, [r7, #12]
 800ba9e:	2385      	movs	r3, #133	@ 0x85
 800baa0:	009b      	lsls	r3, r3, #2
 800baa2:	58d3      	ldr	r3, [r2, r3]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d11a      	bne.n	800bade <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800baa8:	68fa      	ldr	r2, [r7, #12]
 800baaa:	2385      	movs	r3, #133	@ 0x85
 800baac:	009b      	lsls	r3, r3, #2
 800baae:	2101      	movs	r1, #1
 800bab0:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800bab2:	68fa      	ldr	r2, [r7, #12]
 800bab4:	2384      	movs	r3, #132	@ 0x84
 800bab6:	009b      	lsls	r3, r3, #2
 800bab8:	58d2      	ldr	r2, [r2, r3]
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800babe:	68fa      	ldr	r2, [r7, #12]
 800bac0:	2382      	movs	r3, #130	@ 0x82
 800bac2:	009b      	lsls	r3, r3, #2
 800bac4:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 800bac6:	68fa      	ldr	r2, [r7, #12]
 800bac8:	2384      	movs	r3, #132	@ 0x84
 800baca:	009b      	lsls	r3, r3, #2
 800bacc:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800bace:	b29b      	uxth	r3, r3
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	000a      	movs	r2, r1
 800bad4:	2181      	movs	r1, #129	@ 0x81
 800bad6:	f001 fee6 	bl	800d8a6 <USBD_LL_Transmit>

      return USBD_OK;
 800bada:	2300      	movs	r3, #0
 800badc:	e002      	b.n	800bae4 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 800bade:	2301      	movs	r3, #1
 800bae0:	e000      	b.n	800bae4 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 800bae2:	2302      	movs	r3, #2
  }
}
 800bae4:	0018      	movs	r0, r3
 800bae6:	46bd      	mov	sp, r7
 800bae8:	b004      	add	sp, #16
 800baea:	bd80      	pop	{r7, pc}

0800baec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b084      	sub	sp, #16
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800baf4:	687a      	ldr	r2, [r7, #4]
 800baf6:	23ae      	movs	r3, #174	@ 0xae
 800baf8:	009b      	lsls	r3, r3, #2
 800bafa:	58d3      	ldr	r3, [r2, r3]
 800bafc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800bafe:	687a      	ldr	r2, [r7, #4]
 800bb00:	23ae      	movs	r3, #174	@ 0xae
 800bb02:	009b      	lsls	r3, r3, #2
 800bb04:	58d3      	ldr	r3, [r2, r3]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d019      	beq.n	800bb3e <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	7c1b      	ldrb	r3, [r3, #16]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d10a      	bne.n	800bb28 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800bb12:	68fa      	ldr	r2, [r7, #12]
 800bb14:	2381      	movs	r3, #129	@ 0x81
 800bb16:	009b      	lsls	r3, r3, #2
 800bb18:	58d2      	ldr	r2, [r2, r3]
 800bb1a:	2380      	movs	r3, #128	@ 0x80
 800bb1c:	009b      	lsls	r3, r3, #2
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	2101      	movs	r1, #1
 800bb22:	f001 fef7 	bl	800d914 <USBD_LL_PrepareReceive>
 800bb26:	e008      	b.n	800bb3a <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800bb28:	68fa      	ldr	r2, [r7, #12]
 800bb2a:	2381      	movs	r3, #129	@ 0x81
 800bb2c:	009b      	lsls	r3, r3, #2
 800bb2e:	58d2      	ldr	r2, [r2, r3]
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	2340      	movs	r3, #64	@ 0x40
 800bb34:	2101      	movs	r1, #1
 800bb36:	f001 feed 	bl	800d914 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	e000      	b.n	800bb40 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 800bb3e:	2302      	movs	r3, #2
  }
}
 800bb40:	0018      	movs	r0, r3
 800bb42:	46bd      	mov	sp, r7
 800bb44:	b004      	add	sp, #16
 800bb46:	bd80      	pop	{r7, pc}

0800bb48 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b084      	sub	sp, #16
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	60f8      	str	r0, [r7, #12]
 800bb50:	60b9      	str	r1, [r7, #8]
 800bb52:	1dfb      	adds	r3, r7, #7
 800bb54:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d101      	bne.n	800bb60 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800bb5c:	2302      	movs	r3, #2
 800bb5e:	e020      	b.n	800bba2 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800bb60:	68fa      	ldr	r2, [r7, #12]
 800bb62:	23ad      	movs	r3, #173	@ 0xad
 800bb64:	009b      	lsls	r3, r3, #2
 800bb66:	58d3      	ldr	r3, [r2, r3]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d004      	beq.n	800bb76 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 800bb6c:	68fa      	ldr	r2, [r7, #12]
 800bb6e:	23ad      	movs	r3, #173	@ 0xad
 800bb70:	009b      	lsls	r3, r3, #2
 800bb72:	2100      	movs	r1, #0
 800bb74:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bb76:	68bb      	ldr	r3, [r7, #8]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d004      	beq.n	800bb86 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800bb7c:	68fa      	ldr	r2, [r7, #12]
 800bb7e:	23ac      	movs	r3, #172	@ 0xac
 800bb80:	009b      	lsls	r3, r3, #2
 800bb82:	68b9      	ldr	r1, [r7, #8]
 800bb84:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bb86:	68fa      	ldr	r2, [r7, #12]
 800bb88:	23a7      	movs	r3, #167	@ 0xa7
 800bb8a:	009b      	lsls	r3, r3, #2
 800bb8c:	2101      	movs	r1, #1
 800bb8e:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	1dfa      	adds	r2, r7, #7
 800bb94:	7812      	ldrb	r2, [r2, #0]
 800bb96:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	0018      	movs	r0, r3
 800bb9c:	f001 fce6 	bl	800d56c <USBD_LL_Init>

  return USBD_OK;
 800bba0:	2300      	movs	r3, #0
}
 800bba2:	0018      	movs	r0, r3
 800bba4:	46bd      	mov	sp, r7
 800bba6:	b004      	add	sp, #16
 800bba8:	bd80      	pop	{r7, pc}

0800bbaa <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bbaa:	b580      	push	{r7, lr}
 800bbac:	b084      	sub	sp, #16
 800bbae:	af00      	add	r7, sp, #0
 800bbb0:	6078      	str	r0, [r7, #4]
 800bbb2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800bbb4:	200f      	movs	r0, #15
 800bbb6:	183b      	adds	r3, r7, r0
 800bbb8:	2200      	movs	r2, #0
 800bbba:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d008      	beq.n	800bbd4 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800bbc2:	687a      	ldr	r2, [r7, #4]
 800bbc4:	23ad      	movs	r3, #173	@ 0xad
 800bbc6:	009b      	lsls	r3, r3, #2
 800bbc8:	6839      	ldr	r1, [r7, #0]
 800bbca:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 800bbcc:	183b      	adds	r3, r7, r0
 800bbce:	2200      	movs	r2, #0
 800bbd0:	701a      	strb	r2, [r3, #0]
 800bbd2:	e003      	b.n	800bbdc <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800bbd4:	230f      	movs	r3, #15
 800bbd6:	18fb      	adds	r3, r7, r3
 800bbd8:	2202      	movs	r2, #2
 800bbda:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800bbdc:	230f      	movs	r3, #15
 800bbde:	18fb      	adds	r3, r7, r3
 800bbe0:	781b      	ldrb	r3, [r3, #0]
}
 800bbe2:	0018      	movs	r0, r3
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	b004      	add	sp, #16
 800bbe8:	bd80      	pop	{r7, pc}

0800bbea <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bbea:	b580      	push	{r7, lr}
 800bbec:	b082      	sub	sp, #8
 800bbee:	af00      	add	r7, sp, #0
 800bbf0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	0018      	movs	r0, r3
 800bbf6:	f001 fd1d 	bl	800d634 <USBD_LL_Start>

  return USBD_OK;
 800bbfa:	2300      	movs	r3, #0
}
 800bbfc:	0018      	movs	r0, r3
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	b002      	add	sp, #8
 800bc02:	bd80      	pop	{r7, pc}

0800bc04 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b082      	sub	sp, #8
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bc0c:	2300      	movs	r3, #0
}
 800bc0e:	0018      	movs	r0, r3
 800bc10:	46bd      	mov	sp, r7
 800bc12:	b002      	add	sp, #8
 800bc14:	bd80      	pop	{r7, pc}

0800bc16 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800bc16:	b590      	push	{r4, r7, lr}
 800bc18:	b085      	sub	sp, #20
 800bc1a:	af00      	add	r7, sp, #0
 800bc1c:	6078      	str	r0, [r7, #4]
 800bc1e:	000a      	movs	r2, r1
 800bc20:	1cfb      	adds	r3, r7, #3
 800bc22:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800bc24:	240f      	movs	r4, #15
 800bc26:	193b      	adds	r3, r7, r4
 800bc28:	2202      	movs	r2, #2
 800bc2a:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 800bc2c:	687a      	ldr	r2, [r7, #4]
 800bc2e:	23ad      	movs	r3, #173	@ 0xad
 800bc30:	009b      	lsls	r3, r3, #2
 800bc32:	58d3      	ldr	r3, [r2, r3]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d00e      	beq.n	800bc56 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800bc38:	687a      	ldr	r2, [r7, #4]
 800bc3a:	23ad      	movs	r3, #173	@ 0xad
 800bc3c:	009b      	lsls	r3, r3, #2
 800bc3e:	58d3      	ldr	r3, [r2, r3]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	1cfa      	adds	r2, r7, #3
 800bc44:	7811      	ldrb	r1, [r2, #0]
 800bc46:	687a      	ldr	r2, [r7, #4]
 800bc48:	0010      	movs	r0, r2
 800bc4a:	4798      	blx	r3
 800bc4c:	1e03      	subs	r3, r0, #0
 800bc4e:	d102      	bne.n	800bc56 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 800bc50:	193b      	adds	r3, r7, r4
 800bc52:	2200      	movs	r2, #0
 800bc54:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 800bc56:	230f      	movs	r3, #15
 800bc58:	18fb      	adds	r3, r7, r3
 800bc5a:	781b      	ldrb	r3, [r3, #0]
}
 800bc5c:	0018      	movs	r0, r3
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	b005      	add	sp, #20
 800bc62:	bd90      	pop	{r4, r7, pc}

0800bc64 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b082      	sub	sp, #8
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
 800bc6c:	000a      	movs	r2, r1
 800bc6e:	1cfb      	adds	r3, r7, #3
 800bc70:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800bc72:	687a      	ldr	r2, [r7, #4]
 800bc74:	23ad      	movs	r3, #173	@ 0xad
 800bc76:	009b      	lsls	r3, r3, #2
 800bc78:	58d3      	ldr	r3, [r2, r3]
 800bc7a:	685b      	ldr	r3, [r3, #4]
 800bc7c:	1cfa      	adds	r2, r7, #3
 800bc7e:	7811      	ldrb	r1, [r2, #0]
 800bc80:	687a      	ldr	r2, [r7, #4]
 800bc82:	0010      	movs	r0, r2
 800bc84:	4798      	blx	r3

  return USBD_OK;
 800bc86:	2300      	movs	r3, #0
}
 800bc88:	0018      	movs	r0, r3
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	b002      	add	sp, #8
 800bc8e:	bd80      	pop	{r7, pc}

0800bc90 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b082      	sub	sp, #8
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
 800bc98:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	22aa      	movs	r2, #170	@ 0xaa
 800bc9e:	0092      	lsls	r2, r2, #2
 800bca0:	4694      	mov	ip, r2
 800bca2:	4463      	add	r3, ip
 800bca4:	683a      	ldr	r2, [r7, #0]
 800bca6:	0011      	movs	r1, r2
 800bca8:	0018      	movs	r0, r3
 800bcaa:	f001 f810 	bl	800ccce <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bcae:	687a      	ldr	r2, [r7, #4]
 800bcb0:	23a5      	movs	r3, #165	@ 0xa5
 800bcb2:	009b      	lsls	r3, r3, #2
 800bcb4:	2101      	movs	r1, #1
 800bcb6:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	4a23      	ldr	r2, [pc, #140]	@ (800bd48 <USBD_LL_SetupStage+0xb8>)
 800bcbc:	5a9b      	ldrh	r3, [r3, r2]
 800bcbe:	0019      	movs	r1, r3
 800bcc0:	687a      	ldr	r2, [r7, #4]
 800bcc2:	23a6      	movs	r3, #166	@ 0xa6
 800bcc4:	009b      	lsls	r3, r3, #2
 800bcc6:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 800bcc8:	687a      	ldr	r2, [r7, #4]
 800bcca:	23aa      	movs	r3, #170	@ 0xaa
 800bccc:	009b      	lsls	r3, r3, #2
 800bcce:	5cd3      	ldrb	r3, [r2, r3]
 800bcd0:	001a      	movs	r2, r3
 800bcd2:	231f      	movs	r3, #31
 800bcd4:	4013      	ands	r3, r2
 800bcd6:	2b02      	cmp	r3, #2
 800bcd8:	d019      	beq.n	800bd0e <USBD_LL_SetupStage+0x7e>
 800bcda:	d822      	bhi.n	800bd22 <USBD_LL_SetupStage+0x92>
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d002      	beq.n	800bce6 <USBD_LL_SetupStage+0x56>
 800bce0:	2b01      	cmp	r3, #1
 800bce2:	d00a      	beq.n	800bcfa <USBD_LL_SetupStage+0x6a>
 800bce4:	e01d      	b.n	800bd22 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	22aa      	movs	r2, #170	@ 0xaa
 800bcea:	0092      	lsls	r2, r2, #2
 800bcec:	189a      	adds	r2, r3, r2
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	0011      	movs	r1, r2
 800bcf2:	0018      	movs	r0, r3
 800bcf4:	f000 fa10 	bl	800c118 <USBD_StdDevReq>
      break;
 800bcf8:	e020      	b.n	800bd3c <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	22aa      	movs	r2, #170	@ 0xaa
 800bcfe:	0092      	lsls	r2, r2, #2
 800bd00:	189a      	adds	r2, r3, r2
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	0011      	movs	r1, r2
 800bd06:	0018      	movs	r0, r3
 800bd08:	f000 fa78 	bl	800c1fc <USBD_StdItfReq>
      break;
 800bd0c:	e016      	b.n	800bd3c <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	22aa      	movs	r2, #170	@ 0xaa
 800bd12:	0092      	lsls	r2, r2, #2
 800bd14:	189a      	adds	r2, r3, r2
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	0011      	movs	r1, r2
 800bd1a:	0018      	movs	r0, r3
 800bd1c:	f000 fac5 	bl	800c2aa <USBD_StdEPReq>
      break;
 800bd20:	e00c      	b.n	800bd3c <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bd22:	687a      	ldr	r2, [r7, #4]
 800bd24:	23aa      	movs	r3, #170	@ 0xaa
 800bd26:	009b      	lsls	r3, r3, #2
 800bd28:	5cd3      	ldrb	r3, [r2, r3]
 800bd2a:	227f      	movs	r2, #127	@ 0x7f
 800bd2c:	4393      	bics	r3, r2
 800bd2e:	b2da      	uxtb	r2, r3
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	0011      	movs	r1, r2
 800bd34:	0018      	movs	r0, r3
 800bd36:	f001 fd04 	bl	800d742 <USBD_LL_StallEP>
      break;
 800bd3a:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 800bd3c:	2300      	movs	r3, #0
}
 800bd3e:	0018      	movs	r0, r3
 800bd40:	46bd      	mov	sp, r7
 800bd42:	b002      	add	sp, #8
 800bd44:	bd80      	pop	{r7, pc}
 800bd46:	46c0      	nop			@ (mov r8, r8)
 800bd48:	000002ae 	.word	0x000002ae

0800bd4c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b086      	sub	sp, #24
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	60f8      	str	r0, [r7, #12]
 800bd54:	607a      	str	r2, [r7, #4]
 800bd56:	200b      	movs	r0, #11
 800bd58:	183b      	adds	r3, r7, r0
 800bd5a:	1c0a      	adds	r2, r1, #0
 800bd5c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800bd5e:	183b      	adds	r3, r7, r0
 800bd60:	781b      	ldrb	r3, [r3, #0]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d154      	bne.n	800be10 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	3355      	adds	r3, #85	@ 0x55
 800bd6a:	33ff      	adds	r3, #255	@ 0xff
 800bd6c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bd6e:	68fa      	ldr	r2, [r7, #12]
 800bd70:	23a5      	movs	r3, #165	@ 0xa5
 800bd72:	009b      	lsls	r3, r3, #2
 800bd74:	58d3      	ldr	r3, [r2, r3]
 800bd76:	2b03      	cmp	r3, #3
 800bd78:	d139      	bne.n	800bdee <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 800bd7a:	697b      	ldr	r3, [r7, #20]
 800bd7c:	68da      	ldr	r2, [r3, #12]
 800bd7e:	697b      	ldr	r3, [r7, #20]
 800bd80:	691b      	ldr	r3, [r3, #16]
 800bd82:	429a      	cmp	r2, r3
 800bd84:	d919      	bls.n	800bdba <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 800bd86:	697b      	ldr	r3, [r7, #20]
 800bd88:	68da      	ldr	r2, [r3, #12]
 800bd8a:	697b      	ldr	r3, [r7, #20]
 800bd8c:	691b      	ldr	r3, [r3, #16]
 800bd8e:	1ad2      	subs	r2, r2, r3
 800bd90:	697b      	ldr	r3, [r7, #20]
 800bd92:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bd94:	697b      	ldr	r3, [r7, #20]
 800bd96:	68da      	ldr	r2, [r3, #12]
 800bd98:	697b      	ldr	r3, [r7, #20]
 800bd9a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800bd9c:	429a      	cmp	r2, r3
 800bd9e:	d203      	bcs.n	800bda8 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bda0:	697b      	ldr	r3, [r7, #20]
 800bda2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800bda4:	b29b      	uxth	r3, r3
 800bda6:	e002      	b.n	800bdae <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bda8:	697b      	ldr	r3, [r7, #20]
 800bdaa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800bdac:	b29b      	uxth	r3, r3
 800bdae:	6879      	ldr	r1, [r7, #4]
 800bdb0:	68f8      	ldr	r0, [r7, #12]
 800bdb2:	001a      	movs	r2, r3
 800bdb4:	f001 f898 	bl	800cee8 <USBD_CtlContinueRx>
 800bdb8:	e045      	b.n	800be46 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bdba:	68fa      	ldr	r2, [r7, #12]
 800bdbc:	23ad      	movs	r3, #173	@ 0xad
 800bdbe:	009b      	lsls	r3, r3, #2
 800bdc0:	58d3      	ldr	r3, [r2, r3]
 800bdc2:	691b      	ldr	r3, [r3, #16]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d00d      	beq.n	800bde4 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bdc8:	68fa      	ldr	r2, [r7, #12]
 800bdca:	23a7      	movs	r3, #167	@ 0xa7
 800bdcc:	009b      	lsls	r3, r3, #2
 800bdce:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bdd0:	2b03      	cmp	r3, #3
 800bdd2:	d107      	bne.n	800bde4 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800bdd4:	68fa      	ldr	r2, [r7, #12]
 800bdd6:	23ad      	movs	r3, #173	@ 0xad
 800bdd8:	009b      	lsls	r3, r3, #2
 800bdda:	58d3      	ldr	r3, [r2, r3]
 800bddc:	691b      	ldr	r3, [r3, #16]
 800bdde:	68fa      	ldr	r2, [r7, #12]
 800bde0:	0010      	movs	r0, r2
 800bde2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	0018      	movs	r0, r3
 800bde8:	f001 f891 	bl	800cf0e <USBD_CtlSendStatus>
 800bdec:	e02b      	b.n	800be46 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800bdee:	68fa      	ldr	r2, [r7, #12]
 800bdf0:	23a5      	movs	r3, #165	@ 0xa5
 800bdf2:	009b      	lsls	r3, r3, #2
 800bdf4:	58d3      	ldr	r3, [r2, r3]
 800bdf6:	2b05      	cmp	r3, #5
 800bdf8:	d125      	bne.n	800be46 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800bdfa:	68fa      	ldr	r2, [r7, #12]
 800bdfc:	23a5      	movs	r3, #165	@ 0xa5
 800bdfe:	009b      	lsls	r3, r3, #2
 800be00:	2100      	movs	r1, #0
 800be02:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	2100      	movs	r1, #0
 800be08:	0018      	movs	r0, r3
 800be0a:	f001 fc9a 	bl	800d742 <USBD_LL_StallEP>
 800be0e:	e01a      	b.n	800be46 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800be10:	68fa      	ldr	r2, [r7, #12]
 800be12:	23ad      	movs	r3, #173	@ 0xad
 800be14:	009b      	lsls	r3, r3, #2
 800be16:	58d3      	ldr	r3, [r2, r3]
 800be18:	699b      	ldr	r3, [r3, #24]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d011      	beq.n	800be42 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800be1e:	68fa      	ldr	r2, [r7, #12]
 800be20:	23a7      	movs	r3, #167	@ 0xa7
 800be22:	009b      	lsls	r3, r3, #2
 800be24:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 800be26:	2b03      	cmp	r3, #3
 800be28:	d10b      	bne.n	800be42 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800be2a:	68fa      	ldr	r2, [r7, #12]
 800be2c:	23ad      	movs	r3, #173	@ 0xad
 800be2e:	009b      	lsls	r3, r3, #2
 800be30:	58d3      	ldr	r3, [r2, r3]
 800be32:	699b      	ldr	r3, [r3, #24]
 800be34:	220b      	movs	r2, #11
 800be36:	18ba      	adds	r2, r7, r2
 800be38:	7811      	ldrb	r1, [r2, #0]
 800be3a:	68fa      	ldr	r2, [r7, #12]
 800be3c:	0010      	movs	r0, r2
 800be3e:	4798      	blx	r3
 800be40:	e001      	b.n	800be46 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800be42:	2302      	movs	r3, #2
 800be44:	e000      	b.n	800be48 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800be46:	2300      	movs	r3, #0
}
 800be48:	0018      	movs	r0, r3
 800be4a:	46bd      	mov	sp, r7
 800be4c:	b006      	add	sp, #24
 800be4e:	bd80      	pop	{r7, pc}

0800be50 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b086      	sub	sp, #24
 800be54:	af00      	add	r7, sp, #0
 800be56:	60f8      	str	r0, [r7, #12]
 800be58:	607a      	str	r2, [r7, #4]
 800be5a:	200b      	movs	r0, #11
 800be5c:	183b      	adds	r3, r7, r0
 800be5e:	1c0a      	adds	r2, r1, #0
 800be60:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800be62:	183b      	adds	r3, r7, r0
 800be64:	781b      	ldrb	r3, [r3, #0]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d000      	beq.n	800be6c <USBD_LL_DataInStage+0x1c>
 800be6a:	e08e      	b.n	800bf8a <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	3314      	adds	r3, #20
 800be70:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800be72:	68fa      	ldr	r2, [r7, #12]
 800be74:	23a5      	movs	r3, #165	@ 0xa5
 800be76:	009b      	lsls	r3, r3, #2
 800be78:	58d3      	ldr	r3, [r2, r3]
 800be7a:	2b02      	cmp	r3, #2
 800be7c:	d164      	bne.n	800bf48 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 800be7e:	697b      	ldr	r3, [r7, #20]
 800be80:	68da      	ldr	r2, [r3, #12]
 800be82:	697b      	ldr	r3, [r7, #20]
 800be84:	691b      	ldr	r3, [r3, #16]
 800be86:	429a      	cmp	r2, r3
 800be88:	d915      	bls.n	800beb6 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800be8a:	697b      	ldr	r3, [r7, #20]
 800be8c:	68da      	ldr	r2, [r3, #12]
 800be8e:	697b      	ldr	r3, [r7, #20]
 800be90:	691b      	ldr	r3, [r3, #16]
 800be92:	1ad2      	subs	r2, r2, r3
 800be94:	697b      	ldr	r3, [r7, #20]
 800be96:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800be98:	697b      	ldr	r3, [r7, #20]
 800be9a:	68db      	ldr	r3, [r3, #12]
 800be9c:	b29a      	uxth	r2, r3
 800be9e:	6879      	ldr	r1, [r7, #4]
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	0018      	movs	r0, r3
 800bea4:	f000 ffe9 	bl	800ce7a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bea8:	68f8      	ldr	r0, [r7, #12]
 800beaa:	2300      	movs	r3, #0
 800beac:	2200      	movs	r2, #0
 800beae:	2100      	movs	r1, #0
 800beb0:	f001 fd30 	bl	800d914 <USBD_LL_PrepareReceive>
 800beb4:	e059      	b.n	800bf6a <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800beb6:	697b      	ldr	r3, [r7, #20]
 800beb8:	689a      	ldr	r2, [r3, #8]
 800beba:	697b      	ldr	r3, [r7, #20]
 800bebc:	691b      	ldr	r3, [r3, #16]
 800bebe:	0019      	movs	r1, r3
 800bec0:	0010      	movs	r0, r2
 800bec2:	f7f4 f9a7 	bl	8000214 <__aeabi_uidivmod>
 800bec6:	1e0b      	subs	r3, r1, #0
 800bec8:	d11f      	bne.n	800bf0a <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800beca:	697b      	ldr	r3, [r7, #20]
 800becc:	689a      	ldr	r2, [r3, #8]
 800bece:	697b      	ldr	r3, [r7, #20]
 800bed0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800bed2:	429a      	cmp	r2, r3
 800bed4:	d319      	bcc.n	800bf0a <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800bed6:	697b      	ldr	r3, [r7, #20]
 800bed8:	689a      	ldr	r2, [r3, #8]
 800beda:	68f9      	ldr	r1, [r7, #12]
 800bedc:	23a6      	movs	r3, #166	@ 0xa6
 800bede:	009b      	lsls	r3, r3, #2
 800bee0:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800bee2:	429a      	cmp	r2, r3
 800bee4:	d211      	bcs.n	800bf0a <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	2200      	movs	r2, #0
 800beea:	2100      	movs	r1, #0
 800beec:	0018      	movs	r0, r3
 800beee:	f000 ffc4 	bl	800ce7a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bef2:	68fa      	ldr	r2, [r7, #12]
 800bef4:	23a6      	movs	r3, #166	@ 0xa6
 800bef6:	009b      	lsls	r3, r3, #2
 800bef8:	2100      	movs	r1, #0
 800befa:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800befc:	68f8      	ldr	r0, [r7, #12]
 800befe:	2300      	movs	r3, #0
 800bf00:	2200      	movs	r2, #0
 800bf02:	2100      	movs	r1, #0
 800bf04:	f001 fd06 	bl	800d914 <USBD_LL_PrepareReceive>
 800bf08:	e02f      	b.n	800bf6a <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bf0a:	68fa      	ldr	r2, [r7, #12]
 800bf0c:	23ad      	movs	r3, #173	@ 0xad
 800bf0e:	009b      	lsls	r3, r3, #2
 800bf10:	58d3      	ldr	r3, [r2, r3]
 800bf12:	68db      	ldr	r3, [r3, #12]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d00d      	beq.n	800bf34 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bf18:	68fa      	ldr	r2, [r7, #12]
 800bf1a:	23a7      	movs	r3, #167	@ 0xa7
 800bf1c:	009b      	lsls	r3, r3, #2
 800bf1e:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bf20:	2b03      	cmp	r3, #3
 800bf22:	d107      	bne.n	800bf34 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800bf24:	68fa      	ldr	r2, [r7, #12]
 800bf26:	23ad      	movs	r3, #173	@ 0xad
 800bf28:	009b      	lsls	r3, r3, #2
 800bf2a:	58d3      	ldr	r3, [r2, r3]
 800bf2c:	68db      	ldr	r3, [r3, #12]
 800bf2e:	68fa      	ldr	r2, [r7, #12]
 800bf30:	0010      	movs	r0, r2
 800bf32:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	2180      	movs	r1, #128	@ 0x80
 800bf38:	0018      	movs	r0, r3
 800bf3a:	f001 fc02 	bl	800d742 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	0018      	movs	r0, r3
 800bf42:	f000 fff8 	bl	800cf36 <USBD_CtlReceiveStatus>
 800bf46:	e010      	b.n	800bf6a <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800bf48:	68fa      	ldr	r2, [r7, #12]
 800bf4a:	23a5      	movs	r3, #165	@ 0xa5
 800bf4c:	009b      	lsls	r3, r3, #2
 800bf4e:	58d3      	ldr	r3, [r2, r3]
 800bf50:	2b04      	cmp	r3, #4
 800bf52:	d005      	beq.n	800bf60 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800bf54:	68fa      	ldr	r2, [r7, #12]
 800bf56:	23a5      	movs	r3, #165	@ 0xa5
 800bf58:	009b      	lsls	r3, r3, #2
 800bf5a:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d104      	bne.n	800bf6a <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	2180      	movs	r1, #128	@ 0x80
 800bf64:	0018      	movs	r0, r3
 800bf66:	f001 fbec 	bl	800d742 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800bf6a:	68fa      	ldr	r2, [r7, #12]
 800bf6c:	23a8      	movs	r3, #168	@ 0xa8
 800bf6e:	009b      	lsls	r3, r3, #2
 800bf70:	5cd3      	ldrb	r3, [r2, r3]
 800bf72:	2b01      	cmp	r3, #1
 800bf74:	d124      	bne.n	800bfc0 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	0018      	movs	r0, r3
 800bf7a:	f7ff fe43 	bl	800bc04 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bf7e:	68fa      	ldr	r2, [r7, #12]
 800bf80:	23a8      	movs	r3, #168	@ 0xa8
 800bf82:	009b      	lsls	r3, r3, #2
 800bf84:	2100      	movs	r1, #0
 800bf86:	54d1      	strb	r1, [r2, r3]
 800bf88:	e01a      	b.n	800bfc0 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800bf8a:	68fa      	ldr	r2, [r7, #12]
 800bf8c:	23ad      	movs	r3, #173	@ 0xad
 800bf8e:	009b      	lsls	r3, r3, #2
 800bf90:	58d3      	ldr	r3, [r2, r3]
 800bf92:	695b      	ldr	r3, [r3, #20]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d011      	beq.n	800bfbc <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bf98:	68fa      	ldr	r2, [r7, #12]
 800bf9a:	23a7      	movs	r3, #167	@ 0xa7
 800bf9c:	009b      	lsls	r3, r3, #2
 800bf9e:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 800bfa0:	2b03      	cmp	r3, #3
 800bfa2:	d10b      	bne.n	800bfbc <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800bfa4:	68fa      	ldr	r2, [r7, #12]
 800bfa6:	23ad      	movs	r3, #173	@ 0xad
 800bfa8:	009b      	lsls	r3, r3, #2
 800bfaa:	58d3      	ldr	r3, [r2, r3]
 800bfac:	695b      	ldr	r3, [r3, #20]
 800bfae:	220b      	movs	r2, #11
 800bfb0:	18ba      	adds	r2, r7, r2
 800bfb2:	7811      	ldrb	r1, [r2, #0]
 800bfb4:	68fa      	ldr	r2, [r7, #12]
 800bfb6:	0010      	movs	r0, r2
 800bfb8:	4798      	blx	r3
 800bfba:	e001      	b.n	800bfc0 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bfbc:	2302      	movs	r3, #2
 800bfbe:	e000      	b.n	800bfc2 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 800bfc0:	2300      	movs	r3, #0
}
 800bfc2:	0018      	movs	r0, r3
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	b006      	add	sp, #24
 800bfc8:	bd80      	pop	{r7, pc}

0800bfca <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bfca:	b580      	push	{r7, lr}
 800bfcc:	b082      	sub	sp, #8
 800bfce:	af00      	add	r7, sp, #0
 800bfd0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	2340      	movs	r3, #64	@ 0x40
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	2100      	movs	r1, #0
 800bfda:	f001 fb50 	bl	800d67e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bfde:	687a      	ldr	r2, [r7, #4]
 800bfe0:	23ac      	movs	r3, #172	@ 0xac
 800bfe2:	005b      	lsls	r3, r3, #1
 800bfe4:	2101      	movs	r1, #1
 800bfe6:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bfe8:	687a      	ldr	r2, [r7, #4]
 800bfea:	23b2      	movs	r3, #178	@ 0xb2
 800bfec:	005b      	lsls	r3, r3, #1
 800bfee:	2140      	movs	r1, #64	@ 0x40
 800bff0:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	2340      	movs	r3, #64	@ 0x40
 800bff6:	2200      	movs	r2, #0
 800bff8:	2180      	movs	r1, #128	@ 0x80
 800bffa:	f001 fb40 	bl	800d67e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	2201      	movs	r2, #1
 800c002:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2240      	movs	r2, #64	@ 0x40
 800c008:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c00a:	687a      	ldr	r2, [r7, #4]
 800c00c:	23a7      	movs	r3, #167	@ 0xa7
 800c00e:	009b      	lsls	r3, r3, #2
 800c010:	2101      	movs	r1, #1
 800c012:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800c014:	687a      	ldr	r2, [r7, #4]
 800c016:	23a5      	movs	r3, #165	@ 0xa5
 800c018:	009b      	lsls	r3, r3, #2
 800c01a:	2100      	movs	r1, #0
 800c01c:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2200      	movs	r2, #0
 800c022:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c024:	687a      	ldr	r2, [r7, #4]
 800c026:	23a9      	movs	r3, #169	@ 0xa9
 800c028:	009b      	lsls	r3, r3, #2
 800c02a:	2100      	movs	r1, #0
 800c02c:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800c02e:	687a      	ldr	r2, [r7, #4]
 800c030:	23ae      	movs	r3, #174	@ 0xae
 800c032:	009b      	lsls	r3, r3, #2
 800c034:	58d3      	ldr	r3, [r2, r3]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d00a      	beq.n	800c050 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c03a:	687a      	ldr	r2, [r7, #4]
 800c03c:	23ad      	movs	r3, #173	@ 0xad
 800c03e:	009b      	lsls	r3, r3, #2
 800c040:	58d3      	ldr	r3, [r2, r3]
 800c042:	685a      	ldr	r2, [r3, #4]
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	685b      	ldr	r3, [r3, #4]
 800c048:	b2d9      	uxtb	r1, r3
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	0018      	movs	r0, r3
 800c04e:	4790      	blx	r2
  }

  return USBD_OK;
 800c050:	2300      	movs	r3, #0
}
 800c052:	0018      	movs	r0, r3
 800c054:	46bd      	mov	sp, r7
 800c056:	b002      	add	sp, #8
 800c058:	bd80      	pop	{r7, pc}

0800c05a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c05a:	b580      	push	{r7, lr}
 800c05c:	b082      	sub	sp, #8
 800c05e:	af00      	add	r7, sp, #0
 800c060:	6078      	str	r0, [r7, #4]
 800c062:	000a      	movs	r2, r1
 800c064:	1cfb      	adds	r3, r7, #3
 800c066:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	1cfa      	adds	r2, r7, #3
 800c06c:	7812      	ldrb	r2, [r2, #0]
 800c06e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c070:	2300      	movs	r3, #0
}
 800c072:	0018      	movs	r0, r3
 800c074:	46bd      	mov	sp, r7
 800c076:	b002      	add	sp, #8
 800c078:	bd80      	pop	{r7, pc}
	...

0800c07c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b082      	sub	sp, #8
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800c084:	687a      	ldr	r2, [r7, #4]
 800c086:	23a7      	movs	r3, #167	@ 0xa7
 800c088:	009b      	lsls	r3, r3, #2
 800c08a:	5cd1      	ldrb	r1, [r2, r3]
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	4a06      	ldr	r2, [pc, #24]	@ (800c0a8 <USBD_LL_Suspend+0x2c>)
 800c090:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800c092:	687a      	ldr	r2, [r7, #4]
 800c094:	23a7      	movs	r3, #167	@ 0xa7
 800c096:	009b      	lsls	r3, r3, #2
 800c098:	2104      	movs	r1, #4
 800c09a:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 800c09c:	2300      	movs	r3, #0
}
 800c09e:	0018      	movs	r0, r3
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	b002      	add	sp, #8
 800c0a4:	bd80      	pop	{r7, pc}
 800c0a6:	46c0      	nop			@ (mov r8, r8)
 800c0a8:	0000029d 	.word	0x0000029d

0800c0ac <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b082      	sub	sp, #8
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c0b4:	687a      	ldr	r2, [r7, #4]
 800c0b6:	23a7      	movs	r3, #167	@ 0xa7
 800c0b8:	009b      	lsls	r3, r3, #2
 800c0ba:	5cd3      	ldrb	r3, [r2, r3]
 800c0bc:	2b04      	cmp	r3, #4
 800c0be:	d106      	bne.n	800c0ce <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	4a05      	ldr	r2, [pc, #20]	@ (800c0d8 <USBD_LL_Resume+0x2c>)
 800c0c4:	5c99      	ldrb	r1, [r3, r2]
 800c0c6:	687a      	ldr	r2, [r7, #4]
 800c0c8:	23a7      	movs	r3, #167	@ 0xa7
 800c0ca:	009b      	lsls	r3, r3, #2
 800c0cc:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800c0ce:	2300      	movs	r3, #0
}
 800c0d0:	0018      	movs	r0, r3
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	b002      	add	sp, #8
 800c0d6:	bd80      	pop	{r7, pc}
 800c0d8:	0000029d 	.word	0x0000029d

0800c0dc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b082      	sub	sp, #8
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0e4:	687a      	ldr	r2, [r7, #4]
 800c0e6:	23a7      	movs	r3, #167	@ 0xa7
 800c0e8:	009b      	lsls	r3, r3, #2
 800c0ea:	5cd3      	ldrb	r3, [r2, r3]
 800c0ec:	2b03      	cmp	r3, #3
 800c0ee:	d10e      	bne.n	800c10e <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 800c0f0:	687a      	ldr	r2, [r7, #4]
 800c0f2:	23ad      	movs	r3, #173	@ 0xad
 800c0f4:	009b      	lsls	r3, r3, #2
 800c0f6:	58d3      	ldr	r3, [r2, r3]
 800c0f8:	69db      	ldr	r3, [r3, #28]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d007      	beq.n	800c10e <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800c0fe:	687a      	ldr	r2, [r7, #4]
 800c100:	23ad      	movs	r3, #173	@ 0xad
 800c102:	009b      	lsls	r3, r3, #2
 800c104:	58d3      	ldr	r3, [r2, r3]
 800c106:	69db      	ldr	r3, [r3, #28]
 800c108:	687a      	ldr	r2, [r7, #4]
 800c10a:	0010      	movs	r0, r2
 800c10c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c10e:	2300      	movs	r3, #0
}
 800c110:	0018      	movs	r0, r3
 800c112:	46bd      	mov	sp, r7
 800c114:	b002      	add	sp, #8
 800c116:	bd80      	pop	{r7, pc}

0800c118 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b084      	sub	sp, #16
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
 800c120:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c122:	230f      	movs	r3, #15
 800c124:	18fb      	adds	r3, r7, r3
 800c126:	2200      	movs	r2, #0
 800c128:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	781b      	ldrb	r3, [r3, #0]
 800c12e:	001a      	movs	r2, r3
 800c130:	2360      	movs	r3, #96	@ 0x60
 800c132:	4013      	ands	r3, r2
 800c134:	2b40      	cmp	r3, #64	@ 0x40
 800c136:	d004      	beq.n	800c142 <USBD_StdDevReq+0x2a>
 800c138:	d84f      	bhi.n	800c1da <USBD_StdDevReq+0xc2>
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d00b      	beq.n	800c156 <USBD_StdDevReq+0x3e>
 800c13e:	2b20      	cmp	r3, #32
 800c140:	d14b      	bne.n	800c1da <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800c142:	687a      	ldr	r2, [r7, #4]
 800c144:	23ad      	movs	r3, #173	@ 0xad
 800c146:	009b      	lsls	r3, r3, #2
 800c148:	58d3      	ldr	r3, [r2, r3]
 800c14a:	689b      	ldr	r3, [r3, #8]
 800c14c:	6839      	ldr	r1, [r7, #0]
 800c14e:	687a      	ldr	r2, [r7, #4]
 800c150:	0010      	movs	r0, r2
 800c152:	4798      	blx	r3
      break;
 800c154:	e048      	b.n	800c1e8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	785b      	ldrb	r3, [r3, #1]
 800c15a:	2b09      	cmp	r3, #9
 800c15c:	d835      	bhi.n	800c1ca <USBD_StdDevReq+0xb2>
 800c15e:	009a      	lsls	r2, r3, #2
 800c160:	4b25      	ldr	r3, [pc, #148]	@ (800c1f8 <USBD_StdDevReq+0xe0>)
 800c162:	18d3      	adds	r3, r2, r3
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c168:	683a      	ldr	r2, [r7, #0]
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	0011      	movs	r1, r2
 800c16e:	0018      	movs	r0, r3
 800c170:	f000 fa52 	bl	800c618 <USBD_GetDescriptor>
          break;
 800c174:	e030      	b.n	800c1d8 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c176:	683a      	ldr	r2, [r7, #0]
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	0011      	movs	r1, r2
 800c17c:	0018      	movs	r0, r3
 800c17e:	f000 fbfd 	bl	800c97c <USBD_SetAddress>
          break;
 800c182:	e029      	b.n	800c1d8 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800c184:	683a      	ldr	r2, [r7, #0]
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	0011      	movs	r1, r2
 800c18a:	0018      	movs	r0, r3
 800c18c:	f000 fc4a 	bl	800ca24 <USBD_SetConfig>
          break;
 800c190:	e022      	b.n	800c1d8 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c192:	683a      	ldr	r2, [r7, #0]
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	0011      	movs	r1, r2
 800c198:	0018      	movs	r0, r3
 800c19a:	f000 fce7 	bl	800cb6c <USBD_GetConfig>
          break;
 800c19e:	e01b      	b.n	800c1d8 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c1a0:	683a      	ldr	r2, [r7, #0]
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	0011      	movs	r1, r2
 800c1a6:	0018      	movs	r0, r3
 800c1a8:	f000 fd1b 	bl	800cbe2 <USBD_GetStatus>
          break;
 800c1ac:	e014      	b.n	800c1d8 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c1ae:	683a      	ldr	r2, [r7, #0]
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	0011      	movs	r1, r2
 800c1b4:	0018      	movs	r0, r3
 800c1b6:	f000 fd4e 	bl	800cc56 <USBD_SetFeature>
          break;
 800c1ba:	e00d      	b.n	800c1d8 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c1bc:	683a      	ldr	r2, [r7, #0]
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	0011      	movs	r1, r2
 800c1c2:	0018      	movs	r0, r3
 800c1c4:	f000 fd5d 	bl	800cc82 <USBD_ClrFeature>
          break;
 800c1c8:	e006      	b.n	800c1d8 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c1ca:	683a      	ldr	r2, [r7, #0]
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	0011      	movs	r1, r2
 800c1d0:	0018      	movs	r0, r3
 800c1d2:	f000 fdb4 	bl	800cd3e <USBD_CtlError>
          break;
 800c1d6:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800c1d8:	e006      	b.n	800c1e8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800c1da:	683a      	ldr	r2, [r7, #0]
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	0011      	movs	r1, r2
 800c1e0:	0018      	movs	r0, r3
 800c1e2:	f000 fdac 	bl	800cd3e <USBD_CtlError>
      break;
 800c1e6:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800c1e8:	230f      	movs	r3, #15
 800c1ea:	18fb      	adds	r3, r7, r3
 800c1ec:	781b      	ldrb	r3, [r3, #0]
}
 800c1ee:	0018      	movs	r0, r3
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	b004      	add	sp, #16
 800c1f4:	bd80      	pop	{r7, pc}
 800c1f6:	46c0      	nop			@ (mov r8, r8)
 800c1f8:	0800df64 	.word	0x0800df64

0800c1fc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800c1fc:	b5b0      	push	{r4, r5, r7, lr}
 800c1fe:	b084      	sub	sp, #16
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
 800c204:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c206:	230f      	movs	r3, #15
 800c208:	18fb      	adds	r3, r7, r3
 800c20a:	2200      	movs	r2, #0
 800c20c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	781b      	ldrb	r3, [r3, #0]
 800c212:	001a      	movs	r2, r3
 800c214:	2360      	movs	r3, #96	@ 0x60
 800c216:	4013      	ands	r3, r2
 800c218:	2b40      	cmp	r3, #64	@ 0x40
 800c21a:	d004      	beq.n	800c226 <USBD_StdItfReq+0x2a>
 800c21c:	d839      	bhi.n	800c292 <USBD_StdItfReq+0x96>
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d001      	beq.n	800c226 <USBD_StdItfReq+0x2a>
 800c222:	2b20      	cmp	r3, #32
 800c224:	d135      	bne.n	800c292 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c226:	687a      	ldr	r2, [r7, #4]
 800c228:	23a7      	movs	r3, #167	@ 0xa7
 800c22a:	009b      	lsls	r3, r3, #2
 800c22c:	5cd3      	ldrb	r3, [r2, r3]
 800c22e:	3b01      	subs	r3, #1
 800c230:	2b02      	cmp	r3, #2
 800c232:	d825      	bhi.n	800c280 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	889b      	ldrh	r3, [r3, #4]
 800c238:	b2db      	uxtb	r3, r3
 800c23a:	2b01      	cmp	r3, #1
 800c23c:	d819      	bhi.n	800c272 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c23e:	687a      	ldr	r2, [r7, #4]
 800c240:	23ad      	movs	r3, #173	@ 0xad
 800c242:	009b      	lsls	r3, r3, #2
 800c244:	58d3      	ldr	r3, [r2, r3]
 800c246:	689b      	ldr	r3, [r3, #8]
 800c248:	250f      	movs	r5, #15
 800c24a:	197c      	adds	r4, r7, r5
 800c24c:	6839      	ldr	r1, [r7, #0]
 800c24e:	687a      	ldr	r2, [r7, #4]
 800c250:	0010      	movs	r0, r2
 800c252:	4798      	blx	r3
 800c254:	0003      	movs	r3, r0
 800c256:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	88db      	ldrh	r3, [r3, #6]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d116      	bne.n	800c28e <USBD_StdItfReq+0x92>
 800c260:	197b      	adds	r3, r7, r5
 800c262:	781b      	ldrb	r3, [r3, #0]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d112      	bne.n	800c28e <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	0018      	movs	r0, r3
 800c26c:	f000 fe4f 	bl	800cf0e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c270:	e00d      	b.n	800c28e <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800c272:	683a      	ldr	r2, [r7, #0]
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	0011      	movs	r1, r2
 800c278:	0018      	movs	r0, r3
 800c27a:	f000 fd60 	bl	800cd3e <USBD_CtlError>
          break;
 800c27e:	e006      	b.n	800c28e <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800c280:	683a      	ldr	r2, [r7, #0]
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	0011      	movs	r1, r2
 800c286:	0018      	movs	r0, r3
 800c288:	f000 fd59 	bl	800cd3e <USBD_CtlError>
          break;
 800c28c:	e000      	b.n	800c290 <USBD_StdItfReq+0x94>
          break;
 800c28e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800c290:	e006      	b.n	800c2a0 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800c292:	683a      	ldr	r2, [r7, #0]
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	0011      	movs	r1, r2
 800c298:	0018      	movs	r0, r3
 800c29a:	f000 fd50 	bl	800cd3e <USBD_CtlError>
      break;
 800c29e:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 800c2a0:	2300      	movs	r3, #0
}
 800c2a2:	0018      	movs	r0, r3
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	b004      	add	sp, #16
 800c2a8:	bdb0      	pop	{r4, r5, r7, pc}

0800c2aa <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800c2aa:	b5b0      	push	{r4, r5, r7, lr}
 800c2ac:	b084      	sub	sp, #16
 800c2ae:	af00      	add	r7, sp, #0
 800c2b0:	6078      	str	r0, [r7, #4]
 800c2b2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c2b4:	230f      	movs	r3, #15
 800c2b6:	18fb      	adds	r3, r7, r3
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	889a      	ldrh	r2, [r3, #4]
 800c2c0:	230e      	movs	r3, #14
 800c2c2:	18fb      	adds	r3, r7, r3
 800c2c4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	781b      	ldrb	r3, [r3, #0]
 800c2ca:	001a      	movs	r2, r3
 800c2cc:	2360      	movs	r3, #96	@ 0x60
 800c2ce:	4013      	ands	r3, r2
 800c2d0:	2b40      	cmp	r3, #64	@ 0x40
 800c2d2:	d006      	beq.n	800c2e2 <USBD_StdEPReq+0x38>
 800c2d4:	d900      	bls.n	800c2d8 <USBD_StdEPReq+0x2e>
 800c2d6:	e190      	b.n	800c5fa <USBD_StdEPReq+0x350>
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d00c      	beq.n	800c2f6 <USBD_StdEPReq+0x4c>
 800c2dc:	2b20      	cmp	r3, #32
 800c2de:	d000      	beq.n	800c2e2 <USBD_StdEPReq+0x38>
 800c2e0:	e18b      	b.n	800c5fa <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800c2e2:	687a      	ldr	r2, [r7, #4]
 800c2e4:	23ad      	movs	r3, #173	@ 0xad
 800c2e6:	009b      	lsls	r3, r3, #2
 800c2e8:	58d3      	ldr	r3, [r2, r3]
 800c2ea:	689b      	ldr	r3, [r3, #8]
 800c2ec:	6839      	ldr	r1, [r7, #0]
 800c2ee:	687a      	ldr	r2, [r7, #4]
 800c2f0:	0010      	movs	r0, r2
 800c2f2:	4798      	blx	r3
      break;
 800c2f4:	e188      	b.n	800c608 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	781b      	ldrb	r3, [r3, #0]
 800c2fa:	001a      	movs	r2, r3
 800c2fc:	2360      	movs	r3, #96	@ 0x60
 800c2fe:	4013      	ands	r3, r2
 800c300:	2b20      	cmp	r3, #32
 800c302:	d10f      	bne.n	800c324 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c304:	687a      	ldr	r2, [r7, #4]
 800c306:	23ad      	movs	r3, #173	@ 0xad
 800c308:	009b      	lsls	r3, r3, #2
 800c30a:	58d3      	ldr	r3, [r2, r3]
 800c30c:	689b      	ldr	r3, [r3, #8]
 800c30e:	250f      	movs	r5, #15
 800c310:	197c      	adds	r4, r7, r5
 800c312:	6839      	ldr	r1, [r7, #0]
 800c314:	687a      	ldr	r2, [r7, #4]
 800c316:	0010      	movs	r0, r2
 800c318:	4798      	blx	r3
 800c31a:	0003      	movs	r3, r0
 800c31c:	7023      	strb	r3, [r4, #0]

        return ret;
 800c31e:	197b      	adds	r3, r7, r5
 800c320:	781b      	ldrb	r3, [r3, #0]
 800c322:	e174      	b.n	800c60e <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	785b      	ldrb	r3, [r3, #1]
 800c328:	2b03      	cmp	r3, #3
 800c32a:	d007      	beq.n	800c33c <USBD_StdEPReq+0x92>
 800c32c:	dd00      	ble.n	800c330 <USBD_StdEPReq+0x86>
 800c32e:	e15c      	b.n	800c5ea <USBD_StdEPReq+0x340>
 800c330:	2b00      	cmp	r3, #0
 800c332:	d100      	bne.n	800c336 <USBD_StdEPReq+0x8c>
 800c334:	e092      	b.n	800c45c <USBD_StdEPReq+0x1b2>
 800c336:	2b01      	cmp	r3, #1
 800c338:	d04b      	beq.n	800c3d2 <USBD_StdEPReq+0x128>
 800c33a:	e156      	b.n	800c5ea <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c33c:	687a      	ldr	r2, [r7, #4]
 800c33e:	23a7      	movs	r3, #167	@ 0xa7
 800c340:	009b      	lsls	r3, r3, #2
 800c342:	5cd3      	ldrb	r3, [r2, r3]
 800c344:	2b02      	cmp	r3, #2
 800c346:	d002      	beq.n	800c34e <USBD_StdEPReq+0xa4>
 800c348:	2b03      	cmp	r3, #3
 800c34a:	d01d      	beq.n	800c388 <USBD_StdEPReq+0xde>
 800c34c:	e039      	b.n	800c3c2 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c34e:	220e      	movs	r2, #14
 800c350:	18bb      	adds	r3, r7, r2
 800c352:	781b      	ldrb	r3, [r3, #0]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d010      	beq.n	800c37a <USBD_StdEPReq+0xd0>
 800c358:	18bb      	adds	r3, r7, r2
 800c35a:	781b      	ldrb	r3, [r3, #0]
 800c35c:	2b80      	cmp	r3, #128	@ 0x80
 800c35e:	d00c      	beq.n	800c37a <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c360:	18bb      	adds	r3, r7, r2
 800c362:	781a      	ldrb	r2, [r3, #0]
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	0011      	movs	r1, r2
 800c368:	0018      	movs	r0, r3
 800c36a:	f001 f9ea 	bl	800d742 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2180      	movs	r1, #128	@ 0x80
 800c372:	0018      	movs	r0, r3
 800c374:	f001 f9e5 	bl	800d742 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c378:	e02a      	b.n	800c3d0 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800c37a:	683a      	ldr	r2, [r7, #0]
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	0011      	movs	r1, r2
 800c380:	0018      	movs	r0, r3
 800c382:	f000 fcdc 	bl	800cd3e <USBD_CtlError>
              break;
 800c386:	e023      	b.n	800c3d0 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	885b      	ldrh	r3, [r3, #2]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d113      	bne.n	800c3b8 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800c390:	220e      	movs	r2, #14
 800c392:	18bb      	adds	r3, r7, r2
 800c394:	781b      	ldrb	r3, [r3, #0]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d00e      	beq.n	800c3b8 <USBD_StdEPReq+0x10e>
 800c39a:	18bb      	adds	r3, r7, r2
 800c39c:	781b      	ldrb	r3, [r3, #0]
 800c39e:	2b80      	cmp	r3, #128	@ 0x80
 800c3a0:	d00a      	beq.n	800c3b8 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	88db      	ldrh	r3, [r3, #6]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d106      	bne.n	800c3b8 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800c3aa:	18bb      	adds	r3, r7, r2
 800c3ac:	781a      	ldrb	r2, [r3, #0]
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	0011      	movs	r1, r2
 800c3b2:	0018      	movs	r0, r3
 800c3b4:	f001 f9c5 	bl	800d742 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	0018      	movs	r0, r3
 800c3bc:	f000 fda7 	bl	800cf0e <USBD_CtlSendStatus>

              break;
 800c3c0:	e006      	b.n	800c3d0 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800c3c2:	683a      	ldr	r2, [r7, #0]
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	0011      	movs	r1, r2
 800c3c8:	0018      	movs	r0, r3
 800c3ca:	f000 fcb8 	bl	800cd3e <USBD_CtlError>
              break;
 800c3ce:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800c3d0:	e112      	b.n	800c5f8 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c3d2:	687a      	ldr	r2, [r7, #4]
 800c3d4:	23a7      	movs	r3, #167	@ 0xa7
 800c3d6:	009b      	lsls	r3, r3, #2
 800c3d8:	5cd3      	ldrb	r3, [r2, r3]
 800c3da:	2b02      	cmp	r3, #2
 800c3dc:	d002      	beq.n	800c3e4 <USBD_StdEPReq+0x13a>
 800c3de:	2b03      	cmp	r3, #3
 800c3e0:	d01d      	beq.n	800c41e <USBD_StdEPReq+0x174>
 800c3e2:	e032      	b.n	800c44a <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c3e4:	220e      	movs	r2, #14
 800c3e6:	18bb      	adds	r3, r7, r2
 800c3e8:	781b      	ldrb	r3, [r3, #0]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d010      	beq.n	800c410 <USBD_StdEPReq+0x166>
 800c3ee:	18bb      	adds	r3, r7, r2
 800c3f0:	781b      	ldrb	r3, [r3, #0]
 800c3f2:	2b80      	cmp	r3, #128	@ 0x80
 800c3f4:	d00c      	beq.n	800c410 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c3f6:	18bb      	adds	r3, r7, r2
 800c3f8:	781a      	ldrb	r2, [r3, #0]
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	0011      	movs	r1, r2
 800c3fe:	0018      	movs	r0, r3
 800c400:	f001 f99f 	bl	800d742 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2180      	movs	r1, #128	@ 0x80
 800c408:	0018      	movs	r0, r3
 800c40a:	f001 f99a 	bl	800d742 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c40e:	e024      	b.n	800c45a <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 800c410:	683a      	ldr	r2, [r7, #0]
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	0011      	movs	r1, r2
 800c416:	0018      	movs	r0, r3
 800c418:	f000 fc91 	bl	800cd3e <USBD_CtlError>
              break;
 800c41c:	e01d      	b.n	800c45a <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	885b      	ldrh	r3, [r3, #2]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d118      	bne.n	800c458 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c426:	210e      	movs	r1, #14
 800c428:	187b      	adds	r3, r7, r1
 800c42a:	781b      	ldrb	r3, [r3, #0]
 800c42c:	227f      	movs	r2, #127	@ 0x7f
 800c42e:	4013      	ands	r3, r2
 800c430:	d006      	beq.n	800c440 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800c432:	187b      	adds	r3, r7, r1
 800c434:	781a      	ldrb	r2, [r3, #0]
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	0011      	movs	r1, r2
 800c43a:	0018      	movs	r0, r3
 800c43c:	f001 f9ac 	bl	800d798 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	0018      	movs	r0, r3
 800c444:	f000 fd63 	bl	800cf0e <USBD_CtlSendStatus>
              }
              break;
 800c448:	e006      	b.n	800c458 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800c44a:	683a      	ldr	r2, [r7, #0]
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	0011      	movs	r1, r2
 800c450:	0018      	movs	r0, r3
 800c452:	f000 fc74 	bl	800cd3e <USBD_CtlError>
              break;
 800c456:	e000      	b.n	800c45a <USBD_StdEPReq+0x1b0>
              break;
 800c458:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800c45a:	e0cd      	b.n	800c5f8 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c45c:	687a      	ldr	r2, [r7, #4]
 800c45e:	23a7      	movs	r3, #167	@ 0xa7
 800c460:	009b      	lsls	r3, r3, #2
 800c462:	5cd3      	ldrb	r3, [r2, r3]
 800c464:	2b02      	cmp	r3, #2
 800c466:	d002      	beq.n	800c46e <USBD_StdEPReq+0x1c4>
 800c468:	2b03      	cmp	r3, #3
 800c46a:	d03c      	beq.n	800c4e6 <USBD_StdEPReq+0x23c>
 800c46c:	e0b5      	b.n	800c5da <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c46e:	220e      	movs	r2, #14
 800c470:	18bb      	adds	r3, r7, r2
 800c472:	781b      	ldrb	r3, [r3, #0]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d00a      	beq.n	800c48e <USBD_StdEPReq+0x1e4>
 800c478:	18bb      	adds	r3, r7, r2
 800c47a:	781b      	ldrb	r3, [r3, #0]
 800c47c:	2b80      	cmp	r3, #128	@ 0x80
 800c47e:	d006      	beq.n	800c48e <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 800c480:	683a      	ldr	r2, [r7, #0]
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	0011      	movs	r1, r2
 800c486:	0018      	movs	r0, r3
 800c488:	f000 fc59 	bl	800cd3e <USBD_CtlError>
                break;
 800c48c:	e0ac      	b.n	800c5e8 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c48e:	220e      	movs	r2, #14
 800c490:	18bb      	adds	r3, r7, r2
 800c492:	781b      	ldrb	r3, [r3, #0]
 800c494:	b25b      	sxtb	r3, r3
 800c496:	2b00      	cmp	r3, #0
 800c498:	da0c      	bge.n	800c4b4 <USBD_StdEPReq+0x20a>
 800c49a:	18bb      	adds	r3, r7, r2
 800c49c:	781b      	ldrb	r3, [r3, #0]
 800c49e:	227f      	movs	r2, #127	@ 0x7f
 800c4a0:	401a      	ands	r2, r3
 800c4a2:	0013      	movs	r3, r2
 800c4a4:	009b      	lsls	r3, r3, #2
 800c4a6:	189b      	adds	r3, r3, r2
 800c4a8:	009b      	lsls	r3, r3, #2
 800c4aa:	3310      	adds	r3, #16
 800c4ac:	687a      	ldr	r2, [r7, #4]
 800c4ae:	18d3      	adds	r3, r2, r3
 800c4b0:	3304      	adds	r3, #4
 800c4b2:	e00d      	b.n	800c4d0 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c4b4:	230e      	movs	r3, #14
 800c4b6:	18fb      	adds	r3, r7, r3
 800c4b8:	781b      	ldrb	r3, [r3, #0]
 800c4ba:	227f      	movs	r2, #127	@ 0x7f
 800c4bc:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c4be:	0013      	movs	r3, r2
 800c4c0:	009b      	lsls	r3, r3, #2
 800c4c2:	189b      	adds	r3, r3, r2
 800c4c4:	009b      	lsls	r3, r3, #2
 800c4c6:	3351      	adds	r3, #81	@ 0x51
 800c4c8:	33ff      	adds	r3, #255	@ 0xff
 800c4ca:	687a      	ldr	r2, [r7, #4]
 800c4cc:	18d3      	adds	r3, r2, r3
 800c4ce:	3304      	adds	r3, #4
 800c4d0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c4d2:	68bb      	ldr	r3, [r7, #8]
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c4d8:	68b9      	ldr	r1, [r7, #8]
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2202      	movs	r2, #2
 800c4de:	0018      	movs	r0, r3
 800c4e0:	f000 fcab 	bl	800ce3a <USBD_CtlSendData>
              break;
 800c4e4:	e080      	b.n	800c5e8 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c4e6:	220e      	movs	r2, #14
 800c4e8:	18bb      	adds	r3, r7, r2
 800c4ea:	781b      	ldrb	r3, [r3, #0]
 800c4ec:	b25b      	sxtb	r3, r3
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	da14      	bge.n	800c51c <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c4f2:	18bb      	adds	r3, r7, r2
 800c4f4:	781b      	ldrb	r3, [r3, #0]
 800c4f6:	220f      	movs	r2, #15
 800c4f8:	401a      	ands	r2, r3
 800c4fa:	6879      	ldr	r1, [r7, #4]
 800c4fc:	0013      	movs	r3, r2
 800c4fe:	009b      	lsls	r3, r3, #2
 800c500:	189b      	adds	r3, r3, r2
 800c502:	009b      	lsls	r3, r3, #2
 800c504:	18cb      	adds	r3, r1, r3
 800c506:	3318      	adds	r3, #24
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d11e      	bne.n	800c54c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800c50e:	683a      	ldr	r2, [r7, #0]
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	0011      	movs	r1, r2
 800c514:	0018      	movs	r0, r3
 800c516:	f000 fc12 	bl	800cd3e <USBD_CtlError>
                  break;
 800c51a:	e065      	b.n	800c5e8 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c51c:	230e      	movs	r3, #14
 800c51e:	18fb      	adds	r3, r7, r3
 800c520:	781b      	ldrb	r3, [r3, #0]
 800c522:	220f      	movs	r2, #15
 800c524:	401a      	ands	r2, r3
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	23ac      	movs	r3, #172	@ 0xac
 800c52a:	0059      	lsls	r1, r3, #1
 800c52c:	0013      	movs	r3, r2
 800c52e:	009b      	lsls	r3, r3, #2
 800c530:	189b      	adds	r3, r3, r2
 800c532:	009b      	lsls	r3, r3, #2
 800c534:	18c3      	adds	r3, r0, r3
 800c536:	185b      	adds	r3, r3, r1
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d106      	bne.n	800c54c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800c53e:	683a      	ldr	r2, [r7, #0]
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	0011      	movs	r1, r2
 800c544:	0018      	movs	r0, r3
 800c546:	f000 fbfa 	bl	800cd3e <USBD_CtlError>
                  break;
 800c54a:	e04d      	b.n	800c5e8 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c54c:	220e      	movs	r2, #14
 800c54e:	18bb      	adds	r3, r7, r2
 800c550:	781b      	ldrb	r3, [r3, #0]
 800c552:	b25b      	sxtb	r3, r3
 800c554:	2b00      	cmp	r3, #0
 800c556:	da0c      	bge.n	800c572 <USBD_StdEPReq+0x2c8>
 800c558:	18bb      	adds	r3, r7, r2
 800c55a:	781b      	ldrb	r3, [r3, #0]
 800c55c:	227f      	movs	r2, #127	@ 0x7f
 800c55e:	401a      	ands	r2, r3
 800c560:	0013      	movs	r3, r2
 800c562:	009b      	lsls	r3, r3, #2
 800c564:	189b      	adds	r3, r3, r2
 800c566:	009b      	lsls	r3, r3, #2
 800c568:	3310      	adds	r3, #16
 800c56a:	687a      	ldr	r2, [r7, #4]
 800c56c:	18d3      	adds	r3, r2, r3
 800c56e:	3304      	adds	r3, #4
 800c570:	e00d      	b.n	800c58e <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c572:	230e      	movs	r3, #14
 800c574:	18fb      	adds	r3, r7, r3
 800c576:	781b      	ldrb	r3, [r3, #0]
 800c578:	227f      	movs	r2, #127	@ 0x7f
 800c57a:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c57c:	0013      	movs	r3, r2
 800c57e:	009b      	lsls	r3, r3, #2
 800c580:	189b      	adds	r3, r3, r2
 800c582:	009b      	lsls	r3, r3, #2
 800c584:	3351      	adds	r3, #81	@ 0x51
 800c586:	33ff      	adds	r3, #255	@ 0xff
 800c588:	687a      	ldr	r2, [r7, #4]
 800c58a:	18d3      	adds	r3, r2, r3
 800c58c:	3304      	adds	r3, #4
 800c58e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c590:	220e      	movs	r2, #14
 800c592:	18bb      	adds	r3, r7, r2
 800c594:	781b      	ldrb	r3, [r3, #0]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d003      	beq.n	800c5a2 <USBD_StdEPReq+0x2f8>
 800c59a:	18bb      	adds	r3, r7, r2
 800c59c:	781b      	ldrb	r3, [r3, #0]
 800c59e:	2b80      	cmp	r3, #128	@ 0x80
 800c5a0:	d103      	bne.n	800c5aa <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800c5a2:	68bb      	ldr	r3, [r7, #8]
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	601a      	str	r2, [r3, #0]
 800c5a8:	e010      	b.n	800c5cc <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800c5aa:	230e      	movs	r3, #14
 800c5ac:	18fb      	adds	r3, r7, r3
 800c5ae:	781a      	ldrb	r2, [r3, #0]
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	0011      	movs	r1, r2
 800c5b4:	0018      	movs	r0, r3
 800c5b6:	f001 f91a 	bl	800d7ee <USBD_LL_IsStallEP>
 800c5ba:	1e03      	subs	r3, r0, #0
 800c5bc:	d003      	beq.n	800c5c6 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800c5be:	68bb      	ldr	r3, [r7, #8]
 800c5c0:	2201      	movs	r2, #1
 800c5c2:	601a      	str	r2, [r3, #0]
 800c5c4:	e002      	b.n	800c5cc <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c5cc:	68b9      	ldr	r1, [r7, #8]
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2202      	movs	r2, #2
 800c5d2:	0018      	movs	r0, r3
 800c5d4:	f000 fc31 	bl	800ce3a <USBD_CtlSendData>
              break;
 800c5d8:	e006      	b.n	800c5e8 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800c5da:	683a      	ldr	r2, [r7, #0]
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	0011      	movs	r1, r2
 800c5e0:	0018      	movs	r0, r3
 800c5e2:	f000 fbac 	bl	800cd3e <USBD_CtlError>
              break;
 800c5e6:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800c5e8:	e006      	b.n	800c5f8 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800c5ea:	683a      	ldr	r2, [r7, #0]
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	0011      	movs	r1, r2
 800c5f0:	0018      	movs	r0, r3
 800c5f2:	f000 fba4 	bl	800cd3e <USBD_CtlError>
          break;
 800c5f6:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800c5f8:	e006      	b.n	800c608 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800c5fa:	683a      	ldr	r2, [r7, #0]
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	0011      	movs	r1, r2
 800c600:	0018      	movs	r0, r3
 800c602:	f000 fb9c 	bl	800cd3e <USBD_CtlError>
      break;
 800c606:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800c608:	230f      	movs	r3, #15
 800c60a:	18fb      	adds	r3, r7, r3
 800c60c:	781b      	ldrb	r3, [r3, #0]
}
 800c60e:	0018      	movs	r0, r3
 800c610:	46bd      	mov	sp, r7
 800c612:	b004      	add	sp, #16
 800c614:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800c618 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b084      	sub	sp, #16
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
 800c620:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c622:	2308      	movs	r3, #8
 800c624:	18fb      	adds	r3, r7, r3
 800c626:	2200      	movs	r2, #0
 800c628:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800c62a:	2300      	movs	r3, #0
 800c62c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c62e:	230b      	movs	r3, #11
 800c630:	18fb      	adds	r3, r7, r3
 800c632:	2200      	movs	r2, #0
 800c634:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	885b      	ldrh	r3, [r3, #2]
 800c63a:	0a1b      	lsrs	r3, r3, #8
 800c63c:	b29b      	uxth	r3, r3
 800c63e:	2b07      	cmp	r3, #7
 800c640:	d900      	bls.n	800c644 <USBD_GetDescriptor+0x2c>
 800c642:	e159      	b.n	800c8f8 <USBD_GetDescriptor+0x2e0>
 800c644:	009a      	lsls	r2, r3, #2
 800c646:	4bcb      	ldr	r3, [pc, #812]	@ (800c974 <USBD_GetDescriptor+0x35c>)
 800c648:	18d3      	adds	r3, r2, r3
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c64e:	687a      	ldr	r2, [r7, #4]
 800c650:	23ac      	movs	r3, #172	@ 0xac
 800c652:	009b      	lsls	r3, r3, #2
 800c654:	58d3      	ldr	r3, [r2, r3]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	687a      	ldr	r2, [r7, #4]
 800c65a:	7c12      	ldrb	r2, [r2, #16]
 800c65c:	2108      	movs	r1, #8
 800c65e:	1879      	adds	r1, r7, r1
 800c660:	0010      	movs	r0, r2
 800c662:	4798      	blx	r3
 800c664:	0003      	movs	r3, r0
 800c666:	60fb      	str	r3, [r7, #12]
      break;
 800c668:	e153      	b.n	800c912 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	7c1b      	ldrb	r3, [r3, #16]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d10f      	bne.n	800c692 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c672:	687a      	ldr	r2, [r7, #4]
 800c674:	23ad      	movs	r3, #173	@ 0xad
 800c676:	009b      	lsls	r3, r3, #2
 800c678:	58d3      	ldr	r3, [r2, r3]
 800c67a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c67c:	2208      	movs	r2, #8
 800c67e:	18ba      	adds	r2, r7, r2
 800c680:	0010      	movs	r0, r2
 800c682:	4798      	blx	r3
 800c684:	0003      	movs	r3, r0
 800c686:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	3301      	adds	r3, #1
 800c68c:	2202      	movs	r2, #2
 800c68e:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c690:	e13f      	b.n	800c912 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c692:	687a      	ldr	r2, [r7, #4]
 800c694:	23ad      	movs	r3, #173	@ 0xad
 800c696:	009b      	lsls	r3, r3, #2
 800c698:	58d3      	ldr	r3, [r2, r3]
 800c69a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c69c:	2208      	movs	r2, #8
 800c69e:	18ba      	adds	r2, r7, r2
 800c6a0:	0010      	movs	r0, r2
 800c6a2:	4798      	blx	r3
 800c6a4:	0003      	movs	r3, r0
 800c6a6:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	3301      	adds	r3, #1
 800c6ac:	2202      	movs	r2, #2
 800c6ae:	701a      	strb	r2, [r3, #0]
      break;
 800c6b0:	e12f      	b.n	800c912 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	885b      	ldrh	r3, [r3, #2]
 800c6b6:	b2db      	uxtb	r3, r3
 800c6b8:	2b05      	cmp	r3, #5
 800c6ba:	d900      	bls.n	800c6be <USBD_GetDescriptor+0xa6>
 800c6bc:	e0d0      	b.n	800c860 <USBD_GetDescriptor+0x248>
 800c6be:	009a      	lsls	r2, r3, #2
 800c6c0:	4bad      	ldr	r3, [pc, #692]	@ (800c978 <USBD_GetDescriptor+0x360>)
 800c6c2:	18d3      	adds	r3, r2, r3
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c6c8:	687a      	ldr	r2, [r7, #4]
 800c6ca:	23ac      	movs	r3, #172	@ 0xac
 800c6cc:	009b      	lsls	r3, r3, #2
 800c6ce:	58d3      	ldr	r3, [r2, r3]
 800c6d0:	685b      	ldr	r3, [r3, #4]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d00d      	beq.n	800c6f2 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c6d6:	687a      	ldr	r2, [r7, #4]
 800c6d8:	23ac      	movs	r3, #172	@ 0xac
 800c6da:	009b      	lsls	r3, r3, #2
 800c6dc:	58d3      	ldr	r3, [r2, r3]
 800c6de:	685b      	ldr	r3, [r3, #4]
 800c6e0:	687a      	ldr	r2, [r7, #4]
 800c6e2:	7c12      	ldrb	r2, [r2, #16]
 800c6e4:	2108      	movs	r1, #8
 800c6e6:	1879      	adds	r1, r7, r1
 800c6e8:	0010      	movs	r0, r2
 800c6ea:	4798      	blx	r3
 800c6ec:	0003      	movs	r3, r0
 800c6ee:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c6f0:	e0c3      	b.n	800c87a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800c6f2:	683a      	ldr	r2, [r7, #0]
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	0011      	movs	r1, r2
 800c6f8:	0018      	movs	r0, r3
 800c6fa:	f000 fb20 	bl	800cd3e <USBD_CtlError>
            err++;
 800c6fe:	210b      	movs	r1, #11
 800c700:	187b      	adds	r3, r7, r1
 800c702:	781a      	ldrb	r2, [r3, #0]
 800c704:	187b      	adds	r3, r7, r1
 800c706:	3201      	adds	r2, #1
 800c708:	701a      	strb	r2, [r3, #0]
          break;
 800c70a:	e0b6      	b.n	800c87a <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c70c:	687a      	ldr	r2, [r7, #4]
 800c70e:	23ac      	movs	r3, #172	@ 0xac
 800c710:	009b      	lsls	r3, r3, #2
 800c712:	58d3      	ldr	r3, [r2, r3]
 800c714:	689b      	ldr	r3, [r3, #8]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d00d      	beq.n	800c736 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c71a:	687a      	ldr	r2, [r7, #4]
 800c71c:	23ac      	movs	r3, #172	@ 0xac
 800c71e:	009b      	lsls	r3, r3, #2
 800c720:	58d3      	ldr	r3, [r2, r3]
 800c722:	689b      	ldr	r3, [r3, #8]
 800c724:	687a      	ldr	r2, [r7, #4]
 800c726:	7c12      	ldrb	r2, [r2, #16]
 800c728:	2108      	movs	r1, #8
 800c72a:	1879      	adds	r1, r7, r1
 800c72c:	0010      	movs	r0, r2
 800c72e:	4798      	blx	r3
 800c730:	0003      	movs	r3, r0
 800c732:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c734:	e0a1      	b.n	800c87a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800c736:	683a      	ldr	r2, [r7, #0]
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	0011      	movs	r1, r2
 800c73c:	0018      	movs	r0, r3
 800c73e:	f000 fafe 	bl	800cd3e <USBD_CtlError>
            err++;
 800c742:	210b      	movs	r1, #11
 800c744:	187b      	adds	r3, r7, r1
 800c746:	781a      	ldrb	r2, [r3, #0]
 800c748:	187b      	adds	r3, r7, r1
 800c74a:	3201      	adds	r2, #1
 800c74c:	701a      	strb	r2, [r3, #0]
          break;
 800c74e:	e094      	b.n	800c87a <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c750:	687a      	ldr	r2, [r7, #4]
 800c752:	23ac      	movs	r3, #172	@ 0xac
 800c754:	009b      	lsls	r3, r3, #2
 800c756:	58d3      	ldr	r3, [r2, r3]
 800c758:	68db      	ldr	r3, [r3, #12]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d00d      	beq.n	800c77a <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c75e:	687a      	ldr	r2, [r7, #4]
 800c760:	23ac      	movs	r3, #172	@ 0xac
 800c762:	009b      	lsls	r3, r3, #2
 800c764:	58d3      	ldr	r3, [r2, r3]
 800c766:	68db      	ldr	r3, [r3, #12]
 800c768:	687a      	ldr	r2, [r7, #4]
 800c76a:	7c12      	ldrb	r2, [r2, #16]
 800c76c:	2108      	movs	r1, #8
 800c76e:	1879      	adds	r1, r7, r1
 800c770:	0010      	movs	r0, r2
 800c772:	4798      	blx	r3
 800c774:	0003      	movs	r3, r0
 800c776:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c778:	e07f      	b.n	800c87a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800c77a:	683a      	ldr	r2, [r7, #0]
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	0011      	movs	r1, r2
 800c780:	0018      	movs	r0, r3
 800c782:	f000 fadc 	bl	800cd3e <USBD_CtlError>
            err++;
 800c786:	210b      	movs	r1, #11
 800c788:	187b      	adds	r3, r7, r1
 800c78a:	781a      	ldrb	r2, [r3, #0]
 800c78c:	187b      	adds	r3, r7, r1
 800c78e:	3201      	adds	r2, #1
 800c790:	701a      	strb	r2, [r3, #0]
          break;
 800c792:	e072      	b.n	800c87a <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c794:	687a      	ldr	r2, [r7, #4]
 800c796:	23ac      	movs	r3, #172	@ 0xac
 800c798:	009b      	lsls	r3, r3, #2
 800c79a:	58d3      	ldr	r3, [r2, r3]
 800c79c:	691b      	ldr	r3, [r3, #16]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d00d      	beq.n	800c7be <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c7a2:	687a      	ldr	r2, [r7, #4]
 800c7a4:	23ac      	movs	r3, #172	@ 0xac
 800c7a6:	009b      	lsls	r3, r3, #2
 800c7a8:	58d3      	ldr	r3, [r2, r3]
 800c7aa:	691b      	ldr	r3, [r3, #16]
 800c7ac:	687a      	ldr	r2, [r7, #4]
 800c7ae:	7c12      	ldrb	r2, [r2, #16]
 800c7b0:	2108      	movs	r1, #8
 800c7b2:	1879      	adds	r1, r7, r1
 800c7b4:	0010      	movs	r0, r2
 800c7b6:	4798      	blx	r3
 800c7b8:	0003      	movs	r3, r0
 800c7ba:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c7bc:	e05d      	b.n	800c87a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800c7be:	683a      	ldr	r2, [r7, #0]
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	0011      	movs	r1, r2
 800c7c4:	0018      	movs	r0, r3
 800c7c6:	f000 faba 	bl	800cd3e <USBD_CtlError>
            err++;
 800c7ca:	210b      	movs	r1, #11
 800c7cc:	187b      	adds	r3, r7, r1
 800c7ce:	781a      	ldrb	r2, [r3, #0]
 800c7d0:	187b      	adds	r3, r7, r1
 800c7d2:	3201      	adds	r2, #1
 800c7d4:	701a      	strb	r2, [r3, #0]
          break;
 800c7d6:	e050      	b.n	800c87a <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c7d8:	687a      	ldr	r2, [r7, #4]
 800c7da:	23ac      	movs	r3, #172	@ 0xac
 800c7dc:	009b      	lsls	r3, r3, #2
 800c7de:	58d3      	ldr	r3, [r2, r3]
 800c7e0:	695b      	ldr	r3, [r3, #20]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d00d      	beq.n	800c802 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c7e6:	687a      	ldr	r2, [r7, #4]
 800c7e8:	23ac      	movs	r3, #172	@ 0xac
 800c7ea:	009b      	lsls	r3, r3, #2
 800c7ec:	58d3      	ldr	r3, [r2, r3]
 800c7ee:	695b      	ldr	r3, [r3, #20]
 800c7f0:	687a      	ldr	r2, [r7, #4]
 800c7f2:	7c12      	ldrb	r2, [r2, #16]
 800c7f4:	2108      	movs	r1, #8
 800c7f6:	1879      	adds	r1, r7, r1
 800c7f8:	0010      	movs	r0, r2
 800c7fa:	4798      	blx	r3
 800c7fc:	0003      	movs	r3, r0
 800c7fe:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c800:	e03b      	b.n	800c87a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800c802:	683a      	ldr	r2, [r7, #0]
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	0011      	movs	r1, r2
 800c808:	0018      	movs	r0, r3
 800c80a:	f000 fa98 	bl	800cd3e <USBD_CtlError>
            err++;
 800c80e:	210b      	movs	r1, #11
 800c810:	187b      	adds	r3, r7, r1
 800c812:	781a      	ldrb	r2, [r3, #0]
 800c814:	187b      	adds	r3, r7, r1
 800c816:	3201      	adds	r2, #1
 800c818:	701a      	strb	r2, [r3, #0]
          break;
 800c81a:	e02e      	b.n	800c87a <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c81c:	687a      	ldr	r2, [r7, #4]
 800c81e:	23ac      	movs	r3, #172	@ 0xac
 800c820:	009b      	lsls	r3, r3, #2
 800c822:	58d3      	ldr	r3, [r2, r3]
 800c824:	699b      	ldr	r3, [r3, #24]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d00d      	beq.n	800c846 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c82a:	687a      	ldr	r2, [r7, #4]
 800c82c:	23ac      	movs	r3, #172	@ 0xac
 800c82e:	009b      	lsls	r3, r3, #2
 800c830:	58d3      	ldr	r3, [r2, r3]
 800c832:	699b      	ldr	r3, [r3, #24]
 800c834:	687a      	ldr	r2, [r7, #4]
 800c836:	7c12      	ldrb	r2, [r2, #16]
 800c838:	2108      	movs	r1, #8
 800c83a:	1879      	adds	r1, r7, r1
 800c83c:	0010      	movs	r0, r2
 800c83e:	4798      	blx	r3
 800c840:	0003      	movs	r3, r0
 800c842:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c844:	e019      	b.n	800c87a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800c846:	683a      	ldr	r2, [r7, #0]
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	0011      	movs	r1, r2
 800c84c:	0018      	movs	r0, r3
 800c84e:	f000 fa76 	bl	800cd3e <USBD_CtlError>
            err++;
 800c852:	210b      	movs	r1, #11
 800c854:	187b      	adds	r3, r7, r1
 800c856:	781a      	ldrb	r2, [r3, #0]
 800c858:	187b      	adds	r3, r7, r1
 800c85a:	3201      	adds	r2, #1
 800c85c:	701a      	strb	r2, [r3, #0]
          break;
 800c85e:	e00c      	b.n	800c87a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800c860:	683a      	ldr	r2, [r7, #0]
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	0011      	movs	r1, r2
 800c866:	0018      	movs	r0, r3
 800c868:	f000 fa69 	bl	800cd3e <USBD_CtlError>
          err++;
 800c86c:	210b      	movs	r1, #11
 800c86e:	187b      	adds	r3, r7, r1
 800c870:	781a      	ldrb	r2, [r3, #0]
 800c872:	187b      	adds	r3, r7, r1
 800c874:	3201      	adds	r2, #1
 800c876:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 800c878:	e04b      	b.n	800c912 <USBD_GetDescriptor+0x2fa>
 800c87a:	e04a      	b.n	800c912 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	7c1b      	ldrb	r3, [r3, #16]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d10b      	bne.n	800c89c <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c884:	687a      	ldr	r2, [r7, #4]
 800c886:	23ad      	movs	r3, #173	@ 0xad
 800c888:	009b      	lsls	r3, r3, #2
 800c88a:	58d3      	ldr	r3, [r2, r3]
 800c88c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c88e:	2208      	movs	r2, #8
 800c890:	18ba      	adds	r2, r7, r2
 800c892:	0010      	movs	r0, r2
 800c894:	4798      	blx	r3
 800c896:	0003      	movs	r3, r0
 800c898:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c89a:	e03a      	b.n	800c912 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800c89c:	683a      	ldr	r2, [r7, #0]
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	0011      	movs	r1, r2
 800c8a2:	0018      	movs	r0, r3
 800c8a4:	f000 fa4b 	bl	800cd3e <USBD_CtlError>
        err++;
 800c8a8:	210b      	movs	r1, #11
 800c8aa:	187b      	adds	r3, r7, r1
 800c8ac:	781a      	ldrb	r2, [r3, #0]
 800c8ae:	187b      	adds	r3, r7, r1
 800c8b0:	3201      	adds	r2, #1
 800c8b2:	701a      	strb	r2, [r3, #0]
      break;
 800c8b4:	e02d      	b.n	800c912 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	7c1b      	ldrb	r3, [r3, #16]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d10f      	bne.n	800c8de <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c8be:	687a      	ldr	r2, [r7, #4]
 800c8c0:	23ad      	movs	r3, #173	@ 0xad
 800c8c2:	009b      	lsls	r3, r3, #2
 800c8c4:	58d3      	ldr	r3, [r2, r3]
 800c8c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8c8:	2208      	movs	r2, #8
 800c8ca:	18ba      	adds	r2, r7, r2
 800c8cc:	0010      	movs	r0, r2
 800c8ce:	4798      	blx	r3
 800c8d0:	0003      	movs	r3, r0
 800c8d2:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	3301      	adds	r3, #1
 800c8d8:	2207      	movs	r2, #7
 800c8da:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c8dc:	e019      	b.n	800c912 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800c8de:	683a      	ldr	r2, [r7, #0]
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	0011      	movs	r1, r2
 800c8e4:	0018      	movs	r0, r3
 800c8e6:	f000 fa2a 	bl	800cd3e <USBD_CtlError>
        err++;
 800c8ea:	210b      	movs	r1, #11
 800c8ec:	187b      	adds	r3, r7, r1
 800c8ee:	781a      	ldrb	r2, [r3, #0]
 800c8f0:	187b      	adds	r3, r7, r1
 800c8f2:	3201      	adds	r2, #1
 800c8f4:	701a      	strb	r2, [r3, #0]
      break;
 800c8f6:	e00c      	b.n	800c912 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 800c8f8:	683a      	ldr	r2, [r7, #0]
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	0011      	movs	r1, r2
 800c8fe:	0018      	movs	r0, r3
 800c900:	f000 fa1d 	bl	800cd3e <USBD_CtlError>
      err++;
 800c904:	210b      	movs	r1, #11
 800c906:	187b      	adds	r3, r7, r1
 800c908:	781a      	ldrb	r2, [r3, #0]
 800c90a:	187b      	adds	r3, r7, r1
 800c90c:	3201      	adds	r2, #1
 800c90e:	701a      	strb	r2, [r3, #0]
      break;
 800c910:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 800c912:	230b      	movs	r3, #11
 800c914:	18fb      	adds	r3, r7, r3
 800c916:	781b      	ldrb	r3, [r3, #0]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d127      	bne.n	800c96c <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800c91c:	2108      	movs	r1, #8
 800c91e:	187b      	adds	r3, r7, r1
 800c920:	881b      	ldrh	r3, [r3, #0]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d019      	beq.n	800c95a <USBD_GetDescriptor+0x342>
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	88db      	ldrh	r3, [r3, #6]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d015      	beq.n	800c95a <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	88da      	ldrh	r2, [r3, #6]
 800c932:	187b      	adds	r3, r7, r1
 800c934:	881b      	ldrh	r3, [r3, #0]
 800c936:	1c18      	adds	r0, r3, #0
 800c938:	1c11      	adds	r1, r2, #0
 800c93a:	b28a      	uxth	r2, r1
 800c93c:	b283      	uxth	r3, r0
 800c93e:	429a      	cmp	r2, r3
 800c940:	d900      	bls.n	800c944 <USBD_GetDescriptor+0x32c>
 800c942:	1c01      	adds	r1, r0, #0
 800c944:	b28a      	uxth	r2, r1
 800c946:	2108      	movs	r1, #8
 800c948:	187b      	adds	r3, r7, r1
 800c94a:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c94c:	187b      	adds	r3, r7, r1
 800c94e:	881a      	ldrh	r2, [r3, #0]
 800c950:	68f9      	ldr	r1, [r7, #12]
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	0018      	movs	r0, r3
 800c956:	f000 fa70 	bl	800ce3a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	88db      	ldrh	r3, [r3, #6]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d105      	bne.n	800c96e <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	0018      	movs	r0, r3
 800c966:	f000 fad2 	bl	800cf0e <USBD_CtlSendStatus>
 800c96a:	e000      	b.n	800c96e <USBD_GetDescriptor+0x356>
    return;
 800c96c:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 800c96e:	46bd      	mov	sp, r7
 800c970:	b004      	add	sp, #16
 800c972:	bd80      	pop	{r7, pc}
 800c974:	0800df8c 	.word	0x0800df8c
 800c978:	0800dfac 	.word	0x0800dfac

0800c97c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c97c:	b590      	push	{r4, r7, lr}
 800c97e:	b085      	sub	sp, #20
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
 800c984:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c986:	683b      	ldr	r3, [r7, #0]
 800c988:	889b      	ldrh	r3, [r3, #4]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d13d      	bne.n	800ca0a <USBD_SetAddress+0x8e>
 800c98e:	683b      	ldr	r3, [r7, #0]
 800c990:	88db      	ldrh	r3, [r3, #6]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d139      	bne.n	800ca0a <USBD_SetAddress+0x8e>
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	885b      	ldrh	r3, [r3, #2]
 800c99a:	2b7f      	cmp	r3, #127	@ 0x7f
 800c99c:	d835      	bhi.n	800ca0a <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	885b      	ldrh	r3, [r3, #2]
 800c9a2:	b2da      	uxtb	r2, r3
 800c9a4:	230f      	movs	r3, #15
 800c9a6:	18fb      	adds	r3, r7, r3
 800c9a8:	217f      	movs	r1, #127	@ 0x7f
 800c9aa:	400a      	ands	r2, r1
 800c9ac:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9ae:	687a      	ldr	r2, [r7, #4]
 800c9b0:	23a7      	movs	r3, #167	@ 0xa7
 800c9b2:	009b      	lsls	r3, r3, #2
 800c9b4:	5cd3      	ldrb	r3, [r2, r3]
 800c9b6:	2b03      	cmp	r3, #3
 800c9b8:	d106      	bne.n	800c9c8 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800c9ba:	683a      	ldr	r2, [r7, #0]
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	0011      	movs	r1, r2
 800c9c0:	0018      	movs	r0, r3
 800c9c2:	f000 f9bc 	bl	800cd3e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9c6:	e027      	b.n	800ca18 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	240f      	movs	r4, #15
 800c9cc:	193a      	adds	r2, r7, r4
 800c9ce:	4914      	ldr	r1, [pc, #80]	@ (800ca20 <USBD_SetAddress+0xa4>)
 800c9d0:	7812      	ldrb	r2, [r2, #0]
 800c9d2:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c9d4:	193b      	adds	r3, r7, r4
 800c9d6:	781a      	ldrb	r2, [r3, #0]
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	0011      	movs	r1, r2
 800c9dc:	0018      	movs	r0, r3
 800c9de:	f000 ff37 	bl	800d850 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	0018      	movs	r0, r3
 800c9e6:	f000 fa92 	bl	800cf0e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c9ea:	193b      	adds	r3, r7, r4
 800c9ec:	781b      	ldrb	r3, [r3, #0]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d005      	beq.n	800c9fe <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c9f2:	687a      	ldr	r2, [r7, #4]
 800c9f4:	23a7      	movs	r3, #167	@ 0xa7
 800c9f6:	009b      	lsls	r3, r3, #2
 800c9f8:	2102      	movs	r1, #2
 800c9fa:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9fc:	e00c      	b.n	800ca18 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c9fe:	687a      	ldr	r2, [r7, #4]
 800ca00:	23a7      	movs	r3, #167	@ 0xa7
 800ca02:	009b      	lsls	r3, r3, #2
 800ca04:	2101      	movs	r1, #1
 800ca06:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca08:	e006      	b.n	800ca18 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ca0a:	683a      	ldr	r2, [r7, #0]
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	0011      	movs	r1, r2
 800ca10:	0018      	movs	r0, r3
 800ca12:	f000 f994 	bl	800cd3e <USBD_CtlError>
  }
}
 800ca16:	46c0      	nop			@ (mov r8, r8)
 800ca18:	46c0      	nop			@ (mov r8, r8)
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	b005      	add	sp, #20
 800ca1e:	bd90      	pop	{r4, r7, pc}
 800ca20:	0000029e 	.word	0x0000029e

0800ca24 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b082      	sub	sp, #8
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
 800ca2c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	885b      	ldrh	r3, [r3, #2]
 800ca32:	b2da      	uxtb	r2, r3
 800ca34:	4b4c      	ldr	r3, [pc, #304]	@ (800cb68 <USBD_SetConfig+0x144>)
 800ca36:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ca38:	4b4b      	ldr	r3, [pc, #300]	@ (800cb68 <USBD_SetConfig+0x144>)
 800ca3a:	781b      	ldrb	r3, [r3, #0]
 800ca3c:	2b01      	cmp	r3, #1
 800ca3e:	d906      	bls.n	800ca4e <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800ca40:	683a      	ldr	r2, [r7, #0]
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	0011      	movs	r1, r2
 800ca46:	0018      	movs	r0, r3
 800ca48:	f000 f979 	bl	800cd3e <USBD_CtlError>
 800ca4c:	e088      	b.n	800cb60 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800ca4e:	687a      	ldr	r2, [r7, #4]
 800ca50:	23a7      	movs	r3, #167	@ 0xa7
 800ca52:	009b      	lsls	r3, r3, #2
 800ca54:	5cd3      	ldrb	r3, [r2, r3]
 800ca56:	2b02      	cmp	r3, #2
 800ca58:	d002      	beq.n	800ca60 <USBD_SetConfig+0x3c>
 800ca5a:	2b03      	cmp	r3, #3
 800ca5c:	d029      	beq.n	800cab2 <USBD_SetConfig+0x8e>
 800ca5e:	e071      	b.n	800cb44 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800ca60:	4b41      	ldr	r3, [pc, #260]	@ (800cb68 <USBD_SetConfig+0x144>)
 800ca62:	781b      	ldrb	r3, [r3, #0]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d01f      	beq.n	800caa8 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800ca68:	4b3f      	ldr	r3, [pc, #252]	@ (800cb68 <USBD_SetConfig+0x144>)
 800ca6a:	781b      	ldrb	r3, [r3, #0]
 800ca6c:	001a      	movs	r2, r3
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ca72:	687a      	ldr	r2, [r7, #4]
 800ca74:	23a7      	movs	r3, #167	@ 0xa7
 800ca76:	009b      	lsls	r3, r3, #2
 800ca78:	2103      	movs	r1, #3
 800ca7a:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ca7c:	4b3a      	ldr	r3, [pc, #232]	@ (800cb68 <USBD_SetConfig+0x144>)
 800ca7e:	781a      	ldrb	r2, [r3, #0]
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	0011      	movs	r1, r2
 800ca84:	0018      	movs	r0, r3
 800ca86:	f7ff f8c6 	bl	800bc16 <USBD_SetClassConfig>
 800ca8a:	0003      	movs	r3, r0
 800ca8c:	2b02      	cmp	r3, #2
 800ca8e:	d106      	bne.n	800ca9e <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800ca90:	683a      	ldr	r2, [r7, #0]
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	0011      	movs	r1, r2
 800ca96:	0018      	movs	r0, r3
 800ca98:	f000 f951 	bl	800cd3e <USBD_CtlError>
            return;
 800ca9c:	e060      	b.n	800cb60 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	0018      	movs	r0, r3
 800caa2:	f000 fa34 	bl	800cf0e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800caa6:	e05b      	b.n	800cb60 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	0018      	movs	r0, r3
 800caac:	f000 fa2f 	bl	800cf0e <USBD_CtlSendStatus>
        break;
 800cab0:	e056      	b.n	800cb60 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800cab2:	4b2d      	ldr	r3, [pc, #180]	@ (800cb68 <USBD_SetConfig+0x144>)
 800cab4:	781b      	ldrb	r3, [r3, #0]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d115      	bne.n	800cae6 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800caba:	687a      	ldr	r2, [r7, #4]
 800cabc:	23a7      	movs	r3, #167	@ 0xa7
 800cabe:	009b      	lsls	r3, r3, #2
 800cac0:	2102      	movs	r1, #2
 800cac2:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800cac4:	4b28      	ldr	r3, [pc, #160]	@ (800cb68 <USBD_SetConfig+0x144>)
 800cac6:	781b      	ldrb	r3, [r3, #0]
 800cac8:	001a      	movs	r2, r3
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800cace:	4b26      	ldr	r3, [pc, #152]	@ (800cb68 <USBD_SetConfig+0x144>)
 800cad0:	781a      	ldrb	r2, [r3, #0]
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	0011      	movs	r1, r2
 800cad6:	0018      	movs	r0, r3
 800cad8:	f7ff f8c4 	bl	800bc64 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	0018      	movs	r0, r3
 800cae0:	f000 fa15 	bl	800cf0e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800cae4:	e03c      	b.n	800cb60 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800cae6:	4b20      	ldr	r3, [pc, #128]	@ (800cb68 <USBD_SetConfig+0x144>)
 800cae8:	781b      	ldrb	r3, [r3, #0]
 800caea:	001a      	movs	r2, r3
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	685b      	ldr	r3, [r3, #4]
 800caf0:	429a      	cmp	r2, r3
 800caf2:	d022      	beq.n	800cb3a <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	685b      	ldr	r3, [r3, #4]
 800caf8:	b2da      	uxtb	r2, r3
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	0011      	movs	r1, r2
 800cafe:	0018      	movs	r0, r3
 800cb00:	f7ff f8b0 	bl	800bc64 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800cb04:	4b18      	ldr	r3, [pc, #96]	@ (800cb68 <USBD_SetConfig+0x144>)
 800cb06:	781b      	ldrb	r3, [r3, #0]
 800cb08:	001a      	movs	r2, r3
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800cb0e:	4b16      	ldr	r3, [pc, #88]	@ (800cb68 <USBD_SetConfig+0x144>)
 800cb10:	781a      	ldrb	r2, [r3, #0]
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	0011      	movs	r1, r2
 800cb16:	0018      	movs	r0, r3
 800cb18:	f7ff f87d 	bl	800bc16 <USBD_SetClassConfig>
 800cb1c:	0003      	movs	r3, r0
 800cb1e:	2b02      	cmp	r3, #2
 800cb20:	d106      	bne.n	800cb30 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 800cb22:	683a      	ldr	r2, [r7, #0]
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	0011      	movs	r1, r2
 800cb28:	0018      	movs	r0, r3
 800cb2a:	f000 f908 	bl	800cd3e <USBD_CtlError>
            return;
 800cb2e:	e017      	b.n	800cb60 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	0018      	movs	r0, r3
 800cb34:	f000 f9eb 	bl	800cf0e <USBD_CtlSendStatus>
        break;
 800cb38:	e012      	b.n	800cb60 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	0018      	movs	r0, r3
 800cb3e:	f000 f9e6 	bl	800cf0e <USBD_CtlSendStatus>
        break;
 800cb42:	e00d      	b.n	800cb60 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 800cb44:	683a      	ldr	r2, [r7, #0]
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	0011      	movs	r1, r2
 800cb4a:	0018      	movs	r0, r3
 800cb4c:	f000 f8f7 	bl	800cd3e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800cb50:	4b05      	ldr	r3, [pc, #20]	@ (800cb68 <USBD_SetConfig+0x144>)
 800cb52:	781a      	ldrb	r2, [r3, #0]
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	0011      	movs	r1, r2
 800cb58:	0018      	movs	r0, r3
 800cb5a:	f7ff f883 	bl	800bc64 <USBD_ClrClassConfig>
        break;
 800cb5e:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 800cb60:	46bd      	mov	sp, r7
 800cb62:	b002      	add	sp, #8
 800cb64:	bd80      	pop	{r7, pc}
 800cb66:	46c0      	nop			@ (mov r8, r8)
 800cb68:	2000093c 	.word	0x2000093c

0800cb6c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b082      	sub	sp, #8
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
 800cb74:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	88db      	ldrh	r3, [r3, #6]
 800cb7a:	2b01      	cmp	r3, #1
 800cb7c:	d006      	beq.n	800cb8c <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800cb7e:	683a      	ldr	r2, [r7, #0]
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	0011      	movs	r1, r2
 800cb84:	0018      	movs	r0, r3
 800cb86:	f000 f8da 	bl	800cd3e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cb8a:	e026      	b.n	800cbda <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800cb8c:	687a      	ldr	r2, [r7, #4]
 800cb8e:	23a7      	movs	r3, #167	@ 0xa7
 800cb90:	009b      	lsls	r3, r3, #2
 800cb92:	5cd3      	ldrb	r3, [r2, r3]
 800cb94:	2b02      	cmp	r3, #2
 800cb96:	dc02      	bgt.n	800cb9e <USBD_GetConfig+0x32>
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	dc03      	bgt.n	800cba4 <USBD_GetConfig+0x38>
 800cb9c:	e016      	b.n	800cbcc <USBD_GetConfig+0x60>
 800cb9e:	2b03      	cmp	r3, #3
 800cba0:	d00c      	beq.n	800cbbc <USBD_GetConfig+0x50>
 800cba2:	e013      	b.n	800cbcc <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	2200      	movs	r2, #0
 800cba8:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	3308      	adds	r3, #8
 800cbae:	0019      	movs	r1, r3
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2201      	movs	r2, #1
 800cbb4:	0018      	movs	r0, r3
 800cbb6:	f000 f940 	bl	800ce3a <USBD_CtlSendData>
        break;
 800cbba:	e00e      	b.n	800cbda <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	1d19      	adds	r1, r3, #4
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	2201      	movs	r2, #1
 800cbc4:	0018      	movs	r0, r3
 800cbc6:	f000 f938 	bl	800ce3a <USBD_CtlSendData>
        break;
 800cbca:	e006      	b.n	800cbda <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 800cbcc:	683a      	ldr	r2, [r7, #0]
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	0011      	movs	r1, r2
 800cbd2:	0018      	movs	r0, r3
 800cbd4:	f000 f8b3 	bl	800cd3e <USBD_CtlError>
        break;
 800cbd8:	46c0      	nop			@ (mov r8, r8)
}
 800cbda:	46c0      	nop			@ (mov r8, r8)
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	b002      	add	sp, #8
 800cbe0:	bd80      	pop	{r7, pc}

0800cbe2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbe2:	b580      	push	{r7, lr}
 800cbe4:	b082      	sub	sp, #8
 800cbe6:	af00      	add	r7, sp, #0
 800cbe8:	6078      	str	r0, [r7, #4]
 800cbea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cbec:	687a      	ldr	r2, [r7, #4]
 800cbee:	23a7      	movs	r3, #167	@ 0xa7
 800cbf0:	009b      	lsls	r3, r3, #2
 800cbf2:	5cd3      	ldrb	r3, [r2, r3]
 800cbf4:	3b01      	subs	r3, #1
 800cbf6:	2b02      	cmp	r3, #2
 800cbf8:	d822      	bhi.n	800cc40 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cbfa:	683b      	ldr	r3, [r7, #0]
 800cbfc:	88db      	ldrh	r3, [r3, #6]
 800cbfe:	2b02      	cmp	r3, #2
 800cc00:	d006      	beq.n	800cc10 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800cc02:	683a      	ldr	r2, [r7, #0]
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	0011      	movs	r1, r2
 800cc08:	0018      	movs	r0, r3
 800cc0a:	f000 f898 	bl	800cd3e <USBD_CtlError>
        break;
 800cc0e:	e01e      	b.n	800cc4e <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	2201      	movs	r2, #1
 800cc14:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800cc16:	687a      	ldr	r2, [r7, #4]
 800cc18:	23a9      	movs	r3, #169	@ 0xa9
 800cc1a:	009b      	lsls	r3, r3, #2
 800cc1c:	58d3      	ldr	r3, [r2, r3]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d005      	beq.n	800cc2e <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	68db      	ldr	r3, [r3, #12]
 800cc26:	2202      	movs	r2, #2
 800cc28:	431a      	orrs	r2, r3
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	330c      	adds	r3, #12
 800cc32:	0019      	movs	r1, r3
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2202      	movs	r2, #2
 800cc38:	0018      	movs	r0, r3
 800cc3a:	f000 f8fe 	bl	800ce3a <USBD_CtlSendData>
      break;
 800cc3e:	e006      	b.n	800cc4e <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800cc40:	683a      	ldr	r2, [r7, #0]
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	0011      	movs	r1, r2
 800cc46:	0018      	movs	r0, r3
 800cc48:	f000 f879 	bl	800cd3e <USBD_CtlError>
      break;
 800cc4c:	46c0      	nop			@ (mov r8, r8)
  }
}
 800cc4e:	46c0      	nop			@ (mov r8, r8)
 800cc50:	46bd      	mov	sp, r7
 800cc52:	b002      	add	sp, #8
 800cc54:	bd80      	pop	{r7, pc}

0800cc56 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800cc56:	b580      	push	{r7, lr}
 800cc58:	b082      	sub	sp, #8
 800cc5a:	af00      	add	r7, sp, #0
 800cc5c:	6078      	str	r0, [r7, #4]
 800cc5e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	885b      	ldrh	r3, [r3, #2]
 800cc64:	2b01      	cmp	r3, #1
 800cc66:	d108      	bne.n	800cc7a <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800cc68:	687a      	ldr	r2, [r7, #4]
 800cc6a:	23a9      	movs	r3, #169	@ 0xa9
 800cc6c:	009b      	lsls	r3, r3, #2
 800cc6e:	2101      	movs	r1, #1
 800cc70:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	0018      	movs	r0, r3
 800cc76:	f000 f94a 	bl	800cf0e <USBD_CtlSendStatus>
  }
}
 800cc7a:	46c0      	nop			@ (mov r8, r8)
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	b002      	add	sp, #8
 800cc80:	bd80      	pop	{r7, pc}

0800cc82 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800cc82:	b580      	push	{r7, lr}
 800cc84:	b082      	sub	sp, #8
 800cc86:	af00      	add	r7, sp, #0
 800cc88:	6078      	str	r0, [r7, #4]
 800cc8a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cc8c:	687a      	ldr	r2, [r7, #4]
 800cc8e:	23a7      	movs	r3, #167	@ 0xa7
 800cc90:	009b      	lsls	r3, r3, #2
 800cc92:	5cd3      	ldrb	r3, [r2, r3]
 800cc94:	3b01      	subs	r3, #1
 800cc96:	2b02      	cmp	r3, #2
 800cc98:	d80d      	bhi.n	800ccb6 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	885b      	ldrh	r3, [r3, #2]
 800cc9e:	2b01      	cmp	r3, #1
 800cca0:	d110      	bne.n	800ccc4 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800cca2:	687a      	ldr	r2, [r7, #4]
 800cca4:	23a9      	movs	r3, #169	@ 0xa9
 800cca6:	009b      	lsls	r3, r3, #2
 800cca8:	2100      	movs	r1, #0
 800ccaa:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	0018      	movs	r0, r3
 800ccb0:	f000 f92d 	bl	800cf0e <USBD_CtlSendStatus>
      }
      break;
 800ccb4:	e006      	b.n	800ccc4 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800ccb6:	683a      	ldr	r2, [r7, #0]
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	0011      	movs	r1, r2
 800ccbc:	0018      	movs	r0, r3
 800ccbe:	f000 f83e 	bl	800cd3e <USBD_CtlError>
      break;
 800ccc2:	e000      	b.n	800ccc6 <USBD_ClrFeature+0x44>
      break;
 800ccc4:	46c0      	nop			@ (mov r8, r8)
  }
}
 800ccc6:	46c0      	nop			@ (mov r8, r8)
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	b002      	add	sp, #8
 800cccc:	bd80      	pop	{r7, pc}

0800ccce <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ccce:	b580      	push	{r7, lr}
 800ccd0:	b082      	sub	sp, #8
 800ccd2:	af00      	add	r7, sp, #0
 800ccd4:	6078      	str	r0, [r7, #4]
 800ccd6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	781a      	ldrb	r2, [r3, #0]
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800cce0:	683b      	ldr	r3, [r7, #0]
 800cce2:	785a      	ldrb	r2, [r3, #1]
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	3302      	adds	r3, #2
 800ccec:	781b      	ldrb	r3, [r3, #0]
 800ccee:	001a      	movs	r2, r3
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	3303      	adds	r3, #3
 800ccf4:	781b      	ldrb	r3, [r3, #0]
 800ccf6:	021b      	lsls	r3, r3, #8
 800ccf8:	b29b      	uxth	r3, r3
 800ccfa:	18d3      	adds	r3, r2, r3
 800ccfc:	b29a      	uxth	r2, r3
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	3304      	adds	r3, #4
 800cd06:	781b      	ldrb	r3, [r3, #0]
 800cd08:	001a      	movs	r2, r3
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	3305      	adds	r3, #5
 800cd0e:	781b      	ldrb	r3, [r3, #0]
 800cd10:	021b      	lsls	r3, r3, #8
 800cd12:	b29b      	uxth	r3, r3
 800cd14:	18d3      	adds	r3, r2, r3
 800cd16:	b29a      	uxth	r2, r3
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	3306      	adds	r3, #6
 800cd20:	781b      	ldrb	r3, [r3, #0]
 800cd22:	001a      	movs	r2, r3
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	3307      	adds	r3, #7
 800cd28:	781b      	ldrb	r3, [r3, #0]
 800cd2a:	021b      	lsls	r3, r3, #8
 800cd2c:	b29b      	uxth	r3, r3
 800cd2e:	18d3      	adds	r3, r2, r3
 800cd30:	b29a      	uxth	r2, r3
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	80da      	strh	r2, [r3, #6]

}
 800cd36:	46c0      	nop			@ (mov r8, r8)
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	b002      	add	sp, #8
 800cd3c:	bd80      	pop	{r7, pc}

0800cd3e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800cd3e:	b580      	push	{r7, lr}
 800cd40:	b082      	sub	sp, #8
 800cd42:	af00      	add	r7, sp, #0
 800cd44:	6078      	str	r0, [r7, #4]
 800cd46:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2180      	movs	r1, #128	@ 0x80
 800cd4c:	0018      	movs	r0, r3
 800cd4e:	f000 fcf8 	bl	800d742 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	2100      	movs	r1, #0
 800cd56:	0018      	movs	r0, r3
 800cd58:	f000 fcf3 	bl	800d742 <USBD_LL_StallEP>
}
 800cd5c:	46c0      	nop			@ (mov r8, r8)
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	b002      	add	sp, #8
 800cd62:	bd80      	pop	{r7, pc}

0800cd64 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cd64:	b590      	push	{r4, r7, lr}
 800cd66:	b087      	sub	sp, #28
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	60f8      	str	r0, [r7, #12]
 800cd6c:	60b9      	str	r1, [r7, #8]
 800cd6e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cd70:	2417      	movs	r4, #23
 800cd72:	193b      	adds	r3, r7, r4
 800cd74:	2200      	movs	r2, #0
 800cd76:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d03c      	beq.n	800cdf8 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	0018      	movs	r0, r3
 800cd82:	f000 f83d 	bl	800ce00 <USBD_GetLen>
 800cd86:	0003      	movs	r3, r0
 800cd88:	3301      	adds	r3, #1
 800cd8a:	b29b      	uxth	r3, r3
 800cd8c:	18db      	adds	r3, r3, r3
 800cd8e:	b29a      	uxth	r2, r3
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800cd94:	193b      	adds	r3, r7, r4
 800cd96:	781b      	ldrb	r3, [r3, #0]
 800cd98:	193a      	adds	r2, r7, r4
 800cd9a:	1c59      	adds	r1, r3, #1
 800cd9c:	7011      	strb	r1, [r2, #0]
 800cd9e:	001a      	movs	r2, r3
 800cda0:	68bb      	ldr	r3, [r7, #8]
 800cda2:	189b      	adds	r3, r3, r2
 800cda4:	687a      	ldr	r2, [r7, #4]
 800cda6:	7812      	ldrb	r2, [r2, #0]
 800cda8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800cdaa:	193b      	adds	r3, r7, r4
 800cdac:	781b      	ldrb	r3, [r3, #0]
 800cdae:	193a      	adds	r2, r7, r4
 800cdb0:	1c59      	adds	r1, r3, #1
 800cdb2:	7011      	strb	r1, [r2, #0]
 800cdb4:	001a      	movs	r2, r3
 800cdb6:	68bb      	ldr	r3, [r7, #8]
 800cdb8:	189b      	adds	r3, r3, r2
 800cdba:	2203      	movs	r2, #3
 800cdbc:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800cdbe:	e017      	b.n	800cdf0 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	1c5a      	adds	r2, r3, #1
 800cdc4:	60fa      	str	r2, [r7, #12]
 800cdc6:	2417      	movs	r4, #23
 800cdc8:	193a      	adds	r2, r7, r4
 800cdca:	7812      	ldrb	r2, [r2, #0]
 800cdcc:	1939      	adds	r1, r7, r4
 800cdce:	1c50      	adds	r0, r2, #1
 800cdd0:	7008      	strb	r0, [r1, #0]
 800cdd2:	0011      	movs	r1, r2
 800cdd4:	68ba      	ldr	r2, [r7, #8]
 800cdd6:	1852      	adds	r2, r2, r1
 800cdd8:	781b      	ldrb	r3, [r3, #0]
 800cdda:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800cddc:	193b      	adds	r3, r7, r4
 800cdde:	781b      	ldrb	r3, [r3, #0]
 800cde0:	193a      	adds	r2, r7, r4
 800cde2:	1c59      	adds	r1, r3, #1
 800cde4:	7011      	strb	r1, [r2, #0]
 800cde6:	001a      	movs	r2, r3
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	189b      	adds	r3, r3, r2
 800cdec:	2200      	movs	r2, #0
 800cdee:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	781b      	ldrb	r3, [r3, #0]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d1e3      	bne.n	800cdc0 <USBD_GetString+0x5c>
    }
  }
}
 800cdf8:	46c0      	nop			@ (mov r8, r8)
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	b007      	add	sp, #28
 800cdfe:	bd90      	pop	{r4, r7, pc}

0800ce00 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b084      	sub	sp, #16
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ce08:	230f      	movs	r3, #15
 800ce0a:	18fb      	adds	r3, r7, r3
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800ce10:	e008      	b.n	800ce24 <USBD_GetLen+0x24>
  {
    len++;
 800ce12:	210f      	movs	r1, #15
 800ce14:	187b      	adds	r3, r7, r1
 800ce16:	781a      	ldrb	r2, [r3, #0]
 800ce18:	187b      	adds	r3, r7, r1
 800ce1a:	3201      	adds	r2, #1
 800ce1c:	701a      	strb	r2, [r3, #0]
    buf++;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	3301      	adds	r3, #1
 800ce22:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	781b      	ldrb	r3, [r3, #0]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d1f2      	bne.n	800ce12 <USBD_GetLen+0x12>
  }

  return len;
 800ce2c:	230f      	movs	r3, #15
 800ce2e:	18fb      	adds	r3, r7, r3
 800ce30:	781b      	ldrb	r3, [r3, #0]
}
 800ce32:	0018      	movs	r0, r3
 800ce34:	46bd      	mov	sp, r7
 800ce36:	b004      	add	sp, #16
 800ce38:	bd80      	pop	{r7, pc}

0800ce3a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800ce3a:	b580      	push	{r7, lr}
 800ce3c:	b084      	sub	sp, #16
 800ce3e:	af00      	add	r7, sp, #0
 800ce40:	60f8      	str	r0, [r7, #12]
 800ce42:	60b9      	str	r1, [r7, #8]
 800ce44:	1dbb      	adds	r3, r7, #6
 800ce46:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ce48:	68fa      	ldr	r2, [r7, #12]
 800ce4a:	23a5      	movs	r3, #165	@ 0xa5
 800ce4c:	009b      	lsls	r3, r3, #2
 800ce4e:	2102      	movs	r1, #2
 800ce50:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800ce52:	1dbb      	adds	r3, r7, #6
 800ce54:	881a      	ldrh	r2, [r3, #0]
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800ce5a:	1dbb      	adds	r3, r7, #6
 800ce5c:	881a      	ldrh	r2, [r3, #0]
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ce62:	1dbb      	adds	r3, r7, #6
 800ce64:	881b      	ldrh	r3, [r3, #0]
 800ce66:	68ba      	ldr	r2, [r7, #8]
 800ce68:	68f8      	ldr	r0, [r7, #12]
 800ce6a:	2100      	movs	r1, #0
 800ce6c:	f000 fd1b 	bl	800d8a6 <USBD_LL_Transmit>

  return USBD_OK;
 800ce70:	2300      	movs	r3, #0
}
 800ce72:	0018      	movs	r0, r3
 800ce74:	46bd      	mov	sp, r7
 800ce76:	b004      	add	sp, #16
 800ce78:	bd80      	pop	{r7, pc}

0800ce7a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800ce7a:	b580      	push	{r7, lr}
 800ce7c:	b084      	sub	sp, #16
 800ce7e:	af00      	add	r7, sp, #0
 800ce80:	60f8      	str	r0, [r7, #12]
 800ce82:	60b9      	str	r1, [r7, #8]
 800ce84:	1dbb      	adds	r3, r7, #6
 800ce86:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ce88:	1dbb      	adds	r3, r7, #6
 800ce8a:	881b      	ldrh	r3, [r3, #0]
 800ce8c:	68ba      	ldr	r2, [r7, #8]
 800ce8e:	68f8      	ldr	r0, [r7, #12]
 800ce90:	2100      	movs	r1, #0
 800ce92:	f000 fd08 	bl	800d8a6 <USBD_LL_Transmit>

  return USBD_OK;
 800ce96:	2300      	movs	r3, #0
}
 800ce98:	0018      	movs	r0, r3
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	b004      	add	sp, #16
 800ce9e:	bd80      	pop	{r7, pc}

0800cea0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b084      	sub	sp, #16
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	60f8      	str	r0, [r7, #12]
 800cea8:	60b9      	str	r1, [r7, #8]
 800ceaa:	1dbb      	adds	r3, r7, #6
 800ceac:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ceae:	68fa      	ldr	r2, [r7, #12]
 800ceb0:	23a5      	movs	r3, #165	@ 0xa5
 800ceb2:	009b      	lsls	r3, r3, #2
 800ceb4:	2103      	movs	r1, #3
 800ceb6:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800ceb8:	1dbb      	adds	r3, r7, #6
 800ceba:	8819      	ldrh	r1, [r3, #0]
 800cebc:	68fa      	ldr	r2, [r7, #12]
 800cebe:	23ae      	movs	r3, #174	@ 0xae
 800cec0:	005b      	lsls	r3, r3, #1
 800cec2:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800cec4:	1dbb      	adds	r3, r7, #6
 800cec6:	8819      	ldrh	r1, [r3, #0]
 800cec8:	68fa      	ldr	r2, [r7, #12]
 800ceca:	23b0      	movs	r3, #176	@ 0xb0
 800cecc:	005b      	lsls	r3, r3, #1
 800cece:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ced0:	1dbb      	adds	r3, r7, #6
 800ced2:	881b      	ldrh	r3, [r3, #0]
 800ced4:	68ba      	ldr	r2, [r7, #8]
 800ced6:	68f8      	ldr	r0, [r7, #12]
 800ced8:	2100      	movs	r1, #0
 800ceda:	f000 fd1b 	bl	800d914 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cede:	2300      	movs	r3, #0
}
 800cee0:	0018      	movs	r0, r3
 800cee2:	46bd      	mov	sp, r7
 800cee4:	b004      	add	sp, #16
 800cee6:	bd80      	pop	{r7, pc}

0800cee8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b084      	sub	sp, #16
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	60f8      	str	r0, [r7, #12]
 800cef0:	60b9      	str	r1, [r7, #8]
 800cef2:	1dbb      	adds	r3, r7, #6
 800cef4:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cef6:	1dbb      	adds	r3, r7, #6
 800cef8:	881b      	ldrh	r3, [r3, #0]
 800cefa:	68ba      	ldr	r2, [r7, #8]
 800cefc:	68f8      	ldr	r0, [r7, #12]
 800cefe:	2100      	movs	r1, #0
 800cf00:	f000 fd08 	bl	800d914 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cf04:	2300      	movs	r3, #0
}
 800cf06:	0018      	movs	r0, r3
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	b004      	add	sp, #16
 800cf0c:	bd80      	pop	{r7, pc}

0800cf0e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cf0e:	b580      	push	{r7, lr}
 800cf10:	b082      	sub	sp, #8
 800cf12:	af00      	add	r7, sp, #0
 800cf14:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cf16:	687a      	ldr	r2, [r7, #4]
 800cf18:	23a5      	movs	r3, #165	@ 0xa5
 800cf1a:	009b      	lsls	r3, r3, #2
 800cf1c:	2104      	movs	r1, #4
 800cf1e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cf20:	6878      	ldr	r0, [r7, #4]
 800cf22:	2300      	movs	r3, #0
 800cf24:	2200      	movs	r2, #0
 800cf26:	2100      	movs	r1, #0
 800cf28:	f000 fcbd 	bl	800d8a6 <USBD_LL_Transmit>

  return USBD_OK;
 800cf2c:	2300      	movs	r3, #0
}
 800cf2e:	0018      	movs	r0, r3
 800cf30:	46bd      	mov	sp, r7
 800cf32:	b002      	add	sp, #8
 800cf34:	bd80      	pop	{r7, pc}

0800cf36 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cf36:	b580      	push	{r7, lr}
 800cf38:	b082      	sub	sp, #8
 800cf3a:	af00      	add	r7, sp, #0
 800cf3c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cf3e:	687a      	ldr	r2, [r7, #4]
 800cf40:	23a5      	movs	r3, #165	@ 0xa5
 800cf42:	009b      	lsls	r3, r3, #2
 800cf44:	2105      	movs	r1, #5
 800cf46:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cf48:	6878      	ldr	r0, [r7, #4]
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	2100      	movs	r1, #0
 800cf50:	f000 fce0 	bl	800d914 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cf54:	2300      	movs	r3, #0
}
 800cf56:	0018      	movs	r0, r3
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	b002      	add	sp, #8
 800cf5c:	bd80      	pop	{r7, pc}
	...

0800cf60 <RegisterUSBReceiveCallback>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void RegisterUSBReceiveCallback(UsbDataReceivedCallback callback)
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b082      	sub	sp, #8
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
	rxCallback = callback;
 800cf68:	4b03      	ldr	r3, [pc, #12]	@ (800cf78 <RegisterUSBReceiveCallback+0x18>)
 800cf6a:	687a      	ldr	r2, [r7, #4]
 800cf6c:	601a      	str	r2, [r3, #0]
}
 800cf6e:	46c0      	nop			@ (mov r8, r8)
 800cf70:	46bd      	mov	sp, r7
 800cf72:	b002      	add	sp, #8
 800cf74:	bd80      	pop	{r7, pc}
 800cf76:	46c0      	nop			@ (mov r8, r8)
 800cf78:	20000940 	.word	0x20000940

0800cf7c <UsbReceivedData>:
{
	return &hUsbDeviceFS;
}

void UsbReceivedData(uint8_t *buffer, uint32_t *len)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b082      	sub	sp, #8
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
 800cf84:	6039      	str	r1, [r7, #0]
	if (rxCallback != NULL) {
 800cf86:	4b07      	ldr	r3, [pc, #28]	@ (800cfa4 <UsbReceivedData+0x28>)
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d005      	beq.n	800cf9a <UsbReceivedData+0x1e>
		rxCallback(buffer, len);
 800cf8e:	4b05      	ldr	r3, [pc, #20]	@ (800cfa4 <UsbReceivedData+0x28>)
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	6839      	ldr	r1, [r7, #0]
 800cf94:	687a      	ldr	r2, [r7, #4]
 800cf96:	0010      	movs	r0, r2
 800cf98:	4798      	blx	r3
	}
}
 800cf9a:	46c0      	nop			@ (mov r8, r8)
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	b002      	add	sp, #8
 800cfa0:	bd80      	pop	{r7, pc}
 800cfa2:	46c0      	nop			@ (mov r8, r8)
 800cfa4:	20000940 	.word	0x20000940

0800cfa8 <UsbTransmitData>:

void UsbTransmitData(uint8_t *buffer, uint32_t len)
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b082      	sub	sp, #8
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
 800cfb0:	6039      	str	r1, [r7, #0]
	CDC_Transmit_FS(buffer, len);
 800cfb2:	683b      	ldr	r3, [r7, #0]
 800cfb4:	b29a      	uxth	r2, r3
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	0011      	movs	r1, r2
 800cfba:	0018      	movs	r0, r3
 800cfbc:	f000 f89e 	bl	800d0fc <CDC_Transmit_FS>
}
 800cfc0:	46c0      	nop			@ (mov r8, r8)
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	b002      	add	sp, #8
 800cfc6:	bd80      	pop	{r7, pc}

0800cfc8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cfcc:	4914      	ldr	r1, [pc, #80]	@ (800d020 <MX_USB_DEVICE_Init+0x58>)
 800cfce:	4b15      	ldr	r3, [pc, #84]	@ (800d024 <MX_USB_DEVICE_Init+0x5c>)
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	0018      	movs	r0, r3
 800cfd4:	f7fe fdb8 	bl	800bb48 <USBD_Init>
 800cfd8:	1e03      	subs	r3, r0, #0
 800cfda:	d001      	beq.n	800cfe0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cfdc:	f7f6 fa34 	bl	8003448 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cfe0:	4a11      	ldr	r2, [pc, #68]	@ (800d028 <MX_USB_DEVICE_Init+0x60>)
 800cfe2:	4b10      	ldr	r3, [pc, #64]	@ (800d024 <MX_USB_DEVICE_Init+0x5c>)
 800cfe4:	0011      	movs	r1, r2
 800cfe6:	0018      	movs	r0, r3
 800cfe8:	f7fe fddf 	bl	800bbaa <USBD_RegisterClass>
 800cfec:	1e03      	subs	r3, r0, #0
 800cfee:	d001      	beq.n	800cff4 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800cff0:	f7f6 fa2a 	bl	8003448 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cff4:	4a0d      	ldr	r2, [pc, #52]	@ (800d02c <MX_USB_DEVICE_Init+0x64>)
 800cff6:	4b0b      	ldr	r3, [pc, #44]	@ (800d024 <MX_USB_DEVICE_Init+0x5c>)
 800cff8:	0011      	movs	r1, r2
 800cffa:	0018      	movs	r0, r3
 800cffc:	f7fe fcf4 	bl	800b9e8 <USBD_CDC_RegisterInterface>
 800d000:	1e03      	subs	r3, r0, #0
 800d002:	d001      	beq.n	800d008 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800d004:	f7f6 fa20 	bl	8003448 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d008:	4b06      	ldr	r3, [pc, #24]	@ (800d024 <MX_USB_DEVICE_Init+0x5c>)
 800d00a:	0018      	movs	r0, r3
 800d00c:	f7fe fded 	bl	800bbea <USBD_Start>
 800d010:	1e03      	subs	r3, r0, #0
 800d012:	d001      	beq.n	800d018 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800d014:	f7f6 fa18 	bl	8003448 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d018:	46c0      	nop			@ (mov r8, r8)
 800d01a:	46bd      	mov	sp, r7
 800d01c:	bd80      	pop	{r7, pc}
 800d01e:	46c0      	nop			@ (mov r8, r8)
 800d020:	2000012c 	.word	0x2000012c
 800d024:	20000944 	.word	0x20000944
 800d028:	20000018 	.word	0x20000018
 800d02c:	2000011c 	.word	0x2000011c

0800d030 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d030:	b580      	push	{r7, lr}
 800d032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d034:	4907      	ldr	r1, [pc, #28]	@ (800d054 <CDC_Init_FS+0x24>)
 800d036:	4b08      	ldr	r3, [pc, #32]	@ (800d058 <CDC_Init_FS+0x28>)
 800d038:	2200      	movs	r2, #0
 800d03a:	0018      	movs	r0, r3
 800d03c:	f7fe fcef 	bl	800ba1e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d040:	4a06      	ldr	r2, [pc, #24]	@ (800d05c <CDC_Init_FS+0x2c>)
 800d042:	4b05      	ldr	r3, [pc, #20]	@ (800d058 <CDC_Init_FS+0x28>)
 800d044:	0011      	movs	r1, r2
 800d046:	0018      	movs	r0, r3
 800d048:	f7fe fd05 	bl	800ba56 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d04c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d04e:	0018      	movs	r0, r3
 800d050:	46bd      	mov	sp, r7
 800d052:	bd80      	pop	{r7, pc}
 800d054:	20001008 	.word	0x20001008
 800d058:	20000944 	.word	0x20000944
 800d05c:	20000c08 	.word	0x20000c08

0800d060 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d060:	b580      	push	{r7, lr}
 800d062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d064:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d066:	0018      	movs	r0, r3
 800d068:	46bd      	mov	sp, r7
 800d06a:	bd80      	pop	{r7, pc}

0800d06c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b082      	sub	sp, #8
 800d070:	af00      	add	r7, sp, #0
 800d072:	6039      	str	r1, [r7, #0]
 800d074:	0011      	movs	r1, r2
 800d076:	1dfb      	adds	r3, r7, #7
 800d078:	1c02      	adds	r2, r0, #0
 800d07a:	701a      	strb	r2, [r3, #0]
 800d07c:	1d3b      	adds	r3, r7, #4
 800d07e:	1c0a      	adds	r2, r1, #0
 800d080:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d082:	1dfb      	adds	r3, r7, #7
 800d084:	781b      	ldrb	r3, [r3, #0]
 800d086:	2b23      	cmp	r3, #35	@ 0x23
 800d088:	d814      	bhi.n	800d0b4 <CDC_Control_FS+0x48>
 800d08a:	009a      	lsls	r2, r3, #2
 800d08c:	4b0c      	ldr	r3, [pc, #48]	@ (800d0c0 <CDC_Control_FS+0x54>)
 800d08e:	18d3      	adds	r3, r2, r3
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	469f      	mov	pc, r3
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	pbuf[0] = 0x00;
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	2200      	movs	r2, #0
 800d098:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = 0xC2;
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	3301      	adds	r3, #1
 800d09e:	22c2      	movs	r2, #194	@ 0xc2
 800d0a0:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = 0x01;
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	3302      	adds	r3, #2
 800d0a6:	2201      	movs	r2, #1
 800d0a8:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = 0x00;
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	3303      	adds	r3, #3
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	701a      	strb	r2, [r3, #0]
    break;
 800d0b2:	e000      	b.n	800d0b6 <CDC_Control_FS+0x4a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d0b4:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 800d0b6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d0b8:	0018      	movs	r0, r3
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	b002      	add	sp, #8
 800d0be:	bd80      	pop	{r7, pc}
 800d0c0:	0800dfc4 	.word	0x0800dfc4

0800d0c4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b082      	sub	sp, #8
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
 800d0cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d0ce:	687a      	ldr	r2, [r7, #4]
 800d0d0:	4b09      	ldr	r3, [pc, #36]	@ (800d0f8 <CDC_Receive_FS+0x34>)
 800d0d2:	0011      	movs	r1, r2
 800d0d4:	0018      	movs	r0, r3
 800d0d6:	f7fe fcbe 	bl	800ba56 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d0da:	4b07      	ldr	r3, [pc, #28]	@ (800d0f8 <CDC_Receive_FS+0x34>)
 800d0dc:	0018      	movs	r0, r3
 800d0de:	f7fe fd05 	bl	800baec <USBD_CDC_ReceivePacket>

  UsbReceivedData(Buf, Len);
 800d0e2:	683a      	ldr	r2, [r7, #0]
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	0011      	movs	r1, r2
 800d0e8:	0018      	movs	r0, r3
 800d0ea:	f7ff ff47 	bl	800cf7c <UsbReceivedData>
  return (USBD_OK);
 800d0ee:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d0f0:	0018      	movs	r0, r3
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	b002      	add	sp, #8
 800d0f6:	bd80      	pop	{r7, pc}
 800d0f8:	20000944 	.word	0x20000944

0800d0fc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d0fc:	b5b0      	push	{r4, r5, r7, lr}
 800d0fe:	b084      	sub	sp, #16
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
 800d104:	000a      	movs	r2, r1
 800d106:	1cbb      	adds	r3, r7, #2
 800d108:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800d10a:	230f      	movs	r3, #15
 800d10c:	18fb      	adds	r3, r7, r3
 800d10e:	2200      	movs	r2, #0
 800d110:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d112:	4a11      	ldr	r2, [pc, #68]	@ (800d158 <CDC_Transmit_FS+0x5c>)
 800d114:	23ae      	movs	r3, #174	@ 0xae
 800d116:	009b      	lsls	r3, r3, #2
 800d118:	58d3      	ldr	r3, [r2, r3]
 800d11a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0) {
 800d11c:	68ba      	ldr	r2, [r7, #8]
 800d11e:	2385      	movs	r3, #133	@ 0x85
 800d120:	009b      	lsls	r3, r3, #2
 800d122:	58d3      	ldr	r3, [r2, r3]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d001      	beq.n	800d12c <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 800d128:	2301      	movs	r3, #1
 800d12a:	e010      	b.n	800d14e <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d12c:	1cbb      	adds	r3, r7, #2
 800d12e:	881a      	ldrh	r2, [r3, #0]
 800d130:	6879      	ldr	r1, [r7, #4]
 800d132:	4b09      	ldr	r3, [pc, #36]	@ (800d158 <CDC_Transmit_FS+0x5c>)
 800d134:	0018      	movs	r0, r3
 800d136:	f7fe fc72 	bl	800ba1e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d13a:	250f      	movs	r5, #15
 800d13c:	197c      	adds	r4, r7, r5
 800d13e:	4b06      	ldr	r3, [pc, #24]	@ (800d158 <CDC_Transmit_FS+0x5c>)
 800d140:	0018      	movs	r0, r3
 800d142:	f7fe fc9c 	bl	800ba7e <USBD_CDC_TransmitPacket>
 800d146:	0003      	movs	r3, r0
 800d148:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 800d14a:	197b      	adds	r3, r7, r5
 800d14c:	781b      	ldrb	r3, [r3, #0]
}
 800d14e:	0018      	movs	r0, r3
 800d150:	46bd      	mov	sp, r7
 800d152:	b004      	add	sp, #16
 800d154:	bdb0      	pop	{r4, r5, r7, pc}
 800d156:	46c0      	nop			@ (mov r8, r8)
 800d158:	20000944 	.word	0x20000944

0800d15c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b082      	sub	sp, #8
 800d160:	af00      	add	r7, sp, #0
 800d162:	0002      	movs	r2, r0
 800d164:	6039      	str	r1, [r7, #0]
 800d166:	1dfb      	adds	r3, r7, #7
 800d168:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	2212      	movs	r2, #18
 800d16e:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d170:	4b02      	ldr	r3, [pc, #8]	@ (800d17c <USBD_FS_DeviceDescriptor+0x20>)
}
 800d172:	0018      	movs	r0, r3
 800d174:	46bd      	mov	sp, r7
 800d176:	b002      	add	sp, #8
 800d178:	bd80      	pop	{r7, pc}
 800d17a:	46c0      	nop			@ (mov r8, r8)
 800d17c:	20000148 	.word	0x20000148

0800d180 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b082      	sub	sp, #8
 800d184:	af00      	add	r7, sp, #0
 800d186:	0002      	movs	r2, r0
 800d188:	6039      	str	r1, [r7, #0]
 800d18a:	1dfb      	adds	r3, r7, #7
 800d18c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d18e:	683b      	ldr	r3, [r7, #0]
 800d190:	2204      	movs	r2, #4
 800d192:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d194:	4b02      	ldr	r3, [pc, #8]	@ (800d1a0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d196:	0018      	movs	r0, r3
 800d198:	46bd      	mov	sp, r7
 800d19a:	b002      	add	sp, #8
 800d19c:	bd80      	pop	{r7, pc}
 800d19e:	46c0      	nop			@ (mov r8, r8)
 800d1a0:	2000015c 	.word	0x2000015c

0800d1a4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b082      	sub	sp, #8
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	0002      	movs	r2, r0
 800d1ac:	6039      	str	r1, [r7, #0]
 800d1ae:	1dfb      	adds	r3, r7, #7
 800d1b0:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800d1b2:	1dfb      	adds	r3, r7, #7
 800d1b4:	781b      	ldrb	r3, [r3, #0]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d106      	bne.n	800d1c8 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d1ba:	683a      	ldr	r2, [r7, #0]
 800d1bc:	4908      	ldr	r1, [pc, #32]	@ (800d1e0 <USBD_FS_ProductStrDescriptor+0x3c>)
 800d1be:	4b09      	ldr	r3, [pc, #36]	@ (800d1e4 <USBD_FS_ProductStrDescriptor+0x40>)
 800d1c0:	0018      	movs	r0, r3
 800d1c2:	f7ff fdcf 	bl	800cd64 <USBD_GetString>
 800d1c6:	e005      	b.n	800d1d4 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d1c8:	683a      	ldr	r2, [r7, #0]
 800d1ca:	4905      	ldr	r1, [pc, #20]	@ (800d1e0 <USBD_FS_ProductStrDescriptor+0x3c>)
 800d1cc:	4b05      	ldr	r3, [pc, #20]	@ (800d1e4 <USBD_FS_ProductStrDescriptor+0x40>)
 800d1ce:	0018      	movs	r0, r3
 800d1d0:	f7ff fdc8 	bl	800cd64 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d1d4:	4b02      	ldr	r3, [pc, #8]	@ (800d1e0 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800d1d6:	0018      	movs	r0, r3
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	b002      	add	sp, #8
 800d1dc:	bd80      	pop	{r7, pc}
 800d1de:	46c0      	nop			@ (mov r8, r8)
 800d1e0:	20001408 	.word	0x20001408
 800d1e4:	0800de20 	.word	0x0800de20

0800d1e8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b082      	sub	sp, #8
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	0002      	movs	r2, r0
 800d1f0:	6039      	str	r1, [r7, #0]
 800d1f2:	1dfb      	adds	r3, r7, #7
 800d1f4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d1f6:	683a      	ldr	r2, [r7, #0]
 800d1f8:	4904      	ldr	r1, [pc, #16]	@ (800d20c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d1fa:	4b05      	ldr	r3, [pc, #20]	@ (800d210 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800d1fc:	0018      	movs	r0, r3
 800d1fe:	f7ff fdb1 	bl	800cd64 <USBD_GetString>
  return USBD_StrDesc;
 800d202:	4b02      	ldr	r3, [pc, #8]	@ (800d20c <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800d204:	0018      	movs	r0, r3
 800d206:	46bd      	mov	sp, r7
 800d208:	b002      	add	sp, #8
 800d20a:	bd80      	pop	{r7, pc}
 800d20c:	20001408 	.word	0x20001408
 800d210:	0800de34 	.word	0x0800de34

0800d214 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b082      	sub	sp, #8
 800d218:	af00      	add	r7, sp, #0
 800d21a:	0002      	movs	r2, r0
 800d21c:	6039      	str	r1, [r7, #0]
 800d21e:	1dfb      	adds	r3, r7, #7
 800d220:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d222:	683b      	ldr	r3, [r7, #0]
 800d224:	221a      	movs	r2, #26
 800d226:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d228:	f000 f84c 	bl	800d2c4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d22c:	4b02      	ldr	r3, [pc, #8]	@ (800d238 <USBD_FS_SerialStrDescriptor+0x24>)
}
 800d22e:	0018      	movs	r0, r3
 800d230:	46bd      	mov	sp, r7
 800d232:	b002      	add	sp, #8
 800d234:	bd80      	pop	{r7, pc}
 800d236:	46c0      	nop			@ (mov r8, r8)
 800d238:	20000160 	.word	0x20000160

0800d23c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b082      	sub	sp, #8
 800d240:	af00      	add	r7, sp, #0
 800d242:	0002      	movs	r2, r0
 800d244:	6039      	str	r1, [r7, #0]
 800d246:	1dfb      	adds	r3, r7, #7
 800d248:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800d24a:	1dfb      	adds	r3, r7, #7
 800d24c:	781b      	ldrb	r3, [r3, #0]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d106      	bne.n	800d260 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d252:	683a      	ldr	r2, [r7, #0]
 800d254:	4908      	ldr	r1, [pc, #32]	@ (800d278 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800d256:	4b09      	ldr	r3, [pc, #36]	@ (800d27c <USBD_FS_ConfigStrDescriptor+0x40>)
 800d258:	0018      	movs	r0, r3
 800d25a:	f7ff fd83 	bl	800cd64 <USBD_GetString>
 800d25e:	e005      	b.n	800d26c <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d260:	683a      	ldr	r2, [r7, #0]
 800d262:	4905      	ldr	r1, [pc, #20]	@ (800d278 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800d264:	4b05      	ldr	r3, [pc, #20]	@ (800d27c <USBD_FS_ConfigStrDescriptor+0x40>)
 800d266:	0018      	movs	r0, r3
 800d268:	f7ff fd7c 	bl	800cd64 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d26c:	4b02      	ldr	r3, [pc, #8]	@ (800d278 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800d26e:	0018      	movs	r0, r3
 800d270:	46bd      	mov	sp, r7
 800d272:	b002      	add	sp, #8
 800d274:	bd80      	pop	{r7, pc}
 800d276:	46c0      	nop			@ (mov r8, r8)
 800d278:	20001408 	.word	0x20001408
 800d27c:	0800de44 	.word	0x0800de44

0800d280 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b082      	sub	sp, #8
 800d284:	af00      	add	r7, sp, #0
 800d286:	0002      	movs	r2, r0
 800d288:	6039      	str	r1, [r7, #0]
 800d28a:	1dfb      	adds	r3, r7, #7
 800d28c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800d28e:	1dfb      	adds	r3, r7, #7
 800d290:	781b      	ldrb	r3, [r3, #0]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d106      	bne.n	800d2a4 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d296:	683a      	ldr	r2, [r7, #0]
 800d298:	4908      	ldr	r1, [pc, #32]	@ (800d2bc <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800d29a:	4b09      	ldr	r3, [pc, #36]	@ (800d2c0 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800d29c:	0018      	movs	r0, r3
 800d29e:	f7ff fd61 	bl	800cd64 <USBD_GetString>
 800d2a2:	e005      	b.n	800d2b0 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d2a4:	683a      	ldr	r2, [r7, #0]
 800d2a6:	4905      	ldr	r1, [pc, #20]	@ (800d2bc <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800d2a8:	4b05      	ldr	r3, [pc, #20]	@ (800d2c0 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800d2aa:	0018      	movs	r0, r3
 800d2ac:	f7ff fd5a 	bl	800cd64 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d2b0:	4b02      	ldr	r3, [pc, #8]	@ (800d2bc <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800d2b2:	0018      	movs	r0, r3
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	b002      	add	sp, #8
 800d2b8:	bd80      	pop	{r7, pc}
 800d2ba:	46c0      	nop			@ (mov r8, r8)
 800d2bc:	20001408 	.word	0x20001408
 800d2c0:	0800de50 	.word	0x0800de50

0800d2c4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b084      	sub	sp, #16
 800d2c8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 800d2ca:	68fa      	ldr	r2, [r7, #12]
 800d2cc:	68bb      	ldr	r3, [r7, #8]
 800d2ce:	18d3      	adds	r3, r2, r3
 800d2d0:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d00b      	beq.n	800d2f0 <Get_SerialNum+0x2c>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d2d8:	4907      	ldr	r1, [pc, #28]	@ (800d2f8 <Get_SerialNum+0x34>)
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	2208      	movs	r2, #8
 800d2de:	0018      	movs	r0, r3
 800d2e0:	f000 f80e 	bl	800d300 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d2e4:	4905      	ldr	r1, [pc, #20]	@ (800d2fc <Get_SerialNum+0x38>)
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	2204      	movs	r2, #4
 800d2ea:	0018      	movs	r0, r3
 800d2ec:	f000 f808 	bl	800d300 <IntToUnicode>
  }
}
 800d2f0:	46c0      	nop			@ (mov r8, r8)
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	b004      	add	sp, #16
 800d2f6:	bd80      	pop	{r7, pc}
 800d2f8:	20000162 	.word	0x20000162
 800d2fc:	20000172 	.word	0x20000172

0800d300 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b086      	sub	sp, #24
 800d304:	af00      	add	r7, sp, #0
 800d306:	60f8      	str	r0, [r7, #12]
 800d308:	60b9      	str	r1, [r7, #8]
 800d30a:	1dfb      	adds	r3, r7, #7
 800d30c:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800d30e:	2117      	movs	r1, #23
 800d310:	187b      	adds	r3, r7, r1
 800d312:	2200      	movs	r2, #0
 800d314:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800d316:	187b      	adds	r3, r7, r1
 800d318:	2200      	movs	r2, #0
 800d31a:	701a      	strb	r2, [r3, #0]
 800d31c:	e02f      	b.n	800d37e <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	0f1b      	lsrs	r3, r3, #28
 800d322:	2b09      	cmp	r3, #9
 800d324:	d80d      	bhi.n	800d342 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	0f1b      	lsrs	r3, r3, #28
 800d32a:	b2da      	uxtb	r2, r3
 800d32c:	2317      	movs	r3, #23
 800d32e:	18fb      	adds	r3, r7, r3
 800d330:	781b      	ldrb	r3, [r3, #0]
 800d332:	005b      	lsls	r3, r3, #1
 800d334:	0019      	movs	r1, r3
 800d336:	68bb      	ldr	r3, [r7, #8]
 800d338:	185b      	adds	r3, r3, r1
 800d33a:	3230      	adds	r2, #48	@ 0x30
 800d33c:	b2d2      	uxtb	r2, r2
 800d33e:	701a      	strb	r2, [r3, #0]
 800d340:	e00c      	b.n	800d35c <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	0f1b      	lsrs	r3, r3, #28
 800d346:	b2da      	uxtb	r2, r3
 800d348:	2317      	movs	r3, #23
 800d34a:	18fb      	adds	r3, r7, r3
 800d34c:	781b      	ldrb	r3, [r3, #0]
 800d34e:	005b      	lsls	r3, r3, #1
 800d350:	0019      	movs	r1, r3
 800d352:	68bb      	ldr	r3, [r7, #8]
 800d354:	185b      	adds	r3, r3, r1
 800d356:	3237      	adds	r2, #55	@ 0x37
 800d358:	b2d2      	uxtb	r2, r2
 800d35a:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	011b      	lsls	r3, r3, #4
 800d360:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d362:	2117      	movs	r1, #23
 800d364:	187b      	adds	r3, r7, r1
 800d366:	781b      	ldrb	r3, [r3, #0]
 800d368:	005b      	lsls	r3, r3, #1
 800d36a:	3301      	adds	r3, #1
 800d36c:	68ba      	ldr	r2, [r7, #8]
 800d36e:	18d3      	adds	r3, r2, r3
 800d370:	2200      	movs	r2, #0
 800d372:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d374:	187b      	adds	r3, r7, r1
 800d376:	781a      	ldrb	r2, [r3, #0]
 800d378:	187b      	adds	r3, r7, r1
 800d37a:	3201      	adds	r2, #1
 800d37c:	701a      	strb	r2, [r3, #0]
 800d37e:	2317      	movs	r3, #23
 800d380:	18fa      	adds	r2, r7, r3
 800d382:	1dfb      	adds	r3, r7, #7
 800d384:	7812      	ldrb	r2, [r2, #0]
 800d386:	781b      	ldrb	r3, [r3, #0]
 800d388:	429a      	cmp	r2, r3
 800d38a:	d3c8      	bcc.n	800d31e <IntToUnicode+0x1e>
  }
}
 800d38c:	46c0      	nop			@ (mov r8, r8)
 800d38e:	46c0      	nop			@ (mov r8, r8)
 800d390:	46bd      	mov	sp, r7
 800d392:	b006      	add	sp, #24
 800d394:	bd80      	pop	{r7, pc}
	...

0800d398 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b084      	sub	sp, #16
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	4a0e      	ldr	r2, [pc, #56]	@ (800d3e0 <HAL_PCD_MspInit+0x48>)
 800d3a6:	4293      	cmp	r3, r2
 800d3a8:	d115      	bne.n	800d3d6 <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d3aa:	4b0e      	ldr	r3, [pc, #56]	@ (800d3e4 <HAL_PCD_MspInit+0x4c>)
 800d3ac:	69da      	ldr	r2, [r3, #28]
 800d3ae:	4b0d      	ldr	r3, [pc, #52]	@ (800d3e4 <HAL_PCD_MspInit+0x4c>)
 800d3b0:	2180      	movs	r1, #128	@ 0x80
 800d3b2:	0409      	lsls	r1, r1, #16
 800d3b4:	430a      	orrs	r2, r1
 800d3b6:	61da      	str	r2, [r3, #28]
 800d3b8:	4b0a      	ldr	r3, [pc, #40]	@ (800d3e4 <HAL_PCD_MspInit+0x4c>)
 800d3ba:	69da      	ldr	r2, [r3, #28]
 800d3bc:	2380      	movs	r3, #128	@ 0x80
 800d3be:	041b      	lsls	r3, r3, #16
 800d3c0:	4013      	ands	r3, r2
 800d3c2:	60fb      	str	r3, [r7, #12]
 800d3c4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	2100      	movs	r1, #0
 800d3ca:	201f      	movs	r0, #31
 800d3cc:	f7f6 fe6c 	bl	80040a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800d3d0:	201f      	movs	r0, #31
 800d3d2:	f7f6 fe7e 	bl	80040d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d3d6:	46c0      	nop			@ (mov r8, r8)
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	b004      	add	sp, #16
 800d3dc:	bd80      	pop	{r7, pc}
 800d3de:	46c0      	nop			@ (mov r8, r8)
 800d3e0:	40005c00 	.word	0x40005c00
 800d3e4:	40021000 	.word	0x40021000

0800d3e8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b082      	sub	sp, #8
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d3f0:	687a      	ldr	r2, [r7, #4]
 800d3f2:	23bc      	movs	r3, #188	@ 0xbc
 800d3f4:	009b      	lsls	r3, r3, #2
 800d3f6:	58d2      	ldr	r2, [r2, r3]
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	21ac      	movs	r1, #172	@ 0xac
 800d3fc:	0089      	lsls	r1, r1, #2
 800d3fe:	468c      	mov	ip, r1
 800d400:	4463      	add	r3, ip
 800d402:	0019      	movs	r1, r3
 800d404:	0010      	movs	r0, r2
 800d406:	f7fe fc43 	bl	800bc90 <USBD_LL_SetupStage>
}
 800d40a:	46c0      	nop			@ (mov r8, r8)
 800d40c:	46bd      	mov	sp, r7
 800d40e:	b002      	add	sp, #8
 800d410:	bd80      	pop	{r7, pc}

0800d412 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d412:	b590      	push	{r4, r7, lr}
 800d414:	b083      	sub	sp, #12
 800d416:	af00      	add	r7, sp, #0
 800d418:	6078      	str	r0, [r7, #4]
 800d41a:	000a      	movs	r2, r1
 800d41c:	1cfb      	adds	r3, r7, #3
 800d41e:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d420:	687a      	ldr	r2, [r7, #4]
 800d422:	23bc      	movs	r3, #188	@ 0xbc
 800d424:	009b      	lsls	r3, r3, #2
 800d426:	58d4      	ldr	r4, [r2, r3]
 800d428:	1cfb      	adds	r3, r7, #3
 800d42a:	781a      	ldrb	r2, [r3, #0]
 800d42c:	6878      	ldr	r0, [r7, #4]
 800d42e:	23be      	movs	r3, #190	@ 0xbe
 800d430:	0059      	lsls	r1, r3, #1
 800d432:	0013      	movs	r3, r2
 800d434:	009b      	lsls	r3, r3, #2
 800d436:	189b      	adds	r3, r3, r2
 800d438:	00db      	lsls	r3, r3, #3
 800d43a:	18c3      	adds	r3, r0, r3
 800d43c:	185b      	adds	r3, r3, r1
 800d43e:	681a      	ldr	r2, [r3, #0]
 800d440:	1cfb      	adds	r3, r7, #3
 800d442:	781b      	ldrb	r3, [r3, #0]
 800d444:	0019      	movs	r1, r3
 800d446:	0020      	movs	r0, r4
 800d448:	f7fe fc80 	bl	800bd4c <USBD_LL_DataOutStage>
}
 800d44c:	46c0      	nop			@ (mov r8, r8)
 800d44e:	46bd      	mov	sp, r7
 800d450:	b003      	add	sp, #12
 800d452:	bd90      	pop	{r4, r7, pc}

0800d454 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b082      	sub	sp, #8
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
 800d45c:	000a      	movs	r2, r1
 800d45e:	1cfb      	adds	r3, r7, #3
 800d460:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d462:	687a      	ldr	r2, [r7, #4]
 800d464:	23bc      	movs	r3, #188	@ 0xbc
 800d466:	009b      	lsls	r3, r3, #2
 800d468:	58d0      	ldr	r0, [r2, r3]
 800d46a:	1cfb      	adds	r3, r7, #3
 800d46c:	781a      	ldrb	r2, [r3, #0]
 800d46e:	6879      	ldr	r1, [r7, #4]
 800d470:	0013      	movs	r3, r2
 800d472:	009b      	lsls	r3, r3, #2
 800d474:	189b      	adds	r3, r3, r2
 800d476:	00db      	lsls	r3, r3, #3
 800d478:	18cb      	adds	r3, r1, r3
 800d47a:	333c      	adds	r3, #60	@ 0x3c
 800d47c:	681a      	ldr	r2, [r3, #0]
 800d47e:	1cfb      	adds	r3, r7, #3
 800d480:	781b      	ldrb	r3, [r3, #0]
 800d482:	0019      	movs	r1, r3
 800d484:	f7fe fce4 	bl	800be50 <USBD_LL_DataInStage>
}
 800d488:	46c0      	nop			@ (mov r8, r8)
 800d48a:	46bd      	mov	sp, r7
 800d48c:	b002      	add	sp, #8
 800d48e:	bd80      	pop	{r7, pc}

0800d490 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b082      	sub	sp, #8
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d498:	687a      	ldr	r2, [r7, #4]
 800d49a:	23bc      	movs	r3, #188	@ 0xbc
 800d49c:	009b      	lsls	r3, r3, #2
 800d49e:	58d3      	ldr	r3, [r2, r3]
 800d4a0:	0018      	movs	r0, r3
 800d4a2:	f7fe fe1b 	bl	800c0dc <USBD_LL_SOF>
}
 800d4a6:	46c0      	nop			@ (mov r8, r8)
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	b002      	add	sp, #8
 800d4ac:	bd80      	pop	{r7, pc}

0800d4ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4ae:	b580      	push	{r7, lr}
 800d4b0:	b084      	sub	sp, #16
 800d4b2:	af00      	add	r7, sp, #0
 800d4b4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d4b6:	230f      	movs	r3, #15
 800d4b8:	18fb      	adds	r3, r7, r3
 800d4ba:	2201      	movs	r2, #1
 800d4bc:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	689b      	ldr	r3, [r3, #8]
 800d4c2:	2b02      	cmp	r3, #2
 800d4c4:	d001      	beq.n	800d4ca <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800d4c6:	f7f5 ffbf 	bl	8003448 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d4ca:	687a      	ldr	r2, [r7, #4]
 800d4cc:	23bc      	movs	r3, #188	@ 0xbc
 800d4ce:	009b      	lsls	r3, r3, #2
 800d4d0:	58d2      	ldr	r2, [r2, r3]
 800d4d2:	230f      	movs	r3, #15
 800d4d4:	18fb      	adds	r3, r7, r3
 800d4d6:	781b      	ldrb	r3, [r3, #0]
 800d4d8:	0019      	movs	r1, r3
 800d4da:	0010      	movs	r0, r2
 800d4dc:	f7fe fdbd 	bl	800c05a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d4e0:	687a      	ldr	r2, [r7, #4]
 800d4e2:	23bc      	movs	r3, #188	@ 0xbc
 800d4e4:	009b      	lsls	r3, r3, #2
 800d4e6:	58d3      	ldr	r3, [r2, r3]
 800d4e8:	0018      	movs	r0, r3
 800d4ea:	f7fe fd6e 	bl	800bfca <USBD_LL_Reset>
}
 800d4ee:	46c0      	nop			@ (mov r8, r8)
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	b004      	add	sp, #16
 800d4f4:	bd80      	pop	{r7, pc}
	...

0800d4f8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b082      	sub	sp, #8
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d500:	687a      	ldr	r2, [r7, #4]
 800d502:	23bc      	movs	r3, #188	@ 0xbc
 800d504:	009b      	lsls	r3, r3, #2
 800d506:	58d3      	ldr	r3, [r2, r3]
 800d508:	0018      	movs	r0, r3
 800d50a:	f7fe fdb7 	bl	800c07c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	699b      	ldr	r3, [r3, #24]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d005      	beq.n	800d522 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d516:	4b05      	ldr	r3, [pc, #20]	@ (800d52c <HAL_PCD_SuspendCallback+0x34>)
 800d518:	691a      	ldr	r2, [r3, #16]
 800d51a:	4b04      	ldr	r3, [pc, #16]	@ (800d52c <HAL_PCD_SuspendCallback+0x34>)
 800d51c:	2106      	movs	r1, #6
 800d51e:	430a      	orrs	r2, r1
 800d520:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800d522:	46c0      	nop			@ (mov r8, r8)
 800d524:	46bd      	mov	sp, r7
 800d526:	b002      	add	sp, #8
 800d528:	bd80      	pop	{r7, pc}
 800d52a:	46c0      	nop			@ (mov r8, r8)
 800d52c:	e000ed00 	.word	0xe000ed00

0800d530 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b082      	sub	sp, #8
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	699b      	ldr	r3, [r3, #24]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d007      	beq.n	800d550 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d540:	4b09      	ldr	r3, [pc, #36]	@ (800d568 <HAL_PCD_ResumeCallback+0x38>)
 800d542:	691a      	ldr	r2, [r3, #16]
 800d544:	4b08      	ldr	r3, [pc, #32]	@ (800d568 <HAL_PCD_ResumeCallback+0x38>)
 800d546:	2106      	movs	r1, #6
 800d548:	438a      	bics	r2, r1
 800d54a:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800d54c:	f000 fa44 	bl	800d9d8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d550:	687a      	ldr	r2, [r7, #4]
 800d552:	23bc      	movs	r3, #188	@ 0xbc
 800d554:	009b      	lsls	r3, r3, #2
 800d556:	58d3      	ldr	r3, [r2, r3]
 800d558:	0018      	movs	r0, r3
 800d55a:	f7fe fda7 	bl	800c0ac <USBD_LL_Resume>
}
 800d55e:	46c0      	nop			@ (mov r8, r8)
 800d560:	46bd      	mov	sp, r7
 800d562:	b002      	add	sp, #8
 800d564:	bd80      	pop	{r7, pc}
 800d566:	46c0      	nop			@ (mov r8, r8)
 800d568:	e000ed00 	.word	0xe000ed00

0800d56c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b082      	sub	sp, #8
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800d574:	4a2d      	ldr	r2, [pc, #180]	@ (800d62c <USBD_LL_Init+0xc0>)
 800d576:	23bc      	movs	r3, #188	@ 0xbc
 800d578:	009b      	lsls	r3, r3, #2
 800d57a:	6879      	ldr	r1, [r7, #4]
 800d57c:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800d57e:	687a      	ldr	r2, [r7, #4]
 800d580:	23b0      	movs	r3, #176	@ 0xb0
 800d582:	009b      	lsls	r3, r3, #2
 800d584:	4929      	ldr	r1, [pc, #164]	@ (800d62c <USBD_LL_Init+0xc0>)
 800d586:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800d588:	4b28      	ldr	r3, [pc, #160]	@ (800d62c <USBD_LL_Init+0xc0>)
 800d58a:	4a29      	ldr	r2, [pc, #164]	@ (800d630 <USBD_LL_Init+0xc4>)
 800d58c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d58e:	4b27      	ldr	r3, [pc, #156]	@ (800d62c <USBD_LL_Init+0xc0>)
 800d590:	2208      	movs	r2, #8
 800d592:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d594:	4b25      	ldr	r3, [pc, #148]	@ (800d62c <USBD_LL_Init+0xc0>)
 800d596:	2202      	movs	r2, #2
 800d598:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d59a:	4b24      	ldr	r3, [pc, #144]	@ (800d62c <USBD_LL_Init+0xc0>)
 800d59c:	2202      	movs	r2, #2
 800d59e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d5a0:	4b22      	ldr	r3, [pc, #136]	@ (800d62c <USBD_LL_Init+0xc0>)
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d5a6:	4b21      	ldr	r3, [pc, #132]	@ (800d62c <USBD_LL_Init+0xc0>)
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d5ac:	4b1f      	ldr	r3, [pc, #124]	@ (800d62c <USBD_LL_Init+0xc0>)
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d5b2:	4b1e      	ldr	r3, [pc, #120]	@ (800d62c <USBD_LL_Init+0xc0>)
 800d5b4:	0018      	movs	r0, r3
 800d5b6:	f7f7 f809 	bl	80045cc <HAL_PCD_Init>
 800d5ba:	1e03      	subs	r3, r0, #0
 800d5bc:	d001      	beq.n	800d5c2 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800d5be:	f7f5 ff43 	bl	8003448 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d5c2:	687a      	ldr	r2, [r7, #4]
 800d5c4:	23b0      	movs	r3, #176	@ 0xb0
 800d5c6:	009b      	lsls	r3, r3, #2
 800d5c8:	58d0      	ldr	r0, [r2, r3]
 800d5ca:	2318      	movs	r3, #24
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	2100      	movs	r1, #0
 800d5d0:	f7f8 fdca 	bl	8006168 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d5d4:	687a      	ldr	r2, [r7, #4]
 800d5d6:	23b0      	movs	r3, #176	@ 0xb0
 800d5d8:	009b      	lsls	r3, r3, #2
 800d5da:	58d0      	ldr	r0, [r2, r3]
 800d5dc:	2358      	movs	r3, #88	@ 0x58
 800d5de:	2200      	movs	r2, #0
 800d5e0:	2180      	movs	r1, #128	@ 0x80
 800d5e2:	f7f8 fdc1 	bl	8006168 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d5e6:	687a      	ldr	r2, [r7, #4]
 800d5e8:	23b0      	movs	r3, #176	@ 0xb0
 800d5ea:	009b      	lsls	r3, r3, #2
 800d5ec:	58d0      	ldr	r0, [r2, r3]
 800d5ee:	23c0      	movs	r3, #192	@ 0xc0
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	2181      	movs	r1, #129	@ 0x81
 800d5f4:	f7f8 fdb8 	bl	8006168 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d5f8:	687a      	ldr	r2, [r7, #4]
 800d5fa:	23b0      	movs	r3, #176	@ 0xb0
 800d5fc:	009b      	lsls	r3, r3, #2
 800d5fe:	58d0      	ldr	r0, [r2, r3]
 800d600:	2388      	movs	r3, #136	@ 0x88
 800d602:	005b      	lsls	r3, r3, #1
 800d604:	2200      	movs	r2, #0
 800d606:	2101      	movs	r1, #1
 800d608:	f7f8 fdae 	bl	8006168 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d60c:	687a      	ldr	r2, [r7, #4]
 800d60e:	23b0      	movs	r3, #176	@ 0xb0
 800d610:	009b      	lsls	r3, r3, #2
 800d612:	58d0      	ldr	r0, [r2, r3]
 800d614:	2380      	movs	r3, #128	@ 0x80
 800d616:	005b      	lsls	r3, r3, #1
 800d618:	2200      	movs	r2, #0
 800d61a:	2182      	movs	r1, #130	@ 0x82
 800d61c:	f7f8 fda4 	bl	8006168 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d620:	2300      	movs	r3, #0
}
 800d622:	0018      	movs	r0, r3
 800d624:	46bd      	mov	sp, r7
 800d626:	b002      	add	sp, #8
 800d628:	bd80      	pop	{r7, pc}
 800d62a:	46c0      	nop			@ (mov r8, r8)
 800d62c:	20001608 	.word	0x20001608
 800d630:	40005c00 	.word	0x40005c00

0800d634 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d634:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d636:	b085      	sub	sp, #20
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d63c:	210f      	movs	r1, #15
 800d63e:	187b      	adds	r3, r7, r1
 800d640:	2200      	movs	r2, #0
 800d642:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d644:	260e      	movs	r6, #14
 800d646:	19bb      	adds	r3, r7, r6
 800d648:	2200      	movs	r2, #0
 800d64a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d64c:	687a      	ldr	r2, [r7, #4]
 800d64e:	23b0      	movs	r3, #176	@ 0xb0
 800d650:	009b      	lsls	r3, r3, #2
 800d652:	58d3      	ldr	r3, [r2, r3]
 800d654:	000d      	movs	r5, r1
 800d656:	187c      	adds	r4, r7, r1
 800d658:	0018      	movs	r0, r3
 800d65a:	f7f7 f8b7 	bl	80047cc <HAL_PCD_Start>
 800d65e:	0003      	movs	r3, r0
 800d660:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d662:	19bc      	adds	r4, r7, r6
 800d664:	197b      	adds	r3, r7, r5
 800d666:	781b      	ldrb	r3, [r3, #0]
 800d668:	0018      	movs	r0, r3
 800d66a:	f000 f9bc 	bl	800d9e6 <USBD_Get_USB_Status>
 800d66e:	0003      	movs	r3, r0
 800d670:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d672:	19bb      	adds	r3, r7, r6
 800d674:	781b      	ldrb	r3, [r3, #0]
}
 800d676:	0018      	movs	r0, r3
 800d678:	46bd      	mov	sp, r7
 800d67a:	b005      	add	sp, #20
 800d67c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d67e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d67e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d680:	b085      	sub	sp, #20
 800d682:	af00      	add	r7, sp, #0
 800d684:	6078      	str	r0, [r7, #4]
 800d686:	000c      	movs	r4, r1
 800d688:	0010      	movs	r0, r2
 800d68a:	0019      	movs	r1, r3
 800d68c:	1cfb      	adds	r3, r7, #3
 800d68e:	1c22      	adds	r2, r4, #0
 800d690:	701a      	strb	r2, [r3, #0]
 800d692:	1cbb      	adds	r3, r7, #2
 800d694:	1c02      	adds	r2, r0, #0
 800d696:	701a      	strb	r2, [r3, #0]
 800d698:	003b      	movs	r3, r7
 800d69a:	1c0a      	adds	r2, r1, #0
 800d69c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d69e:	260f      	movs	r6, #15
 800d6a0:	19bb      	adds	r3, r7, r6
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6a6:	250e      	movs	r5, #14
 800d6a8:	197b      	adds	r3, r7, r5
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d6ae:	687a      	ldr	r2, [r7, #4]
 800d6b0:	23b0      	movs	r3, #176	@ 0xb0
 800d6b2:	009b      	lsls	r3, r3, #2
 800d6b4:	58d0      	ldr	r0, [r2, r3]
 800d6b6:	19bc      	adds	r4, r7, r6
 800d6b8:	1cbb      	adds	r3, r7, #2
 800d6ba:	781d      	ldrb	r5, [r3, #0]
 800d6bc:	003b      	movs	r3, r7
 800d6be:	881a      	ldrh	r2, [r3, #0]
 800d6c0:	1cfb      	adds	r3, r7, #3
 800d6c2:	7819      	ldrb	r1, [r3, #0]
 800d6c4:	002b      	movs	r3, r5
 800d6c6:	f7f7 fa16 	bl	8004af6 <HAL_PCD_EP_Open>
 800d6ca:	0003      	movs	r3, r0
 800d6cc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d6ce:	250e      	movs	r5, #14
 800d6d0:	197c      	adds	r4, r7, r5
 800d6d2:	19bb      	adds	r3, r7, r6
 800d6d4:	781b      	ldrb	r3, [r3, #0]
 800d6d6:	0018      	movs	r0, r3
 800d6d8:	f000 f985 	bl	800d9e6 <USBD_Get_USB_Status>
 800d6dc:	0003      	movs	r3, r0
 800d6de:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d6e0:	197b      	adds	r3, r7, r5
 800d6e2:	781b      	ldrb	r3, [r3, #0]
}
 800d6e4:	0018      	movs	r0, r3
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	b005      	add	sp, #20
 800d6ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d6ec <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d6ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6ee:	b085      	sub	sp, #20
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
 800d6f4:	000a      	movs	r2, r1
 800d6f6:	1cfb      	adds	r3, r7, #3
 800d6f8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6fa:	210f      	movs	r1, #15
 800d6fc:	187b      	adds	r3, r7, r1
 800d6fe:	2200      	movs	r2, #0
 800d700:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d702:	260e      	movs	r6, #14
 800d704:	19bb      	adds	r3, r7, r6
 800d706:	2200      	movs	r2, #0
 800d708:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d70a:	687a      	ldr	r2, [r7, #4]
 800d70c:	23b0      	movs	r3, #176	@ 0xb0
 800d70e:	009b      	lsls	r3, r3, #2
 800d710:	58d2      	ldr	r2, [r2, r3]
 800d712:	000d      	movs	r5, r1
 800d714:	187c      	adds	r4, r7, r1
 800d716:	1cfb      	adds	r3, r7, #3
 800d718:	781b      	ldrb	r3, [r3, #0]
 800d71a:	0019      	movs	r1, r3
 800d71c:	0010      	movs	r0, r2
 800d71e:	f7f7 fa59 	bl	8004bd4 <HAL_PCD_EP_Close>
 800d722:	0003      	movs	r3, r0
 800d724:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d726:	19bc      	adds	r4, r7, r6
 800d728:	197b      	adds	r3, r7, r5
 800d72a:	781b      	ldrb	r3, [r3, #0]
 800d72c:	0018      	movs	r0, r3
 800d72e:	f000 f95a 	bl	800d9e6 <USBD_Get_USB_Status>
 800d732:	0003      	movs	r3, r0
 800d734:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d736:	19bb      	adds	r3, r7, r6
 800d738:	781b      	ldrb	r3, [r3, #0]
}
 800d73a:	0018      	movs	r0, r3
 800d73c:	46bd      	mov	sp, r7
 800d73e:	b005      	add	sp, #20
 800d740:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d742 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d742:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d744:	b085      	sub	sp, #20
 800d746:	af00      	add	r7, sp, #0
 800d748:	6078      	str	r0, [r7, #4]
 800d74a:	000a      	movs	r2, r1
 800d74c:	1cfb      	adds	r3, r7, #3
 800d74e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d750:	210f      	movs	r1, #15
 800d752:	187b      	adds	r3, r7, r1
 800d754:	2200      	movs	r2, #0
 800d756:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d758:	260e      	movs	r6, #14
 800d75a:	19bb      	adds	r3, r7, r6
 800d75c:	2200      	movs	r2, #0
 800d75e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d760:	687a      	ldr	r2, [r7, #4]
 800d762:	23b0      	movs	r3, #176	@ 0xb0
 800d764:	009b      	lsls	r3, r3, #2
 800d766:	58d2      	ldr	r2, [r2, r3]
 800d768:	000d      	movs	r5, r1
 800d76a:	187c      	adds	r4, r7, r1
 800d76c:	1cfb      	adds	r3, r7, #3
 800d76e:	781b      	ldrb	r3, [r3, #0]
 800d770:	0019      	movs	r1, r3
 800d772:	0010      	movs	r0, r2
 800d774:	f7f7 fb0b 	bl	8004d8e <HAL_PCD_EP_SetStall>
 800d778:	0003      	movs	r3, r0
 800d77a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d77c:	19bc      	adds	r4, r7, r6
 800d77e:	197b      	adds	r3, r7, r5
 800d780:	781b      	ldrb	r3, [r3, #0]
 800d782:	0018      	movs	r0, r3
 800d784:	f000 f92f 	bl	800d9e6 <USBD_Get_USB_Status>
 800d788:	0003      	movs	r3, r0
 800d78a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d78c:	19bb      	adds	r3, r7, r6
 800d78e:	781b      	ldrb	r3, [r3, #0]
}
 800d790:	0018      	movs	r0, r3
 800d792:	46bd      	mov	sp, r7
 800d794:	b005      	add	sp, #20
 800d796:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d798 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d79a:	b085      	sub	sp, #20
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
 800d7a0:	000a      	movs	r2, r1
 800d7a2:	1cfb      	adds	r3, r7, #3
 800d7a4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7a6:	210f      	movs	r1, #15
 800d7a8:	187b      	adds	r3, r7, r1
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d7ae:	260e      	movs	r6, #14
 800d7b0:	19bb      	adds	r3, r7, r6
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d7b6:	687a      	ldr	r2, [r7, #4]
 800d7b8:	23b0      	movs	r3, #176	@ 0xb0
 800d7ba:	009b      	lsls	r3, r3, #2
 800d7bc:	58d2      	ldr	r2, [r2, r3]
 800d7be:	000d      	movs	r5, r1
 800d7c0:	187c      	adds	r4, r7, r1
 800d7c2:	1cfb      	adds	r3, r7, #3
 800d7c4:	781b      	ldrb	r3, [r3, #0]
 800d7c6:	0019      	movs	r1, r3
 800d7c8:	0010      	movs	r0, r2
 800d7ca:	f7f7 fb3c 	bl	8004e46 <HAL_PCD_EP_ClrStall>
 800d7ce:	0003      	movs	r3, r0
 800d7d0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d7d2:	19bc      	adds	r4, r7, r6
 800d7d4:	197b      	adds	r3, r7, r5
 800d7d6:	781b      	ldrb	r3, [r3, #0]
 800d7d8:	0018      	movs	r0, r3
 800d7da:	f000 f904 	bl	800d9e6 <USBD_Get_USB_Status>
 800d7de:	0003      	movs	r3, r0
 800d7e0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d7e2:	19bb      	adds	r3, r7, r6
 800d7e4:	781b      	ldrb	r3, [r3, #0]
}
 800d7e6:	0018      	movs	r0, r3
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	b005      	add	sp, #20
 800d7ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d7ee <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d7ee:	b580      	push	{r7, lr}
 800d7f0:	b084      	sub	sp, #16
 800d7f2:	af00      	add	r7, sp, #0
 800d7f4:	6078      	str	r0, [r7, #4]
 800d7f6:	000a      	movs	r2, r1
 800d7f8:	1cfb      	adds	r3, r7, #3
 800d7fa:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d7fc:	687a      	ldr	r2, [r7, #4]
 800d7fe:	23b0      	movs	r3, #176	@ 0xb0
 800d800:	009b      	lsls	r3, r3, #2
 800d802:	58d3      	ldr	r3, [r2, r3]
 800d804:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d806:	1cfb      	adds	r3, r7, #3
 800d808:	781b      	ldrb	r3, [r3, #0]
 800d80a:	b25b      	sxtb	r3, r3
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	da0d      	bge.n	800d82c <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d810:	1cfb      	adds	r3, r7, #3
 800d812:	781b      	ldrb	r3, [r3, #0]
 800d814:	227f      	movs	r2, #127	@ 0x7f
 800d816:	4013      	ands	r3, r2
 800d818:	68f9      	ldr	r1, [r7, #12]
 800d81a:	1c5a      	adds	r2, r3, #1
 800d81c:	0013      	movs	r3, r2
 800d81e:	009b      	lsls	r3, r3, #2
 800d820:	189b      	adds	r3, r3, r2
 800d822:	00db      	lsls	r3, r3, #3
 800d824:	18cb      	adds	r3, r1, r3
 800d826:	3302      	adds	r3, #2
 800d828:	781b      	ldrb	r3, [r3, #0]
 800d82a:	e00d      	b.n	800d848 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d82c:	1cfb      	adds	r3, r7, #3
 800d82e:	781b      	ldrb	r3, [r3, #0]
 800d830:	227f      	movs	r2, #127	@ 0x7f
 800d832:	401a      	ands	r2, r3
 800d834:	68f8      	ldr	r0, [r7, #12]
 800d836:	23b5      	movs	r3, #181	@ 0xb5
 800d838:	0059      	lsls	r1, r3, #1
 800d83a:	0013      	movs	r3, r2
 800d83c:	009b      	lsls	r3, r3, #2
 800d83e:	189b      	adds	r3, r3, r2
 800d840:	00db      	lsls	r3, r3, #3
 800d842:	18c3      	adds	r3, r0, r3
 800d844:	185b      	adds	r3, r3, r1
 800d846:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d848:	0018      	movs	r0, r3
 800d84a:	46bd      	mov	sp, r7
 800d84c:	b004      	add	sp, #16
 800d84e:	bd80      	pop	{r7, pc}

0800d850 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d850:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d852:	b085      	sub	sp, #20
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
 800d858:	000a      	movs	r2, r1
 800d85a:	1cfb      	adds	r3, r7, #3
 800d85c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d85e:	210f      	movs	r1, #15
 800d860:	187b      	adds	r3, r7, r1
 800d862:	2200      	movs	r2, #0
 800d864:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d866:	260e      	movs	r6, #14
 800d868:	19bb      	adds	r3, r7, r6
 800d86a:	2200      	movs	r2, #0
 800d86c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d86e:	687a      	ldr	r2, [r7, #4]
 800d870:	23b0      	movs	r3, #176	@ 0xb0
 800d872:	009b      	lsls	r3, r3, #2
 800d874:	58d2      	ldr	r2, [r2, r3]
 800d876:	000d      	movs	r5, r1
 800d878:	187c      	adds	r4, r7, r1
 800d87a:	1cfb      	adds	r3, r7, #3
 800d87c:	781b      	ldrb	r3, [r3, #0]
 800d87e:	0019      	movs	r1, r3
 800d880:	0010      	movs	r0, r2
 800d882:	f7f7 f90d 	bl	8004aa0 <HAL_PCD_SetAddress>
 800d886:	0003      	movs	r3, r0
 800d888:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d88a:	19bc      	adds	r4, r7, r6
 800d88c:	197b      	adds	r3, r7, r5
 800d88e:	781b      	ldrb	r3, [r3, #0]
 800d890:	0018      	movs	r0, r3
 800d892:	f000 f8a8 	bl	800d9e6 <USBD_Get_USB_Status>
 800d896:	0003      	movs	r3, r0
 800d898:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d89a:	19bb      	adds	r3, r7, r6
 800d89c:	781b      	ldrb	r3, [r3, #0]
}
 800d89e:	0018      	movs	r0, r3
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	b005      	add	sp, #20
 800d8a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d8a6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d8a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8a8:	b087      	sub	sp, #28
 800d8aa:	af00      	add	r7, sp, #0
 800d8ac:	60f8      	str	r0, [r7, #12]
 800d8ae:	0008      	movs	r0, r1
 800d8b0:	607a      	str	r2, [r7, #4]
 800d8b2:	0019      	movs	r1, r3
 800d8b4:	230b      	movs	r3, #11
 800d8b6:	18fb      	adds	r3, r7, r3
 800d8b8:	1c02      	adds	r2, r0, #0
 800d8ba:	701a      	strb	r2, [r3, #0]
 800d8bc:	2408      	movs	r4, #8
 800d8be:	193b      	adds	r3, r7, r4
 800d8c0:	1c0a      	adds	r2, r1, #0
 800d8c2:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8c4:	2117      	movs	r1, #23
 800d8c6:	187b      	adds	r3, r7, r1
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8cc:	2516      	movs	r5, #22
 800d8ce:	197b      	adds	r3, r7, r5
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d8d4:	68fa      	ldr	r2, [r7, #12]
 800d8d6:	23b0      	movs	r3, #176	@ 0xb0
 800d8d8:	009b      	lsls	r3, r3, #2
 800d8da:	58d0      	ldr	r0, [r2, r3]
 800d8dc:	193b      	adds	r3, r7, r4
 800d8de:	881d      	ldrh	r5, [r3, #0]
 800d8e0:	000e      	movs	r6, r1
 800d8e2:	187c      	adds	r4, r7, r1
 800d8e4:	687a      	ldr	r2, [r7, #4]
 800d8e6:	230b      	movs	r3, #11
 800d8e8:	18fb      	adds	r3, r7, r3
 800d8ea:	7819      	ldrb	r1, [r3, #0]
 800d8ec:	002b      	movs	r3, r5
 800d8ee:	f7f7 fa12 	bl	8004d16 <HAL_PCD_EP_Transmit>
 800d8f2:	0003      	movs	r3, r0
 800d8f4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8f6:	2516      	movs	r5, #22
 800d8f8:	197c      	adds	r4, r7, r5
 800d8fa:	19bb      	adds	r3, r7, r6
 800d8fc:	781b      	ldrb	r3, [r3, #0]
 800d8fe:	0018      	movs	r0, r3
 800d900:	f000 f871 	bl	800d9e6 <USBD_Get_USB_Status>
 800d904:	0003      	movs	r3, r0
 800d906:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d908:	197b      	adds	r3, r7, r5
 800d90a:	781b      	ldrb	r3, [r3, #0]
}
 800d90c:	0018      	movs	r0, r3
 800d90e:	46bd      	mov	sp, r7
 800d910:	b007      	add	sp, #28
 800d912:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d914 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d914:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d916:	b087      	sub	sp, #28
 800d918:	af00      	add	r7, sp, #0
 800d91a:	60f8      	str	r0, [r7, #12]
 800d91c:	0008      	movs	r0, r1
 800d91e:	607a      	str	r2, [r7, #4]
 800d920:	0019      	movs	r1, r3
 800d922:	230b      	movs	r3, #11
 800d924:	18fb      	adds	r3, r7, r3
 800d926:	1c02      	adds	r2, r0, #0
 800d928:	701a      	strb	r2, [r3, #0]
 800d92a:	2408      	movs	r4, #8
 800d92c:	193b      	adds	r3, r7, r4
 800d92e:	1c0a      	adds	r2, r1, #0
 800d930:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d932:	2117      	movs	r1, #23
 800d934:	187b      	adds	r3, r7, r1
 800d936:	2200      	movs	r2, #0
 800d938:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d93a:	2516      	movs	r5, #22
 800d93c:	197b      	adds	r3, r7, r5
 800d93e:	2200      	movs	r2, #0
 800d940:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d942:	68fa      	ldr	r2, [r7, #12]
 800d944:	23b0      	movs	r3, #176	@ 0xb0
 800d946:	009b      	lsls	r3, r3, #2
 800d948:	58d0      	ldr	r0, [r2, r3]
 800d94a:	193b      	adds	r3, r7, r4
 800d94c:	881d      	ldrh	r5, [r3, #0]
 800d94e:	000e      	movs	r6, r1
 800d950:	187c      	adds	r4, r7, r1
 800d952:	687a      	ldr	r2, [r7, #4]
 800d954:	230b      	movs	r3, #11
 800d956:	18fb      	adds	r3, r7, r3
 800d958:	7819      	ldrb	r1, [r3, #0]
 800d95a:	002b      	movs	r3, r5
 800d95c:	f7f7 f98b 	bl	8004c76 <HAL_PCD_EP_Receive>
 800d960:	0003      	movs	r3, r0
 800d962:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d964:	2516      	movs	r5, #22
 800d966:	197c      	adds	r4, r7, r5
 800d968:	19bb      	adds	r3, r7, r6
 800d96a:	781b      	ldrb	r3, [r3, #0]
 800d96c:	0018      	movs	r0, r3
 800d96e:	f000 f83a 	bl	800d9e6 <USBD_Get_USB_Status>
 800d972:	0003      	movs	r3, r0
 800d974:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d976:	197b      	adds	r3, r7, r5
 800d978:	781b      	ldrb	r3, [r3, #0]
}
 800d97a:	0018      	movs	r0, r3
 800d97c:	46bd      	mov	sp, r7
 800d97e:	b007      	add	sp, #28
 800d980:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d982 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d982:	b580      	push	{r7, lr}
 800d984:	b082      	sub	sp, #8
 800d986:	af00      	add	r7, sp, #0
 800d988:	6078      	str	r0, [r7, #4]
 800d98a:	000a      	movs	r2, r1
 800d98c:	1cfb      	adds	r3, r7, #3
 800d98e:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d990:	687a      	ldr	r2, [r7, #4]
 800d992:	23b0      	movs	r3, #176	@ 0xb0
 800d994:	009b      	lsls	r3, r3, #2
 800d996:	58d2      	ldr	r2, [r2, r3]
 800d998:	1cfb      	adds	r3, r7, #3
 800d99a:	781b      	ldrb	r3, [r3, #0]
 800d99c:	0019      	movs	r1, r3
 800d99e:	0010      	movs	r0, r2
 800d9a0:	f7f7 f9a0 	bl	8004ce4 <HAL_PCD_EP_GetRxCount>
 800d9a4:	0003      	movs	r3, r0
}
 800d9a6:	0018      	movs	r0, r3
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	b002      	add	sp, #8
 800d9ac:	bd80      	pop	{r7, pc}
	...

0800d9b0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b082      	sub	sp, #8
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d9b8:	4b02      	ldr	r3, [pc, #8]	@ (800d9c4 <USBD_static_malloc+0x14>)
}
 800d9ba:	0018      	movs	r0, r3
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	b002      	add	sp, #8
 800d9c0:	bd80      	pop	{r7, pc}
 800d9c2:	46c0      	nop			@ (mov r8, r8)
 800d9c4:	200018fc 	.word	0x200018fc

0800d9c8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b082      	sub	sp, #8
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]

}
 800d9d0:	46c0      	nop			@ (mov r8, r8)
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	b002      	add	sp, #8
 800d9d6:	bd80      	pop	{r7, pc}

0800d9d8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d9dc:	f7f5 f98e 	bl	8002cfc <SystemClock_Config>
}
 800d9e0:	46c0      	nop			@ (mov r8, r8)
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	bd80      	pop	{r7, pc}

0800d9e6 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d9e6:	b580      	push	{r7, lr}
 800d9e8:	b084      	sub	sp, #16
 800d9ea:	af00      	add	r7, sp, #0
 800d9ec:	0002      	movs	r2, r0
 800d9ee:	1dfb      	adds	r3, r7, #7
 800d9f0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9f2:	230f      	movs	r3, #15
 800d9f4:	18fb      	adds	r3, r7, r3
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800d9fa:	1dfb      	adds	r3, r7, #7
 800d9fc:	781b      	ldrb	r3, [r3, #0]
 800d9fe:	2b03      	cmp	r3, #3
 800da00:	d017      	beq.n	800da32 <USBD_Get_USB_Status+0x4c>
 800da02:	dc1b      	bgt.n	800da3c <USBD_Get_USB_Status+0x56>
 800da04:	2b02      	cmp	r3, #2
 800da06:	d00f      	beq.n	800da28 <USBD_Get_USB_Status+0x42>
 800da08:	dc18      	bgt.n	800da3c <USBD_Get_USB_Status+0x56>
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d002      	beq.n	800da14 <USBD_Get_USB_Status+0x2e>
 800da0e:	2b01      	cmp	r3, #1
 800da10:	d005      	beq.n	800da1e <USBD_Get_USB_Status+0x38>
 800da12:	e013      	b.n	800da3c <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800da14:	230f      	movs	r3, #15
 800da16:	18fb      	adds	r3, r7, r3
 800da18:	2200      	movs	r2, #0
 800da1a:	701a      	strb	r2, [r3, #0]
    break;
 800da1c:	e013      	b.n	800da46 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800da1e:	230f      	movs	r3, #15
 800da20:	18fb      	adds	r3, r7, r3
 800da22:	2202      	movs	r2, #2
 800da24:	701a      	strb	r2, [r3, #0]
    break;
 800da26:	e00e      	b.n	800da46 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800da28:	230f      	movs	r3, #15
 800da2a:	18fb      	adds	r3, r7, r3
 800da2c:	2201      	movs	r2, #1
 800da2e:	701a      	strb	r2, [r3, #0]
    break;
 800da30:	e009      	b.n	800da46 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800da32:	230f      	movs	r3, #15
 800da34:	18fb      	adds	r3, r7, r3
 800da36:	2202      	movs	r2, #2
 800da38:	701a      	strb	r2, [r3, #0]
    break;
 800da3a:	e004      	b.n	800da46 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800da3c:	230f      	movs	r3, #15
 800da3e:	18fb      	adds	r3, r7, r3
 800da40:	2202      	movs	r2, #2
 800da42:	701a      	strb	r2, [r3, #0]
    break;
 800da44:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 800da46:	230f      	movs	r3, #15
 800da48:	18fb      	adds	r3, r7, r3
 800da4a:	781b      	ldrb	r3, [r3, #0]
}
 800da4c:	0018      	movs	r0, r3
 800da4e:	46bd      	mov	sp, r7
 800da50:	b004      	add	sp, #16
 800da52:	bd80      	pop	{r7, pc}

0800da54 <_ZdlPvj>:
 800da54:	b510      	push	{r4, lr}
 800da56:	f000 f809 	bl	800da6c <_ZdlPv>
 800da5a:	bd10      	pop	{r4, pc}

0800da5c <_ZdaPv>:
 800da5c:	b510      	push	{r4, lr}
 800da5e:	f000 f805 	bl	800da6c <_ZdlPv>
 800da62:	bd10      	pop	{r4, pc}

0800da64 <_Znaj>:
 800da64:	b510      	push	{r4, lr}
 800da66:	f000 f805 	bl	800da74 <_Znwj>
 800da6a:	bd10      	pop	{r4, pc}

0800da6c <_ZdlPv>:
 800da6c:	b510      	push	{r4, lr}
 800da6e:	f000 f82b 	bl	800dac8 <free>
 800da72:	bd10      	pop	{r4, pc}

0800da74 <_Znwj>:
 800da74:	b510      	push	{r4, lr}
 800da76:	1e04      	subs	r4, r0, #0
 800da78:	d100      	bne.n	800da7c <_Znwj+0x8>
 800da7a:	3401      	adds	r4, #1
 800da7c:	0020      	movs	r0, r4
 800da7e:	f000 f819 	bl	800dab4 <malloc>
 800da82:	2800      	cmp	r0, #0
 800da84:	d000      	beq.n	800da88 <_Znwj+0x14>
 800da86:	bd10      	pop	{r4, pc}
 800da88:	f000 f806 	bl	800da98 <_ZSt15get_new_handlerv>
 800da8c:	2800      	cmp	r0, #0
 800da8e:	d101      	bne.n	800da94 <_Znwj+0x20>
 800da90:	f000 f808 	bl	800daa4 <abort>
 800da94:	4780      	blx	r0
 800da96:	e7f1      	b.n	800da7c <_Znwj+0x8>

0800da98 <_ZSt15get_new_handlerv>:
 800da98:	4b01      	ldr	r3, [pc, #4]	@ (800daa0 <_ZSt15get_new_handlerv+0x8>)
 800da9a:	6818      	ldr	r0, [r3, #0]
 800da9c:	4770      	bx	lr
 800da9e:	46c0      	nop			@ (mov r8, r8)
 800daa0:	20001b1c 	.word	0x20001b1c

0800daa4 <abort>:
 800daa4:	2006      	movs	r0, #6
 800daa6:	b510      	push	{r4, lr}
 800daa8:	f000 f8fc 	bl	800dca4 <raise>
 800daac:	2001      	movs	r0, #1
 800daae:	f7f5 ff1d 	bl	80038ec <_exit>
	...

0800dab4 <malloc>:
 800dab4:	b510      	push	{r4, lr}
 800dab6:	4b03      	ldr	r3, [pc, #12]	@ (800dac4 <malloc+0x10>)
 800dab8:	0001      	movs	r1, r0
 800daba:	6818      	ldr	r0, [r3, #0]
 800dabc:	f000 f830 	bl	800db20 <_malloc_r>
 800dac0:	bd10      	pop	{r4, pc}
 800dac2:	46c0      	nop			@ (mov r8, r8)
 800dac4:	2000017c 	.word	0x2000017c

0800dac8 <free>:
 800dac8:	b510      	push	{r4, lr}
 800daca:	4b03      	ldr	r3, [pc, #12]	@ (800dad8 <free+0x10>)
 800dacc:	0001      	movs	r1, r0
 800dace:	6818      	ldr	r0, [r3, #0]
 800dad0:	f000 f950 	bl	800dd74 <_free_r>
 800dad4:	bd10      	pop	{r4, pc}
 800dad6:	46c0      	nop			@ (mov r8, r8)
 800dad8:	2000017c 	.word	0x2000017c

0800dadc <sbrk_aligned>:
 800dadc:	b570      	push	{r4, r5, r6, lr}
 800dade:	4e0f      	ldr	r6, [pc, #60]	@ (800db1c <sbrk_aligned+0x40>)
 800dae0:	000d      	movs	r5, r1
 800dae2:	6831      	ldr	r1, [r6, #0]
 800dae4:	0004      	movs	r4, r0
 800dae6:	2900      	cmp	r1, #0
 800dae8:	d102      	bne.n	800daf0 <sbrk_aligned+0x14>
 800daea:	f000 f8fb 	bl	800dce4 <_sbrk_r>
 800daee:	6030      	str	r0, [r6, #0]
 800daf0:	0029      	movs	r1, r5
 800daf2:	0020      	movs	r0, r4
 800daf4:	f000 f8f6 	bl	800dce4 <_sbrk_r>
 800daf8:	1c43      	adds	r3, r0, #1
 800dafa:	d103      	bne.n	800db04 <sbrk_aligned+0x28>
 800dafc:	2501      	movs	r5, #1
 800dafe:	426d      	negs	r5, r5
 800db00:	0028      	movs	r0, r5
 800db02:	bd70      	pop	{r4, r5, r6, pc}
 800db04:	2303      	movs	r3, #3
 800db06:	1cc5      	adds	r5, r0, #3
 800db08:	439d      	bics	r5, r3
 800db0a:	42a8      	cmp	r0, r5
 800db0c:	d0f8      	beq.n	800db00 <sbrk_aligned+0x24>
 800db0e:	1a29      	subs	r1, r5, r0
 800db10:	0020      	movs	r0, r4
 800db12:	f000 f8e7 	bl	800dce4 <_sbrk_r>
 800db16:	3001      	adds	r0, #1
 800db18:	d1f2      	bne.n	800db00 <sbrk_aligned+0x24>
 800db1a:	e7ef      	b.n	800dafc <sbrk_aligned+0x20>
 800db1c:	20001b20 	.word	0x20001b20

0800db20 <_malloc_r>:
 800db20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800db22:	2203      	movs	r2, #3
 800db24:	1ccb      	adds	r3, r1, #3
 800db26:	4393      	bics	r3, r2
 800db28:	3308      	adds	r3, #8
 800db2a:	0005      	movs	r5, r0
 800db2c:	001f      	movs	r7, r3
 800db2e:	2b0c      	cmp	r3, #12
 800db30:	d234      	bcs.n	800db9c <_malloc_r+0x7c>
 800db32:	270c      	movs	r7, #12
 800db34:	42b9      	cmp	r1, r7
 800db36:	d833      	bhi.n	800dba0 <_malloc_r+0x80>
 800db38:	0028      	movs	r0, r5
 800db3a:	f000 f871 	bl	800dc20 <__malloc_lock>
 800db3e:	4e37      	ldr	r6, [pc, #220]	@ (800dc1c <_malloc_r+0xfc>)
 800db40:	6833      	ldr	r3, [r6, #0]
 800db42:	001c      	movs	r4, r3
 800db44:	2c00      	cmp	r4, #0
 800db46:	d12f      	bne.n	800dba8 <_malloc_r+0x88>
 800db48:	0039      	movs	r1, r7
 800db4a:	0028      	movs	r0, r5
 800db4c:	f7ff ffc6 	bl	800dadc <sbrk_aligned>
 800db50:	0004      	movs	r4, r0
 800db52:	1c43      	adds	r3, r0, #1
 800db54:	d15f      	bne.n	800dc16 <_malloc_r+0xf6>
 800db56:	6834      	ldr	r4, [r6, #0]
 800db58:	9400      	str	r4, [sp, #0]
 800db5a:	9b00      	ldr	r3, [sp, #0]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d14a      	bne.n	800dbf6 <_malloc_r+0xd6>
 800db60:	2c00      	cmp	r4, #0
 800db62:	d052      	beq.n	800dc0a <_malloc_r+0xea>
 800db64:	6823      	ldr	r3, [r4, #0]
 800db66:	0028      	movs	r0, r5
 800db68:	18e3      	adds	r3, r4, r3
 800db6a:	9900      	ldr	r1, [sp, #0]
 800db6c:	9301      	str	r3, [sp, #4]
 800db6e:	f000 f8b9 	bl	800dce4 <_sbrk_r>
 800db72:	9b01      	ldr	r3, [sp, #4]
 800db74:	4283      	cmp	r3, r0
 800db76:	d148      	bne.n	800dc0a <_malloc_r+0xea>
 800db78:	6823      	ldr	r3, [r4, #0]
 800db7a:	0028      	movs	r0, r5
 800db7c:	1aff      	subs	r7, r7, r3
 800db7e:	0039      	movs	r1, r7
 800db80:	f7ff ffac 	bl	800dadc <sbrk_aligned>
 800db84:	3001      	adds	r0, #1
 800db86:	d040      	beq.n	800dc0a <_malloc_r+0xea>
 800db88:	6823      	ldr	r3, [r4, #0]
 800db8a:	19db      	adds	r3, r3, r7
 800db8c:	6023      	str	r3, [r4, #0]
 800db8e:	6833      	ldr	r3, [r6, #0]
 800db90:	685a      	ldr	r2, [r3, #4]
 800db92:	2a00      	cmp	r2, #0
 800db94:	d133      	bne.n	800dbfe <_malloc_r+0xde>
 800db96:	9b00      	ldr	r3, [sp, #0]
 800db98:	6033      	str	r3, [r6, #0]
 800db9a:	e019      	b.n	800dbd0 <_malloc_r+0xb0>
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	dac9      	bge.n	800db34 <_malloc_r+0x14>
 800dba0:	230c      	movs	r3, #12
 800dba2:	602b      	str	r3, [r5, #0]
 800dba4:	2000      	movs	r0, #0
 800dba6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800dba8:	6821      	ldr	r1, [r4, #0]
 800dbaa:	1bc9      	subs	r1, r1, r7
 800dbac:	d420      	bmi.n	800dbf0 <_malloc_r+0xd0>
 800dbae:	290b      	cmp	r1, #11
 800dbb0:	d90a      	bls.n	800dbc8 <_malloc_r+0xa8>
 800dbb2:	19e2      	adds	r2, r4, r7
 800dbb4:	6027      	str	r7, [r4, #0]
 800dbb6:	42a3      	cmp	r3, r4
 800dbb8:	d104      	bne.n	800dbc4 <_malloc_r+0xa4>
 800dbba:	6032      	str	r2, [r6, #0]
 800dbbc:	6863      	ldr	r3, [r4, #4]
 800dbbe:	6011      	str	r1, [r2, #0]
 800dbc0:	6053      	str	r3, [r2, #4]
 800dbc2:	e005      	b.n	800dbd0 <_malloc_r+0xb0>
 800dbc4:	605a      	str	r2, [r3, #4]
 800dbc6:	e7f9      	b.n	800dbbc <_malloc_r+0x9c>
 800dbc8:	6862      	ldr	r2, [r4, #4]
 800dbca:	42a3      	cmp	r3, r4
 800dbcc:	d10e      	bne.n	800dbec <_malloc_r+0xcc>
 800dbce:	6032      	str	r2, [r6, #0]
 800dbd0:	0028      	movs	r0, r5
 800dbd2:	f000 f82d 	bl	800dc30 <__malloc_unlock>
 800dbd6:	0020      	movs	r0, r4
 800dbd8:	2207      	movs	r2, #7
 800dbda:	300b      	adds	r0, #11
 800dbdc:	1d23      	adds	r3, r4, #4
 800dbde:	4390      	bics	r0, r2
 800dbe0:	1ac2      	subs	r2, r0, r3
 800dbe2:	4298      	cmp	r0, r3
 800dbe4:	d0df      	beq.n	800dba6 <_malloc_r+0x86>
 800dbe6:	1a1b      	subs	r3, r3, r0
 800dbe8:	50a3      	str	r3, [r4, r2]
 800dbea:	e7dc      	b.n	800dba6 <_malloc_r+0x86>
 800dbec:	605a      	str	r2, [r3, #4]
 800dbee:	e7ef      	b.n	800dbd0 <_malloc_r+0xb0>
 800dbf0:	0023      	movs	r3, r4
 800dbf2:	6864      	ldr	r4, [r4, #4]
 800dbf4:	e7a6      	b.n	800db44 <_malloc_r+0x24>
 800dbf6:	9c00      	ldr	r4, [sp, #0]
 800dbf8:	6863      	ldr	r3, [r4, #4]
 800dbfa:	9300      	str	r3, [sp, #0]
 800dbfc:	e7ad      	b.n	800db5a <_malloc_r+0x3a>
 800dbfe:	001a      	movs	r2, r3
 800dc00:	685b      	ldr	r3, [r3, #4]
 800dc02:	42a3      	cmp	r3, r4
 800dc04:	d1fb      	bne.n	800dbfe <_malloc_r+0xde>
 800dc06:	2300      	movs	r3, #0
 800dc08:	e7da      	b.n	800dbc0 <_malloc_r+0xa0>
 800dc0a:	230c      	movs	r3, #12
 800dc0c:	0028      	movs	r0, r5
 800dc0e:	602b      	str	r3, [r5, #0]
 800dc10:	f000 f80e 	bl	800dc30 <__malloc_unlock>
 800dc14:	e7c6      	b.n	800dba4 <_malloc_r+0x84>
 800dc16:	6007      	str	r7, [r0, #0]
 800dc18:	e7da      	b.n	800dbd0 <_malloc_r+0xb0>
 800dc1a:	46c0      	nop			@ (mov r8, r8)
 800dc1c:	20001b24 	.word	0x20001b24

0800dc20 <__malloc_lock>:
 800dc20:	b510      	push	{r4, lr}
 800dc22:	4802      	ldr	r0, [pc, #8]	@ (800dc2c <__malloc_lock+0xc>)
 800dc24:	f000 f89a 	bl	800dd5c <__retarget_lock_acquire_recursive>
 800dc28:	bd10      	pop	{r4, pc}
 800dc2a:	46c0      	nop			@ (mov r8, r8)
 800dc2c:	20001c64 	.word	0x20001c64

0800dc30 <__malloc_unlock>:
 800dc30:	b510      	push	{r4, lr}
 800dc32:	4802      	ldr	r0, [pc, #8]	@ (800dc3c <__malloc_unlock+0xc>)
 800dc34:	f000 f893 	bl	800dd5e <__retarget_lock_release_recursive>
 800dc38:	bd10      	pop	{r4, pc}
 800dc3a:	46c0      	nop			@ (mov r8, r8)
 800dc3c:	20001c64 	.word	0x20001c64

0800dc40 <memset>:
 800dc40:	0003      	movs	r3, r0
 800dc42:	1882      	adds	r2, r0, r2
 800dc44:	4293      	cmp	r3, r2
 800dc46:	d100      	bne.n	800dc4a <memset+0xa>
 800dc48:	4770      	bx	lr
 800dc4a:	7019      	strb	r1, [r3, #0]
 800dc4c:	3301      	adds	r3, #1
 800dc4e:	e7f9      	b.n	800dc44 <memset+0x4>

0800dc50 <_raise_r>:
 800dc50:	b570      	push	{r4, r5, r6, lr}
 800dc52:	0004      	movs	r4, r0
 800dc54:	000d      	movs	r5, r1
 800dc56:	291f      	cmp	r1, #31
 800dc58:	d904      	bls.n	800dc64 <_raise_r+0x14>
 800dc5a:	2316      	movs	r3, #22
 800dc5c:	6003      	str	r3, [r0, #0]
 800dc5e:	2001      	movs	r0, #1
 800dc60:	4240      	negs	r0, r0
 800dc62:	bd70      	pop	{r4, r5, r6, pc}
 800dc64:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d004      	beq.n	800dc74 <_raise_r+0x24>
 800dc6a:	008a      	lsls	r2, r1, #2
 800dc6c:	189b      	adds	r3, r3, r2
 800dc6e:	681a      	ldr	r2, [r3, #0]
 800dc70:	2a00      	cmp	r2, #0
 800dc72:	d108      	bne.n	800dc86 <_raise_r+0x36>
 800dc74:	0020      	movs	r0, r4
 800dc76:	f000 f831 	bl	800dcdc <_getpid_r>
 800dc7a:	002a      	movs	r2, r5
 800dc7c:	0001      	movs	r1, r0
 800dc7e:	0020      	movs	r0, r4
 800dc80:	f000 f81a 	bl	800dcb8 <_kill_r>
 800dc84:	e7ed      	b.n	800dc62 <_raise_r+0x12>
 800dc86:	2a01      	cmp	r2, #1
 800dc88:	d009      	beq.n	800dc9e <_raise_r+0x4e>
 800dc8a:	1c51      	adds	r1, r2, #1
 800dc8c:	d103      	bne.n	800dc96 <_raise_r+0x46>
 800dc8e:	2316      	movs	r3, #22
 800dc90:	6003      	str	r3, [r0, #0]
 800dc92:	2001      	movs	r0, #1
 800dc94:	e7e5      	b.n	800dc62 <_raise_r+0x12>
 800dc96:	2100      	movs	r1, #0
 800dc98:	0028      	movs	r0, r5
 800dc9a:	6019      	str	r1, [r3, #0]
 800dc9c:	4790      	blx	r2
 800dc9e:	2000      	movs	r0, #0
 800dca0:	e7df      	b.n	800dc62 <_raise_r+0x12>
	...

0800dca4 <raise>:
 800dca4:	b510      	push	{r4, lr}
 800dca6:	4b03      	ldr	r3, [pc, #12]	@ (800dcb4 <raise+0x10>)
 800dca8:	0001      	movs	r1, r0
 800dcaa:	6818      	ldr	r0, [r3, #0]
 800dcac:	f7ff ffd0 	bl	800dc50 <_raise_r>
 800dcb0:	bd10      	pop	{r4, pc}
 800dcb2:	46c0      	nop			@ (mov r8, r8)
 800dcb4:	2000017c 	.word	0x2000017c

0800dcb8 <_kill_r>:
 800dcb8:	2300      	movs	r3, #0
 800dcba:	b570      	push	{r4, r5, r6, lr}
 800dcbc:	4d06      	ldr	r5, [pc, #24]	@ (800dcd8 <_kill_r+0x20>)
 800dcbe:	0004      	movs	r4, r0
 800dcc0:	0008      	movs	r0, r1
 800dcc2:	0011      	movs	r1, r2
 800dcc4:	602b      	str	r3, [r5, #0]
 800dcc6:	f7f5 fe01 	bl	80038cc <_kill>
 800dcca:	1c43      	adds	r3, r0, #1
 800dccc:	d103      	bne.n	800dcd6 <_kill_r+0x1e>
 800dcce:	682b      	ldr	r3, [r5, #0]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d000      	beq.n	800dcd6 <_kill_r+0x1e>
 800dcd4:	6023      	str	r3, [r4, #0]
 800dcd6:	bd70      	pop	{r4, r5, r6, pc}
 800dcd8:	20001c60 	.word	0x20001c60

0800dcdc <_getpid_r>:
 800dcdc:	b510      	push	{r4, lr}
 800dcde:	f7f5 fdef 	bl	80038c0 <_getpid>
 800dce2:	bd10      	pop	{r4, pc}

0800dce4 <_sbrk_r>:
 800dce4:	2300      	movs	r3, #0
 800dce6:	b570      	push	{r4, r5, r6, lr}
 800dce8:	4d06      	ldr	r5, [pc, #24]	@ (800dd04 <_sbrk_r+0x20>)
 800dcea:	0004      	movs	r4, r0
 800dcec:	0008      	movs	r0, r1
 800dcee:	602b      	str	r3, [r5, #0]
 800dcf0:	f7f5 fe0a 	bl	8003908 <_sbrk>
 800dcf4:	1c43      	adds	r3, r0, #1
 800dcf6:	d103      	bne.n	800dd00 <_sbrk_r+0x1c>
 800dcf8:	682b      	ldr	r3, [r5, #0]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d000      	beq.n	800dd00 <_sbrk_r+0x1c>
 800dcfe:	6023      	str	r3, [r4, #0]
 800dd00:	bd70      	pop	{r4, r5, r6, pc}
 800dd02:	46c0      	nop			@ (mov r8, r8)
 800dd04:	20001c60 	.word	0x20001c60

0800dd08 <__errno>:
 800dd08:	4b01      	ldr	r3, [pc, #4]	@ (800dd10 <__errno+0x8>)
 800dd0a:	6818      	ldr	r0, [r3, #0]
 800dd0c:	4770      	bx	lr
 800dd0e:	46c0      	nop			@ (mov r8, r8)
 800dd10:	2000017c 	.word	0x2000017c

0800dd14 <__libc_init_array>:
 800dd14:	b570      	push	{r4, r5, r6, lr}
 800dd16:	2600      	movs	r6, #0
 800dd18:	4c0c      	ldr	r4, [pc, #48]	@ (800dd4c <__libc_init_array+0x38>)
 800dd1a:	4d0d      	ldr	r5, [pc, #52]	@ (800dd50 <__libc_init_array+0x3c>)
 800dd1c:	1b64      	subs	r4, r4, r5
 800dd1e:	10a4      	asrs	r4, r4, #2
 800dd20:	42a6      	cmp	r6, r4
 800dd22:	d109      	bne.n	800dd38 <__libc_init_array+0x24>
 800dd24:	2600      	movs	r6, #0
 800dd26:	f000 f86f 	bl	800de08 <_init>
 800dd2a:	4c0a      	ldr	r4, [pc, #40]	@ (800dd54 <__libc_init_array+0x40>)
 800dd2c:	4d0a      	ldr	r5, [pc, #40]	@ (800dd58 <__libc_init_array+0x44>)
 800dd2e:	1b64      	subs	r4, r4, r5
 800dd30:	10a4      	asrs	r4, r4, #2
 800dd32:	42a6      	cmp	r6, r4
 800dd34:	d105      	bne.n	800dd42 <__libc_init_array+0x2e>
 800dd36:	bd70      	pop	{r4, r5, r6, pc}
 800dd38:	00b3      	lsls	r3, r6, #2
 800dd3a:	58eb      	ldr	r3, [r5, r3]
 800dd3c:	4798      	blx	r3
 800dd3e:	3601      	adds	r6, #1
 800dd40:	e7ee      	b.n	800dd20 <__libc_init_array+0xc>
 800dd42:	00b3      	lsls	r3, r6, #2
 800dd44:	58eb      	ldr	r3, [r5, r3]
 800dd46:	4798      	blx	r3
 800dd48:	3601      	adds	r6, #1
 800dd4a:	e7f2      	b.n	800dd32 <__libc_init_array+0x1e>
 800dd4c:	0800e054 	.word	0x0800e054
 800dd50:	0800e054 	.word	0x0800e054
 800dd54:	0800e05c 	.word	0x0800e05c
 800dd58:	0800e054 	.word	0x0800e054

0800dd5c <__retarget_lock_acquire_recursive>:
 800dd5c:	4770      	bx	lr

0800dd5e <__retarget_lock_release_recursive>:
 800dd5e:	4770      	bx	lr

0800dd60 <memcpy>:
 800dd60:	2300      	movs	r3, #0
 800dd62:	b510      	push	{r4, lr}
 800dd64:	429a      	cmp	r2, r3
 800dd66:	d100      	bne.n	800dd6a <memcpy+0xa>
 800dd68:	bd10      	pop	{r4, pc}
 800dd6a:	5ccc      	ldrb	r4, [r1, r3]
 800dd6c:	54c4      	strb	r4, [r0, r3]
 800dd6e:	3301      	adds	r3, #1
 800dd70:	e7f8      	b.n	800dd64 <memcpy+0x4>
	...

0800dd74 <_free_r>:
 800dd74:	b570      	push	{r4, r5, r6, lr}
 800dd76:	0005      	movs	r5, r0
 800dd78:	1e0c      	subs	r4, r1, #0
 800dd7a:	d010      	beq.n	800dd9e <_free_r+0x2a>
 800dd7c:	3c04      	subs	r4, #4
 800dd7e:	6823      	ldr	r3, [r4, #0]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	da00      	bge.n	800dd86 <_free_r+0x12>
 800dd84:	18e4      	adds	r4, r4, r3
 800dd86:	0028      	movs	r0, r5
 800dd88:	f7ff ff4a 	bl	800dc20 <__malloc_lock>
 800dd8c:	4a1d      	ldr	r2, [pc, #116]	@ (800de04 <_free_r+0x90>)
 800dd8e:	6813      	ldr	r3, [r2, #0]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d105      	bne.n	800dda0 <_free_r+0x2c>
 800dd94:	6063      	str	r3, [r4, #4]
 800dd96:	6014      	str	r4, [r2, #0]
 800dd98:	0028      	movs	r0, r5
 800dd9a:	f7ff ff49 	bl	800dc30 <__malloc_unlock>
 800dd9e:	bd70      	pop	{r4, r5, r6, pc}
 800dda0:	42a3      	cmp	r3, r4
 800dda2:	d908      	bls.n	800ddb6 <_free_r+0x42>
 800dda4:	6820      	ldr	r0, [r4, #0]
 800dda6:	1821      	adds	r1, r4, r0
 800dda8:	428b      	cmp	r3, r1
 800ddaa:	d1f3      	bne.n	800dd94 <_free_r+0x20>
 800ddac:	6819      	ldr	r1, [r3, #0]
 800ddae:	685b      	ldr	r3, [r3, #4]
 800ddb0:	1809      	adds	r1, r1, r0
 800ddb2:	6021      	str	r1, [r4, #0]
 800ddb4:	e7ee      	b.n	800dd94 <_free_r+0x20>
 800ddb6:	001a      	movs	r2, r3
 800ddb8:	685b      	ldr	r3, [r3, #4]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d001      	beq.n	800ddc2 <_free_r+0x4e>
 800ddbe:	42a3      	cmp	r3, r4
 800ddc0:	d9f9      	bls.n	800ddb6 <_free_r+0x42>
 800ddc2:	6811      	ldr	r1, [r2, #0]
 800ddc4:	1850      	adds	r0, r2, r1
 800ddc6:	42a0      	cmp	r0, r4
 800ddc8:	d10b      	bne.n	800dde2 <_free_r+0x6e>
 800ddca:	6820      	ldr	r0, [r4, #0]
 800ddcc:	1809      	adds	r1, r1, r0
 800ddce:	1850      	adds	r0, r2, r1
 800ddd0:	6011      	str	r1, [r2, #0]
 800ddd2:	4283      	cmp	r3, r0
 800ddd4:	d1e0      	bne.n	800dd98 <_free_r+0x24>
 800ddd6:	6818      	ldr	r0, [r3, #0]
 800ddd8:	685b      	ldr	r3, [r3, #4]
 800ddda:	1841      	adds	r1, r0, r1
 800dddc:	6011      	str	r1, [r2, #0]
 800ddde:	6053      	str	r3, [r2, #4]
 800dde0:	e7da      	b.n	800dd98 <_free_r+0x24>
 800dde2:	42a0      	cmp	r0, r4
 800dde4:	d902      	bls.n	800ddec <_free_r+0x78>
 800dde6:	230c      	movs	r3, #12
 800dde8:	602b      	str	r3, [r5, #0]
 800ddea:	e7d5      	b.n	800dd98 <_free_r+0x24>
 800ddec:	6820      	ldr	r0, [r4, #0]
 800ddee:	1821      	adds	r1, r4, r0
 800ddf0:	428b      	cmp	r3, r1
 800ddf2:	d103      	bne.n	800ddfc <_free_r+0x88>
 800ddf4:	6819      	ldr	r1, [r3, #0]
 800ddf6:	685b      	ldr	r3, [r3, #4]
 800ddf8:	1809      	adds	r1, r1, r0
 800ddfa:	6021      	str	r1, [r4, #0]
 800ddfc:	6063      	str	r3, [r4, #4]
 800ddfe:	6054      	str	r4, [r2, #4]
 800de00:	e7ca      	b.n	800dd98 <_free_r+0x24>
 800de02:	46c0      	nop			@ (mov r8, r8)
 800de04:	20001b24 	.word	0x20001b24

0800de08 <_init>:
 800de08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de0a:	46c0      	nop			@ (mov r8, r8)
 800de0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de0e:	bc08      	pop	{r3}
 800de10:	469e      	mov	lr, r3
 800de12:	4770      	bx	lr

0800de14 <_fini>:
 800de14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de16:	46c0      	nop			@ (mov r8, r8)
 800de18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de1a:	bc08      	pop	{r3}
 800de1c:	469e      	mov	lr, r3
 800de1e:	4770      	bx	lr
